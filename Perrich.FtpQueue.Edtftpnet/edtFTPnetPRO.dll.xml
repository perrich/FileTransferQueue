<?xml version="1.0"?>
<doc>
    <assembly>
        <name>edtFTPnetPRO</name>
    </assembly>
    <members>
        <member name="T:EnterpriseDT.Google.GData.Client.AtomLogo">
            <summary>atomLogo object representation. 
                    The "atom:logo" element's content is an IRI reference [RFC3987] which '+
                    identifies an image which provides visual identification for a feed.
                    The image SHOULD have an aspect ratio of 2 (horizontal) to 1 (vertical).
                    implemented currently by reusing atomBaseLink. 
            </summary> 
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.AtomBaseLink">
            <summary>AtomBaselink is an intermediate object that adds the URI property
            used as the parent class for a lot of other objects (like atomlink, atomicon, etc)
            </summary> 
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.AtomBase">
            <summary>AtomBase object representation.
            </summary> 
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.IExtensionContainer">
            <summary>interface for commone extension container functionallity
            used for AtomBase and SimpleContainer
            </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.IExtensionContainer.FindExtension(System.String,System.String)">
            <summary>
            Finds a specific ExtensionElement based on its local name
            and its namespace. If namespace is NULL, the first one where
            the localname matches is found. If there are extensionelements that do 
            not implment ExtensionElementFactory, they will not be taken into account
            </summary>
            <param name="localName">the xml local name of the element to find</param>
            <param name="ns">the namespace of the elementToPersist</param>
            <returns>Object</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.IExtensionContainer.ReplaceExtension(System.String,System.String,EnterpriseDT.Google.GData.Client.IExtensionElementFactory)">
            <summary>
            all extension elements that match a namespace/localname
            given will be removed and the new one will be inserted
            </summary> 
            <param name="localName">the local name to find</param>
            <param name="ns">the namespace to match, if null, ns is ignored</param>
            <param name="obj">the new element to put in</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.IExtensionContainer.FindExtensions(System.String,System.String)">
            <summary>
            Finds all ExtensionElement based on its local name
            and its namespace. If namespace is NULL, allwhere
            the localname matches is found. If there are extensionelements that do 
            not implment ExtensionElementFactory, they will not be taken into account
            Primary use of this is to find XML nodes
            </summary>
            <param name="localName">the xml local name of the element to find</param>
            <param name="ns">the namespace of the elementToPersist</param>
            <returns>none</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.IExtensionContainer.DeleteExtensions(System.String,System.String)">
            <summary>
            Deletes all Extensions from the Extension list that match
            a localName and a Namespace. 
            </summary>
            <param name="localName">the local name to find</param>
            <param name="ns">the namespace to match, if null, ns is ignored</param>
            <returns>int - the number of deleted extensions</returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.IExtensionContainer.ExtensionElements">
            <summary>the list of extensions for this container
            the elements in that list MUST implement IExtensionElementFactory 
            and IExtensionElement</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.IExtensionContainer.ExtensionFactories">
            <summary>the list of extensions for this container
            the elements in that list MUST implement IExtensionElementFactory 
            and IExtensionElement</summary> 
            <returns> </returns>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.IVersionAware">
            <summary>
            this interface indicates that an element is aware of Core and Service
            specific version changes. 
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.IVersionAware.ProtocolMajor">
            <summary>
            returns the major version of the protocol this element is using
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.IVersionAware.ProtocolMinor">
            <summary>
            returns the minor version of the protocol this element is using
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomBase.uriBase">
            <summary>holds the base Uri</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomBase.uriImpliedBase">
            <summary>implied base, get's pushed down</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomBase.atomLanguageTag">
            <summary>holds the xml:lang element</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomBase.extensionsList">
            <summary>extension element collection</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomBase.extensionFactories">
            <summary> extension element factories </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomBase.fAllowRecalc">
            <summary>a boolean indicating that recalc is allowed to happen implicitly now</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomBase.fIsDirty">
            <summary>holds a flag indicating if the thing should be send to the server</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomBase.MarkElementDirty(System.Boolean)">
            <summary>sets the element and all subelemts dirty flag</summary> 
            <param name="fFlag">indicates the property value to set</param>
            <returns> </returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomBase.IsPersistable">
            <summary>checks if the element or one subelement are persistable</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomBase.IsDirty">
            <summary>returns if the element or one subelement is dirty</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomBase.GetAbsoluteUri(System.String)">
            <summary>Read only accessor for AbsoluteUri. This is pushed down
            whenever a base changes.</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomBase.BaseUriChanged(EnterpriseDT.Google.GData.Client.AtomUri)">
            <summary>This starts the calculation, to push down the base
            URI changes.</summary> 
            <param name="uriValue">the baseuri calculated so far</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomBase.AddExtension(EnterpriseDT.Google.GData.Client.IExtensionElementFactory)">
            <summary>
            adding an extension factory for extension elements
            </summary>
            <param name="factory">The factory</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomBase.RemoveExtension(EnterpriseDT.Google.GData.Client.IExtensionElementFactory)">
            <summary>
            removing an extension factory for extension elements
            </summary>
            <param name="factory">The factory</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomBase.WalkTree(EnterpriseDT.Google.GData.Client.IBaseWalkerAction)">
            <summary>Calls the action on this object and all children.</summary> 
            <param name="action">an IBaseWalkerAction interface to call </param>
            <returns>true or false, pending outcome of the passed in action</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomBase.FindExtension(System.String,System.String)">
            <summary>
            Finds a specific ExtensionElement based on it's local name
            and it's namespace. If namespace is NULL, the first one where
            the localname matches is found. If there are extensionelements that do 
            not implment ExtensionElementFactory, they will not be taken into account
            Primary use of this is to find XML nodes
            </summary>
            <param name="localName">the xml local name of the element to find</param>
            <param name="ns">the namespace of the element to find</param>
            <returns>Object</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomBase.CreateExtension(System.String,System.String)">
            <summary>
            Creates an extension for a given name and namespace by walking the
            extension factories list and calling CreateInstance for the right one
            </summary>
            <param name="localName">the xml local name of the element to find</param>
            <param name="ns">the namespace of the element to find</param>
            <returns>Object</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomBase.FindExtensionFactory(System.String,System.String)">
            <summary>
            Finds the extension factory for a given name/namespace
            </summary>
            <param name="localName">the xml local name of the element to find</param>
            <param name="ns">the namespace of the element to find</param>
            <returns>Object</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomBase.FindExtensions(System.String,System.String)">
            <summary>
            Finds all ExtensionElement based on it's local name
            and it's namespace. If namespace is NULL, allwhere
            the localname matches is found. If there are extensionelements that do 
            not implment ExtensionElementFactory, they will not be taken into account
            Primary use of this is to find XML nodes
            </summary>
            <param name="localName">the xml local name of the element to find</param>
            <param name="ns">the namespace of the element to find</param>
            <returns>Object</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomBase.FindExtensions(System.String,System.String,EnterpriseDT.Google.GData.Client.ExtensionList)">
            <summary>
            Finds all ExtensionElement based on it's local name
            and it's namespace. If namespace is NULL, allwhere
            the localname matches is found. If there are extensionelements that do 
            not implment ExtensionElementFactory, they will not be taken into account
            Primary use of this is to find XML nodes
            </summary>
            <param name="localName">the xml local name of the element to find</param>
            <param name="ns">the namespace of the element to find</param>
            <param name="arr">the array to fill</param>
            <returns>none</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomBase.FindExtensions``1(System.String,System.String)">
            <summary>
            Finds all ExtensionElement based on it's local name
            and it's namespace. If namespace is NULL, allwhere
            the localname matches is found. If there are extensionelements that do 
            not implment ExtensionElementFactory, they will not be taken into account
            Primary use of this is to find XML nodes
            </summary>
            <param name="localName">the xml local name of the element to find</param>
            <param name="ns">the namespace of the element to findt</param>
            <returns>none</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomBase.DeleteExtensions(System.String,System.String)">
            <summary>
            Delete's all Extensions from the Extension list that match
            a localName and a Namespace. 
            </summary>
            <param name="localName">the local name to find</param>
            <param name="ns">the namespace to match, if null, ns is ignored</param>
            <returns>int - the number of deleted extensions</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomBase.ReplaceExtensions(EnterpriseDT.Google.GData.Client.ExtensionList)">
            <summary>
            all extension elements that match a namespace/localname
            given will be removed and replaced with the new ones.
            the input array can contain several different
            namespace/localname combinations
            if the passed list is NULL or empty, this will just result
            in additions
            </summary>
            <param name="newList">a list of xmlnodes or IExtensionElementFactory objects</param>
            <returns>int - the number of deleted extensions</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomBase.ReplaceExtension(System.String,System.String,EnterpriseDT.Google.GData.Client.IExtensionElementFactory)">
            <summary>
            all extension elements that match a namespace/localname
            given will be removed and the new one will be inserted
            </summary> 
            <param name="localName">the local name to find</param>
            <param name="ns">the namespace to match, if null, ns is ignored</param>
            <param name="obj">the new element to put in</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomBase.CreateAtomSubElement(System.Xml.XmlReader,EnterpriseDT.Google.GData.Client.AtomFeedParser)">
            <summary>
            this is the subclassing method for AtomBase derived 
            classes to overload what childelements should be created
            needed to create CustomLink type objects, like WebContentLink etc
            </summary>
            <param name="reader">The XmlReader that tells us what we are working with</param>
            <param name="parser">the parser is primarily used for nametable comparisons</param>
            <returns>AtomBase</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomBase.SaveToXml(System.IO.Stream)">
            <summary>Saves the object as XML.</summary> 
            <param name="stream">stream to save to</param>
            <returns>how many bytes written</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomBase.SaveToXml(System.Xml.XmlWriter)">
            <summary>saves the object as XML</summary> 
            <param name="writer">the xmlwriter to save to</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomBase.SaveXmlAttributes(System.Xml.XmlWriter)">
            <summary>protected virtual int SaveXmlAttributes(XmlWriter writer)</summary> 
            <param name="writer">the XmlWriter to save to</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomBase.SkipNode(System.Xml.XmlNode)">
            <summary>checks if this is a namespace 
            decl that we already added</summary> 
            <param name="node">XmlNode to check</param>
            <returns>true if this node should be skipped </returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomBase.WriteElementStart(System.Xml.XmlWriter,System.String)">
            <summary>protected WriteElementStart(XmlWriter writer)</summary> 
            <param name="writer"> the xmlwriter to use</param>
            <param name="elementName"> the elementToPersist to use</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomBase.AddOtherNamespaces(System.Xml.XmlWriter)">
            <summary>empty base implementation</summary> 
            <param name="writer">the xmlwriter, where we want to add default namespaces to</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomBase.WriteLocalDateTimeElement(System.Xml.XmlWriter,System.String,System.DateTime)">
            <summary>Writes out a LOCAL datetime in ISO 8601 format.
            </summary> 
            <param name="writer"> the xmlwriter to use</param>
            <param name="elementName"> the elementToPersist to use</param>
            <param name="dateTime"> the localDateTime to convert and persist</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomBase.SaveInnerXml(System.Xml.XmlWriter)">
            <summary>empty base implementation</summary> 
            <param name="writer">the xmlwriter to save to</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomBase.WriteEncodedString(System.Xml.XmlWriter,System.String)">
            <summary>helper method to encapsulate a string encoding, uses HTML encoding now</summary> 
            <param name="writer">the xml writer to write to</param> 
            <param name="content">the string to encode</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomBase.WriteEncodedString(System.Xml.XmlWriter,EnterpriseDT.Google.GData.Client.AtomUri)">
            <summary>helper method to encapsulate a string encoding, uses HTML encoding now</summary>
            <param name="writer">the xml writer to write to</param> 
            <param name="content">the string to encode</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomBase.WriteEncodedAttributeString(System.Xml.XmlWriter,System.String,EnterpriseDT.Google.GData.Client.AtomUri)">
            <summary>helper method to encapsulate encoding, uses HTML encoding now</summary> 
            <param name="writer">the xml writer to write to</param>
            <param name="attributeName">the attribute the write</param>
            <param name="content">the atomUri to encode</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomBase.WriteEncodedAttributeString(System.Xml.XmlWriter,System.String,System.String)">
            <summary>helper method to encapsulate encoding, uses HTML encoding now</summary> 
            <param name="writer">the xml writer to write to</param>
            <param name="attributeName">the attribute the write</param>
            <param name="content">the string to encode</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomBase.WriteEncodedElementString(System.Xml.XmlWriter,System.String,System.String)">
            <summary>helper method to encapsulate encoding, uses HTML encoding now</summary> 
            <param name="writer">the xml writer to write to</param>
            <param name="elementName">the attribute the write</param>
            <param name="content">the string to encode</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomBase.WriteEncodedElementString(System.Xml.XmlWriter,System.String,EnterpriseDT.Google.GData.Client.AtomUri)">
            <summary>helper method to encapsulate encoding, uses HTML encoding now</summary> 
            <param name="writer">the xml writer to write to</param>
            <param name="elementName">the attribute the write</param>
            <param name="content">the string to encode</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomBase.OnVersionInfoChanged">
            <summary>
            this potential overloaded method get's called when the version information
            of an object is changed. It handles setting the versioninformation on 
            all children and the factories. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomBase.SetVersionInfo(EnterpriseDT.Google.GData.Client.IVersionAware)">
            <summary>
            this get's called out of a notification chain. It set's 
            this objects version info and the extension lists. We do not
            use the property accessor to avoid the notification loop
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomBase.ShouldBePersisted">
            <summary>Method to check whether object should be saved.
            This doesn't check whether the object is dirty; it only
            checks whether the XML content is worth saving.
            </summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomBase.Dirty">
            <summary>The dirty property - indicates if exactly this element is dirty</summary> 
            <returns>returns true or false</returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomBase.ImpliedBase">
            <summary>property that holds the implied base URI</summary> 
            <returns> the implied base URI as an AtomUri</returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomBase.XmlName">
            <summary>Returns the XML name as string used for the element when persisting.</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomBase.Base">
            <summary>calculates or set's the base uri of an element</summary> 
            <returns>an AtomUri for the Base URI when get is called</returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomBase.Language">
            <summary>returns and sets the xml:lang value</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomBase.ExtensionFactories">
            <summary>
            read only accessor for the Extension Factories
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomBase.ExtensionElements">
            <summary>read only accessor for the ExtensionsElements Collections</summary> 
            <returns> an ExtensionList of ExtensionElements</returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomBase.ProtocolMajor">
            <summary>
            returns the major protocol version number this element 
            is working against. 
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomBase.ProtocolMinor">
            <summary>
            returns the minor protocol version number this element 
            is working against. 
            </summary>
            <returns></returns>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomBaseLink.uriString">
            <summary>holds the string rep</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomBaseLink.SaveInnerXml(System.Xml.XmlWriter)">
            <summary>saves the inner state of the element</summary> 
            <param name="writer">the xmlWriter to save into </param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomBaseLink.ShouldBePersisted">
            <summary>figures out if this object should be persisted</summary> 
            <returns> true, if it's worth saving</returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomBaseLink.Uri">
            <summary>accessor method public string Uri</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomBaseLink.AbsoluteUri">
            <summary>public Uri AbsoluteUri</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomLogo.XmlName">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SSHConnectionReceiver">
            <summary>
            SSH connection events are channelled via this class
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ssh.Routrek.SSHC.ISSHConnectionEventReceiver">
            <summary>
            Connection specific receiver
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHConnectionReceiver.log">
            <summary> Logging object</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHConnectionReceiver.#ctor">
            <summary>
            Constructor
            </summary>
            <param name="messages">store for received messages</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHConnectionReceiver.CheckPortForwardingRequest(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Not used
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHConnectionReceiver.EstablishPortforwarding(EnterpriseDT.Net.Ssh.Routrek.SSHC.ISSHChannelEventReceiver,EnterpriseDT.Net.Ssh.Routrek.SSHC.SSHChannel)">
            <summary>
            Not used
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHConnectionReceiver.Prompts">
            <summary>
            Array of prompts used to authenticate
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SSHDotComPrivateKeyFormat">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.IPrivateKeyFormat">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHDotComPrivateKeyFormat.log">
            <summary> Logging object</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHDotComPrivateKeyFormat.IsFormatted(System.Byte[])">
            <summary>
            Are the supplied raw key bytes in this key format?
            </summary>
            <param name="formattedKey">raw bytes from keyfile</param>
            <returns>true if in this format, false otherwise</returns>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.SecurityConstants">
            <summary>
            Defines the external methods of the CryptoAPI and SCHANNEL API.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.SecurityConstants.#ctor">
            <summary>
            Defeat instantiation of this class.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160">
            <summary>
            Represents the abstract class from which all implementations of the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160"/> hash algorithm inherit.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160"/>.
            </summary>
            <remarks>You cannot create an instance of an abstract class. Application code will create a new instance of a derived class.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160.Create">
            <summary>
            Creates an instance of the default implementation of the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160"/> hash algorithm.
            </summary>
            <returns>A new instance of the RIPEMD160 hash algorithm.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160.Create(System.String)">
            <summary>
            Creates an instance of the specified implementation of the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160"/> hash algorithm.
            </summary>
            <param name="hashName">The name of the specific implementation of RIPEMD160 to use.</param>
            <returns>A new instance of the specified implementation of RIPEMD160.</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.RmDirCommand">
            <summary>  Remove a directory (it must be empty).
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.2 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.ScriptCommand">
            <summary>  Description
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.3 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.When">
            <summary>
            GData schema extension describing a period of time.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.IExtensionElementFactory">
            <summary>
            Wrapper interface used to replace the ExtensionList.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.IExtensionElementFactory.CreateInstance(System.Xml.XmlNode,EnterpriseDT.Google.GData.Client.AtomFeedParser)">
            <summary>
            instantiates the correct extension element
            </summary>
            <param name="node">the xmlnode to parse</param>
            <param name="parser">the atomfeedparser to use if deep parsing of subelements is required</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.IExtensionElementFactory.Save(System.Xml.XmlWriter)">
            <summary>the only relevant method here</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.IExtensionElementFactory.XmlName">
            <summary>
            returns the XML local name that is used
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.IExtensionElementFactory.XmlNameSpace">
            <summary>
            returns the XML namespace that is processed
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.IExtensionElementFactory.XmlPrefix">
            <summary>
            returns the xml prefix used 
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.When.startTime">
            <summary>
            Event start time (required).
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.When.endTime">
            <summary>
            Event end time (optional).
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.When.valueString">
            <summary>
            String description of the event times.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.When.fAllDay">
            <summary>
            flag, indicating if an all day status
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.When.reminders">
            <summary>
            reminder object to set reminder durations
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.When.#ctor">
            <summary>
            Constructs a new instance of a When object.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.When.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Constructs a new instance of a When object with provided data.
            </summary>
            <param name="start">The beginning of the event.</param>
            <param name="end">The end of the event.</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.When.#ctor(System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Constructs a new instance of a When object with provided data.
            </summary>
            <param name="start">The beginning of the event.</param>
            <param name="end">The end of the event.</param>
            <param name="allDay">A flag to indicate an all day event.</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.When.CreateInstance(System.Xml.XmlNode,EnterpriseDT.Google.GData.Client.AtomFeedParser)">
            <summary>Parses an xml node to create a Where  object.</summary> 
            <param name="node">the node to parse node</param>
            <param name="parser">the xml parser to use if we need to dive deeper</param>
            <returns>the created Where  object</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.When.Save(System.Xml.XmlWriter)">
            <summary>
            Persistence method for the When object
            </summary>
            <param name="writer">the xmlwriter to write into</param>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.When.StartTime">
            <summary>accessor method public DateTime StartTime</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.When.EndTime">
            <summary>accessor method public DateTime EndTime</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.When.Reminders">
            <summary>reminder accessor</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.When.ValueString">
            <summary>accessor method public string ValueString</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.When.AllDay">
            <summary>accessor method to the allday event flag</summary>
            <returns>true if it's an all day event</returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.When.XmlName">
            <summary>Returns the constant representing this XML element.
            </summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.When.XmlNameSpace">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.When.XmlPrefix">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations">
            <summary>  
            Performs various recursive FTP operations on directories
            </summary>
            <author>
            Bruce Blackshaw       
            </author>
            <version>      
            $Revision: 1.32 $
            </version>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.log">
            <summary> Logging object</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.CURRENT_DIR">
            <summary>
            Name of current dir
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.PARENT_DIR">
            <summary>
            Name of parent dir
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.sleepEnabled">
            <summary>
            Is sleeping during transfers switched on?
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.countBeforeSleep">
            <summary>
            Number of transfers before sleeping
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.sleepTime">
            <summary>
            Time to sleep in seconds
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.currentCount">
            <summary>
            Current number of transfers performed
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.cancel">
            <summary>
            Flag used for cancellation.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.cancelMutex">
            <summary>
            Mutex used for protecting access to the cancel flag.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.DirDetails(System.String)">
            <summary>
            List this entire remote directory and its contents, including children.
            </summary>
            <remarks>
            Each <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> object has an array of FTPFile objects called 
            <see cref="P:EnterpriseDT.Net.Ftp.FTPFile.Children"/>.
            </remarks>
            <param name="remoteDir">name of remote directory</param>
            <returns>list of FTPFile objects that contain their children or <c>null</c> if the 
            remote directory doesn't exist</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.DirDetails(System.String,System.String)">
            <summary>
            List this files in remote directory that match the given wildcard, including children.
            </summary>
            <remarks>
            Each <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> object has an array of FTPFile objects called 
            <see cref="P:EnterpriseDT.Net.Ftp.FTPFile.Children"/>.
            </remarks>
            <param name="remoteDir">name of remote directory</param>
            <param name="wildcard">wildcard to use for filtering directory listings</param>
            <returns>list of FTPFile objects that contain their children or <c>null</c> if the 
            remote directory doesn't exist</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.LocalDirDetails(System.String,System.Boolean)">
            <summary>
            List this entire local directory and its contents, including children.
            </summary>
            <param name="localDir">name of local directory</param>
            <param name="includeSubdirectories">flag indicating whether or not to include subdirectories</param>
            <returns>list of FTPFile objects that contain their children</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.Delete(System.String)">
            <summary> 
            Delete this entire remote directory and its contents recursively
            </summary>
            <param name="remoteDir">name of remote directory</param>        
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.DeleteFilesCurrentDir(System.String)">
            <summary>
            Delete all the files in this directory (no subdirectories) that match
            the supplied wildcard.
            </summary>
            <remarks>
            No directories are deleted. Only files matching the filter are deleted. On 
            Windows clients, case is ignored.
            </remarks>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.DeleteFilesCurrentDir(EnterpriseDT.Net.Ftp.FileFilter)">
            <summary>
            Delete all the files in this directory (no subdirectories) that match
            the supplied wildcard.
            </summary>
            <remarks>
            No directories are deleted. Only files matching the filter are deleted. On 
            Windows clients, case is ignored.
            </remarks>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.DeleteFiles(System.String,System.String,System.Boolean)">
            <summary>
            Delete all the files in this directory (and its subdirectories if recurse is true) that match
            the supplied wildcard.
            </summary>
            <remarks>
            No directories are deleted. Only files matching the filter are deleted. On 
            Windows clients, case is ignored.
            </remarks>
            <param name="remoteDir">name of remote directory</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="recurse">true if recursing through subdirectories</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.DeleteFiles(System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary>
            Delete all the files in this directory (and its subdirectories if recurse is true) that match
            the supplied filter.
            </summary>
            <remarks>
            No directories are deleted. Only files matching the filter are deleted. On 
            Windows clients, case is ignored.
            </remarks>
            <param name="remoteDir">name of remote directory</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="recurse">true if recursing through subdirectories</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.DeleteFiles(System.String,System.String)">
            <summary>
            Delete all the files in this directory (and its subdirectories) that match
            the supplied wildcard.
            </summary>
            <remarks>
            No directories are deleted. Only files matching the filter are deleted. On 
            Windows clients, case is ignored.
            </remarks>
            <param name="remoteDir">name of remote directory</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.DeleteFiles(System.String,EnterpriseDT.Net.Ftp.FileFilter)">
            <summary>
            Delete all the files in this directory (and its subdirectories) that match
            the supplied wildcard.
            </summary>
            <remarks>
            No directories are deleted. Only files matching the filter are deleted. On 
            Windows clients, case is ignored.
            </remarks>
            <param name="remoteDir">name of remote directory</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.GetFilesFromCurrentDir(System.String,System.String,System.Boolean)">
            <summary>
            Gets all files matching the supplied wildcard from current remote directory into 
            supplied local dir
            </summary>
            <remarks>
            No directories are retrieved.
            </remarks>
            <param name="localDir">name of local directory to get files into</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="detectTransferMode">true if transfer mode is to be auto-detected from</param>       
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.GetFilesFromCurrentDir(System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary>
            Gets all files matching the supplied wildcard from current remote directory into 
            supplied local dir
            </summary>
            <remarks>
            No directories are retrieved.
            </remarks>
            <param name="localDir">name of local directory to get files into</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="detectTransferMode">true if transfer mode is to be auto-detected from</param>       
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.Get(System.String,System.String,System.Boolean)">
            <summary>
            Gets this entire remote directory and its contents, recursively going
            through the remote directory name supplied. Gets the directory 
            into the current local directory, into a directory with supplied localDir name
            </summary>
            <remarks>
            No directories are retrieved.
            </remarks>
            <param name="localDir">name of local directory to get files into</param>
            <param name="remoteDir">name of remote directory to get files from</param>
            <param name="detectTransferMode">true if transfer mode is to be auto-detected from</param>               
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.Get(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Gets this entire remote directory and its contents, recursively going
            through the remote directory name supplied. 
            </summary>
            <remarks>
            Gets the directory into the current local directory, into a directory 
            with supplied localDir name
            </remarks>
            <param name="localDir">name of local directory to get files into</param>
            <param name="remoteDir">name of remote directory to get files from</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="detectTransferMode">true if transfer mode is to be auto-detected from</param>          
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.Get(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary>
            Gets this entire remote directory and its contents, recursively going
            through the remote directory name supplied. 
            </summary>
            <remarks>
            Gets the directory into the current local directory, into a directory 
            with supplied localDir name
            </remarks>
            <param name="localDir">name of local directory to get files into</param>
            <param name="remoteDir">name of remote directory to get files from</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="detectTransferMode">true if transfer mode is to be auto-detected from</param>          
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.Get(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets this entire remote directory and its contents, recursively (if recurse is set
            to true) going through the remote directory name supplied. 
            </summary>
            <remarks>
            Gets the directory into the current local directory, into a directory with 
            supplied localDir name
            </remarks>
            <param name="localDir">name of local directory to get files into</param>
            <param name="remoteDir">name of remote directory to get files from</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="recurse">determines whether or not files subdirectories should be downloaded</param> 
            <param name="detectTransferMode">true if transfer mode is to be auto-detected from</param>  
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.Get(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean,System.Boolean)">
            <summary>
            Gets this entire remote directory and its contents, recursively (if recurse is set
            to true) going through the remote directory name supplied. 
            </summary>
            <remarks>
            Gets the directory into the current local directory, into a directory with 
            supplied localDir name
            </remarks>
            <param name="localDir">name of local directory to get files into</param>
            <param name="remoteDir">name of remote directory to get files from</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="recurse">determines whether or not files subdirectories should be downloaded</param> 
            <param name="detectTransferMode">true if transfer mode is to be auto-detected from</param>  
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.PutFilesIntoCurrentDir(System.String,System.String,System.Boolean)">
            <summary>
            Puts all files from supplied local dir matching the supplied wildcard into 
            the current remote directory.  
            </summary>
            <remarks>
            No directories are put.
            </remarks>
            <param name="localDir">name of local directory to get files into</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="detectTransferMode">true if transfer mode is to be auto-detected from</param> 
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.PutFilesIntoCurrentDir(System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary>
            Puts all files from supplied local dir matching the supplied wildcard into 
            the current remote directory.  
            </summary>
            <remarks>
            No directories are put.
            </remarks>
            <param name="localDir">name of local directory to get files into</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="detectTransferMode">true if transfer mode is to be auto-detected from</param> 
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.Put(System.String,System.String,System.Boolean)">
            <summary>
            Puts this entire directory and its contents, recursively going through the 
            local directory supplied (which can be relative or absolute). 
            </summary>
            <remarks>
            Puts the directory into the current remote directory, into a directory with 
            the supplied remoteDir name.
            </remarks>
            <param name="localDir">name of local directory to get files into</param>
            <param name="remoteDir">name of remote directory to get files from</param>
            <param name="detectTransferMode">true if transfer mode is to be auto-detected from</param>         
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.Put(System.String,System.String,System.String,System.Boolean)">
            <summary> 
            Puts this entire directory and its contents. 
            </summary>
            <remarks>Recursively goes through the local directory supplied 
            (which can be relative or absolute. Puts the directory into the current remote directory,
            into a directory with the supplied remoteDir name. Only files matching the filter are fetched. 
            On Windows clients, case is ignored.</remarks>
            <param name="localDir">name of local directory</param>
            <param name="remoteDir">name of remote directory</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="detectTransferMode">true if transfer mode is to be auto-detected</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.Put(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary> 
            Puts this entire directory and its contents. 
            </summary>
            <remarks>Recursively goes through the local directory supplied 
            (which can be relative or absolute. Puts the directory into the current remote directory,
            into a directory with the supplied remoteDir name. Only files matching the filter are fetched. 
            On Windows clients, case is ignored.</remarks>
            <param name="localDir">name of local directory</param>
            <param name="remoteDir">name of remote directory</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="detectTransferMode">true if transfer mode is to be auto-detected</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.Put(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary> 
            Puts this entire directory and its contents. 
            </summary>
            <remarks>If recurse is true, it recursively goes through the local directory supplied 
            (which can be relative or absolute. Puts the directory into the current remote directory,
            into a directory with the supplied remoteDir name. Only files matching the filter are fetched. 
            On Windows clients, case is ignored.</remarks>
            <param name="localDir">name of local directory</param>
            <param name="remoteDir">name of remote directory</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="detectTransferMode">true if transfer mode is to be auto-detected</param>
            <param name="recurse">if true, recurse through subdirectories</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.Put(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean,System.Boolean)">
            <summary> 
            Puts this entire directory and its contents. 
            </summary>
            <remarks>If recurse is true, it recursively goes through the local directory supplied 
            (which can be relative or absolute. Puts the directory into the current remote directory,
            into a directory with the supplied remoteDir name. Only files matching the filter are fetched. 
            On Windows clients, case is ignored.</remarks>
            <param name="localDir">name of local directory</param>
            <param name="remoteDir">name of remote directory</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="detectTransferMode">true if transfer mode is to be auto-detected</param>
            <param name="recurse">if true, recurse through subdirectories</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.Cancel">
            <summary>
            Cancels the current recursive operation (if any).
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.PutDir(System.IO.DirectoryInfo,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary> 
            Puts a directory and its contents recursively
            </summary>
            <param name="dir">reference to DirectoryInfo object</param>
            <param name="remoteDir">name of remote directory</param>
            <param name="filter">wildcard filter applied to filenames</param>
            <param name="detectTransferMode">true if transfer mode is to be auto-detected</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.DirExists(System.String)">
            <summary>
             Check to see if a directory exists in the current directory
            </summary>
            <returns>true if found, false if not</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.PutFile(System.IO.FileInfo,System.Boolean)">
            <summary> 
            Puts a file
            </summary>
            <param name="file">reference to FileInfo object</param>
            <param name="detectTransferMode">true if transfer mode is to be auto-detected</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.GetDir(System.String,System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary> 
            Get a remote directory and its contents
            </summary>
            <param name="parent">parent directory</param>
            <param name="localDir">name of local directory we are transferring into</param>
            <param name="remoteDir">name of remote directory</param>
            <param name="filter">filter to apply to files (can be null)</param>
            <param name="detectTransferMode">true if transfer mode is to be auto-detected</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.GetFile(System.String,System.String,System.Boolean)">
            <summary> 
            Get a remote file
            </summary>
            <param name="parent">parent directory</param>
            <param name="remoteFile">remote file name</param>
            <param name="detectTransferMode">true if transfer mode is to be auto-detected</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.DirDetailsInternal(System.String)">
            <summary>
            Get a directory listing
            </summary>
            <param name="dir">directory</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.IsValidDir(System.String)">
            <summary>
            Check it is not the parent or current dir
            </summary>
            <param name="dir">name of dir</param>
            <returns>true if valid to use</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.PauseIfRequired">
            <summary> 
            Sleeps after a configurable number of transfers
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.CheckForCancel">
            <summary>
            Throws an exception if cancel has been set.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.CountBeforeSleep">
            <summary>
            Number of transfers before going to sleep
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.SleepEnabled">
            <summary>
            Enabling or not of sleeping after a certain number of transfers
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.SleepTime">
            <summary>
            Number of seconds spent asleep
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.ClientRecursiveOperations">
            <summary>
            For use with IFileTransferClients
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.ConnRecursiveOperations">
            <summary>
            For use with FTPConnection
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ConnRecursiveOperations.conn">
            <summary>
            Link to connection
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FileFilter">
            <summary>
            Used for by multiple-file operations to determine whether or not a particular file
            should be included in the operation.
            </summary>
            <remarks>
            The method that this delegate wraps should return <c>true</c> if the file or directory
            described by the given <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> is to be included in the
            operation being performed, and <c>false</c> if the file or directory is to be
            excluded.
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Net.BaseSocket">
            <summary>  
            Socket abstraction that simplifies socket code
            </summary>
            <author>   
            Hans Andersen    
            </author>
            <version>      
            $Revision: 1.25 $
            </version>
        </member>
        <member name="F:EnterpriseDT.Net.BaseSocket.addressFamily">
            <summary></summary>
        </member>
        <member name="F:EnterpriseDT.Net.BaseSocket.socketType">
            <summary></summary>
        </member>
        <member name="F:EnterpriseDT.Net.BaseSocket.protocolType">
            <summary></summary>
        </member>
        <member name="F:EnterpriseDT.Net.BaseSocket.log">
            <summary> Logging object</summary>
        </member>
        <member name="F:EnterpriseDT.Net.BaseSocket.logTag">
            <summary> Logging tag</summary>
        </member>
        <member name="M:EnterpriseDT.Net.BaseSocket.#ctor">
            <summary>
            Creates a <c>BaseSocket</c>.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.BaseSocket.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,EnterpriseDT.Util.Debug.ILogTag)">
            <summary>
            Initializes a new instance of the StandardSocket class
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.BaseSocket.Accept(System.Int32)">
            <summary>
            Creates a new Socket for a newly created connection
            </summary>
            <param name="timeout">Accept timeout in milliseconds</param>
        </member>
        <member name="M:EnterpriseDT.Net.BaseSocket.BeginAccept(System.AsyncCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.BaseSocket.EndAccept(System.IAsyncResult)">
            <summary>
            
            </summary>
            <param name="asyncResult"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.BaseSocket.Bind(System.Net.EndPoint)">
            <summary>
            Associates a Socket with a local endpoint.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.BaseSocket.Close">
            <summary>
            Closes the Socket connection and releases all associated resources.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.BaseSocket.Connect(System.Net.EndPoint)">
            <summary>
            Establishes a connection to a remote endpoint
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.BaseSocket.Connect(System.Net.EndPoint,System.Int32)">
            <summary>
            Establishes a connection to a remote endpoint
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.BaseSocket.Listen(System.Int32)">
            <summary>
            Places socket in a listening state.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.BaseSocket.GetStream">
            <summary>
            Get the stream associated with the socket.
            </summary>
            <remarks>
            The stream returned owns the socket, so closing the
            stream will close the socket
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.BaseSocket.GetStream(System.Boolean)">
            <summary>
            Get the stream associated with the socket.
            </summary>
            <param name="ownsSocket">true if the stream owns the socket, false otherwise</param>
            <remarks>
            If ownsSocket is true, the stream returned owns the socket, so closing the
            stream will close the socket. 
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.BaseSocket.Receive(System.Byte[])">
            <summary>
            Receives data from a bound Socket.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.BaseSocket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="size"></param>
            <param name="socketFlags"></param>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.BaseSocket.EndReceive(System.IAsyncResult)">
            <summary>
            
            </summary>
            <param name="asyncResult"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.BaseSocket.Send(System.Byte[])">
            <summary>
            Sends data to a connected Socket.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.BaseSocket.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="size"></param>
            <param name="socketFlags"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.BaseSocket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)">
            <summary>
            Sets a Socket option.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.BaseSocket.Connected">
            <summary>
            True if the socket was connected at the last operation
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.BaseSocket.LocalEndPoint">
            <summary>
            Gets the local endpoint.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.BaseSocket.RemoteEndPoint">
            <summary>
            Gets the remote endpoint.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.StandardSocket">
            <summary>  
            Standard implementation of BaseSocket
            </summary>
            <author>   
            Hans Andersen    
            </author>
            <version>      
            $Revision: 1.25 $
            </version>
        </member>
        <member name="F:EnterpriseDT.Net.StandardSocket.socket">
            <summary>
            The real socket this class is wrapping
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.StandardSocket.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,EnterpriseDT.Util.Debug.ILogTag)">
            <summary>
            Initializes a new instance of the StandardSocket class
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.StandardSocket.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Initializes a new instance of the StandardSocket class
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.StandardSocket.Accept(System.Int32)">
            <summary>
            Creates a new Socket for a newly created connection
            </summary>
            <param name="timeout">Accept timeout in milliseconds</param>
        </member>
        <member name="M:EnterpriseDT.Net.StandardSocket.BeginAccept(System.AsyncCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.StandardSocket.EndAccept(System.IAsyncResult)">
            <summary>
            
            </summary>
            <param name="asyncResult"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.StandardSocket.Bind(System.Net.EndPoint)">
            <summary>
            Associates a Socket with a local endpoint.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.StandardSocket.Close">
            <summary>
            Closes the Socket connection and releases all associated resources.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.StandardSocket.Connect(System.Net.EndPoint)">
            <summary>
            Establishes a connection to a remote endpoint
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.StandardSocket.Connect(System.Net.EndPoint,System.Int32)">
            <summary>
            Establishes a connection to a remote endpoint
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.StandardSocket.Listen(System.Int32)">
            <summary>
            Places socket in a listening state.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.StandardSocket.GetStream">
            <summary>
            Get the stream associated with the socket.
            </summary>
            <remarks>
            The stream returned owns the socket, so closing the
            stream will close the socket. 
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.StandardSocket.GetStream(System.Boolean)">
            <summary>
            Get the stream associated with the socket.
            </summary>
            <param name="ownsSocket">true if the stream owns the socket, false otherwise</param>
            <remarks>
            If ownsSocket is ture, the stream returned owns the socket, so closing the
            stream will close the socket. 
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.StandardSocket.Receive(System.Byte[])">
            <summary>
            Receives data from a bound Socket.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.StandardSocket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="size"></param>
            <param name="socketFlags"></param>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.StandardSocket.EndReceive(System.IAsyncResult)">
            <summary>
            
            </summary>
            <param name="asyncResult"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.StandardSocket.Send(System.Byte[])">
            <summary>
            Sends data to a connected Socket.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.StandardSocket.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="size"></param>
            <param name="socketFlags"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.StandardSocket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)">
            <summary>
            Sets a Socket option.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.StandardSocket.Connected">
            <summary>
            True if the socket was connected at the last operation
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.StandardSocket.LocalEndPoint">
            <summary>
            Gets the local endpoint.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.StandardSocket.RemoteEndPoint">
            <summary>
            Gets the remote end-point.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.StandardSocket.Socket">
            <summary>
            Gets plain .NET socket
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.CommentCommand">
            <summary>  Writes a comment to the record file if it exists
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.2 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPDataSocket">
            <summary>  Interface for data socket classes, whether active or passive
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.10 $
            </version>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPDataSocket.log">
            <summary> Logging object</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPDataSocket.sock">
            <summary>  
            The underlying socket 
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPDataSocket.timeout">
            <summary>  
            The timeout for the sockets
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPDataSocket.SetSocketTimeout(EnterpriseDT.Net.BaseSocket,System.Int32)">
            <summary>  
            Helper method to set a socket's timeout value
            </summary>
            <param name="sock">socket to set timeout for
            </param>
            <param name="timeout">timeout value to set
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPDataSocket.Close">
            <summary>  Closes underlying socket(s)</summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPDataSocket.Timeout">
            <summary>   
            Get/Set the TCP timeout on the underlying control socket.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPDataSocket.LocalPort">
            <summary> 
            Returns the local port to which this socket is bound. 
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPDataSocket.DataStream">
            <summary>  
            Get the appropriate stream for reading or writing to
            </summary>
            <returns>  
            input or output stream for underlying socket.
            </returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.HelpCommand">
            <summary>  Change to ASCII
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.2 $
            
            </version>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.HelpCommand.GetCommandList(System.Collections.Hashtable)">
            <summary> Get the summary of commands
            
            </summary>
            <param name="">commands
            </param>
            <returns> strin
            
            </returns>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable">
            <summary>
            Subclass of the nametable, has the extensions for the GNamespace
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.BaseNameTable">
            <summary>BaseNameTable. An initialized nametable for faster XML processing
            parses:  
                *  opensearch:totalResults - the total number of search results available (not necessarily all present in the feed).
                *  opensearch:startIndex - the 1-based index of the first result.
                *  opensearch:itemsPerPage - the maximum number of items that appear on one page. This allows clients to generate direct links to any set of subsequent pages.
                *  gData:processed
             </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.BaseNameTable.NSOpenSearchRss">
            <summary>
             namespace of the opensearch v1.0 elements
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.BaseNameTable.NSOpenSearch11">
            <summary>
             namespace of the opensearch v1.1 elements
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.BaseNameTable.NSAtom">
            <summary>static namespace string declaration</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.BaseNameTable.NSAppPublishing">
            <summary>namespace for app publishing control, draft version</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.BaseNameTable.NSAppPublishingFinal">
            <summary>namespace for app publishing control, final version</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.BaseNameTable.NSXml">
            <summary>xml namespace</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.BaseNameTable.gNamespace">
            <summary>GD namespace</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.BaseNameTable.gBatchNamespace">
            <summary>GData batch extension namespace</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.BaseNameTable.gNamespacePrefix">
            <summary>GD namespace prefix</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.BaseNameTable.ServicePost">
            <summary>the post definiton in the link collection</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.BaseNameTable.ServiceFeed">
            <summary>the feed definition in the link collection</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.BaseNameTable.ServiceBatch">
            <summary>the batch URI definition in the link collection</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.BaseNameTable.gKind">
            <summary>GData Kind Scheme</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.BaseNameTable.gLabels">
            <summary>label scheme</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.BaseNameTable.ServiceEdit">
            <summary>the edit definition in the link collection</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.BaseNameTable.ServiceNext">
            <summary>the next chunk URI in the link collection</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.BaseNameTable.ServicePrev">
            <summary>the previous chunk URI in the link collection</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.BaseNameTable.ServiceSelf">
            <summary>the self URI in the link collection</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.BaseNameTable.ServiceAlternate">
            <summary>the alternate URI in the link collection</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.BaseNameTable.ServiceMedia">
            <summary>the alternate URI in the link collection</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.BaseNameTable.AtomPrefix">
            <summary>prefix for atom if writing</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.BaseNameTable.gDataPrefix">
            <summary>prefix for gNamespace if writing</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.BaseNameTable.gBatchPrefix">
            <summary>prefix for gdata:batch if writing</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.BaseNameTable.gAppPublishingPrefix">
            <summary>prefix for appPublishing if writing</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.BaseNameTable.XmlElementPubControl">
            <summary>xmlelement for app:control</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.BaseNameTable.XmlElementPubDraft">
            <summary>xmlelement for app:draft</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.BaseNameTable.XmlElementPubEdited">
            <summary>xmlelement for app:draft</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.BaseNameTable.XmlEtagAttribute">
            <summary>
            static string for parsing the etag attribute
            </summary>
            <returns></returns>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.BaseNameTable.XmlElementBatchId">
            <summary>xmlelement for batch:id</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.BaseNameTable.XmlElementBatchOperation">
            <summary>xmlelement for batch:operation</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.BaseNameTable.XmlElementBatchStatus">
            <summary>xmlelement for batch:status</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.BaseNameTable.XmlElementBatchInterrupt">
            <summary>xmlelement for batch:interrupted</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.BaseNameTable.XmlAttributeBatchContentType">
            <summary>xmlattribute for batch:status@contentType</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.BaseNameTable.XmlAttributeBatchStatusCode">
            <summary>xmlattribute for batch:status@code</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.BaseNameTable.XmlAttributeBatchReason">
            <summary>xmlattribute for batch:status@reason</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.BaseNameTable.XmlElementBatchErrors">
            <summary>xmlelement for batch:status:errors</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.BaseNameTable.XmlElementBatchError">
            <summary>xmlelement for batch:status:errors:error</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.BaseNameTable.XmlAttributeBatchSuccess">
            <summary>xmlattribute for batch:interrupted@success</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.BaseNameTable.XmlAttributeBatchParsed">
            <summary>XmlAttribute for batch:interrupted@parsed</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.BaseNameTable.XmlAttributeBatchField">
            <summary>XmlAttribute for batch:interrupted@field</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.BaseNameTable.XmlAttributeBatchUnprocessed">
            <summary>XmlAttribute for batch:interrupted@unprocessed</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.BaseNameTable.XmlValue">
            <summary>XmlConstant for value in enums</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.BaseNameTable.XmlName">
            <summary>XmlConstant for name in enums</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.BaseNameTable.XmlAttributeType">
            <summary>XmlAttribute for type in enums</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.BaseNameTable.atomNameTable">
            <summary>the nametable itself, based on XML core</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.BaseNameTable.totalResults">
            <summary>opensearch:totalResults</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.BaseNameTable.startIndex">
            <summary>opensearch:startIndex</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.BaseNameTable.itemsPerPage">
            <summary>opensearch:itemsPerPage</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.BaseNameTable.baseUri">
            <summary>xml base</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.BaseNameTable.language">
            <summary>xml language</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.BaseNameTable.InitAtomParserNameTable">
            <summary>initializes the name table for use with atom parsing. This is the
            only place where strings are defined for parsing</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.BaseNameTable.OpenSearchNamespace(EnterpriseDT.Google.GData.Client.IVersionAware)">
            <summary>
            returns the correct opensearchnamespace to use based
            on the version information passed in. All protocols with 
            version > 1 use opensearch1.1 where version 1 uses
            opensearch 1.0
            </summary>
            <param name="v">The versioninformation</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.BaseNameTable.AppPublishingNamespace(EnterpriseDT.Google.GData.Client.IVersionAware)">
            <summary>
            returns the correct app:publishing namespace to use based
            on the version information passed in. All protocols with 
            version > 1 use the final version of the namespace, where 
            version 1 uses the draft version. 
            </summary>
            <param name="v">The versioninformation</param>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.BaseNameTable.Nametable">
            <summary>Read only accessor for atomNameTable</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.BaseNameTable.BatchId">
            <summary>Read only accessor for BatchId</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.BaseNameTable.BatchOperation">
            <summary>Read only accessor for BatchOperation</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.BaseNameTable.BatchStatus">
            <summary>Read only accessor for BatchStatus</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.BaseNameTable.BatchInterrupt">
            <summary>Read only accessor for BatchInterrupt</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.BaseNameTable.BatchContentType">
            <summary>Read only accessor for BatchContentType</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.BaseNameTable.BatchStatusCode">
            <summary>Read only accessor for BatchStatusCode</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.BaseNameTable.BatchErrors">
            <summary>Read only accessor for BatchErrors</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.BaseNameTable.BatchError">
            <summary>Read only accessor for BatchError</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.BaseNameTable.BatchReason">
            <summary>Read only accessor for BatchReason</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.BaseNameTable.BatchField">
            <summary>Read only accessor for BatchReason</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.BaseNameTable.BatchUnprocessed">
            <summary>Read only accessor for BatchUnprocessed</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.BaseNameTable.BatchSuccessCount">
            <summary>Read only accessor for BatchSuccessCount</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.BaseNameTable.BatchFailureCount">
            <summary>Read only accessor for BatchFailureCount</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.BaseNameTable.BatchParsedCount">
            <summary>Read only accessor for BatchParsedCount</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.BaseNameTable.TotalResults">
            <summary>Read only accessor for totalResults</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.BaseNameTable.StartIndex">
            <summary>Read only accessor for startIndex</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.BaseNameTable.ItemsPerPage">
            <summary>Read only accessor for itemsPerPage</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.BaseNameTable.Parameter">
            <summary>Read only accessor for parameter</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.BaseNameTable.Base">
            <summary>Read only accessor for baseUri</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.BaseNameTable.Language">
            <summary>Read only accessor for language</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.BaseNameTable.Value">
            <summary>Read only accessor for value</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.BaseNameTable.Type">
            <summary>Read only accessor for value</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.BaseNameTable.Name">
            <summary>Read only accessor for name</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.BaseNameTable.ETag">
            <summary>Read only accessor for etag</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.NSGCal">
            <summary>the google calendar namespace</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.gCalPrefix">
            <summary>the google calendar prefix</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.gContactsRel">
            <summary>
            the starting string to define contacts relationship values
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.ServicePhoto">
            <summary>
            a relationship to a photo
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.Event">
            <summary>the event prefix </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlTimeZoneElement">
            <summary> timezone indicator on the feedlevel</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlWhenElement">
            <summary>static string for parsing</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlWhereElement">
            <summary>static string for parsing</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlWhoElement">
            <summary>static string for parsing</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlEntryLinkElement">
            <summary>static string for parsing</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlFeedLinkElement">
            <summary>static string for parsing</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlEventStatusElement">
            <summary>static string for parsing</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlVisibilityElement">
            <summary>static string for parsing</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlTransparencyElement">
            <summary>static string for parsing</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlAttendeeTypeElement">
            <summary>static string for parsing</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlAttendeeStatusElement">
            <summary>static string for parsing</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlRecurrenceElement">
            <summary>static string for parsing</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlRecurrenceExceptionElement">
            <summary>static string for parsing</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlOriginalEventElement">
            <summary>static string for parsing</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlReminderElement">
            <summary>static string for parsing</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlCommentsElement">
            <summary>static string for parsing</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlColorElement">
            <summary>static string for parsing the color element in a calendar</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlSelectedElement">
            <summary>static string for parsing the selected element in a calendar</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlAccessLevelElement">
            <summary>static string for parsing the ACL element in a calendar</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlHiddenElement">
            <summary>static string for parsing the hidden element in a calendar</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlEmailElement">
            <summary>static string for parsing the email element in a contact</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlIMElement">
            <summary>static string for parsing the IM element in a contact</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlPhoneNumberElement">
            <summary>static string for parsing the phonenumber element in a contact</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlPostalAddressElement">
            <summary>static string for parsing the postalAddress element in a contact</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlOrganizationElement">
            <summary>static string for parsing the Organization element in a contact</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlDeletedElement">
            <summary>static string for parsing the deleted element in a contacts</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlOrgNameElement">
            <summary>static string for parsing the organization name element in a contacts</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlOrgSymbolElement">
            <summary>static string for parsing the organization symbol element in a contacts</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlOrgJobDescriptionElement">
            <summary>static string for parsing the organization job description element in a contacts</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlOrgDepartmentElement">
            <summary>static string for parsing the organization department element in a contacts</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlOrgTitleElement">
            <summary>static string for parsing the organization title element in a contacts</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlQuotaBytesUsedElement">
            <summary>static string for parsing the quotaBytesUsed element </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlRatingElement">
            <summary>xmlelement for gd:rating</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlAttributeMin">
            <summary>xml attribute min for gd:rating</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlAttributeMax">
            <summary>xml attribute max for gd:rating</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlAttributeNumRaters">
            <summary>xml attribute numRaters for gd:rating</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlAttributeAverage">
            <summary>xml attribute average for gd:rating</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlAttributeStartTime">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlAttributeEndTime">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlAttributeValueString">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlAttributeEmail">
            <summary>static string for parsing the email in gd:who</summary>    
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlAttributeRel">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlAttributeLabel">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlAttributeHref">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlAttributeCountHint">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlAttributeReadOnly">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlAttributeId">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlAttributeDays">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlAttributeHours">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlAttributeMinutes">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlAttributeAbsoluteTime">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlAttributeSpecialized">
            <summary>static string for parsing the specialized attribute on a RecurringException</summary>    
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlAttributeMethod">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlAttributeAddress">
            <summary>static string for parsing the address attribute</summary>    
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlAttributePrimary">
            <summary>static string for parsing the primary attribute</summary>    
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlAttributeProtocol">
            <summary>static string for parsing the protocol attribute</summary>    
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlAttributeUri">
            <summary>static string for parsing the uri attribute</summary>    
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlAttributeDisplayName">
            <summary>static string for parsing the displayname attribute</summary>    
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlResourceIdElement">
            <summary>
            a resource id
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlLastViewedElement">
            <summary>
            lastviewed constant
            </summary>
            <returns></returns>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlLastModifiedByElement">
            <summary>
            lastviewed constant
            </summary>
            <returns></returns>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlWebContentElement">
            <summary>static string for parsing a webcontent element</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlWebContentGadgetElement">
            <summary>static string for parsing a webcontent element</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlExtendedPropertyElement">
            <summary>static string for parsing the extendedProperty element</summary>    
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlAttributeUrl">
            <summary>static string for the url attribute</summary>    
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlAttributeDisplay">
            <summary>static string for the display attribute</summary>    
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlAttributeWidth">
            <summary>static string for the width attribute</summary>    
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlAttributeHeight">
            <summary>static string for the height attribute</summary>    
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlSendNotificationsElement">
             <summary>static string for the sendEventNotifications element</summary>    
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlQuickAddElement">
             <summary>static string for the quickAdd element</summary>    
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.NameElement">
            <summary>
            Allows storing person's name in a structured way. Consists of given name, additional name, family name, prefix, suffix and full name.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.GivenNameElement">
            <summary>
            Person's given name
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.AdditionalNameElement">
            <summary>
            Additional name of the person, e.g. middle name
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.FamilyNameElement">
            <summary>
            Person's family Name
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.NamePrefixElement">
            <summary>
            honorific prefix, eg. Mr or Mrs
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.NameSuffixElement">
            <summary>
            Honorific suffix, eg. san
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.FullNameElement">
            <summary>
            Unstructured representation of the name
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.StructuredPostalAddressElement">
            <summary>     
            Postal address split into components. It allows to store the address in locale independent format. 
            The fields can be interpreted and used to generate formatted, locale dependent address. 
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.AgentElement">
            <summary>
            The agent who actually receives the mail. 
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.HousenameElement">
            <summary>
            Used in places where houses have names
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.StreetElement">
            <summary>
            Can be stree, avenue, road, etc
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.PoboxElement">
            <summary>
            Covers actual P.O. Boxes, drawers, locked bags etc
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.NeighborhoodElement">
            <summary>
            This is used to disambiguate a street address when a city contains 
            more than one street with the same name, or to specify a small place whose 
            mail is routed through a larger postal town. 
            In China it could be a county or a minor city.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.CityElement">
            <summary>
            Can be City, village etc
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.SubregionElement">
            <summary>
            Administrative districts
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.RegionElement">
            <summary>
            A state, province etc
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.PostcodeElement">
            <summary>
            Postal code
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.CountryElement">
            <summary>
            The name or code of the country
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.FormattedAddressElement">
            <summary>
            The full, unstructured postal address
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlAttributeMailClass">
            <summary>
            The full, unstructured postal address
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.GDataParserNameTable.XmlAttributeUsage">
            <summary>
            The full, unstructured postal address
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpOpenDir">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <remarks>
            byte   SSH_FXP_OPENDIR
            uint32 request-id
            string path  [UTF-8]
            </remarks>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SFTPMessage.log">
            <summary> Logging object</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPMessage.ToByteArray">
            <summary>
            Get the message as a byte array to send
            </summary>
            <returns>byte array</returns>
            <remarks>
            Messages we receive generally don't implement this method, only messages
            we send
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPMessage.#ctor(System.Byte)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPMessage.#ctor(System.Byte,System.Int32)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPMessage.Log(System.String)">
            <summary>
            Log the message using the given prefix
            </summary>
            <param name="prefix"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPMessage.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SFTPMessage.MessageType">
            <summary>
            The type of the SFTP message
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SFTPMessage.Length">
            <summary>
            The length of the message data, or 0 if not set
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SFTPMessage.RequestID">
            <summary>
            The id of the request that this message is in response to
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpOpenDir.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.SecurityException">
            <summary>
            The exception that is thrown when a security error is detected.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.SecurityException.#ctor">
            <summary>
            Initializes a new instance of the SecurityException class with default properties.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.SecurityException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SecurityException class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.SecurityException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the SecurityException class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner"/> parameter is not a null reference (<b>Nothing</b> in Visual Basic), the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.SecurityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the SecurityException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.SSLCryptographicException">
            <summary>
            Extends CryptographicException so that the last win32 error is optionally included.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.SSLCryptographicException.#ctor(System.String,System.Boolean)">
            <summary>
            Create a SSLCryptographicException and optionally include the last win32 error
            </summary>
            <remarks>The last win32 error is that returned by <c>Marshal.GetLastWin32Error()</c>.</remarks>
            <param name="message">Message to show</param>
            <param name="includeWin32Error"></param>
        </member>
        <member name="T:EnterpriseDT.Util.HexUtils">
            <summary>
            Various hex utils
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.HexUtils.ToHex(System.Byte[])">
            <summary>
            Convert a byte array to a string in hex
            </summary>
            <param name="data">byte array</param>
            <returns>hex string</returns>
        </member>
        <member name="M:EnterpriseDT.Util.HexUtils.FromHex(System.String)">
            <summary>
            Convert a string in hex to a byte array
            </summary>
            <param name="hex">hex string</param>
            <returns>byte array</returns>
        </member>
        <member name="M:EnterpriseDT.Util.HexUtils.FromDigit(System.Char)">
            <summary>
            
            </summary>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider">
            <summary>
            Accesses the unmanaged version of the <see cref="T:System.Security.Cryptography.Rijndael"/> algorithm. This class cannot be inherited.
            </summary>
            <remarks>
            This class will use the unmanaged implementation of the Rijndael algorithm, when possible. If the unmanaged Rijndael algorithm is not available, it will fall back to the <see cref="T:System.Security.Cryptography.RijndaelManaged"/> implementation.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider"/> class.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.Finalize">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.Dispose(System.Boolean)">
            <summary>
            Releases all unmanaged resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.GenerateIV">
            <summary>
            Generates a random initialization vector (IV) to be used for the algorithm.
            </summary>
            <remarks>Use this method to generate a random IV when none is specified.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.GenerateKey">
            <summary>
            Generates a random Key to be used for the algorithm.
            </summary>
            <remarks>Use this method to generate a random key when none is specified.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.CreateDecryptor(System.Byte[],System.Byte[])">
            <summary>
            Creates a symmetric <see cref="T:System.Security.Cryptography.Rijndael"/> decryptor object with the specified <see cref="P:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.Key"/> and initialization vector (<see cref="P:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.IV"/>).
            </summary>
            <param name="rgbKey">The secret key to be used for the symmetric algorithm.</param>
            <param name="rgbIV">The IV to be used for the symmetric algorithm.</param>
            <returns>A symmetric Rijndael decryptor object.</returns>
            <remarks>This method decrypts an encrypted message created using the <see cref="M:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.CreateEncryptor(System.Byte[],System.Byte[])"/> overload with the same signature.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.CreateEncryptor(System.Byte[],System.Byte[])">
            <summary>
            Creates a symmetric <see cref="T:System.Security.Cryptography.Rijndael"/> encryptor object with the specified <see cref="P:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.Key"/> and initialization vector (<see cref="P:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.IV"/>).
            </summary>
            <param name="rgbKey">The secret key to be used for the symmetric algorithm.</param>
            <param name="rgbIV">The IV to be used for the symmetric algorithm.</param>
            <returns>A symmetric Rijndael encryptor object.</returns>
            <remarks>Use the <see cref="M:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.CreateDecryptor(System.Byte[],System.Byte[])"/> overload with the same signature to decrypt the result of this method.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.GetKeyType(System.Int32)">
            <summary>
            Converts a key size into an instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.CryptoAlgorithm"/> enum.
            </summary>
            <param name="size">The size of the key, in bits.</param>
            <returns>One of the CryptoAlgorithm values.</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="size"/> is invalid.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.CanUseUnmanaged(System.Int32,System.Int32,System.Security.Cryptography.PaddingMode)">
            <summary>
            Returns a value that indicates whether the unmanaged Rijndael implementation can be used with the specified parameters.
            </summary>
            <param name="keySize">A value that indicates the size of the key, in bits.</param>
            <param name="blockSize">A value that indicates the size of the blocks, in bits.</param>
            <param name="padding">One of the <see cref="T:System.Security.Cryptography.PaddingMode"/> values.</param>
            <returns><b>true</b> if the unmanaged implementation can be used, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.CanUseUnmanaged">
            <summary>
            Returns a value that indicates whether the unmanaged Rijndael implementation can be used with the current parameters.
            </summary>
            <returns><b>true</b> if the unmanaged implementation can be used, <b>false</b> otherwise.</returns>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.m_Managed">
            <summary>Holds a managed <see cref="T:System.Security.Cryptography.Rijndael"/> instance.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.m_Provider">
            <summary>Handle of the unmanaged AES CSP.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.m_Disposed">
            <summary>Holds a boolean that indicates whether this object has been disposed.</summary>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.BlockSize">
            <summary>
            Gets or sets the block size of the cryptographic operation in bits.
            </summary>
            <value>The block size in bits.</value>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The block size is invalid.</exception>
            <remarks>The block size is the basic unit of data that can be encrypted or decrypted in one operation. Messages longer than the block size are handled as successive blocks; messages shorter than the block size must be padded with extra bits to reach the size of a block. Valid block sizes are determined by the symmetric algorithm used.</remarks>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.FeedbackSize">
            <summary>
            Gets or sets the feedback size of the cryptographic operation in bits.
            </summary>
            <value>The feedback size in bits.</value>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The feedback size is larger than the block size.</exception>
            <remarks>The feedback size determines the amount of data that is fed back to successive encryption or decryption operations. The feedback size cannot be greater than the block size.</remarks>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.IV">
            <summary>
            Gets or sets the initialization vector (IV) for the symmetric algorithm.
            </summary>
            <value>The initialization vector.</value>
            <exception cref="T:System.ArgumentNullException">An attempt is made to set the IV to a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An attempt is made to set the IV to an invalid size.</exception>
            <remarks>If this property is a null reference (<b>Nothing</b> in Visual Basic) when it is used, <see cref="M:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.GenerateIV"/> is called to create a new random value.</remarks>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.Key">
            <summary>
            Gets or sets the secret key for the symmetric algorithm.
            </summary>
            <value>The secret key to be used for the symmetric algorithm.</value>
            <exception cref="T:System.ArgumentNullException">An attempt is made to set the key to a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <remarks>
            <para>The secret key is used both for encryption and for decryption. For a symmetric algorithm to be secure, the secret key must be known only to the sender and the receiver. The valid key sizes are specified by the particular symmetric algorithm implementation and are listed in <see cref="P:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.LegalKeySizes"/>.</para>
            <para>If this property is a null reference (<b>Nothing</b> in Visual Basic) when it is used, <see cref="M:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.GenerateKey"/> is called to create a new random value.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.KeySize">
            <summary>
            Gets or sets the size of the secret key used by the symmetric algorithm in bits.
            </summary>
            <value>The size of the secret key used by the symmetric algorithm.</value>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The key size is not valid.</exception>
            <remarks>The valid key sizes are specified by the particular symmetric algorithm implementation and are listed in <see cref="P:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.LegalKeySizes"/>.</remarks>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.LegalBlockSizes">
            <summary>
            Gets the block sizes that are supported by the symmetric algorithm.
            </summary>
            <value>An array containing the block sizes supported by the algorithm.</value>
            <remarks>Only block sizes that match an entry in this array are supported by the symmetric algorithm.</remarks>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.LegalKeySizes">
            <summary>
            Gets the key sizes that are supported by the symmetric algorithm.
            </summary>
            <value>An array containing the key sizes supported by the algorithm.</value>
            <remarks>Only key sizes that match an entry in this array are supported by the symmetric algorithm.</remarks>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.Mode">
            <summary>
            Gets or sets the mode for operation of the symmetric algorithm.
            </summary>
            <value>The mode for operation of the symmetric algorithm.</value>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cipher mode is not one of the CipherMode values.</exception>
            <remarks>See CipherMode for a description of specific modes.</remarks>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.Padding">
            <summary>
            Gets or sets the padding mode used in the symmetric algorithm.
            </summary>
            <value>The padding mode used in the symmetric algorithm.</value>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The padding mode is not one of the PaddingMode values.</exception>
            <remarks>Most plain text messages do not consist of a number of bytes that completely fill blocks. Often, there are not enough bytes to fill the last block. When this happens, a padding string is added to the text. For example, if the block length is 64 bits and the last block contains only 40 bits, 24 bits of padding are added. See <see cref="T:System.Security.Cryptography.PaddingMode"/> for a description of specific modes.</remarks>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.KeyType">
            <summary>
            Gets the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.CryptoAlgorithm"/> value that corresponds with the value of the <see cref="P:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.KeySize"/> property.
            </summary>
            <returns>One of the CryptoAlgorithm values.</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpClose">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpClose.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.UnixFileParser">
            <summary>  
            Represents a remote Unix file parser
            </summary>
            <author>       
            Bruce Blackshaw
            </author>
            <version>      
            $Revision: 1.24 $
            </version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPFileParser">
            <summary>  
            Root class of all file parsers
            </summary>
            <author>       
            Bruce Blackshaw
            </author>
            <version>      
            $Revision: 1.12 $
            </version>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFileParser.parserCulture">
            <summary>Culture used for parsing file details</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPFileParser.IsValidFormat(System.String[])">
            <summary>
            Test for valid format for this parser
            </summary>
            <param name="listing">listing to test</param>
            <returns>true if valid</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPFileParser.IsMultiLine">
            <summary>
            Does this parser parse multiple lines to get one listing?
            </summary>
            <returns>true or false</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPFileParser.Parse(System.String)">
            <summary> 
            Parse server supplied string
            </summary>
            <param name="raw">  raw string to parse
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileParser.ParsingCulture">
            <summary>
            Get/set the culture info for parsing
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileParser.TimeIncludesSeconds">
            <summary>
            Get flag indicating whether or not the most recent parse returned seconds.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser.SYMLINK_ARROW">
            <summary> Symbolic link symbol</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser.SYMLINK_CHAR">
            <summary> Indicates symbolic link</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser.ORDINARY_FILE_CHAR">
            <summary> Indicates ordinary file</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser.DIRECTORY_CHAR">
            <summary> Indicates directory</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser.format1a">
            <summary>Date format 1</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser.format1b">
            <summary>Date format 1</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser.format2a">
            <summary>Date format 2</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser.format2b">
            <summary>Date format 2</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser.format2c">
            <summary>Date format 2</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser.format2d">
            <summary>Date format 2</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser.format2e">
            <summary>Date format 2</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser.MIN_FIELD_COUNT">
            <summary> Minimum number of expected fields</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser.format1">
            <summary>array of format 1 formats</summary> 
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser.format2">
            <summary>array of format 2 formats</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser.log">
            <summary> Logging object</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.UnixFileParser.#ctor">
            <summary> Default constructor</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.UnixFileParser.IsValidFormat(System.String[])">
            <summary>
            Valid format for this parser
            </summary>
            <param name="listing">listing array</param>
            <returns>true if valid</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.UnixFileParser.IsUnix(System.String)">
            <summary> 
            Is this a Unix format listing?
            </summary>
            <param name="raw">raw string to parse</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.UnixFileParser.Parse(System.String)">
            <summary> 
            Parse server supplied string, e.g.:
            
            lrwxrwxrwx   1 wuftpd   wuftpd         14 Jul 22  2002 MIRRORS -> README-MIRRORS
            -rw-r--r--   1 b173771  users         431 Mar 31 20:04 .htaccess
            
            </summary>
            <param name="raw">  raw string to parse
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.UnixFileParser.TimeIncludesSeconds">
            <summary>
            Get flag indicating whether or not the most recent parse returned seconds.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Util.License.LicenseConstants">
            <summary>  
            Useful constants
            </summary>
            <author>       
            Bruce Blackshaw
            </author>
            <version>      
            $Revision: 1.4 $
            </version>
        </member>
        <member name="F:EnterpriseDT.Util.License.LicenseConstants.NUM_FLAGS">
            <summary> Number of flags</summary>
        </member>
        <member name="F:EnterpriseDT.Util.License.LicenseConstants.FLAGS_PER_DIGIT">
            <summary> Flags per digit</summary>
        </member>
        <member name="F:EnterpriseDT.Util.License.LicenseConstants.MIN_NAME_LENGTH">
            <summary> Minimum name length</summary>
        </member>
        <member name="F:EnterpriseDT.Util.License.LicenseConstants.DATE_LENGTH">
            <summary> length of date string</summary>
        </member>
        <member name="F:EnterpriseDT.Util.License.LicenseConstants.dateFormat">
            <summary> Date formatter </summary>
        </member>
        <member name="T:EnterpriseDT.Util.License.ProductNames">
            <summary>
            Handles converting between flags and product names
            </summary>
        </member>
        <member name="F:EnterpriseDT.Util.License.ProductNames.NET_PRO">
            <summary>Pro</summary>
        </member>
        <member name="F:EnterpriseDT.Util.License.ProductNames.NET_EXPRESS">
            <summary>Express name</summary>
        </member>
        <member name="F:EnterpriseDT.Util.License.ProductNames.NET_COMPACT">
            <summary>Express name</summary>
        </member>
        <member name="M:EnterpriseDT.Util.License.ProductNames.GetProduct(System.Boolean[])">
            <summary>
            [true,true] => PRO
            [true,false] => Express
            [false,true] => Compact
            </summary>
            <param name="flags">flags to test</param>
            <returns>product</returns>
        </member>
        <member name="M:EnterpriseDT.Util.License.ProductNames.GetProductName(EnterpriseDT.Util.License.EdtProduct)">
            <summary>
            Get the corresponding product name
            </summary>
            <param name="product">product enum</param>
            <returns>product name</returns>
        </member>
        <member name="M:EnterpriseDT.Util.License.ProductNames.GetFlags(System.String,System.Boolean)">
            <summary>
            [true,true] => PRO
            [true,false] => Express
            [false,true] => Compact
            </summary>
            <param name="product">product name</param>
            <param name="isTrial">true if trial</param>
            <returns>boolean array</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SFTPMessageFactory">
            <summary>
            Creates the various types of SFTP SSH messages that are supplied to it 
            as byte buffers.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SFTPMessageFactory.log">
            <summary> Logging object</summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.RssFeedParser">
            <summary>RssFeedParser
            </summary> 
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.BaseFeedParser">
            <summary>AtomEntry object, representing an item in the RSS feed
            </summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.BaseFeedParser.doc">
            <summary>the XmlDoc that we use to hand nodes to, in case of extensions</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.BaseFeedParser.Parse(System.IO.Stream,EnterpriseDT.Google.GData.Client.AtomFeed)">
            <summary>virtual, starts the parsing process</summary> 
            <param name="streamInput">input stream to parse </param>
            <param name="feed">the basefeed object that should be set</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.BaseFeedParser.OnCreateNewEntry">
            <summary>overloaded to make it easier to fire the event</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.BaseFeedParser.OnNewAtomEntry(EnterpriseDT.Google.GData.Client.AtomEntry)">
            <summary>overloaded to make it easier to fire the event</summary> 
            <param name="newEntry">the new AtomEntry to fire </param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.BaseFeedParser.OnParsingDone">
            <summary>protected void OnParsingDone()</summary> 
            <returns> </returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.BaseFeedParser.OnNewAtomEntry(EnterpriseDT.Google.GData.Client.AtomFeed)">
            <summary>overloaded to make eventfiring easier</summary> 
            <param name="feed"> the new feed to fire</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.BaseFeedParser.OnNewExtensionElement(System.Xml.XmlNode,EnterpriseDT.Google.GData.Client.AtomBase)">
            <summary>eventfiring helper for new extensions</summary> 
            <param name="node"> the new node that was found</param>
            <param name="baseObject"> the object this node should be added to</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.BaseFeedParser.OnNewExtensionElement(System.Xml.XmlReader,EnterpriseDT.Google.GData.Client.AtomBase)">
            <summary>eventfiring helper for new extensions</summary> 
            <param name="reader"> the reader positioned on the extension</param>
            <param name="baseObject"> the object this node should be added to</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.BaseFeedParser.OnNewAtomEntry(EnterpriseDT.Google.GData.Client.FeedParserEventArgs)">
            <summary>protected virtual OnNewAtomEntry( FeedParserEventArgs args)</summary> 
            <param name="args"> FeedParserEventArgs, includes the new entry</param>
            <returns> </returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.BaseFeedParser.NextElement(System.Xml.XmlReader)">
            <summary>moves to the next element</summary> 
            <param name="reader">the xmlreader to skip </param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.BaseFeedParser.NextChildElement(System.Xml.XmlReader,System.Int32@)">
            <summary>starts with the parent element, and stops when it reaches the same DEPTH again</summary> 
            <param name="reader"> the xml reader positioned at the parent element</param>
            <param name="depth"> indicates the depth level of the parent where to stop</param>
            <returns> true while still inside this level</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.BaseFeedParser.MoveToStartElement(System.Xml.XmlReader)">
            <summary>moves to the next element start</summary> 
            <param name="reader"> the xml reader positioned somewhere</param>
            <returns> true if found, otherwise false (indicating most likely EOF</returns>
        </member>
        <member name="E:EnterpriseDT.Google.GData.Client.BaseFeedParser.NewAtomEntry">
            <summary>eventhandler, when the parser created a new feed entry</summary> 
        </member>
        <member name="E:EnterpriseDT.Google.GData.Client.BaseFeedParser.NewExtensionElement">
            <summary>eventhandler, when the parser finds an extension element</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.BaseFeedParser.Document">
            <summary>Read only accessor for doc</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.RssFeedParser.#ctor">
            <summary>standard empty constructor</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.RssFeedParser.Parse(System.IO.Stream,EnterpriseDT.Google.GData.Client.AtomFeed)">
            <summary>starts the parsing process</summary> 
            <param name="streamInput">input stream to parse </param>
            <param name="feed">the feed object to construct</param>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.CdCommand">
            <summary>  Change directory
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.2 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.EntryLink">
            <summary>
            GData schema extension describing a nested entry link.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.EntryLink.href">
            <summary>holds the href property of the EntryLink element</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.EntryLink.readOnly">
            <summary>holds the readOnlySet property of the EntryLink element</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.EntryLink.entry">
            <summary>holds the AtomEntry  property of the EntryLink element</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.EntryLink.rel">
            <summary>holds the rel attribute of the EntyrLink element</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.EntryLink.ParseEntryLink(System.Xml.XmlNode,EnterpriseDT.Google.GData.Client.AtomFeedParser)">
            <summary>parses an xml node to create an EntryLink object</summary> 
            <param name="node">entrylink node</param>
            <param name="parser">AtomFeedParser to use</param>
            <returns> the created EntryLink object</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.EntryLink.OnParsedNewEntry(System.Object,EnterpriseDT.Google.GData.Client.FeedParserEventArgs)">
            <summary>Event chaining. We catch this from the AtomFeedParser
            we want to set this to our property, and do not add the entry to the collection
            </summary> 
            <param name="sender"> the object which send the event</param>
            <param name="e">FeedParserEventArguments, holds the feed entry</param> 
            <returns> </returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.EntryLink.Save(System.Xml.XmlWriter)">
            <summary>
            Used to save the EntryLink instance into the passed in xmlwriter
            </summary>
            <param name="writer">the XmlWriter to write into</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.EntryLink.CreateInstance(System.Xml.XmlNode,EnterpriseDT.Google.GData.Client.AtomFeedParser)">
            <summary>
            factory method to create an instance of a batchinterrupt during parsing
            </summary>
            <param name="node">the xmlnode that is going to be parsed</param>
            <param name="parser">the feedparser that is used right now</param>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.EntryLink.Href">
            <summary>
            Entry  URI
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.EntryLink.ReadOnly">
            <summary>
            Read only flag.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.EntryLink.Entry">
            <summary>
             Nested entry (optional).
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.EntryLink.Rel">
            <summary>accessor method public string Rel</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.EntryLink.XmlName">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.EntryLink.EnterpriseDT#Google#GData#Client#IExtensionElementFactory#XmlName">
            <summary>
             returns the xml local name for this element
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.EntryLink.XmlNameSpace">
            <summary>
            returns the xml namespace for this element
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.EntryLink.XmlPrefix">
            <summary>
            returns the xml prefix to be used for this element
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.ContactsKindExtensions">
            <summary>
            helper to instantiate all factories defined in here and attach 
            them to a base object
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.ContactsKindExtensions.AddExtension(EnterpriseDT.Google.GData.Client.AtomBase)">
            <summary>
            helper to add all MediaRss extensions to a base object
            </summary>
            <param name="baseObject"></param>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.IContainsDeleted">
            <summary>if an extension element has a deleted member, it should implement
            this interface. 
            </summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.IContainsDeleted.Deleted">
            <summary>
            returns if an entry contains a Deleted extension. ReadOnly
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.ContactsRelationships">
            <summary>
            holds static strings indicating several often used relationship 
            values for the contacts API
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.ContactsRelationships.IsHome">
            <summary>
            indicates a home email in the rel field
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.ContactsRelationships.IsOther">
            <summary>
            indicates an undefined email in the rel field, label might be used to be
            more precise
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.ContactsRelationships.IsWork">
            <summary>
            indicates a work email in the rel field
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.ContactsRelationships.IsGeneral">
            <summary>
            indicates a general value in the rel field
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.ContactsRelationships.IsCar">
            <summary>
            indicates a car related value in the rel field
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.ContactsRelationships.IsFax">
            <summary>
            indicates a fax value in the rel field
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.ContactsRelationships.IsHomeFax">
            <summary>
            indicates a home fax value in the rel field
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.ContactsRelationships.IsWorkFax">
            <summary>
            indicates a work fax value in the rel field
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.ContactsRelationships.IsInternalExtension">
            <summary>
            indicates an internal extension value in the rel field
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.ContactsRelationships.IsMobile">
            <summary>
            indicates a mobile number value in the rel field
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.ContactsRelationships.IsPager">
            <summary>
            indicates a pager value in the rel field
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.ContactsRelationships.IsSatellite">
            <summary>
            indicates a satellite value in the rel field
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.ContactsRelationships.IsVoip">
            <summary>
            indicates a voip value in the rel field
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.ContactsRelationships.IsAssistant">
            <summary>
            Assistant's number
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.ContactsRelationships.IsCallback">
            <summary>
            Callback number
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.ContactsRelationships.IsCompanyMain">
            <summary>
            CompanyMain
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.ContactsRelationships.IsISDN">
            <summary>
            ISDN number
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.ContactsRelationships.IsMain">
            <summary>
            Main number
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.ContactsRelationships.IsOtherFax">
            <summary>
            OtherFax number
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.ContactsRelationships.IsRadio">
            <summary>
            Radio number
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.ContactsRelationships.IsTelex">
            <summary>
            Telex number
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.ContactsRelationships.IsTTY_TDD">
            <summary>
            TTY_TDD number
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.ContactsRelationships.IsWorkMobile">
            <summary>
            WorkMobile number
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.ContactsRelationships.IsWorkPager">
            <summary>
            WorkPager number
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.ContactsRelationships.IsNetmeeting">
            <summary>
            Netmeeting relationship
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.ContactsProtocols">
            <summary>
            holds static strings indicating several often used protocol 
            values for the contacts API in the IM element
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.ContactsProtocols.IsAIM">
            <summary>
            AOL Instant Messenger protocol
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.ContactsProtocols.IsMSN">
            <summary>
            MSN protocol
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.ContactsProtocols.IsYahoo">
            <summary>
            Yahoo protocol
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.ContactsProtocols.IsSkype">
            <summary>
            Skype protocol
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.ContactsProtocols.IsQQ">
            <summary>
            QQ protocol
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.ContactsProtocols.IsGoogleTalk">
            <summary>
            GoogleTalk protocol
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.ContactsProtocols.IsICQ">
            <summary>
            ICQ protocol
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.ContactsProtocols.IsJabber">
            <summary>
            Jabber protocol
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.EMail">
            <summary>
            gd:email schema extension describing an email address in contacts
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.CommonAttributesElement">
            <summary>
            a base class used for PostalAddress and others. 
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.LinkAttributesElement">
            <summary>
            a base class used for several contacts related classes and others. 
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.SimpleElement">
            <summary>
            Extensible enum type used in many places.
            compared to the base class, this one
            adds a default value which is the text content inside the 
            element node.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.ExtensionBase">
            <summary>
            Extensible type used in many places.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.ExtensionBase.attributes">
            <summary>
            this holds the attribute list for an extension element
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.ExtensionBase.#ctor(System.String,System.String,System.String)">
            <summary>
            constructor
            </summary>
            <param name="name">the xml name</param>
            <param name="prefix">the xml prefix</param>
            <param name="ns">the xml namespace</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.ExtensionBase.VersionInfoChanged">
            <summary>
            virtual to be overloaded by subclasses which are interested in reacting on versioninformation
            changes
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.ExtensionBase.SetXmlNamespace(System.String)">
            <summary>
            method for subclasses who need to change a namespace for parsing/persistence during runtime
            </summary>
            <param name="ns"></param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.ExtensionBase.getAttributes">
            <summary>
            returns the attributes list
            </summary>
            <returns>SortedList</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.ExtensionBase.getAttributeNamespaces">
            <summary>
            returns the attribute namespace list
            </summary>
            <returns>SortedList</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.ExtensionBase.ToString">
            <summary>
            debugging helper
            </summary>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.ExtensionBase.CreateInstance(System.Xml.XmlNode,EnterpriseDT.Google.GData.Client.AtomFeedParser)">
            <summary>Parses an xml node to create an instance of this  object.</summary> 
            <param name="node">the xml parses node, can be NULL</param>
            <param name="parser">the xml parser to use if we need to dive deeper</param>
            <returns>the created IExtensionElement object</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.ExtensionBase.ProcessChildNodes(System.Xml.XmlNode,EnterpriseDT.Google.GData.Client.AtomFeedParser)">
            <summary>
            used to copy the unknown childnodes for later saving
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.ExtensionBase.InitInstance(EnterpriseDT.Google.GData.Extensions.ExtensionBase)">
            <summary>
            used to copy the attribute lists over
            </summary>
            <param name="factory"></param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.ExtensionBase.ProcessAttributes(System.Xml.XmlNode)">
            <summary>
            default method override to handle attribute processing
            the base implementation does process the attributes list
            and reads all that are in there.
            </summary>
            <param name="node">XmlNode with attributes</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.ExtensionBase.Save(System.Xml.XmlWriter)">
            <summary>
            Persistence method for the EnumConstruct object
            </summary>
            <param name="writer">the xmlwriter to write into</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.ExtensionBase.SaveInnerXml(System.Xml.XmlWriter)">
            <summary>
            a subclass that want's to save addtional XML would need to overload this
            the default implementation does nothing
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.ExtensionBase.ProtocolMajor">
            <summary>
            returns the major protocol version number this element 
            is working against. 
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.ExtensionBase.ProtocolMinor">
            <summary>
            returns the minor protocol version number this element 
            is working against. 
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.ExtensionBase.Attributes">
            <summary>accesses the Attribute list. The keys are the attribute names
            the values the attribute values</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.ExtensionBase.AttributeNamespaces">
            <summary>accesses the Attribute list. The keys are the attribute names
            the values the attribute values</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.ExtensionBase.XmlName">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.ExtensionBase.XmlNameSpace">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.ExtensionBase.XmlPrefix">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.ExtensionBase.ChildNodes">
            <summary>
             returns the list of childnodes that are unknown to the extension
             used for example for the GD:ExtendedProperty
            </summary>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.SimpleElement.#ctor(System.String,System.String,System.String)">
            <summary>
            constructor
            </summary>
            <param name="name">the xml name</param>
            <param name="prefix">the xml prefix</param>
            <param name="ns">the xml namespace</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.SimpleElement.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            constructor
            </summary>
            <param name="name">the xml name</param>
            <param name="prefix">the xml prefix</param>
            <param name="ns">the xml namespace</param>
            <param name="value">the intial value</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.SimpleElement.ToString">
            <summary>
            debugging helper
            </summary>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.SimpleElement.CreateInstance(System.Xml.XmlNode,EnterpriseDT.Google.GData.Client.AtomFeedParser)">
            <summary>Parses an xml node to create an instance object.</summary> 
            <param name="node">the parsed xml node, can be NULL</param>
            <param name="parser">the xml parser to use if we need to dive deeper</param>
            <returns>the created SimpleElement object</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.SimpleElement.SaveInnerXml(System.Xml.XmlWriter)">
            <summary>
            saves the value, is called from Save
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.SimpleElement.Value">
            <summary>
             Accessor Method for the value as string
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.SimpleElement.IntegerValue">
            <summary>
             Accessor Method for the value as integer
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.SimpleElement.UnsignedIntegerValue">
            <summary>
             Accessor Method for the value as unsigned integer
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.SimpleElement.UnsignedLongValue">
            <summary>
             Accessor Method for the value as unsigned long
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.SimpleElement.FloatValue">
            <summary>
             Accessor Method for the value as float
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.SimpleElement.BooleanValue">
            <summary>
             Accessor Method for the value as boolean
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.ICommonAttributes">
            <summary>
             this interface defines a common set of properties found on classes derived
            from CommonAttributesElement (like EMail) and Organization.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.ICommonAttributes.Rel">
            <summary>
            presents the Rel attribute in the xml element
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.ICommonAttributes.Label">
            <summary>
            presents the Label attribute in the xml element
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.ICommonAttributes.Primary">
            <summary>
            presents the Primary attribute in the xml element
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.LinkAttributesElement.#ctor(System.String,System.String,System.String)">
            <summary>
            default constructore with namesapce init
            </summary>
            <param name="element"></param>
            <param name="prefix"></param>
            <param name="ns"></param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.LinkAttributesElement.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            default constructor with namespaces and an init value
            </summary>
            <param name="element"></param>
            <param name="prefix"></param>
            <param name="ns"></param>
            <param name="init"></param>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.LinkAttributesElement.Primary">
            <summary>accessor method public string Primary</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.LinkAttributesElement.Rel">
            <summary>accessor method for the Rel Value. Note you can only set this
            or Label, not both</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.LinkAttributesElement.Label">
            <summary>accessor method for the Label value. Note you can only set this or
            Rel, not both</summary> 
            <returns> </returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.CommonAttributesElement.#ctor(System.String,System.String,System.String)">
            <summary>
            default constructore with namesapce init
            </summary>
            <param name="element"></param>
            <param name="prefix"></param>
            <param name="ns"></param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.CommonAttributesElement.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            default constructor with namespaces and an init value
            </summary>
            <param name="element"></param>
            <param name="prefix"></param>
            <param name="ns"></param>
            <param name="init"></param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.CommonAttributesElement.IsType(System.String)">
            <summary>
            returns true if the element is of the given relationship type
            </summary>
            <param name="relationShip"></param>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.CommonAttributesElement.Home">
            <summary>
            returns if the email is the home email address
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.CommonAttributesElement.Work">
            <summary>
            returns if the email is the home email address
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.CommonAttributesElement.Other">
            <summary>
            returns if the email is the home email address
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.EMail.#ctor">
            <summary>
            default constructor for gd:email
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.EMail.#ctor(System.String)">
            <summary>
            default constructor for gd:email with an initial value for the email
            </summary>
            <param name="emailAddress">the initial email address</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.EMail.#ctor(System.String,System.String)">
            <summary>
            default constructor for gd:email with an initial value for the email
            and the relationship
            </summary>
            <param name="emailAddress">the initial email address</param>
            <param name="relationship">the value for the email relationship</param> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.EMail.#ctor(System.String,System.String,System.String)">
            <summary>
            default constructor for gd:mail with initialization of namespaces
            </summary>
            <param name="element"></param>
            <param name="prefix"></param>
            <param name="ns"></param>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.EMail.Address">
            <summary>accessor method public string Address</summary> 
            <returns> </returns>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Deleted">
            <summary>
            gd:deleted schema extension describing an deleted address in contacts
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Deleted.#ctor">
            <summary>
            default constructor for gd:deleted 
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.IMAddress">
            <summary>
            gd:deleted schema extension describing an deleted address in contacts
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.IMAddress.#ctor">
            <summary>
            default constructor for gd:deleted 
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.IMAddress.#ctor(System.String)">
            <summary>
            default constructor with an initial value
            </summary>
            <param name="initValue"></param>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.IMAddress.Protocol">
            <summary>accessor method for the protocol</summary> 
            <returns> </returns>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.PostalAddress">
            <summary>
            gd:PostalAddress element
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.PostalAddress.#ctor">
            <summary>
            default empty constructor for gd:PostalAddress
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.PostalAddress.#ctor(System.String)">
            <summary>
             default constructor with an initial value
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.PhoneNumber">
            <summary>
            gd:phonenumber element
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.PhoneNumber.#ctor">
            <summary>
            default empty constructor for gd:phonenumber
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.PhoneNumber.#ctor(System.String)">
            <summary>
             default constructor with an initial value
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.PhoneNumber.Uri">
            <summary>accessor method public string uri</summary> 
            <returns> </returns>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Organization">
            <summary>
            GData schema extension describing an organization
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.SimpleContainer">
            <summary>
            base class to implement extensions holding extensions
            TODO: at one point think about using this as the base for atom:base
            as there is some utility overlap between the 2 of them
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.SimpleContainer.#ctor(System.String,System.String,System.String)">
            <summary>
            constructor
            </summary>
            <param name="name">the xml name</param>
            <param name="prefix">the xml prefix</param>
            <param name="ns">the xml namespace</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.SimpleContainer.FindExtension(System.String,System.String)">
            <summary>
            Finds a specific ExtensionElement based on it's local name
            and it's namespace. If namespace is NULL, the first one where
            the localname matches is found. If there are extensionelements that do 
            not implment ExtensionElementFactory, they will not be taken into account
            </summary>
            <param name="localName">the xml local name of the element to find</param>
            <param name="ns">the namespace of the elementToPersist</param>
            <returns>Object</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.SimpleContainer.ReplaceExtension(System.String,System.String,EnterpriseDT.Google.GData.Client.IExtensionElementFactory)">
            <summary>
            all extension elements that match a namespace/localname
            given will be removed and the new one will be inserted
            </summary> 
            <param name="localName">the local name to find</param>
            <param name="ns">the namespace to match, if null, ns is ignored</param>
            <param name="obj">the new element to put in</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.SimpleContainer.ReplaceFactory(System.String,System.String,EnterpriseDT.Google.GData.Client.IExtensionElementFactory)">
            <summary>
            all extension element factories that match a namespace/localname
            given will be removed and the new one will be inserted
            </summary> 
            <param name="localName">the local name to find</param>
            <param name="ns">the namespace to match, if null, ns is ignored</param>
            <param name="obj">the new element to put in</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.SimpleContainer.FindExtensions(System.String,System.String)">
            <summary>
            Finds all ExtensionElement based on it's local name
            and it's namespace. If namespace is NULL, allwhere
            the localname matches is found. If there are extensionelements that do 
            not implment ExtensionElementFactory, they will not be taken into account
            Primary use of this is to find XML nodes
            </summary>
            <param name="localName">the xml local name of the element to find</param>
            <param name="ns">the namespace of the element to find</param>
            <returns>none</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.SimpleContainer.FindExtensions``1(System.String,System.String)">
            <summary>
            Finds all ExtensionElement based on it's local name
            and it's namespace. If namespace is NULL, allwhere
            the localname matches is found. If there are extensionelements that do 
            not implment ExtensionElementFactory, they will not be taken into account
            Primary use of this is to find XML nodes
            </summary>
            <param name="localName">the xml local name of the element to find</param>
            <param name="ns">the namespace of the element to find</param>
            <returns>none</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.SimpleContainer.DeleteExtensions(System.String,System.String)">
            <summary>
            Delete's all Extensions from the Extension list that match
            a localName and a Namespace. 
            </summary>
            <param name="localName">the local name to find</param>
            <param name="ns">the namespace to match, if null, ns is ignored</param>
            <returns>int - the number of deleted extensions</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.SimpleContainer.CreateInstance(System.Xml.XmlNode,EnterpriseDT.Google.GData.Client.AtomFeedParser)">
            <summary>Parses an xml node to create a Who object.</summary> 
            <param name="node">the node to work on, can be NULL</param>
            <param name="parser">the xml parser to use if we need to dive deeper</param>
            <returns>the created SimpleElement object</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.SimpleContainer.VersionInfoChanged">
            <summary>
            need so setup the namespace based on the version information     
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.SimpleContainer.ProcessChildNodes(System.Xml.XmlNode,EnterpriseDT.Google.GData.Client.AtomFeedParser)">
            <summary>
            used to copy the unknown childnodes for later saving
            </summary>
            <param name="node">the node to process</param>
            <param name="parser">the feed parser to pass down if need be</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.SimpleContainer.SaveInnerXml(System.Xml.XmlWriter)">
            <summary>
            saves out the inner xml, so all of our subelements
            get's called from Save, whcih takes care of saving attributes
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.SimpleContainer.ExtensionElements">
            <summary>the list of extensions for this container
            the elements in that list MUST implement IExtensionElementFactory 
            and IExtensionElement</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.SimpleContainer.ExtensionFactories">
            <summary>the list of extensions for this container
            the elements in that list MUST implement IExtensionElementFactory 
            and IExtensionElement</summary> 
            <returns> </returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Organization.#ctor">
            <summary>
            default constructor for media:group
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Organization.Rel">
            <summary>accessor method for the Rel Value. Note you can only set this
            or Label, not both</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Organization.Label">
            <summary>accessor method for the Label value. Note you can only set this or
            Rel, not both</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Organization.Name">
            <summary>
            sets the value of the OrgName element
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Organization.Title">
            <summary>
            access the OrgTitle element to set/get the title
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Organization.Symbol">
            <summary>
            Symbol of the organization.
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Organization.Department">
            <summary>
            Department of the organization.
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Organization.JobDescription">
            <summary>
            Job Description in the organization.
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Organization.Location">
            <summary>
            Location associated with the organization
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Organization.Primary">
            <summary>accessor method public string Primary</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Organization.Home">
            <summary>
            returns if the email is the home email address
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Organization.Other">
            <summary>
            returns if the email is the home email address
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.OrgName">
            <summary>
            gd:OrgName schema extension describing an organization name
            it's a child of Organization
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.OrgName.#ctor">
            <summary>
            default constructor for gd:OrgName 
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.OrgName.#ctor(System.String)">
            <summary>
            default constructor for gd:OrgName  with an initial value
            </summary>
            <param name="initValue"/>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.OrgTitle">
            <summary>
            gd:OrgTitle schema extension describing the title of a person in an organization
            it's a child of Organization
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.OrgTitle.#ctor">
            <summary>
            default constructor for gd:OrgTitle 
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.OrgTitle.#ctor(System.String)">
            <summary>
            default constructor for gd:OrgTitle  with an initial value
            </summary>
            <param name="initValue"/>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.OrgDepartment">
            <summary>
            describes a department within an organization.
            it's a child of Organization
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.OrgDepartment.#ctor">
            <summary>
            default constructor for gd:OrgDepartment 
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.OrgDepartment.#ctor(System.String)">
            <summary>
            default constructor for gd:OrgDepartment  with an initial value
            </summary>
            <param name="initValue"/>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.OrgJobDescription">
            <summary>
            Describes a job within an organization.
            it's a child of Organization
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.OrgJobDescription.#ctor">
            <summary>
            default constructor for gd:XmlOrgJobDescriptionElement 
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.OrgJobDescription.#ctor(System.String)">
            <summary>
            default constructor for gd:XmlOrgJobDescriptionElement  with an initial value
            </summary>
            <param name="initValue"/>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.OrgSymbol">
            <summary>
            Provides a symbol of an organization
            it's a child of Organization
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.OrgSymbol.#ctor">
            <summary>
            default constructor for OrgSymbol
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.OrgSymbol.#ctor(System.String)">
            <summary>
            default constructor for OrgSymbol with an initial value
            </summary>
            <param name="initValue"/>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.PhoneticName">
            <summary>
            Phoneticname schema extension 
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.PhoneticName.#ctor(System.String,System.String,System.String)">
            <summary>
            default constructor for PhoneticName
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.PhoneticName.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            default constructor for PhoneticName with an initial value
            </summary>
            <param name="initValue"/>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.PhoneticName.Yomi">
            <summary>
            Phonetic representation
            </summary>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.GivenName">
            <summary>
            GivenName schema extension 
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.GivenName.#ctor">
            <summary>
            default constructor for GivenName
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.GivenName.#ctor(System.String,System.String)">
            <summary>
            default constructor for GivenName with an initial value
            </summary>
            <param name="initValue"/>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Name">
            <summary>
            Allows storing person's name in a structured way. Consists of given name, additional name, family name, prefix, suffix and full name
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Name.#ctor">
            <summary>
            default constructor for Name
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Name.GivenName">
            <summary>
            Person's given name.
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Name.GivenNamePhonetics">
            <summary>
            Person's given name phonetics
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Name.AdditionalName">
            <summary>
            Additional name of the person, eg. middle name.
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Name.AdditionalNamePhonetics">
            <summary>
            Person's additional name phonetics
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Name.FamilyName">
            <summary>
            Person's family name.
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Name.FamilyNamePhonetics">
            <summary>
            FamilyName phonetics
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Name.NamePrefix">
            <summary>
            Honorific prefix, eg. 'Mr' or 'Mrs'.
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Name.NameSuffix">
            <summary>
            Honorific suffix, eg. 'san' or 'III'.
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Name.FullName">
            <summary>
            Unstructured representation of the name
            </summary>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.AdditionalName">
            <summary>
            AdditionalName schema extension 
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.AdditionalName.#ctor">
            <summary>
            default constructor for AdditionalName
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.AdditionalName.#ctor(System.String,System.String)">
            <summary>
            default constructor for AdditionalName with an initial value
            </summary>
            <param name="initValue"/>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.FamilyName">
            <summary>
            FamilyName schema extension 
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.FamilyName.#ctor">
            <summary>
            default constructor for AdditionalName
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.FamilyName.#ctor(System.String,System.String)">
            <summary>
            default constructor for AdditionalName with an initial value
            </summary>
            <param name="initValue"/>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.NamePrefix">
            <summary>
            NamePrefix schema extension 
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.NamePrefix.#ctor">
            <summary>
            default constructor for NamePrefix
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.NamePrefix.#ctor(System.String)">
            <summary>
            default constructor for NamePrefix with an initial value
            </summary>
            <param name="initValue"/>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.NameSuffix">
            <summary>
            NameSuffix schema extension 
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.NameSuffix.#ctor">
            <summary>
            default constructor for NameSuffix
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.NameSuffix.#ctor(System.String)">
            <summary>
            default constructor for NameSuffix with an initial value
            </summary>
            <param name="initValue"/>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.FullName">
            <summary>
            FullName schema extension 
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.FullName.#ctor">
            <summary>
            default constructor for FullName
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.FullName.#ctor(System.String)">
            <summary>
            default constructor for FullName with an initial value
            </summary>
            <param name="initValue"/>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.StructuredPostalAddress">
            <summary>
            Postal address split into components. It allows to store the address in locale independent 
            format. The fields can be interpreted and used to generate formatted, locale dependent 
            address. The following elements reperesent parts of the address: agent, house name, street, 
            P.O. box, neighborhood, city, subregion, region, postal code, country. The subregion element 
            is not used for postal addresses, it is provided for extended uses of addresses only. In 
            order to store postal address in an unstructured form formatted address field is provided.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.StructuredPostalAddress.#ctor">
            <summary>
            default constructor for StructuredPostalAddress
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.StructuredPostalAddress.Primary">
            <summary>accessor method public string Primary</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.StructuredPostalAddress.Rel">
            <summary>accessor method for the Rel Value. Note you can only set this
            or Label, not both</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.StructuredPostalAddress.Label">
            <summary>accessor method for the Label value. Note you can only set this or
            Rel, not both</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.StructuredPostalAddress.Usage">
            <summary>The context in which this addess can be used. Local addresses 
            may differ in layout from general addresses, and frequently use local 
            script (as opposed to Latin script) as well, though local script is 
            allowed in general addresses. Unless specified general usage is assumed.</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.StructuredPostalAddress.MailClass">
            <summary>Classes of mail accepted at the address.
             Unless specified both is assumed</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.StructuredPostalAddress.Agent">
            <summary>
            The agent who actually receives the mail. 
            Used in work addresses. Also for 'in care of' or 'c/o'.
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.StructuredPostalAddress.Housename">
            <summary>
            Used in places where houses or buildings have names 
            (and not necessarily numbers), eg. "The Pillars".
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.StructuredPostalAddress.Street">
            <summary>
            Can be street, avenue, road, etc. This element also
             includes the house number and room/apartment/flat/floor number.
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.StructuredPostalAddress.Pobox">
            <summary>
            Covers actual P.O. boxes, drawers, locked bags, etc. 
            This is usually but not always mutually exclusive with street.
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.StructuredPostalAddress.Neighborhood">
            <summary>
            This is used to disambiguate a street address when a city contains more 
            than one street with the same name, or to specify a small place whose 
            mail is routed through a larger postal town. In China it could be a 
            county or a minor city.
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.StructuredPostalAddress.City">
            <summary>
            Can be city, village, town, borough, etc. This is the postal town and not 
            necessarily the place of residence or place of business.
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.StructuredPostalAddress.Subregion">
            <summary>
            Handles administrative districts such as U.S. or U.K. counties that are not 
            used for mail addressing purposes. Subregion is not intended for delivery 
            addresses.
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.StructuredPostalAddress.Region">
            <summary>
            A state, province, county (in Ireland), Land (in Germany), departement 
            (in France), etc.
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.StructuredPostalAddress.Postcode">
            <summary>
            Postal code. Usually country-wide, but sometimes specific to the city 
            (e.g. "2" in "Dublin 2, Ireland" addresses).
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.StructuredPostalAddress.Country">
            <summary>
            The name or code of the country.
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.StructuredPostalAddress.FormattedAddress">
            <summary>
            The full, unstructured postal address.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Agent">
            <summary>
            Agent schema extension 
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Agent.#ctor">
            <summary>
            default constructor for Agent
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Agent.#ctor(System.String)">
            <summary>
            default constructor for Agent with an initial value
            </summary>
            <param name="initValue"/>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Housename">
            <summary>
            Housename schema extension 
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Housename.#ctor">
            <summary>
            default constructor for Housename
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Housename.#ctor(System.String)">
            <summary>
            default constructor for Housename with an initial value
            </summary>
            <param name="initValue"/>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Street">
            <summary>
            Street schema extension 
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Street.#ctor">
            <summary>
            default constructor for Street
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Street.#ctor(System.String)">
            <summary>
            default constructor for Street with an initial value
            </summary>
            <param name="initValue"/>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Pobox">
            <summary>
            Pobox schema extension 
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Pobox.#ctor">
            <summary>
            default constructor for Pobox
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Pobox.#ctor(System.String)">
            <summary>
            default constructor for Pobox with an initial value
            </summary>
            <param name="initValue"/>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Neighborhood">
            <summary>
            Neighborhood schema extension 
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Neighborhood.#ctor">
            <summary>
            default constructor for Neighborhood
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Neighborhood.#ctor(System.String)">
            <summary>
            default constructor for Neighborhood with an initial value
            </summary>
            <param name="initValue"/>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.City">
            <summary>
            City schema extension 
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.City.#ctor">
            <summary>
            default constructor for City
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.City.#ctor(System.String)">
            <summary>
            default constructor for City with an initial value
            </summary>
            <param name="initValue"/>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Subregion">
            <summary>
            Subregion schema extension 
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Subregion.#ctor">
            <summary>
            default constructor for Subregion
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Subregion.#ctor(System.String)">
            <summary>
            default constructor for Subregion with an initial value
            </summary>
            <param name="initValue"/>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Region">
            <summary>
            Region schema extension 
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Region.#ctor">
            <summary>
            default constructor for Region
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Region.#ctor(System.String)">
            <summary>
            default constructor for Region with an initial value
            </summary>
            <param name="initValue"/>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Postcode">
            <summary>
            Postcode schema extension 
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Postcode.#ctor">
            <summary>
            default constructor for Postcode
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Postcode.#ctor(System.String)">
            <summary>
            default constructor for Postcode with an initial value
            </summary>
            <param name="initValue"/>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Country">
            <summary>
            Country schema extension 
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Country.#ctor">
            <summary>
            default constructor for Country
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Country.#ctor(System.String)">
            <summary>
            default constructor for Country with an initial value
            </summary>
            <param name="initValue"/>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.FormattedAddress">
            <summary>
            FormattedAddress schema extension 
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.FormattedAddress.#ctor">
            <summary>
            default constructor for FormattedAddress
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.FormattedAddress.#ctor(System.String)">
            <summary>
            default constructor for FormattedAddress with an initial value
            </summary>
            <param name="initValue"/>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPException">
            <summary>  
            FTP specific exceptions
            </summary>
            <author>      Bruce Blackshaw
            </author>
            <version>     $Revision: 1.16 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FileTransferException">
            <summary>  
            Exceptions specific to file transfer protocols
            </summary>
            <author>Bruce Blackshaw</author>
            <version>$Revision: 1.5 $</version>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FileTransferException.replyCode">
            <summary>  Integer reply code</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FileTransferException.#ctor(System.String)">
            <summary>   
            Constructor. Delegates to super.
            </summary>
            <param name="msg">  Message that the user will be
            able to retrieve
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FileTransferException.#ctor(System.String,System.Exception)">
            <summary>   
            Constructor. Delegates to super.
            </summary>
            <param name="msg">Message that the user will be able to retrieve</param>
            <param name="innerException">Exception that caused this exception</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FileTransferException.#ctor(System.String,System.String)">
            <summary>Constructor. Permits setting of reply code</summary>
            <param name="msg">message that the user will be able to retrieve</param>
            <param name="replyCode">string form of reply code</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FileTransferException.#ctor(System.String,System.Int32)">
            <summary>  
            Constructor. Permits setting of reply code
            </summary>
            <param name="msg">       
            message that the user will be able to retrieve
            </param>
            <param name="replyCode"> string form of reply code
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FileTransferException.ReplyCode">
            <summary>Get the reply code if it exists</summary>
            <returns>reply if it exists, -1 otherwise</returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FileTransferException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPException.#ctor(System.String)">
            <summary>   
            Basic constructor allowing exception message to be set
            </summary>
            <param name="msg">Message that the user will be able to retrieve</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPException.#ctor(System.String,System.Exception)">
            <summary>   
            Basic constructor allowing exception message to be set
            </summary>
            <param name="msg">Message that the user will be able to retrieve</param>
            <param name="innerException">Exception that caused this exception</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPException.#ctor(System.String,System.String)">
            <summary>Constructor. Permits setting of reply code
            
            </summary>
            <param name="msg">message that the user will be able to retrieve
            </param>
            <param name="replyCode">string form of reply code </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPException.#ctor(System.String,System.Int32)">
            <summary>
            Constructor. Permits setting of reply code
            </summary>
            <param name="msg">message that the user will be able to retrieve</param>
            <param name="replyCode">reply code</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPException.#ctor(EnterpriseDT.Net.Ftp.FTPReply)">
            <summary>
            Constructor. Permits setting of reply code
            </summary>
            <param name="reply">reply object</param>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPAuthenticationException">
            <summary>  
            FTP authentication exceptions
            </summary>
            <author>      Bruce Blackshaw
            </author>
            <version>     $Revision: 1.16 $
            
            </version>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPAuthenticationException.#ctor(System.String)">
            <summary>   
            Basic constructor allowing exception message to be set
            </summary>
            <param name="msg">Message that the user will be able to retrieve</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPAuthenticationException.#ctor(System.String,System.Int32)">
            <summary>   
            Basic constructor allowing exception message to be set
            </summary>
            <param name="msg">Message that the user will be able to retrieve</param>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPTransferCancelledException">
            <summary>
            Thrown when a recursive operation is aborted.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPTransferCancelledException.#ctor(System.String,System.Int64)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message.</param>
            <param name="bytesTransferred">Number of bytes transferred before the transfer was cancelled.</param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPTransferCancelledException.BytesTransferred">
            <summary>
            Number of bytes transferred before the transfer was cancelled.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPConnectionClosedException">
            <summary>
            Thrown when the server terminates the connection
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnectionClosedException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message.</param>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.MalformedReplyException">
            <summary>
            Thrown when the client receives an invalid reply to a command.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.MalformedReplyException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message.</param>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.ControlChannelIOException">
            <summary>
            Thrown when the client receives an invalid reply to a command.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.ProtocolNegotiationHandler.log">
            <summary> Logging object</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.PlainSocket.log">
            <summary> Logging object</summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ssh.Routrek.SSHC.ISSHChannelEventReceiver">
            <summary>
            Channel specific receiver 
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.ASCIICommand">
            <summary>  Change to ASCII
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.2 $
            
            </version>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPDirectoryCache.dirCache">
            <summary>
            Cache of directory listings
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPDirectoryCache.ClearDirectoryCache">
            <summary>
            Clears the directory cache completely.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPDirectoryCache.ClearDirectoryCache(System.String)">
            <summary>
            Clears a particular directory-listing from the directory cache.
            </summary>
            <param name="directory">Directory to remove.</param>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.AtomIcon">
            <summary>atomIcon object representation. 
                The "atom:icon" element's content is an IRI reference [RFC3987] which identifies an image which provides 
                iconic visual identification for a feed.
                The image SHOULD have an aspect ratio of one (horizontal) to one (vertical), and SHOULD be suitable 
                for presentation at a small size.
            </summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomIcon.XmlName">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Ssl.SecureProtocol">
            <summary>
            Specifies the type of security protocol that an instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/> class can use.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SecureProtocol.None">
            <summary>No security protocol will be used. The SecureSocket will act as a normal Socket.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SecureProtocol.Ssl3">
            <summary>SSLv3 will be used to authenticate the client and encrypt the data.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SecureProtocol.Tls1">
            <summary>TLS will be used to authenticate the client and encrypt the data.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SecureProtocol.Tls11">
            <summary>TLS 1.1 will be used to authenticate the client and encrypt the data.</summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Ssl.SecurityFlags">
            <summary>
            Specifies the different security flags that an instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/> class can use.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SecurityFlags.Default">
            <summary>No special behavior is required.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SecurityFlags.MutualAuthentication">
            <summary>
            Client authentication is required. This flag only has an effect on server sockets.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SecurityFlags.DontSendEmptyRecord">
            <summary>
            To avoid a certain CBC IV attack, the Security Library sends an empty message after the handshake and before the actual application payload.
            Unfortunately, some broken implementations do not support empty packets, so sending these empty packets can be turned off
            by specifying the DontSendEmptyRecord flag.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SecurityFlags.IgnoreMaxProtocol">
            <summary>
            Setting this flag will allow a client to issue a SSLv3.0 version number as latest version supported in the premaster secret, even when TLSv1.0 (version 3.1) was announced in the client hello. Normally this is forbidden to prevent version rollback attacks.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SecurityFlags.DisableSessionResumption">
            <summary>
            Setting this flag will allow a client to disable session resumption
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Ssl.ConnectionEnd">
            <summary>
            Specifies the different connection end values.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.ConnectionEnd.Server">
            <summary>The <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/> is a server socket.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.ConnectionEnd.Client">
            <summary>The <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/> is a client socket.</summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Ssl.SslAlgorithms">
            <summary>
            Specifies the different cipher suites and compression algorithms.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SslAlgorithms.NONE">
            <summary>No encryption or compression.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SslAlgorithms.RSA_RC4_40_MD5">
            <summary>RC4 encryption with a 40 bit key and an MD5 hash.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SslAlgorithms.RSA_RC4_128_MD5">
            <summary>RC4 encryption with a 128 bit key and an MD5 hash.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SslAlgorithms.RSA_RC4_128_SHA">
            <summary>RC4 encryption with a 128 bit key and a SHA1 hash.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SslAlgorithms.RSA_RC2_40_MD5">
            <summary>RC2 encryption with a 40 bit key and an MD5 hash.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SslAlgorithms.RSA_DES_56_SHA">
            <summary>DES encryption with a 56 bit key and a SHA1 hash.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SslAlgorithms.RSA_3DES_168_SHA">
            <summary>Triple DES encryption with a 168 bit key and a SHA1 hash.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SslAlgorithms.RSA_DES_40_SHA">
            <summary>DES encryption with a 40 bit key and a SHA1 hash.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SslAlgorithms.RSA_AES_128_SHA">
            <summary>AES encryption with a 128 bit key and a SHA1 hash.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SslAlgorithms.RSA_AES_256_SHA">
            <summary>AES encryption with a 256 bit key and a SHA1 hash.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SslAlgorithms.SECURE_CIPHERS">
            <summary>Cipher Suites that are currently considered secure. As a convenience, this value also specifies NULL compression.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SslAlgorithms.NULL_COMPRESSION">
            <summary>No compression. This value must always be specified; it is currently the only supported compression algorithm.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SslAlgorithms.ALL">
            <summary>All encryption and compression algorithms.</summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Ssl.CredentialVerification">
            <summary>
            Specifies the method used to verify the remote credential.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.CredentialVerification.Manual">
            <summary>The remote certificate will be manually verified. When an incoming connection is accepted, the SecureSocket will raise a CertVerification event. This is the recommended credential verification method.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.CredentialVerification.Auto">
            <summary>The remote certificate will be automatically verified by the crypto API.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.CredentialVerification.AutoWithoutCName">
            <summary>The remote certificate will be automatically verified by the crypto API, but the common name of the server will not be checked.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.CredentialVerification.None">
            <summary>The remote certificate will not be verified. This method is not secure and should only be used for debugging purposes.</summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Ssl.CertVerifyEventHandler">
            <summary>
            References the method to be called when the remote certificate should be verified.
            </summary>
            <param name="socket">The <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/> that received the certificate to verify.</param>
            <param name="remote">The <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> of the remote party to verify. This parameter is a null reference (<b>Nothing</b> in Visual Basic) if the other side sent an empty certificate message.</param>
            <param name="chain">The <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain"/> associated with the remote certificate. This parameter is a null reference (<b>Nothing</b> in Visual Basic) if the other side sent an empty certificate message.</param>
            <param name="e">A <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.VerifyEventArgs"/> instance used to (in)validate the certificate. If this parameter is <b>true</b> after the delegate returns, the SecureSocket will continue the connection. If this parameter is <b>false</b> after the delegate returns, the connection will be closed.</param>
            <remarks>
            If an error is thrown by the code in the delegate, the SecureSocket will close the connection.
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Ssl.CertRequestEventHandler">
            <summary>
            References the method to be called when the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/> receives a <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> request from the peer.
            </summary>
            <param name="socket">The SecureSocket that received the certificate request.</param>
            <param name="acceptable">An instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList"/> class that contains a list of relative distinguished names. If the client chooses to send a certificate to the remote server, the CA that signed this certificate should be in the list of distinguished names.</param>
            <param name="e">A <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.RequestEventArgs"/> instance used to pass the certificate to the SecureSocket.</param>
            <remarks>
            <para>This delegate is only used by client sockets</para>
            <para>If an error is thrown by the code in the delegate, the SecureSocket will close the connection.</para>
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Spreadsheets.WorksheetQuery">
            <summary>
            A subclass of DocumentQuery, to create a Spreadsheets worksheet query URI.
            Provides public properties that describe the different
            aspects of the URI, as well as a composite URI.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.DocumentQuery">
            <summary>
            A subclass of FeedQuery, to create a document based query URI.
            Provides public properties that describe the different
            aspects of the URI, as well as a composite URI.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.FeedQuery">
            <summary>Base class to create a GData query URI. Provides public 
            properties that describe the different aspects of the URI
            as well as a composite URI.
            </summary> 
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.ISupportsEtag">
            <summary>
            interface to indicate that an element supports an Etag. Currently implemented on AbstractEntry,
            AbstractFeed and GDataRequest
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.ISupportsEtag.Etag">
            <summary>set the etag for updates</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.FeedQuery.query">
            <summary>baseUri property holder</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.FeedQuery.categories">
            <summary>category part as string, comma seperated</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.FeedQuery.author">
            <summary>author part as string</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.FeedQuery.extraParameters">
            <summary>extra parameters as string</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.FeedQuery.datetimeMin">
            <summary>mininum date/time as DateTime</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.FeedQuery.datetimeMax">
            <summary>maximum date/time as DateTime</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.FeedQuery.publishedMin">
            <summary>mininum date/time for the publicationdate as DateTime</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.FeedQuery.publishedMax">
            <summary>maximum date/time for the publicationdate as DateTime</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.FeedQuery.startIndex">
            <summary>start-index as integer</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.FeedQuery.numToRetrieve">
            <summary>number of entries to retrieve as integer</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.FeedQuery.altFormat">
            <summary>alternative format as AlternativeFormat</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.FeedQuery.oauthRequestorId">
            <summary>the oauth requestor id</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.FeedQuery.baseUri">
            <summary>the base URI</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.FeedQuery.#ctor">
            <summary>Default constructor.</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.FeedQuery.#ctor(System.String)">
            <summary>constructor taking a base URI constructor. Note, that
            if this form is used, the string will not be parsed. So a uri that
            would have additional query parameters will not have this reflected. 
            this version is primarily there to be used on mobile devices, as on 
            mobile we don't have URI parsing code available.
            </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.FeedQuery.PrepareQuery(EnterpriseDT.Google.GData.Client.FeedQuery,EnterpriseDT.Google.GData.Client.RequestSettings)">
            <summary>
            helper method to setup a query object with some parameters 
            based on a requestsettings
            </summary>
            <param name="q"></param>
            <param name="settings"></param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.FeedQuery.GetBaseUri">
            <summary>
            Returns the base Uri for the feed.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.FeedQuery.Parse(System.Uri,EnterpriseDT.Google.GData.Client.Service@,EnterpriseDT.Google.GData.Client.FeedQuery@)">
            <summary>Passing in a complete URI, we strip all the
            GData query-related things and then treat the rest
            as the base URI. For this we create a service.</summary> 
            <param name="uri">a complete URI</param>
            <param name="service">the new GData service for this URI</param>
            <param name="query">the parsed query object for this URI</param>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.FeedQuery.etag">
            <summary>
            supports the etag for a query. Setting this etag here will create an if-notmatch
            query with the etag given. 
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.FeedQuery.ParseUri(System.Uri)">
            <summary>protected void ParseUri</summary> 
            <param name="targetUri">takes an incoming Uri string and parses all the properties out of it</param>
            <returns>throws a query exception when it finds something wrong with the input, otherwise returns a baseuri</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.FeedQuery.ParseCategoryQueryString(System.String)">
            <summary>
            this will take the complete parameter string and split it into parts
            </summary>
            <param name="categories"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.FeedQuery.ParseCategoryString(System.String)">
            <summary>
            this will take one category part and parse it
            </summary>
            <param name="category"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.FeedQuery.ParseUri(System.String)">
            <summary>protected void ParseUri</summary> 
            <param name="target">takes an incoming string and parses all the properties out of it</param>
            <returns>throws a query exception when it finds something wrong with the input, otherwise returns a baseuri</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.FeedQuery.CleanPart(System.String)">
            <summary>Takes an incoming URI segment and removes leading/trailing slashes.</summary> 
            <param name="part">the URI segment to clean</param>
            <returns>the cleaned string</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.FeedQuery.ValidateUri(System.Uri)">
            <summary>Checks to see if the URI is valid to be used for an Atom query.</summary> 
            <returns>Throws a client exception if not</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.FeedQuery.Reset">
            <summary>Resets object state to default, as if newly created.
            </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.FeedQuery.CalculateQuery(System.String)">
            <summary>Creates the complete URI query string based on all set properties.</summary> 
            <returns> string => the query part of the URI</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.FeedQuery.InsertionParameter(System.String)">
            <summary>
            checks if the passed in string contains a "?" and if so returns the &amp; as the insertion char
            </summary>
            <param name="basePath"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.FeedQuery.AppendQueryPart(System.String,System.String,System.Char,System.Text.StringBuilder)">
            <summary>
            helper to format a string parameter into the query
            </summary>
            <param name="value"></param>
            <param name="parameterName"></param>
            <param name="connect"></param>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.FeedQuery.AppendQueryPart(System.Int32,System.Int32,System.String,System.Char,System.Text.StringBuilder)">
            <summary>
            helper to format an integer parameter into the query
            </summary>
            <param name="value"></param>
            <param name="defValue">default value</param>
            <param name="parameterName"></param>
            <param name="connect"></param>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.FeedQuery.AppendQueryPart(System.UInt32,System.UInt32,System.String,System.Char,System.Text.StringBuilder)">
            <summary>
            helper to format an unsigned integer parameter into the query
            </summary>
            <param name="value"></param>
            <param name="defValue">default value</param>
            <param name="parameterName"></param>
            <param name="connect"></param>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.FeedQuery.AppendQueryPart(System.DateTime,System.String,System.Char,System.Text.StringBuilder)">
            <summary>
            helper to format a DateTime parameter into the query
            </summary>
            <param name="value"></param>
            <param name="parameterName"></param>
            <param name="connect"></param>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.FeedQuery.FormatToString(EnterpriseDT.Google.GData.Client.AlternativeFormat)">
            <summary>Converts an AlternativeFormat to a string for use in
            the query string.</summary> 
            <param name="format">the format that we want to be converted to string </param>
            <returns>string version of the format</returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.FeedQuery.BaseAddress">
            <summary>
             this will simply return/set the baseUri without any parsing as a string
             this is the same as using the constructor for most cases, it is here to allow the creation
            of template methods.
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.FeedQuery.Uri">
            <summary>We do not hold on to the precalculated Uri.
            It's safer and cheaper to calculate this on the fly.
            Setting this loses the base Uri.
            Note that the result of this is effected by the UseSSL flag. 
            so if you created this with a NON ssl string, but the flag states you 
            want to use SSL, this will result in an HTTPS URI
            </summary> 
            <returns>returns the complete UriPart that is used to execute the query</returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.FeedQuery.CategoryQueriesAsParameter">
            <summary>accessor method public bool CategoryQueriesAsParameter</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.FeedQuery.UseSSL">
            <summary>
            indicates if constructed feed URIs should use http or https
            - if you pass in a full URI, this one will get changed from http to https
            or the other way round. This is mostly relevant for hosted domains. 
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.FeedQuery.Query">
            <summary>Accessor method public string Query.</summary> 
            <returns>returns the query string portion of the URI</returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.FeedQuery.OAuthRequestorId">
            <summary>set's the OAuth Requestor Identifier. Only useful if 
            you are using the OAuthFactory as well. 
            </summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.FeedQuery.Categories">
            <summary>Accessor method public string Category.</summary> 
            <returns>the category filter</returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.FeedQuery.Etag">
            <summary>
            the Etag value that should be used in the query. Setting this will create an if-match or if-not match
            header
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.FeedQuery.ExtraParameters">
            <summary>ExtraParameters holds a string that just get's added to the
            query string per se. The parameter should honor URL encoding, the library
            will not touch it's value, but just append it to the existing query. The 
            URL parameter characters will be inserted by the FeedQuery object.</summary> 
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.FeedQuery.Author">
            <summary>Accessor method public string Author.</summary> 
            <returns>the requested author</returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.FeedQuery.StartDate">
            <summary>set's the mininum daterange value for the updated element</summary> 
            <returns>the min (inclusive) date/time</returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.FeedQuery.EndDate">
            <summary>set's the maximum daterange value for the updated element</summary> 
            <returns>the max (exclusive) date/time</returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.FeedQuery.MinPublication">
            <summary>set's the mininum daterange value for the publication element</summary> 
            <returns>the min (inclusive) date/time</returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.FeedQuery.MaxPublication">
            <summary>set's the maximum daterange value for the publication element</summary> 
            <returns>the max (exclusive) date/time</returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.FeedQuery.ModifiedSince">
            <summary>
            set's the ModifiedSince date. If this is set to something different than
            DateTime.MinValue, and the FeedQuery object is used for a Service.Query
            call, this will cause an ifmodified Since header to be created.
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.FeedQuery.StartIndex">
            <summary>Accessor method public int StartIndex.</summary> 
            <returns>the start-index query parameter, a 1-based index
            indicating the first result to be retrieved.</returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.FeedQuery.NumberToRetrieve">
            <summary>Accessor method public int NumberToRetrieve.</summary> 
            <returns>the number of entries to retrieve</returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.FeedQuery.FeedFormat">
            <summary>Accessor method public AlternativeFormat FeedFormat.
            </summary> 
            <returns> </returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.DocumentQuery.#ctor(System.String)">
            <summary>
            Constructor - Sets the base URI
            </summary>
            <param name="baseUri"></param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.DocumentQuery.ParseUri(System.Uri)">
            <summary>
            Parses an incoming URI string and sets the instance variables
            of this object.
            </summary>
            <param name="targetUri">Takes an incoming Uri string and parses all the properties of it</param>
            <returns>Throws a query exception when it finds something wrong with the input, otherwise returns a baseuri.</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.DocumentQuery.Reset">
            <summary>
            Resets object state to default, as if newly created.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.DocumentQuery.CalculateQuery(System.String)">
            <summary>
            Creates the partial URI query string based on all set properties.
            </summary>
            <returns> string => the query part of the URI </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.DocumentQuery.Title">
            <summary>
            The exact or unexact title to query for.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.DocumentQuery.Exact">
            <summary>
            If true, then only the exact title string will be looked for.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.WorksheetQuery.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.WorksheetQuery.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor - Sets the base URI
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.WorksheetQuery.#ctor(System.String)">
            <summary>
            Constructor - Sets the base URI including key, visibility, and projection
            </summary>
        </member>
        <member name="T:EnterpriseDT.Util.ByteSizeFormatter">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.ByteSizeFormatter.Format(System.Int64)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Util.ByteSizeFormatter.Format(System.Int64,System.Boolean)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Util.ByteSize">
            <summary>
            Represents a byte-size.  Mainly used for formatting.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Util.ByteUnits">
            <summary>
            Units used for byte sizes.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.PEM">
            <summary>
            Reads the contents of 
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Spreadsheets.SpreadsheetsService">
            <summary>
            The SpreadsheetsService class extends the basic Service abstraction
            to define a service that is preconfigured for access to the
            Google Spreadsheets data API.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.Service">
            <summary>base Service implementation</summary> 
            <summary>async functionality of the Service implementation
            </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AsyncDataHandler.CancelAsync(System.Object)">
            <summary>
            this method cancels the corresponding async operation. 
            It sends still a completed event, but that event will then
            have the cancel property set to true
            </summary>
            <param name="userData">your identifier for the operation to be cancelled</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AsyncDataHandler.HandleResponseStream(EnterpriseDT.Google.GData.Client.AsyncData,System.IO.Stream,System.Int64)">
            <summary>
            handles the response stream
            copies it into the memory stream, or parses it into a feed.
            </summary>
            <param name="data"></param>
            <param name="responseStream"></param>
            <param name="contentLength"></param>
            <returns></returns>
        </member>
        <member name="E:EnterpriseDT.Google.GData.Client.AsyncDataHandler.AsyncOperationCompleted">
            <summary>eventhandler, fired when an async operation is completed</summary> 
        </member>
        <member name="E:EnterpriseDT.Google.GData.Client.AsyncDataHandler.AsyncOperationProgress">
            <summary>eventhandler, fired when an async operation reports progress</summary> 
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.IService">
            <summary>base Service interface definition
            </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.IService.QueryOpenSearchRssDescription(System.Uri)">
            <summary>the minimal Get OpenSearchRssDescription function</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.IService.Query(EnterpriseDT.Google.GData.Client.FeedQuery)">
            <summary>the minimal query implementation</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.IService.Query(EnterpriseDT.Google.GData.Client.FeedQuery,System.DateTime)">
            <summary>the minimal query implementation with conditional GET</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.IService.Update(EnterpriseDT.Google.GData.Client.AtomEntry)">
            <summary>simple update for atom resources</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.IService.Insert(EnterpriseDT.Google.GData.Client.AtomFeed,EnterpriseDT.Google.GData.Client.AtomEntry)">
            <summary>simple insert for atom entries, based on a feed</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.IService.Delete(EnterpriseDT.Google.GData.Client.AtomEntry)">
            <summary>delete an entry</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.IService.Delete(System.Uri)">
            <summary>delete an entry</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.IService.Batch(EnterpriseDT.Google.GData.Client.AtomFeed,System.Uri)">
            <summary>batch operation, posting of a set of entries</summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.IService.Update(System.Uri,System.IO.Stream,System.String,System.String)">
            <summary>simple update for media resources</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.IService.Insert(System.Uri,System.IO.Stream,System.String,System.String)">
            <summary>simple insert for media resources</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.IService.Credentials">
            <summary>get/set for credentials to the service calls. Gets passed through to GDatarequest</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.IService.RequestFactory">
            <summary>get/set for the GDataRequestFactory object to use</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.IService.ServiceIdentifier">
            <summary>
            returns the name of the service identifier, like wise for spreadsheets services
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.Service.credentials">
            <summary>holds the credential information</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.Service.factory">
            <summary>the GDatarequest to use</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.#ctor">
            <summary>default constructor, sets the default GDataRequest</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.#ctor(System.String)">
            <summary>default constructor, sets the default GDataRequest</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.#ctor(System.String,System.String)">
            <summary>this will trigger the creation of an authenticating service</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.InitVersionInformation">
            <summary>
            by default all services now use version 2 for the protocol.
            this needs to be overridden by a service to specify otherwise. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.OnRequestFactoryChanged">
            <summary>
            notifier if someone changes the requestfactory of the service. 
            This will cause the service to set the version number on the 
            request factory to its own
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.QueryAuthenticationToken">
            <summary>
            if the service is using a Google Request Factory it will use that 
            assuming credentials are set to retrieve the authentication token
            for those credentials
            
            Note that this only works for ClientLogin, not for any other type of authentication
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.QueryClientLoginToken">
            <summary>
            if the service is using a Google Request Factory it will use that 
            assuming credentials are set to retrieve the authentication token
            for those credentials
            
            Note that this only works for ClientLogin, not for any other type of authentication
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.SetAuthenticationToken(System.String)">
            <summary>
            if the service is using a Google Request Factory it will set the passed 
            in token to the factory. NET CF does not support authsubtokens here
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.setUserCredentials(System.String,System.String)">
            <summary>
            Sets the credentials of the user to authenticate requests
            to the server.
            </summary>
            <param name="username"></param>
            <param name="password"></param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.Query(System.Uri)">
            <summary>the basic interface. Take a URI and just get it</summary> 
            <param name="queryUri">the URI to execute</param>
            <returns> a webresponse object</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.Query(System.Uri,System.DateTime)">
            <summary>the basic interface. Take a URI and just get it</summary> 
            <param name="queryUri">the URI to execute</param>
            <param name="ifModifiedSince">used to set a precondition date that 
            indicates the feed should be returned only if it has been modified 
            after the specified date. A value of DateTime.MinValue indicates no 
            precondition.</param>
            <returns> a webresponse object</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.Query(System.Uri,System.String)">
            <summary>the basic interface. Take a URI and just get it</summary> 
            <param name="queryUri">the URI to execute</param>
            <param name="etag">used to set a precondition etag that 
            indicates the feed should be returned only if it has been modified </param>
            <returns> a webresponse object</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.Query(System.Uri,System.DateTime,System.String,System.Int64@)">
            <summary>the basic interface. Take a URI and just get it</summary> 
            <param name="queryUri">the URI to execute</param>
            <param name="ifModifiedSince">used to set a precondition date that 
            indicates the feed should be returned only if it has been modified 
            after the specified date. A value of DateTime.MinValue indicates no 
            precondition.</param>
            <param name="etag">used to set a precondition etag that 
            indicates the feed should be returned only if it has been modified </param>
            <param name="contentLength">returns the content length of the response</param>
            <returns> a webresponse object</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.Get(System.String)">
            <summary>
            Returns a single Atom entry based upon its unique URI.
            </summary>
            <param name="entryUri">The URI of the Atom entry.</param>
            <returns>AtomEntry representing the entry.</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.Query(EnterpriseDT.Google.GData.Client.FeedQuery)">
            <summary>executes the query and returns an AtomFeed object tree</summary> 
            <param name="feedQuery">the query parameters as a FeedQuery object </param>
            <returns>AtomFeed object tree</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.Query(EnterpriseDT.Google.GData.Client.FeedQuery,System.DateTime)">
            <summary>executes the query and returns an AtomFeed object tree</summary> 
            <param name="feedQuery">the query parameters as a FeedQuery object </param>
            <param name="ifModifiedSince">used to set a precondition date that 
            indicates the feed should be returned only if it has been modified 
            after the specified date. A value of null indicates no 
            precondition.</param>
            <returns>AtomFeed object tree</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.QueryOpenSearchRssDescription(System.Uri)">
            <summary>object QueryOpenSearchRssDescription()</summary> 
            <param name="serviceUri">the service to ask for an OpenSearchRss Description</param> 
            <returns> a webresponse object</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.Update(EnterpriseDT.Google.GData.Client.AtomEntry)">
            <summary>WebResponse Update(Uri updateUri, Stream entryStream, ICredentials credentials)</summary> 
            <param name="entry">the old entry to update</param> 
            <returns> the new Entry, as returned from the server</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.Update``1(``0)">
            <summary>templated type safe verion of the interface</summary> 
            <param name="entry">the old entry to update</param> 
            <returns> the new Entry, as returned from the server</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.Update(EnterpriseDT.Google.GData.Client.AtomEntry,EnterpriseDT.Google.GData.Client.AsyncSendData)">
            <summary>WebResponse Update(Uri updateUri, Stream entryStream, ICredentials credentials)</summary> 
            <param name="entry">the old entry to update</param> 
            <param name="data">the async data block used</param> 
            <returns> the new Entry, as returned from the server</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.EnterpriseDT#Google#GData#Client#IService#Insert(EnterpriseDT.Google.GData.Client.AtomFeed,EnterpriseDT.Google.GData.Client.AtomEntry)">
            <summary>public WebResponse Insert(Uri insertUri, Stream entryStream, ICredentials credentials)</summary> 
            <param name="feed">the feed this entry should be inserted into</param> 
            <param name="entry">the entry to be inserted</param> 
            <returns> the inserted entry</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.Insert``1(EnterpriseDT.Google.GData.Client.AtomFeed,``0)">
            <summary>
            templated type safe version of Insert
            </summary>
            <typeparam name="TEntry"></typeparam>
            <param name="feed"></param>
            <param name="entry"></param>
            <returns> the new Entry, as returned from the server</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.Insert``1(System.Uri,``0)">
            <summary>templated type safe verion of the interface</summary> 
            <typeparam name="TEntry"></typeparam>
            <param name="feedUri"></param>
            <param name="entry">the old entry to update</param> 
            <returns> the new Entry, as returned from the server</returns> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.Insert``1(System.String,``0)">
            <summary>templated type safe verion of the interface</summary> 
            <typeparam name="TEntry"></typeparam>
            <param name="feedUri"></param>
            <param name="entry">the old entry to update</param> 
            <returns> the new Entry, as returned from the server</returns> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.internalInsert(System.Uri,EnterpriseDT.Google.GData.Client.AtomEntry)">
            <summary>
            internal Insert version to avoid recursion in the template versions
            </summary>
            <param name="feedUri"></param>
            <param name="newEntry"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.Insert(System.Uri,EnterpriseDT.Google.GData.Client.AtomEntry,EnterpriseDT.Google.GData.Client.AsyncSendData)">
            <summary>public WebResponse Insert(Uri insertUri, Stream entryStream, ICredentials credentials)</summary> 
            <param name="feedUri">the uri for the feed this entry should be inserted into</param> 
            <param name="newEntry">the entry to be inserted</param> 
            <param name="data">the data used for an async request</param>
            <returns> the inserted entry</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.Update(System.Uri,System.IO.Stream,System.String,System.String)">
            <summary>
            simple update for media resources
            </summary>
            <param name="uriTarget"></param>
            <param name="input">the stream to send</param>
            <param name="contentType"></param>
            <param name="slugHeader">the value for the slug header, indicating filenaming</param>
            <returns>AtomEntry</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.Insert(System.Uri,System.IO.Stream,System.String,System.String)">
            <summary>
            Simple insert for media resources
            </summary>
            <param name="uriTarget"></param>
            <param name="input"></param>
            <param name="contentType"></param>
            <param name="slugHeader">the value for the slug header, indicating filenaming</param>
            <returns>AtomEntry</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.CreateAndParseFeed(System.IO.Stream,System.Uri)">
            <summary>
            used to create a feed based on a stream
            </summary>
            <param name="inputStream"></param>
            <param name="uriToUse"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.EntrySend(System.Uri,EnterpriseDT.Google.GData.Client.AtomEntry,EnterpriseDT.Google.GData.Client.GDataRequestType)">
            <summary>Inserts an AtomBase entry against a Uri</summary> 
            <param name="feedUri">the uri for the feed this object should be posted against</param> 
            <param name="baseEntry">the entry to be inserted</param> 
            <param name="type">the type of request to create</param> 
            <returns> the response as a stream</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.EntrySend(System.Uri,EnterpriseDT.Google.GData.Client.AtomBase,EnterpriseDT.Google.GData.Client.GDataRequestType,EnterpriseDT.Google.GData.Client.AsyncSendData)">
            <summary>Inserts an AtomBase entry against a Uri</summary> 
            <param name="feedUri">the uri for the feed this object should be posted against</param> 
            <param name="baseEntry">the entry to be inserted</param> 
            <param name="type">the type of request to create</param> 
            <param name="data">the async data payload</param>
            <returns> the response as a stream</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.StringSend(System.Uri,System.String,EnterpriseDT.Google.GData.Client.GDataRequestType)">
            <summary>
            this is a helper function for external utilities. It is not worth
            running the other insert/saves through here, as this would involve
            double buffering/copying of the bytes
            </summary>
            <param name="targetUri"></param>
            <param name="payload"></param>
            <param name="type"></param>
            <returns>Stream</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.StreamSend(System.Uri,System.IO.Stream,EnterpriseDT.Google.GData.Client.GDataRequestType,System.String,System.String)">
            <summary>
            this is a helper function for to send binary data to a resource
            it is not worth running the other insert/saves through here, as this would involve
            double buffering/copying of the bytes
            </summary>
            <param name="targetUri"></param>
            <param name="inputStream"></param>
            <param name="type"></param>
            <param name="contentType">the contenttype to use in the request, if NULL is passed, factory default is used</param>
            <param name="slugHeader">the slugHeader to use in the request, if NULL is passed, factory default is used</param>
            <returns>Stream</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.StreamSend(System.Uri,System.IO.Stream,EnterpriseDT.Google.GData.Client.GDataRequestType,System.String,System.String,System.String)">
            <summary>
            this is a helper function for to send binary data to a resource
            it is not worth running the other insert/saves through here, as this would involve
            double buffering/copying of the bytes
            </summary>
            <param name="targetUri"></param>
            <param name="inputStream"></param>
            <param name="type"></param>
            <param name="contentType">the contenttype to use in the request, if NULL is passed, factory default is used</param>
            <param name="slugHeader">the slugHeader to use in the request, if NULL is passed, factory default is used</param>
            <param name="etag">The http etag to pass into the request</param>
            <returns>Stream</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.StreamSend(System.Uri,System.IO.Stream,EnterpriseDT.Google.GData.Client.GDataRequestType,System.String,System.String,System.String,EnterpriseDT.Google.GData.Client.AsyncSendData)">
            <summary>
            this is a helper function for to send binary data to a resource
            it is not worth running the other insert/saves through here, as this would involve
            double buffering/copying of the bytes
            </summary>
            <param name="targetUri"></param>
            <param name="inputStream"></param>
            <param name="type"></param>
            <param name="contentType">the contenttype to use in the request, if NULL is passed, factory default is used</param>
            <param name="slugHeader">the slugHeader to use in the request, if NULL is passed, factory default is used</param>
            <param name="etag">The http etag to pass into the request</param>
            <param name="data">The async data needed for notifications</param>
            <returns>Stream from the server response. You should close this stream explicitly.</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.WriteInputStreamToRequest(System.IO.Stream,System.IO.Stream)">
            <summary>
            write the current stream to an output stream
            this is primarily used to write data to the 
            request stream
            </summary>
            <param name="input"></param>
            <param name="output"></param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.CreateFeed(System.Uri)">
             <summary>creates a new feed instance to be returned by
             Batch(), Query() and other operations
            
             Subclasses can supply their own feed implementation by
             overriding this method.
             </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.Batch(EnterpriseDT.Google.GData.Client.AtomFeed,System.Uri)">
            <summary>
            takes a given feed, and does a batch post of that feed
            against the batchUri parameter. If that one is NULL 
            it will try to use the batch link URI in the feed
            </summary>
            <param name="feed">the feed to post</param>
            <param name="batchUri">the URI to user</param>
            <returns>the returned AtomFeed</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.Batch(EnterpriseDT.Google.GData.Client.AtomFeed,System.Uri,EnterpriseDT.Google.GData.Client.AsyncSendData)">
            <summary>
            takes a given feed, and does a batch post of that feed
            against the batchUri parameter. If that one is NULL 
            it will try to use the batch link URI in the feed
            </summary>
            <param name="feed">the feed to post</param>
            <param name="batchUri">the URI to user</param>
            <param name="data">The async data payload</param>
            <returns>the returned AtomFeed</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.Delete(EnterpriseDT.Google.GData.Client.AtomEntry)">
            <summary>deletes an Atom entry object</summary> 
            <param name="entry"> </param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.Delete(EnterpriseDT.Google.GData.Client.AtomEntry,System.Boolean)">
            <summary>deletes an Atom entry object</summary> 
            <param name="entry">The entry to be deleted </param>
            <param name="permanentDelete">Should the entry be archived or not</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.Delete(System.Uri)">
            <summary>Deletes an Atom entry when given a Uri</summary>
            <param name="uriTarget">The target Uri to call http delete against</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.Delete(System.String)">
            <summary>Deletes an Atom entry when given a Uri</summary>
            <param name="uriTarget">The target Uri string to call http delete against</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.Delete(System.Uri,System.String)">
            <summary>Deletes an Atom entry when given a Uri</summary>
            <param name="uriTarget">The target Uri to call http delete against</param>
            <param name="eTag">The eTag of the item to delete. This parameter is used for strong
             concurrency support in protocol version 2 and up</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.OnParsedNewEntry(System.Object,EnterpriseDT.Google.GData.Client.FeedParserEventArgs)">
            <summary>eventchaining. We catch this by the baseFeedParsers, which 
            would not do anything with the gathered data. We pass the event up
            to the user</summary> 
            <param name="sender"> the object which send the event</param>
            <param name="e">FeedParserEventArguments, holds the feedentry</param> 
            <returns> </returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.OnNewExtensionElement(System.Object,EnterpriseDT.Google.GData.Client.ExtensionElementEventArgs)">
            <summary>eventchaining. We catch this by the baseFeedParsers, which 
            would not do anything with the gathered data. We pass the event up
            to the user, and if he did not dicscard it, we add the entry to our
            collection</summary> 
            <param name="sender"> the object which send the event</param>
            <param name="e">FeedParserEventArguments, holds the feedentry</param> 
            <returns> </returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.QueryFeedAync(System.Uri,System.DateTime,System.Object)">
            <summary>
            the basic interface as an async version. This call will return directly
            and you need to rely on the events fired to figure out what happened.
            </summary>
            <param name="queryUri">the Uri to Query</param>
            <param name="ifModifiedSince">The ifmodifiedsince date, use DateTime.MinValue if you want everything</param>
            <param name="userData">The userData token. this must be unique if you make several async requests at once</param>
            <returns>nothing</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.QueryStreamAync(System.Uri,System.DateTime,System.Object)">
            <summary>
            the basic interface as an async version. This call will return directly
            and you need to rely on the events fired to figure out what happened.
            this version does not parse the response from the webserver but 
            provides it to you in the event
            </summary>
            <param name="queryUri">the Uri to Query</param>
            <param name="ifModifiedSince">The ifmodifiedsince date, use DateTime.MinValue if you want everything</param>
            <param name="userData">The userData token. this must be unique if you make several async requests at once</param>
            <returns>nothing</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.QueryAsync(System.Uri,System.DateTime,System.Boolean,System.Object)">
            <summary>
            the basic interface as an async version. This call will return directly
            and you need to rely on the events fired to figure out what happened.
            </summary>
            <param name="queryUri">the Uri to Query</param>
            <param name="ifModifiedSince">The ifmodifiedsince date, use DateTime.MinValue if you want everything</param>
            <param name="doParse">if true, returns a feed, else a stream</param>
            <param name="userData">The userData token. this must be unique if you make several async requests at once</param>
            <returns>nothing</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.AsyncQueryWorker(EnterpriseDT.Google.GData.Client.AsyncQueryData,System.ComponentModel.AsyncOperation,System.Threading.SendOrPostCallback)">
            <summary>
             worker method for the query case
            </summary>
            <param name="data"></param>
            <param name="asyncOp"></param>
            <param name="completionMethodDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.UpdateAsync(EnterpriseDT.Google.GData.Client.AtomEntry,System.Object)">
            <summary>
            updates the entry asynchronous, you need to supply a valid and unique
            token. Events will be send to the async delegates you setup on the service
            object
            </summary>
            <param name="entry"></param>
            <param name="userData">a unique identifier to associate this request with</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.InsertAsync(System.Uri,EnterpriseDT.Google.GData.Client.AtomEntry,System.Object)">
            <summary>
            inserts the entry asynchronous, you need to supply a valid and unique
            token. Events will be send to the async delegates you setup on the service
            object
            </summary>
            <param name="feedUri">the target feed the entry get's inserted into</param>
            <param name="entry"></param>
            <param name="userData">a unique identifier to associate this request with</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.BatchAsync(EnterpriseDT.Google.GData.Client.AtomFeed,System.Uri,System.Object)">
            <summary>
            takes a given feed, and does a batch post of that feed
            against the batchUri parameter. If that one is NULL 
            it will try to use the batch link URI in the feed
            </summary>
            <param name="feed">the feed to post</param>
            <param name="batchUri">the URI to user</param>
            <param name="userData">the userdata identifying this request</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.StreamSendFeedAsync(System.Uri,System.IO.Stream,EnterpriseDT.Google.GData.Client.GDataRequestType,System.String,System.String,System.Object)">
            <summary>
            this is a helper function for to send binary data asyncronous to a resource
            The async returned object will contain the output Feed
            </summary>
            <param name="targetUri"></param>
            <param name="inputStream"></param>
            <param name="type"></param>
            <param name="contentType">the contenttype to use in the request, if NULL is passed, factory default is used</param>
            <param name="slugHeader">the slugHeader to use in the request, if NULL is passed, factory default is used</param>
            <param name="userData">a unique identifier to associate this request with</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.StreamSendStreamAsync(System.Uri,System.IO.Stream,EnterpriseDT.Google.GData.Client.GDataRequestType,System.String,System.String,System.Object)">
            <summary>
            this is a helper function for to send binary data asyncronous to a resource
            The async returned object will contain the output stream
            </summary>
            <param name="targetUri"></param>
            <param name="inputStream"></param>
            <param name="type"></param>
            <param name="contentType">the contenttype to use in the request, if NULL is passed, factory default is used</param>
            <param name="slugHeader">the slugHeader to use in the request, if NULL is passed, factory default is used</param>
            <param name="userData">a unique identifier to associate this request with</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.StreamSendAsync(System.Uri,System.IO.Stream,EnterpriseDT.Google.GData.Client.GDataRequestType,System.String,System.String,System.Object,System.Boolean)">
            <summary>
            this is a helper function for to send binary data asyncronous to a resource
            </summary>
            <param name="targetUri"></param>
            <param name="inputStream"></param>
            <param name="type"></param>
            <param name="contentType">the contenttype to use in the request, if NULL is passed, factory default is used</param>
            <param name="slugHeader">the slugHeader to use in the request, if NULL is passed, factory default is used</param>
            <param name="userData">a unique identifier to associate this request with</param>
            <param name="parseFeed">indicates if the async operation should try to parse the server returned stream, or just return the stream</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.HandleResponseStream(EnterpriseDT.Google.GData.Client.AsyncData,System.IO.Stream,System.Int64)">
            <summary>
            handles the response stream
            copies it into the memory stream, or parses it into a feed.
            </summary>
            <param name="data"></param>
            <param name="responseStream"></param>
            <param name="contentLength"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.AsyncUpdateWorker(EnterpriseDT.Google.GData.Client.AsyncSendData,System.ComponentModel.AsyncOperation,System.Threading.SendOrPostCallback)">
            <summary>
            worker method for the update case
            </summary>
            <param name="data"></param>
            <param name="asyncOp"></param>
            <param name="completionMethodDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.AsyncInsertWorker(EnterpriseDT.Google.GData.Client.AsyncSendData,System.ComponentModel.AsyncOperation,System.Threading.SendOrPostCallback)">
            <summary>
            worker method for the Insert case
            </summary>
            <param name="data"></param>
            <param name="asyncOp"></param>
            <param name="completionMethodDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.AsyncBatchWorker(EnterpriseDT.Google.GData.Client.AsyncSendData,System.ComponentModel.AsyncOperation,System.Threading.SendOrPostCallback)">
            <summary>
             worker method for the batch case
            </summary>
            <param name="data"></param>
            <param name="asyncOp"></param>
            <param name="completionMethodDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.AsyncStreamSendWorker(EnterpriseDT.Google.GData.Client.AsyncSendData,System.ComponentModel.AsyncOperation,System.Threading.SendOrPostCallback)">
            <summary>
            worker method for the direct stream send
            </summary>
            <param name="data"></param>
            <param name="asyncOp"></param>
            <param name="completionMethodDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Service.AsyncStarter(EnterpriseDT.Google.GData.Client.AsyncSendData,EnterpriseDT.Google.GData.Client.Service.WorkerSendEventHandler,System.Object)">
            <summary>
            starts the async job
            </summary>
            <param name="data"></param>
            <param name="userData"></param>
            <param name="workerDelegate"></param>
            <returns></returns>
        </member>
        <member name="E:EnterpriseDT.Google.GData.Client.Service.NewAtomEntry">
            <summary>holds the hooks for the eventing in the feedparser</summary> 
        </member>
        <member name="E:EnterpriseDT.Google.GData.Client.Service.NewExtensionElement">
            <summary>eventhandler, when the parser finds a new extension element-> mirrored from underlying parser</summary> 
        </member>
        <member name="E:EnterpriseDT.Google.GData.Client.Service.NewFeed">
            <summary>eventhandler, when the service needs to create a new feed</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.Service.ServiceIdentifier">
            <summary>
            this returns the string that the services uses to identify the google service to use
            when authentication with Google is required. Examples are "cl" for calendar, e.g. 
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.Service.ProtocolMajor">
            <summary>
            returns the major protocol version number this element 
            is working against. 
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.Service.ProtocolMinor">
            <summary>
            returns the minor protocol version number this element 
            is working against. 
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.Service.RequestFactory">
            <summary>accessor method public IGDataRequest Request</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.Service.Credentials">
            <summary>accessor method public ICredentials Credentials</summary> 
            <returns> </returns>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Spreadsheets.SpreadsheetsService.GSpreadsheetsService">
            <summary>The Spreadsheets service's name</summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.SpreadsheetsService.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="applicationName">The name of the client application 
            using this service.</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.SpreadsheetsService.Query(EnterpriseDT.Google.GData.Spreadsheets.CellQuery)">
            <summary>
             overwritten Query method
            </summary>
            <param name="feedQuery">The FeedQuery touse</param>
            <returns>the retrieved CellFeed</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.SpreadsheetsService.Query(EnterpriseDT.Google.GData.Spreadsheets.ListQuery)">
            <summary>
             overwritten Query method
            </summary>
            <param name="feedQuery">The FeedQuery touse</param>
            <returns>the retrieved ListFeed</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.SpreadsheetsService.Query(EnterpriseDT.Google.GData.Spreadsheets.SpreadsheetQuery)">
            <summary>
             overwritten Query method
            </summary>
            <param name="feedQuery">The FeedQuery to use</param>
            <returns>the retrieved SpreadsheetFeed</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.SpreadsheetsService.Query(EnterpriseDT.Google.GData.Spreadsheets.WorksheetQuery)">
            <summary>
             overwritten Query method
            </summary>
            <param name="feedQuery">The FeedQuery to use</param>
            <returns>the retrieved WorksheetFeed</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.SpreadsheetsService.OnNewFeed(System.Object,EnterpriseDT.Google.GData.Client.ServiceEventArgs)">
            <summary>eventchaining. We catch this by from the base service, which 
            would not by default create an atomFeed</summary> 
            <param name="sender"> the object which send the event</param>
            <param name="e">FeedParserEventArguments, holds the feedentry</param> 
            <returns> </returns>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.SSHConnection.log">
            <summary> Logging object</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ssh.Routrek.SSHC.SSHConnection.Disconnect(System.String)">
            terminates this connection
        </member>
        <member name="M:EnterpriseDT.Net.Ssh.Routrek.SSHC.SSHConnection.OpenShell(EnterpriseDT.Net.Ssh.Routrek.SSHC.ISSHChannelEventReceiver)">
            opens a pseudo terminal
        </member>
        <member name="M:EnterpriseDT.Net.Ssh.Routrek.SSHC.SSHConnection.OpenSFTP(EnterpriseDT.Net.Ssh.Routrek.SSHC.ISSHChannelEventReceiver)">
            opens an SFTP channel
        </member>
        <member name="M:EnterpriseDT.Net.Ssh.Routrek.SSHC.SSHConnection.OpenSCP(EnterpriseDT.Net.Ssh.Routrek.SSHC.ISSHChannelEventReceiver,System.String)">
            opens an SCP channel
        </member>
        <member name="M:EnterpriseDT.Net.Ssh.Routrek.SSHC.SSHConnection.ExecCommand(EnterpriseDT.Net.Ssh.Routrek.SSHC.ISSHChannelEventReceiver,System.String)">
            exec a comand
        </member>
        <member name="M:EnterpriseDT.Net.Ssh.Routrek.SSHC.SSHConnection.ForwardPort(EnterpriseDT.Net.Ssh.Routrek.SSHC.ISSHChannelEventReceiver,System.String,System.Int32,System.String,System.Int32)">
            forwards the remote end to another host
        </member>
        <member name="M:EnterpriseDT.Net.Ssh.Routrek.SSHC.SSHConnection.ListenForwardedPort(System.String,System.Int32)">
            listens a connection on the remote end
        </member>
        <member name="M:EnterpriseDT.Net.Ssh.Routrek.SSHC.SSHConnection.CancelForwardedPort(System.String,System.Int32)">
            cancels binded port
        </member>
        <member name="M:EnterpriseDT.Net.Ssh.Routrek.SSHC.SSHConnection.Close">
            closes socket directly.
        </member>
        <member name="M:EnterpriseDT.Net.Ssh.Routrek.SSHC.SSHConnection.OpenPortForwardedAnotherConnection(EnterpriseDT.Net.Ssh.Routrek.SSHC.SSHConnectionParameter,EnterpriseDT.Net.Ssh.Routrek.SSHC.ISSHConnectionEventReceiver,System.String,System.Int32,EnterpriseDT.Util.Debug.ILogTag)">
            opens another SSH connection via port-forwarded connection
        </member>
        <member name="P:EnterpriseDT.Net.Ssh.Routrek.SSHC.SSHConnection.Available">
            returns true if any data from server is available
        </member>
        <member name="M:EnterpriseDT.Net.Ssh.Routrek.SSHC.SSHChannel.Transmit(System.Byte[])">
            transmits channel data 
        </member>
        <member name="M:EnterpriseDT.Net.Ssh.Routrek.SSHC.SSHChannel.Disconnect(System.String)">
            disconnect
        </member>
        <member name="M:EnterpriseDT.Net.Ssh.Routrek.SSHC.SSHChannel.Transmit(System.Byte[],System.Int32,System.Int32)">
            transmits channel data 
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.DataBlob">
            <summary>
            The DataBlob structure contains an array of bytes. 
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.CertificateInfo">
            <summary>
            The CertificateInfo structure contains a certificate's information.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.CERT_PUBLIC_KEY_INFO">
            <summary>
            The CERT_PUBLIC_KEY_INFO structure contains a public key and its algorithm.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.CertificateContext">
            <summary>
            The CertificateContext structure contains both the encoded and decoded representations of a certificate.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.TrustListUsage">
            <summary>
            The TrustListUsage structure contains an array of Object Identifiers (OIDs) for Certificate Trust List (CTL) extensions. CTL_USAGE structures are used in functions that search for CTLs for specific uses.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.CertificateExtension">
            <summary>
            The CertificateExtension structure contains the extension information for a certificate, Certificate Revocation List (CRL) or Certificate Trust List (CTL).
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.CertificateNameValue">
            <summary>
            The CertificateNameValue structure contains a relative distinguished name (RDN) attribute value. It is like the CERT_RDN_ATTR structure, except that it does not include the object identifier member that is a member of CERT_RDN_ATTR. As in CERT_RDN_ATTR, the interpretation of the Value member depends on dwValueType.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.CertificateNameInfo">
            <summary>
            The CertificateNameInfo structure contains subject or issuer names. The information is represented as an array of CERT_RDN structures.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.RelativeDistinguishedName">
            <summary>
            The RelativeDistinguishedName structure contains a relative distinguished name (RDN) consisting of an array of CERT_RDN_ATTR structures.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.RdnAttribute">
            <summary>
            The RdnAttribute structure contains a single attribute of a relative distinguished name (RDN). A whole RDN is expressed in a CERT_RDN structure that contains an array of CERT_RDN_ATTR structures.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.ChainParameters">
            <summary>
            The ChainParameters structure establishing the searching and matching criteria to be used in building a certificate chain.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.ChainPolicyStatus">
            <summary>
            The ChainPolicyStatus structure holds certificate chain status information returned by CertVerifyCertificateChainPolicy from the verification of certificate chains.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.ChainPolicyParameters">
            <summary>
            The ChainPolicyParameters structure contains information used in CertVerifyCertificateChainPolicy to establish policy criteria for the verification of certificate chains.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.SslPolicyParameters">
            <summary>
            The SslPolicyParameters structure contains extra policy options.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.CRYPT_KEY_PROV_INFO">
            <summary>
            The CRYPT_KEY_PROV_INFO structure contains fields that are passed as the arguments to CryptAcquireContext to acquire a handle to a particular key container within a particular cryptographic service provider (CSP), or to create or destroy a key container.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.PUBLIC_KEY_BLOB">
            <summary>
            Union of the PUBLICKEYSTRUC [=BLOBHEADER] and RSAPUBKEY structures 
            </summary>
        </member>
        <member name="T:EnterpriseDT.Util.FileSegmentStream">
            <summary>
            Used to read a segment of a file as defined by <see cref="P:EnterpriseDT.Util.FileSegmentStream.SegmentOffset"/> 
            and <see cref="P:EnterpriseDT.Util.FileSegmentStream.SegmentLength"/>.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.FileSegmentStream.#ctor(System.String,System.Int64,System.Int64,System.IO.FileMode)">
            <summary>
            Creates an instance of the FileSegmentStream class with the specified path, offset, length 
            and creation mode.
            </summary>
            <param name="path">Path of file</param>
            <param name="segmentOffset">Offset of segment to be read</param>
            <param name="segmentLength">Length of segment to be read</param>
            <param name="mode">Creation mode</param>
        </member>
        <member name="M:EnterpriseDT.Util.FileSegmentStream.#ctor(System.String,System.Int64,System.Int64,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Creates an instance of the FileSegmentStream class with the specified path, offset, length, 
            creation mode and read/write permission.
            </summary>
            <param name="path">Path of file</param>
            <param name="segmentOffset">Offset of segment to be read</param>
            <param name="segmentLength">Length of segment to be read</param>
            <param name="mode">Creation mode</param>
            <param name="access">Read/write permission</param>
        </member>
        <member name="M:EnterpriseDT.Util.FileSegmentStream.#ctor(System.String,System.Int64,System.Int64,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Creates an instance of the FileSegmentStream class with the specified path, offset, length, 
            creation mode, read/write permission and share permission.
            </summary>
            <param name="path">Path of file</param>
            <param name="segmentOffset">Offset of segment to be read</param>
            <param name="segmentLength">Length of segment to be read</param>
            <param name="mode">Creation mode</param>
            <param name="access">Read/write permission</param>
            <param name="share">Share permission</param>
        </member>
        <member name="M:EnterpriseDT.Util.FileSegmentStream.#ctor(System.String,System.Int64,System.Int64,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
            <summary>
            Creates an instance of the FileSegmentStream class with the specified path, offset, length, 
            creation mode, read/write permission, share permission and buffer-size.
            </summary>
            <param name="path">Path of file</param>
            <param name="segmentOffset">Offset of segment to be read</param>
            <param name="segmentLength">Length of segment to be read</param>
            <param name="mode">Creation mode</param>
            <param name="access">Read/write permission</param>
            <param name="share">Share permission</param>
            <param name="bufferSize">Buffer-size</param>
        </member>
        <member name="P:EnterpriseDT.Util.FileSegmentStream.SegmentOffset">
            <summary>
            Offset of segment to read.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Util.FileSegmentStream.SegmentLength">
            <summary>
            Length of segment to read.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FileNotFoundStrings">
            <summary>  
            Contains fragments of server replies that indicate that a file was
            not found.
            </summary>
            <author>Bruce Blackshaw</author>
            <version>$Revision: 1.5 $</version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.ServerStrings">
            <summary>  
            Manages strings that match various FTP server replies for
            various situations. The strings are not exact copies of server
            replies, but rather fragments that match server replies (so that
            as many servers as possible can be supported). All fragments are
            managed internally in upper case to make matching faster.
            </summary>
            <author>Bruce Blackshaw</author>
            <version>$Revision: 1.2 $</version>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ServerStrings.Add(System.String)">
            <summary>
            Add the string to the collection.
            </summary>
            <param name="str">String to add.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ServerStrings.AddRange(System.String[])">
            <summary>
            Add all the strings to the collection.
            </summary>
            <param name="strs">Strings to add.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ServerStrings.Contains(System.String)">
            <summary>
            Returns <c>true</c> if the given string is already in the collection.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ServerStrings.CopyTo(System.String[],System.Int32)">
            <summary>
            Copy all the strings in the collection to the <c>array</c> starting at the given index.
            </summary>
            <param name="array">Array to which to add strings.</param>
            <param name="index">Index at which to start adding.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ServerStrings.IndexOf(System.String)">
            <summary>
            Returns the index of the given string or <c>-1</c> if it's not in the collection.
            </summary>
            <param name="str">String to look for.</param>
            <returns>Index of the given string or <c>-1</c> if it's not in the collection.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ServerStrings.Insert(System.Int32,System.String)">
            <summary>
            Inserts the given string into the collection at the given index.
            </summary>
            <param name="index">Index at which to add the string.</param>
            <param name="str">String to insert.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ServerStrings.Remove(System.String)">
            <summary>
            Remove the given string from the collection.
            </summary>
            <param name="str">String to remove.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ServerStrings.Matches(System.String)">
            <summary>
            Returns true if any fragment is found in the supplied string
            </summary>
            <param name="reply">server reply to test for matches</param>
            <returns>true for a match, false otherwise</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ServerStrings.OnMemberChanged">
            <summary>
            Called when a property is changed.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ServerStrings.Item(System.Int32)">
            <summary>
            Gets a reference to a string at the given index.
            </summary>
            <param name="index">Index</param>
            <returns>String at the given index.</returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ServerStrings.PropertyChangeHandler">
            <summary>
            Called when a property is changed.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FileNotFoundStrings.NO_SUCH_FILE">
            <summary>
            Server string indicating file not found (NO_SUCH_FILE)
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FileNotFoundStrings.CANNOT_FIND_THE_FILE">
            <summary>
            Server string indicating file not found (CANNOT_FIND_THE_FILE)
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FileNotFoundStrings.CANNOT_FIND">
            <summary>
            Server string indicating file not found (CANNOT_FIND)
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FileNotFoundStrings.FAILED_TO_OPEN_FILE">
            <summary>
            Server string indicating file not found (FAILED_TO_OPEN_FILE)
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FileNotFoundStrings.COULD_NOT_GET_FILE">
            <summary>
            Server string indicating file not found (COULD_NOT_GET_FILE)
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FileNotFoundStrings.DOES_NOT_EXIST">
            <summary>
            Server string indicating file not found (DOES_NOT_EXIST)
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FileNotFoundStrings.NOT_REGULAR_FILE">
            <summary>
            Server string indicating file not found (NOT_REGULAR_FILE)
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FileNotFoundStrings.FILE_NOT_FOUND">
            <summary>
            Server string indicating file not found (FILE_NOT_FOUND)
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FileNotFoundStrings.#ctor">
            <summary>
            Constructor. Adds the fragments to match on.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.ScriptResult">
            <summary>  Holds the result of a script which has been run. Various statistics
            are supplied.
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.1 $
            
            </version>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.ScriptResult.AddServerMessageLog(System.String)">
            <summary> Add a message to the log. Internal use only.
            
            </summary>
            <param name="log"> log message
            
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptResult.LastFTPReply">
            <summary> Get the last reply sent back by the FTP server. Not
            applicable for SFTP.
            
            </summary>
            <returns>  last FTP reply
            
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptResult.ServerMessageLog">
            <summary> Get the server message log for this script
            
            </summary>
            <returns>
            
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptResult.LastException">
            <summary> What was the last exception?
            
            </summary>
            <returns>
            
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptResult.ForceScriptExit">
            <summary> Was the script forced to exit by an error?
            
            </summary>
            <returns> true if forced to exit, false otherwise
            
            </returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Design.PasswordForm">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Design.PasswordForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.PasswordForm.#ctor">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.PasswordForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.PasswordForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Design.PasswordForm.Text">
            <summary/>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Design.PasswordForm.Password">
            <summary/>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SFTPSubsystem">
             <summary>
             Implements a client SFTP subsystem on top of the SSH channel
             </summary>
             <remarks>
             SFTP messages are sent to the server as SSH_MSG_CHANNEL_DATA messages. Each consists of:
             <para>
                 byte      SSH_MSG_CHANNEL_DATA
                 uint32    recipient channel
                 string    data
             </para>   
             <para> 
             Note that a string itself is compromised of a uint32 containing its length
             (number of bytes that follow) and zero (= empty string) or more
             bytes that are the value of the string.  
             </para>       
             <para>
             All SFTP packets (which compromise the data string) transmitted over the secure 
             connection are of the following format:
             </para>   
             <para>   
                 uint32           length
                 byte             type
                 uint32           request-id
                 ... type specific fields ...
             </para>   
             <para>   
              EXCEPT for the INIT and VERSION messages which omit the request-id
              </para>   
              This is the data portion of the SSH_MSG_CHANNEL_DATA message
            </remarks>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHCV2.SSH2Channel.log">
            <summary> Logging object</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SFTPSubsystem.MSG_OVERHEAD">
            <summary>
            This is the max overhead (a guess!) that an FXP msg incurs when it is
            layered on top of an SSH_CHANNEL_DATA message
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SFTPSubsystem.VERSION">
            <summary>
            Version of the SFTP protocol - using 3 means the 'version-select'
            extension is being used.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SFTPSubsystem.UTF8_VERSION">
            <summary>
            Version 4 and above use UTF-8 encoding
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SFTPSubsystem.log">
            <summary> Logging object</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SFTPSubsystem.nextRequestId">
            <summary>
            Id of current request, used as a counter
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SFTPSubsystem.filenameEncoding">
            <summary>
            Encoding for filenames for version 3 and below
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SFTPSubsystem.handles">
            <summary>
            List of valid file handles
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPSubsystem.NextRequestId">
            <summary>
            Get the next request id
            </summary>
            <returns>request id to use</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPSubsystem.Close">
            <summary>
            Close the channel and message store
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPSubsystem.CloseImmediately">
            <summary>
            Close the channel abruptly. Close the message store too.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPSubsystem.ListChildren(EnterpriseDT.Net.Ftp.Ssh.SFTPFile,System.Collections.ArrayList)">
            <summary>
            List the children of the supplied directory.
            </summary>
            <param name="dir">directory reference</param>
            <param name="children">array of children to populate</param>
            <returns>number of bytes of listing data returned, or -1 when listing complete</returns>
            <remarks>It is necessary to call this method repeatedly until -1 is returned</remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPSubsystem.MakeDirectory(System.String)">
            <summary>
            Make a directory on the remote server
            </summary>
            <param name="path">full path of directory</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPSubsystem.SendMessage(EnterpriseDT.Net.Ftp.Ssh.SFTPMessage)">
            <summary>
            FileZilla and j/pro send the length as a separate SSH_MSG_CHANNEL_DATA
            message, followed by the msg data. We've done the same here.
            </summary>
            <param name="msg">SFTP message</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPSubsystem.VerifyRequestOKAsync(System.Int32)">
            <summary>
            Verify that the request for this requestId succeeded
            </summary>
            <param name="requestId">id of request to verify</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPSubsystem.VerifyRequestOK(System.Int32)">
            <summary>
            Verify that the request for this requestId succeeded
            </summary>
            <param name="requestId">id of request to verify</param>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Ssh.SFTPSubsystem.ServerError">
            <summary>
            Triggered every time a server error is received
            </summary> 
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Pro.LimitedTransferException">
            <summary>
            Exception thrown to indicate trial transfer limit has been reached
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Pro.ProLimitedStream">
            <summary>
            Wrapper class for a stream that limits reading or writing to a maximum number of bytes
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProLimitedStream.TRANSFER_LIMIT">
            <summary>Maximum number of bytes read or written permissable</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProLimitedStream.stream">
            <summary>Underlying stream being limited</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProLimitedStream.bytesProcessed">
            <summary>Number of bytes read or written to/from this stream</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProLimitedStream.limitBreached">
            <summary>True if breached transfer limit</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProLimitedStream.#ctor(System.IO.Stream)">
            <summary>
            Takes a stream that is to be limited
            </summary>
            <param name="stream">stream to limit</param>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Cryptography.ARCFourManagedTransform">
            <summary>
            Represents an ARCFour managed ICryptoTransform.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.ARCFourManagedTransform.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the ARCFourManagedTransform class.
            </summary>
            <param name="key">The key used to initialize the ARCFour state.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.ARCFourManagedTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Transforms the specified region of the input byte array and copies the resulting transform to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write the transform.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>The number of bytes written.</returns>
            <exception cref="T:System.ObjectDisposedException">The object has been disposed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="inputBuffer"/> or <paramref name="outputBuffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="inputOffset"/>, <paramref name="inputCount"/> or <paramref name="outputOffset"/> is invalid.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.ARCFourManagedTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Transforms the specified region of the specified byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the byte array to use as data.</param>
            <returns>The computed transform.</returns>
            <exception cref="T:System.ObjectDisposedException">The object has been disposed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="inputBuffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="inputOffset"/> or <paramref name="inputCount"/> is invalid.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.ARCFourManagedTransform.Init">
            <summary>
            This method (re)initializes the cipher.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.ARCFourManagedTransform.Dispose">
            <summary>
            Disposes of the cryptographic parameters.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.ARCFourManagedTransform.Finalize">
            <summary>
            Finalizes the object.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.ARCFourManagedTransform.m_Key">
            <summary>
            Holds the key that is used to initialize the ARCFour state.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.ARCFourManagedTransform.m_KeyLen">
            <summary>
            Holds the length of the key, in bytes.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.ARCFourManagedTransform.m_Permutation">
            <summary>
            Holds state information.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.ARCFourManagedTransform.m_Index1">
            <summary>
            Holds state information.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.ARCFourManagedTransform.m_Index2">
            <summary>
            Holds state information.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.ARCFourManagedTransform.m_Disposed">
            <summary>
            Holds a boolean that indicates whether the class has been disposed of or not.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.ARCFourManagedTransform.CanReuseTransform">
            <summary>
            Gets a value indicating whether the current transform can be reused.
            </summary>
            <value>This property returns <b>true</b>.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.ARCFourManagedTransform.CanTransformMultipleBlocks">
            <summary>
            Gets a value indicating whether multiple blocks can be transformed.
            </summary>
            <value>This property returns <b>true</b>.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.ARCFourManagedTransform.InputBlockSize">
            <summary>
            Gets the input block size.
            </summary>
            <value>This property returns 1.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.ARCFourManagedTransform.OutputBlockSize">
            <summary>
            Gets the output block size.
            </summary>
            <value>This property returns 1.</value>
        </member>
        <member name="F:EnterpriseDT.Util.MsgBoxForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.MsgBoxForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:EnterpriseDT.Util.MsgBoxForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SimpleASNWriter">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Cryptography.MD2">
            <summary>
            Represents the abstract class from which all implementations of the MD2 hash algorithm inherit.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.MD2.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.MD2"/>.
            </summary>
            <remarks>You cannot create an instance of an abstract class. Application code will create a new instance of a derived class.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.MD2.Create">
            <summary>
            Creates an instance of the default implementation of the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.MD2"/> hash algorithm.
            </summary>
            <returns>A new instance of the MD2 hash algorithm.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.MD2.Create(System.String)">
            <summary>
            Creates an instance of the specified implementation of the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.MD2"/> hash algorithm.
            </summary>
            <param name="hashName">The name of the specific implementation of MD2 to use.</param>
            <returns>A new instance of the specified implementation of MD2.</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpInit">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <remarks>
            SSH_FXP_INIT message consists of:
            
                uint32 length
                byte   SSH_FXP_INIT
                uint32 version 
                
            It has no request-id (so the default id is used)
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Apps.GAppsExtensions">
            <summary>
            All defined Google Apps extensions.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Apps.GAppsExtensions.AddProvisioningExtensions(EnterpriseDT.Google.GData.Client.AtomBase)">
            <summary>
            Declares provisioning extension elements for an atom base object.
            </summary>
            <param name="baseObject">the <code>AtomBase</code> object,
            e.g. <code>UserEntry</code> or <code>UserFeed</code></param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Apps.GAppsExtensions.AddMailItemExtensions(EnterpriseDT.Google.GData.Client.AtomBase)">
            <summary>
            Declares mail item extension elements for an atom base object.
            </summary>
            <param name="baseObject">the <code>AtomBase</code> object,
            e.g. <code>MailItemEntry</code> or <code>MailItemFeed</code></param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Apps.GAppsExtensions.AddPropertyElementExtensions(EnterpriseDT.Google.GData.Client.AtomBase)">
            <summary>
            Declares Google item extension elements for an atom base object.
            </summary>
            <param name="baseObject">the <code>AtomBase</code> object,
            e.g. <code>MailItemEntry</code> or <code>MailItemFeed</code></param>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Apps.AppsNameTable">
            <summary>
            Constants related to Google Apps extension elements.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Apps.AppsNameTable.AppsNamespace">
            <summary>The Google Apps namespace.</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Apps.AppsNameTable.AppsPrefix">
            <summary>Prefix of Google Apps extension elements.</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Apps.AppsNameTable.GAppsService">
            <summary>
            Identifier for Google Apps services.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Apps.AppsNameTable.appsBaseFeedUri">
            <summary>
            Base feed URI for all Google Apps requests.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Apps.AppsNameTable.User">
            <summary>
            Category term for a user account entry.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Apps.AppsNameTable.Nickname">
            <summary>
            Category term for a nickname entry.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Apps.AppsNameTable.AppsLogin">
            <summary>
            XML element name for user login information.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Apps.AppsNameTable.AppsLoginUserName">
            <summary>
            XML attribute for the username of a login element.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Apps.AppsNameTable.AppsLoginPassword">
            <summary>
            XML attribute for the password of a login element.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Apps.AppsNameTable.AppsLoginSuspended">
            <summary>
            XML attribute for the suspended flag of a login element.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Apps.AppsNameTable.AppsLoginIPWhitelisted">
            <summary>
            XML attribute for the ipWhitelisted flag of a login element.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Apps.AppsNameTable.AppsLoginHashFunctionName">
            <summary>
            XML attribute for the hashFunctionName flag of a login element.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Apps.AppsNameTable.AppsLoginAdmin">
            <summary>
            XML attribute for the admin flag of a login element.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Apps.AppsNameTable.AppsLoginAgreedToTerms">
            <summary>
            XML attribute for the agreedToTerms flag of a login element.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Apps.AppsNameTable.AppsLoginChangePasswordAtNextLogin">
            <summary>
            XML attribute for the changePasswordAtNextLogin flag of a login element.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Apps.AppsNameTable.AppsNickname">
            <summary>
            XML element name for nickname data.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Apps.AppsNameTable.AppsNicknameName">
            <summary>
            XML attribute for the "name" value of a nickname.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Apps.AppsNameTable.AppsQuota">
            <summary>
            XML element name for specifying user quota.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Apps.AppsNameTable.AppsQuotaLimit">
            <summary>
            XML attribute for the quota limit, in megabytes.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Apps.AppsNameTable.AppsName">
            <summary>
            XML element name for specifying a user name.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Apps.AppsNameTable.AppsNameFamilyName">
            <summary>
            XML attribute for the "familyName" value of a name.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Apps.AppsNameTable.AppsNameGivenName">
            <summary>
            XML attribute for the "givenName" value of a name.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Apps.AppsNameTable.AppsError">
            <summary>
            XML attribute for a Google Apps error.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Apps.AppsNameTable.AppsErrorErrorCode">
            <summary>
            XML attribute for the "errorCode" value of an error.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Apps.AppsNameTable.AppsErrorInvalidInput">
            <summary>
            XML attribute for the "invalidInput" value of an error.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Apps.AppsNameTable.AppsErrorReason">
            <summary>
            XML attribute for the "reason" value of an error.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Apps.AppsNameTable.AppsPropery">
            <summary>
            XML attribute for Apps generic properties
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Apps.AppsNameTable.AppsProperyName">
            <summary>
            XML attribute for Apps generic properties names
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Apps.AppsNameTable.AppsProperyValue">
            <summary>
            XML attribute for Apps generic properties values
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Apps.AppsMigrationNameTable">
            <summary>
            Name table for Google Apps extensions specific to the Email Migration
            API.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Apps.AppsMigrationNameTable.AppsLabel">
            <summary>apps:label extension element</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Apps.AppsMigrationNameTable.AppsLabelName">
            <summary>labelName attribute of apps:label extension</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Apps.AppsMigrationNameTable.AppsMailItemProperty">
            <summary>apps:mailItemProperty extension element</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Apps.AppsMigrationNameTable.AppsRfc822Msg">
            <summary>apps:rfc822Msg extension element</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Apps.AppsMigrationNameTable.AppsRfc822MsgEncoding">
            <summary>encoding attribute of apps:rfc822Msg extension</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Apps.AppsMigrationNameTable.AppsMigrationBaseFeedUri">
            <summary>
            Base feed URI for all Google Apps Migration requests.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Apps.AppsMigrationNameTable.MailItem">
            <summary>
            Category term for a mail item entry.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Apps.AppsGoogleMailSettingsNameTable">
            <summary>
            Name table for Google Apps extensions specific to the Google Mail Settings API.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Apps.AppsDomainSettingsNameTable">
            <summary>
            Name table for Google Apps extensions specific to the Google Domain Settings API.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Apps.AppsDomainSettingsNameTable.DefaultLanguageUriSuffix">
            <summary>
            URL suffixes for the Google Domain Settings tasks
            </summary>        
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Apps.AppsGroupsNameTable">
            <summary>
            Name table for Google Apps extensions specific to the Groups Provisioning
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Apps.PermissionLevel">
            <summary>
            The permission level for a Google Group.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Apps.AppsOrganizationNameTable">
            <summary>
            Name table for Google Apps extensions specific to the Organization Units Provisioning
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Apps.AppsMultiDomainNameTable">
            <summary>
            Name table for Google Apps extensions specific to the Multidomain Provisioning
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Apps.AppsCalendarResourceNameTable">
            <summary>
            Name table for Google Apps extensions specific to the Calendar Resources
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Apps.AuditNameTable">
            <summary>
            Name table for Google Apps extensions specific to the Audit API
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Apps.MonitorLevel">
            <summary>
            The amount of Audit information to be captured.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Apps.RequestStatus">
            <summary>
            The status of a request.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Apps.LoginElement">
            <summary>
            Google Apps GData extension to model a user account.
            Has attributes: "userName", "password", "suspended",
            "ipWhitelisted", "admin", "agreedToTerms",
            "changePasswordAtNextLogin", and "hashFunctionName".
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Apps.LoginElement.#ctor">
            <summary>
            Constructs an empty LoginElement instance.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Apps.LoginElement.#ctor(System.String)">
            <summary>
            Constructs a new LoginElement instance with the specified value.
            </summary>
            <param name="userName">The account's username.</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Apps.LoginElement.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Constructs a new LoginElement instance with the specified values.
            </summary>
            <param name="userName">The account's username.</param>
            <param name="password">The account's password.</param>
            <param name="suspended">True if the account has been suspended,
            false otherwise.</param>
            <param name="ipWhitelisted">True if the account has been IP whitelisted,
            false otherwise.</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Apps.LoginElement.#ctor(System.String,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Constructs a new LoginElement instance with the specified values.
            </summary>
            <param name="userName">The account's username.</param>
            <param name="password">The account's password.</param>
            <param name="suspended">True if the account has been suspended,
            false otherwise.</param>
            <param name="ipWhitelisted">True if the account has been IP whitelisted,
            false otherwise.</param>
            <param name="hashFunctionName">Hash function used to encode the password
            parameter.  Currently, only "SHA-1" is supported.</param>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Apps.LoginElement.UserName">
            <summary>
            UserName property accessor
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Apps.LoginElement.Password">
            <summary>
            Password property accessor
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Apps.LoginElement.Suspended">
            <summary>
            Suspended property accessor
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Apps.LoginElement.IPWhitelisted">
            <summary>
            IpWhitelisted property accessor
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Apps.LoginElement.HashFunctionName">
            <summary>
            HashFunctionName property accessor
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Apps.LoginElement.Admin">
            <summary>
            Admin property accessor.  The admin attribute is set to true if the user
            is an administrator and false if the user is not an administrator.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Apps.LoginElement.AgreedToTerms">
            <summary>
            AgreedToTerms property accessor.  Read-only; true if the user has agreed
            to the terms of service.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Apps.LoginElement.ChangePasswordAtNextLogin">
            <summary>
            ChangePasswordAtNextLogin property accessor.  Optional; true if
            the user needs to change his or her password at next login.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Apps.NameElement">
            <summary>
            Google Apps GData extension describing a name.
            Has attributes "familyName" and "givenName".
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Apps.NameElement.#ctor">
            <summary>
            Constructs an empty NameElement instance.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Apps.NameElement.#ctor(System.String,System.String)">
            <summary>
            Constructs a new NameElement instance with the specified values.
            </summary>
            <param name="familyName">Family name (surname).</param>
            <param name="givenName">Given name (first name).</param>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Apps.NameElement.FamilyName">
            <summary>
            FamilyName property accessor
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Apps.NameElement.GivenName">
            <summary>
            GivenName property accessor
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Apps.NicknameElement">
            <summary>
            Extension element to model a Google Apps nickname.
            Has attribute "name".
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Apps.NicknameElement.#ctor">
            <summary>
            Constructs an empty <code>NicknameElement</code> instance.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Apps.NicknameElement.#ctor(System.String)">
            <summary>
            Constructs a new <code>NicknameElement</code> instance with the specified value.
            </summary>
            <param name="name">the name attribute of this <code>NicknameElement</code></param>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Apps.NicknameElement.Name">
            <summary>
            Name property accessor.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Apps.QuotaElement">
            <summary>
            Extension element to model a Google Apps account quota.
            Has attribute "limit".
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Apps.QuotaElement.#ctor">
            <summary>
            Constructs an empty QuotaElement instance.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Apps.QuotaElement.#ctor(System.Int32)">
            <summary>
            Constructs a new QuotaElement instance with the specified value.
            </summary>
            <param name="limit">the quota, in megabytes.</param>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Apps.QuotaElement.Limit">
            <summary>
            Limit property accessor
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Apps.LabelElement">
            <summary>
            Google Apps Data Migration API element describing a mail item's
            label.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Apps.LabelElement.#ctor">
            <summary>
            Constructs an empty LabelElement instance.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Apps.LabelElement.#ctor(System.String)">
            <summary>
            Constructs a new LabelElement instance with the specified value.
            </summary>
            <param name="labelName">the name of the mail item's label</param>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Apps.LabelElement.LabelName">
            <summary>
            LabelName property accessor
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Apps.Rfc822MsgElement">
            <summary>
            Google Apps Data Migration API element describing the RFC 822
            message of a mail item.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Apps.Rfc822MsgElement.#ctor">
            <summary>
            Constructs a new <code>Rfc822Msg</code> element with no message.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Apps.Rfc822MsgElement.#ctor(System.Byte[])">
            <summary>
            Constructs a new <code>Rfc822Msg</code> element with the specified message.
            </summary>
            <param name="value">the RFC 822 message in byte array form</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Apps.Rfc822MsgElement.#ctor(System.String)">
            <summary>
            Constructs a new <code>Rfc822MsgElement</code> element with the specified message.
            </summary>
            <param name="value">the RFC 822 message in string form</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Apps.Rfc822MsgElement.#ctor(System.String,EnterpriseDT.Google.GData.Extensions.Apps.Rfc822MsgElement.EncodingMethod)">
            <summary>
            Constructs a new <code>Rfc822MsgElement</code> element with the specified message
            and encoding.
            </summary>
            <param name="value">the RFC 822 message in string form</param>
            <param name="messageEncoding">the encoding method of this RFC822 message</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Apps.Rfc822MsgElement.#ctor(System.Byte[],EnterpriseDT.Google.GData.Extensions.Apps.Rfc822MsgElement.EncodingMethod)">
            <summary>
            Constructs a new <code>Rfc822Msg</code> element with the specified message
            and encoding.
            </summary>
            <param name="value">the RFC 822 message in byte array form</param>
            <param name="messageEncoding">the encoding method of this RFC822 message</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Apps.Rfc822MsgElement.ToString">
            <summary>
            Returns the actual Rfc822 message as a string.
            Useful for debugging, but use with caution if
            the message is very large.
            </summary>
            <returns>String representation of the Rfc822 message</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Apps.Rfc822MsgElement.CreateInstance(System.Xml.XmlNode,EnterpriseDT.Google.GData.Client.AtomFeedParser)">
            <summary>Parses an xml node to create an Rfc822Msg object.</summary> 
            <param name="node">the xml parses node, can be NULL</param>
            <param name="parser">the xml parser to use if we need to dive deeper</param>
            <returns>the created SimpleElement object</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Apps.Rfc822MsgElement.SaveInnerXml(System.Xml.XmlWriter)">
            <summary>
            Saves the contents of this <code>Rfc822MsgElement</code> in XML
            </summary>
            <param name="writer">the <code>XmlWriter</code>to write to</param>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Apps.Rfc822MsgElement.Value">
            <summary>
             Accessor method for the Rfc822 message in byte array form
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Apps.Rfc822MsgElement.MessageEncoding">
            <summary>
            MessageEncoding property accessor
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Apps.Rfc822MsgElement.EncodingMethod">
            <summary>
            A method by which an Rfc822Msg may be encoded.  Currently the
            options are either plain UTF8 text (NONE) or Base64.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Apps.Rfc822MsgElement.EncodingMethod.NONE">
            <summary>
            indicates no encoding
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Apps.Rfc822MsgElement.EncodingMethod.BASE64">
            <summary>
            indicates base 64 encoding
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Apps.MailItemPropertyElement">
            <summary>
            Google Apps Data Migration API element describing an enumerable
            property about a mail item.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Apps.MailItemPropertyElement.DRAFT">
            <summary>Indicates that a mail item should be marked as a draft
            when inserted into GMail.</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Apps.MailItemPropertyElement.INBOX">
            <summary>Indicates that a mail item should be placed in the inbox
            when inserted into GMail.</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Apps.MailItemPropertyElement.SENT">
            <summary>Indicates that a mail item should be marked as "Sent" when
            inserted into GMail.</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Apps.MailItemPropertyElement.STARRED">
            <summary>Indicates that a mail item should be starred when inserted
            into GMail.</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Apps.MailItemPropertyElement.TRASH">
            <summary>Indicates that a mail item should be placed in the trash
            when inserted into GMail.</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Apps.MailItemPropertyElement.UNREAD">
            <summary>Indicates that a mail item should be marked as unread when
            inserted into GMail.</summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Apps.MailItemPropertyElement.#ctor">
            <summary>
            Constructs a new <code>MailItemPropertyElement</code>.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Apps.MailItemPropertyElement.#ctor(EnterpriseDT.Google.GData.Extensions.Apps.MailItemPropertyElement.MailItemProperty)">
            <summary>
            Constructs a new <code>MailItemPropertyElement</code> with the specified
            value.
            </summary>
            <param name="value">the <code>MailItemProperty</code> value for this element</param>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Apps.MailItemPropertyElement.Value">
            <summary>\
            Value property accessor
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Apps.MailItemPropertyElement.MailItemProperty">
            <summary>
            Defined mail item properties.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Apps.MailItemPropertyElement.MailItemProperty.IS_DRAFT">
            <summary>Mark as Draft</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Apps.MailItemPropertyElement.MailItemProperty.IS_INBOX">
            <summary>Move to Inbox</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Apps.MailItemPropertyElement.MailItemProperty.IS_SENT">
            <summary>Move to Sent Mail</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Apps.MailItemPropertyElement.MailItemProperty.IS_STARRED">
            <summary>Mark as starred</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Apps.MailItemPropertyElement.MailItemProperty.IS_TRASH">
            <summary>Move to Trash</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Apps.MailItemPropertyElement.MailItemProperty.IS_UNREAD">
            <summary>Mark as unread</summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Apps.PropertyElement">
            <summary>
            Google Apps Data Property API element describing a generic Name and Value
            with the AppsPrefix.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Apps.PropertyElement.#ctor">
            <summary>
            Constructs an empty PropertyElement instance.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Apps.PropertyElement.#ctor(System.String,System.String)">
            <summary>
            Constructs a new PropertyElement instance with the specified name and value.
            </summary>
            <param name="userName">The account's username.</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Apps.PropertyElement.Save(System.Xml.XmlWriter)">
            <summary>
            Persistence method for the EnumConstruct object
            overrides to allow empty strings for Value.
            </summary>
            <param name="writer">the xmlwriter to write into</param>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Apps.PropertyElement.Value">
            <summary>
            Value property accessor
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Apps.PropertyCollection">
            <summary>
            Typed collection for Properties Extensions.
            </summary>        
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.ExtensionCollection`1">
            <summary>
            base class to take an object pointer with extension information
            and expose a localname/namespace subset as a collection
            that still works on the original
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.ExtensionCollection`1.container">
            <summary>holds the owning feed</summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.ExtensionCollection`1.CtorXmlName">
            <summary>
            Get the XmlName for the Type
            </summary>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.ExtensionCollection`1.CtorXmlNS">
            <summary>
            Get the Xml Namespace for the Type
            </summary>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.ExtensionCollection`1.#ctor">
            <summary>
            protected default constructor, not usable by outside
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.ExtensionCollection`1.#ctor(EnterpriseDT.Google.GData.Client.IExtensionContainer)">
            <summary>
            takes the base object, and the localname/ns combo to look for
            will copy objects to an internal array for caching. Note that when the external 
            ExtensionList is modified, this will have no effect on this copy
            </summary>
            <param name="containerElement">the base element holding the extension list</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.ExtensionCollection`1.#ctor(EnterpriseDT.Google.GData.Client.IExtensionContainer,System.String,System.String)">
            <summary>
            takes the base object, and the localname/ns combo to look for
            will copy objects to an internal array for caching. Note that when the external 
            ExtensionList is modified, this will have no effect on this copy
            </summary>
            <param name="containerElement">the base element holding the extension list</param>
            <param name="localName">the local name of the extension</param>
            <param name="ns">the namespace</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.ExtensionCollection`1.setItem(System.Int32,`0)">
            <summary>
            useful for subclasses that want to overload the set method
            </summary>
            <param name="index">the index in the array</param>
            <param name="item">the item to set </param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.ExtensionCollection`1.Add(`0)">
            <summary>
            default untyped add implementation. Adds the object as well to the parent
            object ExtensionList
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.ExtensionCollection`1.Insert(System.Int32,`0)">
            <summary>
            inserts an element into the collection by index
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.ExtensionCollection`1.Remove(`0)">
            <summary>
            removes an element from the collection
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.ExtensionCollection`1.IndexOf(`0)">
            <summary>standard typed indexOf method </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.ExtensionCollection`1.Contains(`0)">
            <summary>standard typed Contains method </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.ExtensionCollection`1.OnClear">
            <summary>standard override OnClear, to remove the objects from the extension list</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.ExtensionCollection`1.Item(System.Int32)">
            <summary>standard typed accessor method </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Apps.PropertyCollection.#ctor(EnterpriseDT.Google.GData.Client.IExtensionContainer)">
            <summary>constructor</summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.XmlExtension">
            <summary>
            placeholder object for an unknown XML extension element
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.XmlExtension.#ctor(System.Xml.XmlNode)">
            <summary>
            Default constructor for an XmlExtension, just takes
            the xmlnode that should be used in the extension element
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.XmlExtension.ToString">
            <summary>
            debugging helper
            </summary>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.XmlExtension.op_Implicit(EnterpriseDT.Google.GData.Extensions.XmlExtension)~System.Xml.XmlNode">
            <summary>
            Allows an XmlExtension to be cast directly into an xmlnode
            this should avoid or at least ease code breakage for clients relying on XmlNodes
            in the extensionelements
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.XmlExtension.CreateInstance(System.Xml.XmlNode,EnterpriseDT.Google.GData.Client.AtomFeedParser)">
            <summary>Parses an xml node to create an instance of this  object.</summary> 
            <param name="node">the xml parses node, can be NULL</param>
            <param name="parser">the xml parser to use if we need to dive deeper</param>
            <returns>the created IExtensionElement object</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.XmlExtension.Save(System.Xml.XmlWriter)">
            <summary>
            Persistence method for the XmlExtension
            </summary>
            <param name="writer">the xmlwriter to write into</param>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.XmlExtension.Node">
            <summary>accessor method public XmlNode Node</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.XmlExtension.XmlName">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.XmlExtension.XmlNameSpace">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.XmlExtension.XmlPrefix">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpRemove">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <remarks>
            byte   SSH_FXP_REMOVE
            uint32 request-id
            string filename  [UTF-8]
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpRemove.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="T:EnterpriseDT.Util.StringSplitter">
            <summary>
            Useful for splitting strings into fields. A bit cleaner
            than a regex for what we want to do
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.StringSplitter.Split(System.String)">
            <summary>
            Splits string consisting of fields separated by
            whitespace into an array of strings.
            </summary>
            <param name="str">string to split</param>   
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.ServiceNames">
            <summary>
             this is the static collection of all google service names
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.Authenticator">
            <summary>
            Base authentication class. Takes credentials and applicationname
            and is able to create a HttpWebRequest augmented with the right
            authentication
            </summary>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Authenticator.#ctor(System.String)">
            <summary>
            an unauthenticated use case
            </summary>
            <param name="applicationName"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Authenticator.CreateHttpWebRequest(System.String,System.Uri)">
            <summary>
            Creates a HttpWebRequest object that can be used against a given service. 
            for a RequestSetting object that is using client login, this might call 
            to get an authentication token from the service, if it is not already set.
            
            if this uses client login, and you need to use a proxy, set the application wide
            proxy first using the GlobalProxySelection
            </summary>
            <param name="serviceName"></param>
            <param name="httpMethod"></param>
            <param name="targetUri"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Authenticator.ApplyAuthenticationToRequest(System.Net.HttpWebRequest)">
            <summary>
            Takes an existing httpwebrequest and modifies its headers according to 
            the authentication system used.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Authenticator.ApplyAuthenticationToUri(System.Uri)">
            <summary>
            Takes an existing httpwebrequest and modifies its uri according to 
            the authentication system used. Only overridden in 2-leggedoauth case
            </summary>
            <param name="source">the original uri</param>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.Authenticator.Application">
            <summary>
            returns the application name
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.Authenticator.DeveloperKey">
            <summary>
            primarily for YouTube. allows you to set the developer key used
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.ClientLoginAuthenticator.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
             a constructor for client login use cases
            </summary>
            <param name="applicationName"></param>
            <param name="username"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.ClientLoginAuthenticator.#ctor(System.String,System.String,EnterpriseDT.Google.GData.Client.GDataCredentials)">
            <summary>
             a constructor for client login use cases
            </summary>
            <param name="applicationName">The name of the application</param>
            <param name="credentials">the user credentials</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.ClientLoginAuthenticator.#ctor(System.String,System.String,EnterpriseDT.Google.GData.Client.GDataCredentials,System.Uri)">
            <summary>
             a constructor for client login use cases
            </summary>
            <param name="applicationName">The name of the application</param>
            <param name="credentials">the user credentials</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.ClientLoginAuthenticator.ApplyAuthenticationToRequest(System.Net.HttpWebRequest)">
            <summary>
            Takes an existing httpwebrequest and modifies its headers according to
            the authentication system used.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.ClientLoginAuthenticator.Credentials">
            <summary>
            returns the Credentials in case of a client login scenario
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.ClientLoginAuthenticator.Service">
            <summary>
            returns the service this authenticator is working against
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.ClientLoginAuthenticator.LoginHandler">
            <summary>
            returns the loginhandler that is used to acquire the token from
            </summary>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AuthSubAuthenticator.#ctor(System.String,System.String)">
            <summary>
            a constructor for a web application authentication scenario
            </summary>
            <param name="applicationName"></param>
            <param name="authSubToken"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AuthSubAuthenticator.#ctor(System.String,System.String,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            a constructor for a web application authentication scenario
            </summary>
            <param name="applicationName"></param>
            <param name="authSubToken"></param>
            <param name="privateKey"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AuthSubAuthenticator.ApplyAuthenticationToRequest(System.Net.HttpWebRequest)">
            <summary>
            Takes an existing httpwebrequest and modifies its headers according to
            the authentication system used.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AuthSubAuthenticator.Token">
            <summary>
            returns the authsub token to use for a webapplication scenario
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AuthSubAuthenticator.PrivateKey">
            <summary>
            returns the private key used for authsub authentication
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.OAuthAuthenticator.ConsumerKey">
            <summary>
            returns the ConsumerKey
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.OAuthAuthenticator.ConsumerSecret">
            <summary>
            returns the ConsumerSecret
            </summary>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.OAuth2LeggedAuthenticator.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            a constructor for OpenAuthentication login use cases
            </summary>
            <param name="applicationName">The name of the application</param>
            <param name="consumerKey">the consumerKey to use</param>
            <param name="consumerSecret">the consumerSecret to use</param>
            <param name="user">the username to use</param>
            <param name="domain">the domain to use</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.OAuth2LeggedAuthenticator.ApplyAuthenticationToRequest(System.Net.HttpWebRequest)">
            <summary>
            Takes an existing httpwebrequest and modifies its headers according to
            the authentication system used.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.OAuth2LeggedAuthenticator.ApplyAuthenticationToUri(System.Uri)">
            <summary>
            Takes an existing httpwebrequest and modifies its uri according to 
            the authentication system used. Only overridden in 2-legged OAuth case
            Here we need to add the xoauth_requestor_id parameter
            </summary>
            <param name="source">the original uri</param>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.OAuth2LeggedAuthenticator.OAuthUser">
            <summary>
            returns the OAuth User
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.OAuth2LeggedAuthenticator.OAuthDomain">
            <summary>
            returns the OAuth Domain
            </summary>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.OAuth3LeggedAuthenticator.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
             a constructor for OpenAuthentication login use cases using 3-legged oAuth
            </summary>
            <param name="applicationName">The name of the application</param>
            <param name="consumerKey">the consumerKey to use</param>
            <param name="consumerSecret">the consumerSecret to use</param>
            <param name="token">The token to be used</param>
            <param name="tokenSecret">The tokenSecret to be used</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.OAuth3LeggedAuthenticator.ApplyAuthenticationToRequest(System.Net.HttpWebRequest)">
            <summary>
            Takes an existing httpwebrequest and modifies its headers according to
            the authentication system used.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.OAuth3LeggedAuthenticator.Token">
            <summary>
            returns the Token for oAuth
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.OAuth3LeggedAuthenticator.TokenSecret">
            <summary>
            returns the TokenSecret for oAuth
            </summary>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Pro.ProFTPFileList">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPFileList.#ctor">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPFileList.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPFileList.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPFileList.fileListView_DoubleClick(System.Object,System.EventArgs)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPFileList.fileListView_AfterLabelEdit(System.Object,System.Windows.Forms.LabelEditEventArgs)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPFileList.CreateListViewItem(EnterpriseDT.Net.Ftp.FTPFile)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPFileList.CreateListViewItem(System.String,System.Boolean,System.Int64,System.DateTime,System.Object)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="name"></param>
            <param name="isDir"></param>
            <param name="size"></param>
            <param name="modifiedDate"></param>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPFileList.Connection">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPFileList.AllowDelete">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPFileList.BackColor">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPFileList.ForeColor">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPFileList.GridLines">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPFileList.ShowIcons">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPFileList.ShowNameColumn">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPFileList.NameColumnText">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPFileList.NameColumnWidth">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPFileList.ShowSizeColumn">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPFileList.SizeColumnText">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPFileList.SizeColumnTextAlign">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPFileList.SizeColumnWidth">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPFileList.ShowDateColumn">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPFileList.DateColumnText">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPFileList.DateColumnTextAlign">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPFileList.DateColumnWidth">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPFileList.ShowParentDirEllipsis">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPLocalFileList.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPLocalFileList.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPLocalFileList.Connection">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Pro.ProFTPLocalFileList.DirectoryChanged">
            <summary>Occurs when the directory shown in the list has been changed.</summary> 
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.SetCommand">
            <summary>  
            Set various variables in the script engine
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.8 $
            
            </version>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.SetCommand.CreateVariable(EnterpriseDT.Net.Ftp.Script.ScriptEngine,System.String,System.String)">
            <summary> Create a new variable (or overwrite an existing one)
            
            </summary>
            <param name="engine">   reference to script engine
            </param>
            <param name="param">    new variable name
            </param>
            <param name="value">    new variable's value
            </param>
            <returns> ScriptResult
            @throws IOException
            
            </returns>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Ssl.Shared.SslException">
            <summary>
            
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.Shared.SslException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.Shared.SslException.#ctor(EnterpriseDT.Mentalis.Security.Ssl.Shared.AlertDescription,System.String)">
            <summary>
            
            </summary>
            <param name="description"></param>
            <param name="message"></param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.Shared.SslException.#ctor(System.Exception,EnterpriseDT.Mentalis.Security.Ssl.Shared.AlertDescription,System.String)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="description"></param>
            <param name="message"></param>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.Shared.SslException.AlertDescription">
            <summary>
            
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.HttpMethods">
            <summary>a simple static collection of HTTP method strings </summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.HttpMethods.Delete">
            <summary>the delete method</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.HttpMethods.Post">
            <summary>the post method</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.HttpMethods.Put">
            <summary>the put method</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.HttpMethods.Get">
            <summary>the get method</summary> 
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.HttpFormPost">
            <summary>a simple static collection of HTTP form post strings </summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.HttpFormPost.Encoding">
            <summary>form encoding</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.HttpFormPost.ReturnContentType">
            <summary>expected return form contenttype</summary> 
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.AlternativeFormat">
            <summary>enum to describe the different formats that query might return
            </summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AlternativeFormat.Atom">
            <summary>returns an atom format</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AlternativeFormat.Rss">
            <summary>returns RSS 2.0</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AlternativeFormat.OpenSearchRss">
            
            <summary>returns the Open RSS 2.0s</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AlternativeFormat.Unknown">
            <summary>parsing error</summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.DebugCommand">
            <summary>  Switch debugging on and off
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.2 $
            
            </version>
        </member>
        <member name="P:EnterpriseDT.Net.Zlib.ZInputStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:EnterpriseDT.Net.Zlib.ZInputStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.OS400FileParser">
            <summary>  
            Represents a remote OS400 file parser. 
            </summary>
            <remarks>
            This parser is somewhat experimental :)
            </remarks>
            <author>Bruce Blackshaw
            </author>
            <version>$Revision: 1.8 $</version>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.OS400FileParser.DIR">
            <summary>Directory field</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.OS400FileParser.DDIR">
            <summary>Directory field</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.OS400FileParser.MEM">
            <summary>MEM field?</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.OS400FileParser.MIN_EXPECTED_FIELD_COUNT">
            <summary> Number of expected fields</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.OS400FileParser.DATE_FORMAT_1">
            <summary>Date formats</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.OS400FileParser.formats1">
            <summary>array of formats</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.OS400FileParser.log">
            <summary> Logging object</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.OS400FileParser.IsValidFormat(System.String[])">
            <summary>
            Test for valid format for this parser
            </summary>
            <param name="listing">listing to test</param>
            <returns>true if valid</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.OS400FileParser.Parse(System.String)">
            <summary> Parse server supplied string</summary>
            <param name="raw">raw string to parse</param>
            <returns>FTPFile object representing the raw string</returns>
            <remarks>Listing look like the below:
                   CFT             45056 04/12/06 14:19:31 *FILE AFTFRE1.FILE
                   CFT                                     *MEM AFTFRE1.FILE/AFTFRE1.MBR
                   CFT             36864 28/11/06 15:19:30 *FILE AFTFRE2.FILE
                   CFT                                     *MEM AFTFRE2.FILE/AFTFRE2.MBR
                   CFT             45056 04/12/06 14:19:37 *FILE AFTFRE6.FILE
                   CFT                                     *MEM  AFTFRE6.FILE/AFTFRE6.MBR
                   QSYSOPR         28672 01/12/06 20:08:04 *FILE FPKI45POK5.FILE
                   QSYSOPR                                 *MEM FPKI45POK5.FILE/FPKI45POK5.MBR        
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.OS400FileParser.TimeIncludesSeconds">
            <summary>
            Get flag indicating whether or not the most recent parse returned seconds.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AsyncData.UriToUse">
            <summary>
            the uri to use
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AsyncData.ParseFeed">
            <summary>
            indicates if the async operation should try to 
            parse the server returned stream, or just return the stream
            </summary>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.ResumableUpload.ResumableUploader">
            <summary>
            this class handles the Resumable Upload protocol
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.ResumableUpload.ResumableUploader.CreateMediaRelation">
            <summary>
            The relationship value to be used to find the resumable 
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.ResumableUpload.ResumableUploader.#ctor">
            <summary>
            Default constructor. Uses the default chunksize of 25 megabyte
            </summary>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.ResumableUpload.ResumableUploader.#ctor(System.Int32)">
            <summary>
            ResumableUploader constructor. 
            </summary>
            <param name="chunkSize">the upload chunksize in Megabytes, needs to be greater than 0</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.ResumableUpload.ResumableUploader.GetResumableEditUri(EnterpriseDT.Google.GData.Client.AtomLinkCollection)">
            <summary>
            returns the resumable edit media Uri for a given entry
            </summary>
            <param name="entry"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.ResumableUpload.ResumableUploader.GetResumableCreateUri(EnterpriseDT.Google.GData.Client.AtomLinkCollection)">
            <summary>
            returns the resumabled create media Uri for a given entry
            </summary>
            <param name="entry"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.ResumableUpload.ResumableUploader.Insert(EnterpriseDT.Google.GData.Client.Authenticator,EnterpriseDT.Google.GData.Client.AbstractEntry)">
            <summary>
            Uploads an entry, including it's media to the uri given inside the entry. 
            </summary>
            <param name="authentication">The authentication information to be used</param>
            <param name="payload">The entry to be uploaded. This is a complete entry, including the metadata. 
            This will create a new entry on the service</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.ResumableUpload.ResumableUploader.Insert(EnterpriseDT.Google.GData.Client.Authenticator,System.Uri,System.IO.Stream,System.String,System.String)">
            <summary>
            Uploads just the media media to the uri given. 
            </summary>
            <param name="resumableUploadUri"></param>
            <param name="authentication">The authentication information to be used</param>
            <param name="payload">The media to uploaded.</param>
            <param name="contentType">The type of the content, e.g. text/html</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.ResumableUpload.ResumableUploader.QueryStatus(EnterpriseDT.Google.GData.Client.Authenticator,System.Uri)">
            <summary>
             askes the server about the current status
            </summary>
            <param name="authentication"></param>
            <param name="targetUri"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.ResumableUpload.ResumableUploader.AsyncInsertWorker(EnterpriseDT.Google.GData.Client.ResumableUpload.AsyncResumableUploadData,System.ComponentModel.AsyncOperation,System.Threading.SendOrPostCallback)">
            <summary>
             worker method for the the resumable insert
            </summary>
            <param name="data"></param>
            <param name="asyncOp"></param>
            <param name="completionMethodDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.ResumableUpload.ResumableUploader.Update(EnterpriseDT.Google.GData.Client.Authenticator,EnterpriseDT.Google.GData.Client.AbstractEntry)">
            <summary>
            Uploads an entry, including it's media to the uri given inside the entry
            </summary>
            <param name="resumableUploadUri"></param>
            <param name="authentication">The authentication information to be used</param>
            <param name="payload">The entry to be uploaded. This is a complete entry, including the metadata. 
            This will create a new entry on the service</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.ResumableUpload.ResumableUploader.Update(EnterpriseDT.Google.GData.Client.Authenticator,System.Uri,System.IO.Stream,System.String)">
            <summary>
            Uploads just the media to the uri given.
            </summary>
            <param name="resumableUploadUri"></param>
            <param name="authentication">The authentication information to be used</param>
            <param name="payload">The media to uploaded.</param>
            <param name="contentType">The type of the content, e.g. text/html</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.ResumableUpload.ResumableUploader.AsyncResumeWorker(EnterpriseDT.Google.GData.Client.ResumableUpload.AsyncResumableUploadData,System.ComponentModel.AsyncOperation,System.Threading.SendOrPostCallback)">
            <summary>
            worker method to handle the resume operation
            </summary>
            <param name="data"></param>
            <param name="asyncOp"></param>
            <param name="completionMethodDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.ResumableUpload.ResumableUploader.AsyncUpdateWorker(EnterpriseDT.Google.GData.Client.ResumableUpload.AsyncResumableUploadData,System.ComponentModel.AsyncOperation,System.Threading.SendOrPostCallback)">
            <summary>
            worker method for the resumable update
            </summary>
            <param name="data"></param>
            <param name="asyncOp"></param>
            <param name="completionMethodDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.ResumableUpload.ResumableUploader.UploadStream(System.String,System.Uri,EnterpriseDT.Google.GData.Client.Authenticator,System.IO.Stream,System.String,EnterpriseDT.Google.GData.Client.AsyncData)">
            <summary>
            Note the URI passed in here, is the session URI obtained by InitiateUpload
            </summary>
            <param name="targetUri"></param>
            <param name="authentication"></param>
            <param name="payload"></param>
            <param name="mediaType"></param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.ResumableUpload.ResumableUploader.CopyData(System.IO.Stream,System.Net.HttpWebRequest,System.Int32,EnterpriseDT.Google.GData.Client.AsyncData,System.Uri)">
            <summary>takes our copy of the stream, and puts it into the request stream
            returns FALSE when we are done by reaching the end of the input stream</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.ResumableUpload.ResumableUploader.InitiateUpload(System.Uri,EnterpriseDT.Google.GData.Client.Authenticator,System.String,System.String,System.Int64)">
            <summary>
            retrieves the resumable URI for the rest of the operation. This will initiate the 
            communication with resumable upload server by posting against the starting URI
            </summary>
            <param name="resumableUploadUri"></param>
            <param name="authentication"></param>
            <param name="entry"></param>
            <returns>The uri to be used for the rest of the operation</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.ResumableUpload.ResumableUploader.InitiateUpload(System.Uri,EnterpriseDT.Google.GData.Client.Authenticator,System.String,System.String,System.Int64,System.String)">
            <summary>
            retrieves the resumable URI for the rest of the operation. This will initiate the 
            communication with resumable upload server by posting against the starting URI
            </summary>
            <param name="resumableUploadUri"></param>
            <param name="authentication"></param>
            <param name="entry"></param>
            <returns>The uri to be used for the rest of the operation</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.ResumableUpload.ResumableUploader.InitiateUpload(System.Uri,EnterpriseDT.Google.GData.Client.Authenticator,EnterpriseDT.Google.GData.Client.AbstractEntry)">
            <summary>
            retrieves the resumable URI for the rest of the operation. This will initiate the 
            communication with resumable upload server by posting against the starting URI
            </summary>
            <param name="resumableUploadUri"></param>
            <param name="authentication"></param>
            <param name="entry"></param>
            <returns>The uri to be used for the rest of the operation</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.ResumableUpload.ResumableUploader.InitiateUpload(System.Uri,EnterpriseDT.Google.GData.Client.Authenticator,EnterpriseDT.Google.GData.Client.AbstractEntry,System.String)">
            <summary>
            retrieves the resumable URI for the rest of the operation. This will initiate the 
            communication with resumable upload server by posting against the starting URI
            </summary>
            <param name="resumableUploadUri"></param>
            <param name="authentication"></param>
            <param name="entry"></param>
            <returns>The uri to be used for the rest of the operation</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.ResumableUpload.ResumableUploader.AsyncStarter(EnterpriseDT.Google.GData.Client.ResumableUpload.AsyncResumableUploadData,EnterpriseDT.Google.GData.Client.ResumableUpload.ResumableUploader.WorkerResumableUploadHandler,System.Object)">
            <summary>
            starts the async job
            </summary>
            <param name="data"></param>
            <param name="userData"></param>
            <param name="workerDelegate"></param>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpMkDir">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpMkDir.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.GDataCredentials">
            <summary>
            the class holds username and password to replace networkcredentials
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataCredentials.#ctor(System.String,System.String)">
            <summary>
            default constructor
            </summary>
            <param name="username">the username to use</param>
            <param name="password">the password to use</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataCredentials.#ctor(System.String)">
            <summary>
            default constructor
            </summary>
            <param name="clientToken">the client login token to use</param>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataCredentials.Username">
            <summary>the username used for authentication</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataCredentials.AccountType">
            <summary>the type of Account used</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataCredentials.CaptchaToken">
            <summary>in case you need to handle catpcha responses for this account</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataCredentials.CaptchaAnswer">
            <summary>in case you need to handle catpcha responses for this account</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataCredentials.Password">
            <summary>accessor method Password</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataCredentials.ClientToken">
            <summary>
            returns the stored clienttoken
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataCredentials.NetworkCredential">
            <summary>
            returns a windows conforming NetworkCredential 
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.GDataRequestFactory">
            <summary>base GDataRequestFactory implementation</summary> 
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.IGDataRequestFactory">
            <summary>the one that creates GDatarequests on the service
            </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.IGDataRequestFactory.CreateRequest(EnterpriseDT.Google.GData.Client.GDataRequestType,System.Uri)">
            <summary>creation method for GDatarequests</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.IGDataRequestFactory.UseGZip">
            <summary>set wether or not to use gzip for new requests</summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.IGDataRequestFactory.UseSSL">
            <summary>
            indicates that the service should use SSL exclusively
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GDataRequestFactory.GDataAgent">
            <summary>this factory's agent</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GDataRequestFactory.DefaultContentType">
            <summary>
            the default content type for the atom envelope
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GDataRequestFactory.SetCookieHeader">
            <summary>Cookie setting header, returned from server</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GDataRequestFactory.CookieHeader">
            <summary>Cookie client header</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GDataRequestFactory.SlugHeader">
            <summary>Slug client header</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GDataRequestFactory.ContentOverrideHeader">
            <summary>content override header for resumable upload</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GDataRequestFactory.ContentLengthOverrideHeader">
            <summary>content length header for resumable upload</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GDataRequestFactory.EtagHeader">
            <summary>
            constant for the Etag header
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GDataRequestFactory.IfMatch">
            <summary>
            constant for the If-Match header
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GDataRequestFactory.IfNoneMatch">
            <summary>
            constant for the if-None-match header
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GDataRequestFactory.IfMatchAll">
            <summary>
            constant for the ifmatch value that matches everything
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GDataRequestFactory.userAgent">
            <summary>holds the user-agent</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataRequestFactory.#ctor(System.String)">
            <summary>default constructor</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataRequestFactory.CreateRequest(EnterpriseDT.Google.GData.Client.GDataRequestType,System.Uri)">
            <summary>default constructor</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataRequestFactory.UseGZip">
            <summary>whether or not new requests should use GZip</summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataRequestFactory.Cookies">
            <summary>The cookie container that is used for requests. Note 
            that this is not available on the compact framework</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataRequestFactory.ContentType">
            <summary>sets and gets the Content Type, used for binary transfers</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataRequestFactory.Slug">
            <summary>sets and gets the slug header, used for binary transfers
            note that the data will be converted to ASCII and URLencoded on setting it
            </summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataRequestFactory.UserAgent">
            <summary>accessor method public string UserAgent</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataRequestFactory.Proxy">
            <summary>accessor method to the webproxy object to use</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataRequestFactory.KeepAlive">
            <summary>indicates if the connection should be kept alive, default
            is true</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataRequestFactory.UseSSL">
            <summary>indicates if the connection should use https</summary>
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataRequestFactory.Timeout">
            <summary>gets and sets the Timeout property used for the created
            HTTPRequestObject in milliseconds. if you set it to -1 it will stick 
            with the default of the HTTPRequestObject. From MSDN:
            The number of milliseconds to wait before the request times out. 
            The default is 100,000 milliseconds (100 seconds).</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataRequestFactory.CustomHeaders">
            <summary>accessor method public StringArray CustomHeaders</summary> 
            <returns> </returns>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.GDataRequest">
            <summary>base GDataRequest implmentation</summary> 
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.IGDataRequest">
            <summary>Thin layer to abstract the request/response
            </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.IGDataRequest.GetRequestStream">
            <summary>gets the request stream to write into</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.IGDataRequest.Execute">
            <summary>Executes the request</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.IGDataRequest.GetResponseStream">
            <summary>gets the response stream to read from</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.IGDataRequest.Credentials">
            <summary>get/set for credentials to the service calls. Gets passed through to GDatarequest</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.IGDataRequest.UseGZip">
            <summary>set wether or not to use gzip for this request</summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.IGDataRequest.IfModifiedSince">
            <summary>set a timestamp for conditional GET</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GDataRequest.webRequest">
            <summary>holds the webRequest object</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GDataRequest.webResponse">
            <summary>holds the webresponse object</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GDataRequest.targetUri">
            <summary>holds the target Uri</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GDataRequest.type">
            <summary>holds request type</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GDataRequest.credentials">
            <summary>holds the credential information</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GDataRequest.requestStream">
            <summary>holds the request if a stream is open</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GDataRequest.disposed">
            <summary>holds if we are disposed</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GDataRequest.useGZip">
            <summary>set whether or not this request should use GZip</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GDataRequest.ifModifiedSince">
            <summary>holds the timestamp for conditional GET</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GDataRequest.responseStream">
            <summary>stream from the response</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GDataRequest.contentType">
            <summary>holds the contenttype to use if overridden</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GDataRequest.slugHeader">
            <summary>holds the slugheader to use if overridden</summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataRequest.#ctor(EnterpriseDT.Google.GData.Client.GDataRequestType,System.Uri,EnterpriseDT.Google.GData.Client.GDataRequestFactory)">
            <summary>default constructor</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataRequest.Dispose">
            <summary>implements the disposable interface</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataRequest.Dispose(System.Boolean)">
            <summary>does the real disposition</summary> 
            <param name="disposing">indicates if dispose called it or finalize</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataRequest.Reset">
            <summary>resets the object's state</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataRequest.GetRequestStream">
            <summary>returns the writable request stream</summary> 
            <returns> the stream to write into</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataRequest.EnsureWebRequest">
            <summary>ensures that the correct HTTP verb is set on the stream</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataRequest.EnsureCredentials">
            <summary>sets up the correct credentials for this call, pending 
            security scheme</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataRequest.LogRequest(System.Net.WebRequest)">
            <summary>Logs the request object if overridden in subclass</summary>
            <param name="request">the request to log</param> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataRequest.LogResponse(System.Net.WebResponse)">
            <summary>Logs the response object if overridden in subclass</summary>
            <param name="response">the response to log</param> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataRequest.Execute">
            <summary>Executes the request and prepares the response stream. Also 
            does error checking</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataRequest.GetResponseStream">
            <summary>gets the readable response stream</summary> 
            <returns> the response stream</returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataRequest.TargetUri">
            <summary>
            exposing the private targetUri so that subclasses can override
            the value for redirect handling
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataRequest.UseGZip">
            <summary>set whether or not this request should use GZip</summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataRequest.IfModifiedSince">
            <summary>set a timestamp for conditional GET</summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataRequest.Credentials">
            <summary>accessor method for the GDataCredentials used</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataRequest.ContentType">
            <summary>sets and gets the content Type, used for binary transfers</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataRequest.Etag">
            <summary>sets and gets the etag header value, used for concurrency</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataRequest.Slug">
            <summary>sets and gets the slugHeader, used for binary transfers
            will encode to ascii and urlencode the string on setting it. 
            </summary>
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataRequest.ContentLength">
            <summary>
            returnes the contentlength of the response, -1 if none was given
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataRequest.Request">
            <summary>accessor method protected WebRequest Request</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataRequest.Response">
            <summary>accessor method protected WebResponse Response</summary> 
            <returns> </returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.OpenSSHPrivateKeyFormat">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.OpenSSHPrivateKeyFormat.log">
            <summary> Logging object</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.OpenSSHPrivateKeyFormat.IsFormatted(System.Byte[])">
            <summary>
            Are the supplied raw key bytes in this key format?
            </summary>
            <param name="formattedKey">raw bytes from keyfile</param>
            <returns>true if in this format, false otherwise</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.OpenSSHPrivateKeyFormat.FormatKeyPair(EnterpriseDT.Net.Ssh.Routrek.PKI.KeyPair,System.String)">
            <summary>
            Format keypair for writing to a file
            </summary>
            <param name="pair"></param>
            <param name="passphrase"></param>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SFTPMessageProcessor">
            <summary>
            SSH messages received are channelled via this class
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SFTPMessageProcessor.log">
            <summary> Logging object</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPMessageProcessor.OnData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Called when SSH_MESSAGE_DATA is received
            </summary>
            <param name="data">array of data</param>
            <param name="offset">offset into array</param>
            <param name="length">length of data</param>
            <remarks>
            SFTP subsystem messages are sent as SSH_MESSAGE_DATA. They may be
            spread out over a number of data messages, and so each message
            must be pieced together
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Spreadsheets.SpreadsheetFeed">
            <summary>
            Feed API customization class for defining a myspreadsheets feed.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.AbstractFeed">
            <summary>Base class to read gData feeds in Atom, with the extension of
            setting up extension element parsing
            </summary> 
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.AtomFeed">
            <summary>Base class to read gData feeds in Atom</summary>
            <remarks>
            <para>
            Version 1.0 changed to:
            <code>
            AtomFeed =
               element atom:feed {
                  atomCommonAttributes,
                  (atomAuthor*
                   atomCategory*
                   atomContributor*
                   atomGenerator?
                   atomIcon?
                   atomId
                   atomLink*
                   atomLogo?
                   atomRights?
                   atomSubtitle?
                   atomTitle
                   atomUpdated
                   extensionElement*),
                  atomEntry*
               }
            </code>
            In addition it holds:
            <list type="bullet">
                <item>
                    <term><c>opensearch:totalResults</c></term>
                    <description>Total number of search results available (not necessarily all present in the feed).</description>
                </item>
                <item>
                    <term><c>opensearch:startIndex</c></term>
                    <description>The 1-based index of the first result.</description>
                </item>
                <item>
                    <term><c>opensearch:itemsPerPage</c></term>
                    <description>The maximum number of items that appear on one page. This allows clients to generate direct links to any set of subsequent pages.</description>
                </item>
            </list>
            </para>
            <para>
            In addition to these OpenSearch tags, the response also includes the following Atom and gData tags:
            <list type="bullet">
                <item>
                    <term><c>atom:link rel="service.feed" type="application/atom+xml" href="..."/></c></term>
                    <description>Specifies the URI where the complete Atom feed can be retrieved.</description>
                </item>
                <item>
                    <term><c>atom:link rel="service.feed" type="application/rss+xml" href="..."/></c></term>
                    <description>Specifies the URI where the complete RSS feed can be retrieved.</description>
                </item>
                <item>
                    <term><c>atom:link rel="service.post" type="application/atom+xml" href="..."/></c></term>
                    <description>Specifies the Atom feed PostURI (where new entries can be posted).</description>
                </item>
                <item>
                    <term><c>atom:link rel="self" type="..." href="..."/></c></term>
                    <description>Contains the URI of this search request. The type attribute depends on the requested format. If no data changes, issuing a <c>GET</c> to this URI returns the same response.</description>
                </item>
                <item>
                    <term><c>atom:link rel="previous" type="application/atom+xml" href="..."/></c></term>
                    <description>Specifies the URI of the previous chunk of this query resultset, if it is chunked.</description>
                </item>
                <item>
                    <term><c>atom:link rel="next" type="application/atom+xml" href="..."/></c></term>
                    <description>Specifies the URI of the next chunk of this query resultset, if it is chunked.</description>
                </item>
                <item>
                    <term><c>gdata:processed parameter="..."/></c></term>
                    <description>One of these tags is inserted for each parameter understood and processed by the service, e.g. <c>gdata:processed parameter="author"</c>.</description>
                </item>
            </list>
            </para>
            </remarks> 
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.AtomSource">
            <summary>Represents the AtomSource object. If an atom:entry is copied from one feed 
            into another feed, then the source atom:feed's metadata (all child elements of atom:feed other
            than the atom:entry elements) MAY be preserved within the copied entry by adding an atom:source 
            child element, if it is not already present in the entry, and including some or all of the source
            feed's Metadata elements as the atom:source element's children. Such metadata SHOULD be preserved 
            if the source atom:feed contains any of the child elements atom:author, atom:contributor, 
            atom:rights, or atom:category and those child elements are not present in the source atom:entry.
            </summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomSource.authors">
            <summary>author collection</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomSource.contributors">
            <summary>contributors collection</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomSource.categories">
            <summary>category collection</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomSource.generator">
            <summary>the generator</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomSource.icon">
            <summary>icon, essentially an atom link</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomSource.id">
            <summary>ID</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomSource.links">
            <summary>link collection</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomSource.logo">
            <summary>logo, essentially an image link</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomSource.rights">
            <summary>rights, former copyrights</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomSource.subTitle">
            <summary>subtitle as string</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomSource.title">
            <summary>title property as string</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomSource.updated">
            <summary>updated time stamp</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomSource.#ctor">
            <summary>public void AtomSource()</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomSource.#ctor(EnterpriseDT.Google.GData.Client.AtomFeed)">
            <summary>public AtomSource(AtomFeed feed)</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomSource.SaveInnerXml(System.Xml.XmlWriter)">
            <summary>saves the inner state of the element</summary> 
            <param name="writer">the xmlWriter to save into </param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomSource.BaseUriChanged(EnterpriseDT.Google.GData.Client.AtomUri)">
            <summary>just go down the child collections</summary> 
            <param name="uriBase"> as currently calculated</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomSource.WalkTree(EnterpriseDT.Google.GData.Client.IBaseWalkerAction)">
            <summary>calls the action on this object and all children</summary> 
            <param name="action">an IAtomBaseAction interface to call </param>
            <returns>true or false, pending outcome</returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomSource.Authors">
            <summary>accessor method public Contributors AtomPersonCollection</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomSource.Contributors">
            <summary>accessor method public Contributors AtomPersonCollection</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomSource.Links">
            <summary>accessor method public Links AtomLinkCollection</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomSource.Categories">
            <summary>returns the category collection</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomSource.Generator">
            <summary>accessor method public FeedGenerator Generator</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomSource.Icon">
            <summary>accessor method public AtomIcon Icon</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomSource.Logo">
            <summary>accessor method public AtomLogo Logo</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomSource.Updated">
            <summary>accessor method public DateTime LastUpdated</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomSource.Title">
            <summary>accessor method public string Title</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomSource.Subtitle">
            <summary>accessor method public string Subtitle</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomSource.Id">
            <summary>accessor method public string Id</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomSource.Rights">
            <summary>accessor method public string Rights</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomSource.XmlName">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomFeed.feedEntries">
            <summary>collection of feed entries</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomFeed.totalResults">
            <summary>holds the total results</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomFeed.startIndex">
            <summary>holds the start-index parameter</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomFeed.itemsPerPage">
            <summary>holds number of items per page</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomFeed.service">
            <summary>holds the service interface to use</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomFeed.#ctor">
            <summary>default constructor</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomFeed.#ctor(System.Uri,EnterpriseDT.Google.GData.Client.IService)">
            <summary>default constructor</summary> 
            <param name="uriBase">the location the feed was loaded from</param>        
            <param name="service">the service used to create this feed</param>        
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomFeed.#ctor(EnterpriseDT.Google.GData.Client.AtomFeed)">
            <summary>default constructor</summary> 
            <param name="originalFeed">if you want to create a copy feed, for batch use, e.g</param>        
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomFeed.IsFeedIdentical(EnterpriseDT.Google.GData.Client.AtomFeed,EnterpriseDT.Google.GData.Client.AtomFeed)">
            <summary>tries to determine if the two feeds derive from the same source</summary> 
            <param name="feedOne">the first feed</param>
            <param name="feedTwo">the second feed</param>
            <returns>true if believed to be the same source</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomFeed.CreateBatchFeed(EnterpriseDT.Google.GData.Client.GDataBatchOperationType)">
            <summary>
            returns a new batchfeed with all the currently dirty entries in it
            </summary>
            <param name="defaultOperation">the default operation to execute</param>
            <returns>AtomFeed</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomFeed.AddOtherNamespaces(System.Xml.XmlWriter)">
            <summary>checks to see if we are a batch feed, if so, adds the batchNS</summary> 
            <param name="writer">the xmlwriter, where we want to add default namespaces to</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomFeed.SkipNode(System.Xml.XmlNode)">
            <summary>checks if this is a namespace 
            decl that we already added</summary> 
            <param name="node">XmlNode to check</param>
            <returns>true if this node should be skipped </returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomFeed.SaveInnerXml(System.Xml.XmlWriter)">
            <summary>saves the inner state of the element</summary> 
            <param name="writer">the xmlWriter to save into </param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomFeed.Parse(System.IO.Stream,EnterpriseDT.Google.GData.Client.AlternativeFormat)">
            <summary>given a stream, parses it to construct the Feed object out of it</summary> 
            <param name="stream"> a stream representing hopefully valid XML</param>
            <param name="format"> indicates if the stream is Atom or Rss</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomFeed.OnParsedNewEntry(System.Object,EnterpriseDT.Google.GData.Client.FeedParserEventArgs)">
            <summary>Event chaining. We catch this by the baseFeedParsers, which 
            would not do anything with the gathered data. We pass the event up
            to the user; if the user doesn't discard it, we add the entry to our
            collection</summary> 
            <param name="sender"> the object which send the event</param>
            <param name="e">FeedParserEventArguments, holds the feed entry</param> 
            <returns> </returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomFeed.OnNewExtensionElement(System.Object,EnterpriseDT.Google.GData.Client.ExtensionElementEventArgs)">
            <summary>Event chaining. We catch this by the baseFeedParsers, which 
            would not do anything with the gathered data. We pass the event up
            to the user; if the user doesn't discard it, we add the entry to our
            collection</summary> 
            <param name="sender"> the object which send the event</param>
            <param name="e">FeedParserEventArguments, holds the feed entry</param> 
            <returns> </returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomFeed.BaseUriChanged(EnterpriseDT.Google.GData.Client.AtomUri)">
            <summary>just go down the child collections</summary> 
            <param name="uriBase"> as currently calculated</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomFeed.Insert``1(``0)">
            <summary>uses the set service to insert a new entry. </summary> 
            <param name="newEntry">the atomEntry to insert into the feed</param>
            <returns>the entry as echoed back from the server. The entry is NOT added
                     to the feeds collection</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomFeed.Publish">
            <summary>goes over all entries, and updates the ones that are dirty</summary> 
            <returns> </returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomFeed.WalkTree(EnterpriseDT.Google.GData.Client.IBaseWalkerAction)">
            <summary>calls the action on this object and all children</summary> 
            <param name="action">an IAtomBaseAction interface to call </param>
            <returns>true or false, pending outcome</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomFeed.OnNewExtensionsElement(System.Object,EnterpriseDT.Google.GData.Client.ExtensionElementEventArgs)">
            <summary>eventhandler - called for event extension element
            </summary>
            <param name="sender">the object which send the event</param>
            <param name="e">FeedParserEventArguments, holds the feedEntry</param> 
            <returns> </returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomFeed.HandleExtensionElements(EnterpriseDT.Google.GData.Client.ExtensionElementEventArgs,EnterpriseDT.Google.GData.Client.AtomFeedParser)">
            <summary>
            event on the Feed to handle extension elements during parsing
            </summary>
            <param name="e">the event arguments</param>
            <param name="parser">the parser that caused this</param>
        </member>
        <member name="E:EnterpriseDT.Google.GData.Client.AtomFeed.NewAtomEntry">
            <summary>eventhandler, when the parser creates a new feed entry-> mirrored from underlying parser</summary> 
        </member>
        <member name="E:EnterpriseDT.Google.GData.Client.AtomFeed.NewExtensionElement">
            <summary>eventhandler, when the parser finds a new extension element-> mirrored from underlying parser</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomFeed.Post">
            <summary>accessor method public string Post</summary> 
            <returns>the Uri as string to the Post Service</returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomFeed.BatchData">
            <summary>accessor to the batchdata for the entry</summary> 
            <returns> GDataBatch object </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomFeed.Batch">
            <summary>Retrieves the batch link for the current feed.</summary> 
            <returns>The URI of the batch support for the feed. </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomFeed.ReadOnly">
            <summary>returns whether or not the entry is read-only </summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomFeed.NextChunk">
            <summary>accessor method public string NextChunk</summary> 
            <returns>the Uri as string to the next chunk of the result</returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomFeed.PrevChunk">
            <summary>accessor method public string PrevChunk</summary> 
            <returns>the Uri as a string to the previous chunk of the result</returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomFeed.Feed">
            <summary>accessor method public string Feed</summary> 
            <returns>returns the Uri as string for the feed service </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomFeed.Self">
            <summary>accessor method public string Self</summary> 
            <returns>returns the Uri as string for the feed with the Query Parameters </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomFeed.Service">
            <summary>accessor method for the gData Service to use</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomFeed.TotalResults">
            <summary>accessor method public int TotalResults</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomFeed.StartIndex">
            <summary>accessor method public int StartIndex</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomFeed.ItemsPerPage">
            <summary>accessor method public int ItemsPerPage</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomFeed.Entries">
            <summary>accessor method public ExtensionList Entries</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomFeed.XmlName">
            <summary>just returns the constant representing this xml element</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AbstractFeed.#ctor(System.Uri,EnterpriseDT.Google.GData.Client.IService)">
            <summary>
            Constructor, set's up extension handlers
            </summary>
            <param name="uriBase">The uri for this cells feed.</param>
            <param name="service">The Spreadsheets service.</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AbstractFeed.AddOtherNamespaces(System.Xml.XmlWriter)">
            <summary>extension feeds most likely add the GData namespace, so let's 
            have a default implementation that does this</summary> 
            <param name="writer">the xmlwriter, where we want to add default namespaces to</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AbstractFeed.SkipNode(System.Xml.XmlNode)">
            <summary>checks if this is a namespace 
            decl that we already added. As the abstract feed adds
            the GData namespace, check that one</summary> 
            <param name="node">XmlNode to check</param>
            <returns>true if this node should be skipped </returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AbstractFeed.OnParsedNewAbstractEntry(System.Object,EnterpriseDT.Google.GData.Client.FeedParserEventArgs)">
            <summary>
            Eventhandling. Called when a new entry is parsed.
            </summary>
            <param name="sender"> the object which send the event</param>
            <param name="e">FeedParserEventArguments, holds the feedentry</param> 
            <returns> </returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AbstractFeed.CreateFeedEntry">
            <summary>
            this needs to get implemented by subclasses
            </summary>
            <returns>AtomEntry</returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AbstractFeed.Etag">
            <summary>returns this entries etag, if any
            This is a protocol version 2 feature
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.SpreadsheetFeed.#ctor(System.Uri,EnterpriseDT.Google.GData.Client.IService)">
            <summary>
            Constructor
            </summary>
            <param name="uriBase">The uri for this myspreadsheets feed.</param>
            <param name="iService">The Spreadsheets service.</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.SpreadsheetFeed.CreateFeedEntry">
            <summary>
            returns a new entry for this feed
            </summary>
            <returns>AtomEntry</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.SpreadsheetFeed.HandleExtensionElements(EnterpriseDT.Google.GData.Client.ExtensionElementEventArgs,EnterpriseDT.Google.GData.Client.AtomFeedParser)">
            <summary>
            get's called after we already handled the custom entry, to handle all 
            other potential parsing tasks
            </summary>
            <param name="e">the event arguments</param>
            <param name="parser">the atom feed parser calling</param>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPFile">
            <summary>  
            Represents a remote file (implementation)
            </summary>
            <author>
            Bruce Blackshaw       
            </author>
            <version>      
            $Revision: 1.18 $
            </version>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFile.UNKNOWN">
            <summary> Unknown remote server type</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFile.WINDOWS">
            <summary> Windows type</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFile.UNIX">
            <summary> UNIX type</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFile.VMS">
            <summary> VMS type</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFile.format">
            <summary>Date format</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFile.type">
            <summary> Type of file</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFile.isLink">
            <summary> Is this file a symbolic link?</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFile.linkNum">
            <summary> Number of links to file</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFile.filePermissions">
            <summary> Permission bits string</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFile.isDir">
            <summary> Is this a directory?</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFile.fileSize">
            <summary> Size of file</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFile.fileName">
            <summary> File/dir name</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFile.linkedFileName">
            <summary> Name of file this is linked to</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFile.fileOwner">
            <summary> Owner if known</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFile.userGroup">
            <summary> Group if known</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFile.lastModifiedTime">
            <summary> Last modified</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFile.rawRep">
            <summary> Raw string</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFile.filePath">
            <summary>Directory if known</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFile.identifier">
            <summary>Identifier</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFile.kids">
            <summary>Children if a directory</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPFile.#ctor(System.Int32,System.String,System.String,System.Int64,System.Boolean,System.DateTime@)">
            <summary> 
            Constructor
            </summary>
            <param name="type">         
            type of file
            </param>
            <param name="raw">          
            raw string returned from server
            </param>
            <param name="name">         
            name of file
            </param>
            <param name="size">         
            size of file
            </param>
            <param name="isDir">        
            true if a directory
            </param>
            <param name="lastModifiedTime"> 
            last modified timestamp
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPFile.#ctor(System.String,System.Int64,System.Boolean,System.DateTime)">
            <summary> 
            Constructor
            </summary>
            <param name="name">         
            name of file
            </param>
            <param name="size">         
            size of file
            </param>
            <param name="isDir">        
            true if a directory
            </param>
            <param name="lastModifiedTime"> 
            last modified timestamp
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPFile.#ctor(System.String,System.Int64,System.Boolean,System.DateTime,System.String)">
            <summary> 
            Constructor
            </summary>
            <param name="name">         
            name of file
            </param>
            <param name="size">         
            size of file
            </param>
            <param name="isDir">        
            true if a directory
            </param>
            <param name="lastModifiedTime"> 
            last modified timestamp
            </param>
            <param name="path"> 
            full path of file
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPFile.SetLastModified(System.DateTime,System.TimeSpan)">
            <summary>
            Sets the <see cref="P:EnterpriseDT.Net.Ftp.FTPFile.LastModified"/> time.
            </summary>
            <param name="time"></param>
            <param name="timeDifference"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPFile.ApplyTimeDifference(System.TimeSpan)">
            <summary>
            Subtracts the given <see cref="T:System.TimeSpan"/> to the <see cref="P:EnterpriseDT.Net.Ftp.FTPFile.LastModified"/> timestamp.
            </summary>
            <param name="difference">Time-span to add.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPFile.ToString">
            <returns> 
            string representation
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFile.Type">
            <summary> 
            Get the type of file, eg UNIX
            </summary>
            <returns> the integer type of the file
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFile.Name">
            <returns> 
            Returns the name.
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFile.Raw">
            <returns> 
            Returns the raw server string.
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFile.LinkCount">
            <returns> 
            Returns or sets the number of links to the file
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFile.Link">
            <returns> 
            Is this file a link
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFile.LinkedName">
            <returns> 
            Returns the linked name.
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFile.Group">
            <returns> 
            Gets or sets the group.
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFile.Owner">
            <returns> 
            Gets or sets the owner.
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFile.Dir">
            <returns> 
            Gets or sets whether this is a directory
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFile.Path">
            <returns> 
            Path of file if set
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFile.Identifier">
            <returns> 
            Identifier
            </returns>
            <remarks>If the server (e.g. Google Docs) uses provides an identifier in addition to the file-name then
            this property will return this identifier.</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFile.Children">
            <returns> 
            If a directory, returns its children
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFile.Permissions">
            <returns> 
            Gets or sets the permissions.
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFile.LastModified">
            <returns> 
            Gets last modified timestamp
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFile.Size">
            <returns> 
            Gets size of file
            </returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPFileCallback">
            <summary>
            Delegate for passing a single FTPFile object.  Used in directory-listing callbacks.
            </summary>
            <param name="file">The file.</param>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.GAuthSubRequestFactory">
            <summary> GDataAuthSubRequestFactory implementation</summary> 
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.GDataGAuthRequestFactory">
            <summary>base GDataRequestFactory implementation</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GDataGAuthRequestFactory.GDataVersion">
            <summary>
             the header used to indicate version requests
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataGAuthRequestFactory.#ctor(System.String,System.String)">
            <summary>default constructor</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataGAuthRequestFactory.#ctor(System.String,System.String,System.Int32)">
            <summary>overloaded constructor</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataGAuthRequestFactory.CreateRequest(EnterpriseDT.Google.GData.Client.GDataRequestType,System.Uri)">
            <summary>default constructor</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataGAuthRequestFactory.QueryAuthToken(EnterpriseDT.Google.GData.Client.GDataCredentials)">
            <summary>Gets an authentication token for the current credentials</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataGAuthRequestFactory.GAuthToken">
            <summary>Get/Set accessor for gAuthToken</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataGAuthRequestFactory.UserAgent">
            <summary>accessor method public string UserAgent, with GFE support</summary> 
            <remarks>GFE will enable gzip support ONLY for browser that have the string
            "gzip" in their user agent (IE or Mozilla), since lot of browsers have a
            broken gzip support.</remarks>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataGAuthRequestFactory.ApplicationName">
            <summary>Get/Set accessor for the application name</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataGAuthRequestFactory.Service">
            <summary>returns the service string</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataGAuthRequestFactory.MethodOverride">
            <summary>Let's assume you are behind a corporate firewall that does not 
            allow all HTTP verbs (as you know, the atom protocol uses GET, 
            POST, PUT and DELETE). If you set MethodOverride to true,
            PUT and DELETE will be simulated using HTTP Post. It will
            add an X-Method-Override header to the request that 
            indicates the "real" method we wanted to send. 
            </summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataGAuthRequestFactory.StrictRedirect">
            <summary>indicates if a redirect should be followed on not HTTPGet</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataGAuthRequestFactory.NumberOfRetries">
            <summary>
            property accessor to adjust how often a request of this factory should retry
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataGAuthRequestFactory.AccountType">
            <summary>
            property accessor to set the account type that is used during
            authentication. Defaults, if not set, to HOSTED_OR_GOOGLE
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataGAuthRequestFactory.CaptchaAnswer">
            <summary>property to hold the Answer for a challenge</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataGAuthRequestFactory.CaptchaToken">
            <summary>property to hold the token for a challenge</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataGAuthRequestFactory.Handler">
            <summary>accessor method public string Handler</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataGAuthRequestFactory.ProtocolMajor">
            <summary>
            returns the major protocol version number this element 
            is working against. 
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataGAuthRequestFactory.ProtocolMinor">
            <summary>
            returns the minor protocol version number this element 
            is working against. 
            </summary>
            <returns></returns>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GAuthSubRequestFactory.privateKey">
            holds the private key that is used to sign the requests
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GAuthSubRequestFactory.#ctor(System.String,System.String)">
            <summary>default constructor</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GAuthSubRequestFactory.CreateRequest(EnterpriseDT.Google.GData.Client.GDataRequestType,System.Uri)">
            <summary>default constructor</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GAuthSubRequestFactory.Token">
            <summary>accessor method public string Token</summary> 
            <returns>the string token for the authsub request </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GAuthSubRequestFactory.PrivateKey">
            <summary>accessor method public AsymmetricAlgorithm PrivateKey</summary> 
            <returns>the private Key used for the authsub request </returns>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.GAuthSubRequest">
            <summary>base GDataRequest implementation</summary> 
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.GDataGAuthRequest">
            <summary>base GDataRequest implementation</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GDataGAuthRequest.requestCopy">
            <summary>holds the input in memory stream</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GDataGAuthRequest.factory">
            <summary>holds the factory instance</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataGAuthRequest.#ctor(EnterpriseDT.Google.GData.Client.GDataRequestType,System.Uri,EnterpriseDT.Google.GData.Client.GDataGAuthRequestFactory)">
            <summary>default constructor</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataGAuthRequest.GetRequestStream">
            <summary>returns the writable request stream</summary> 
            <returns> the stream to write into</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataGAuthRequest.Dispose(System.Boolean)">
            <summary>does the real disposition</summary> 
            <param name="disposing">indicates if dispose called it or finalize</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataGAuthRequest.EnsureCredentials">
            <summary>sets up the correct credentials for this call, pending 
            security scheme</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataGAuthRequest.EnsureWebRequest">
            <summary>sets the redirect to false after everything else
            is done </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataGAuthRequest.QueryAuthToken(EnterpriseDT.Google.GData.Client.GDataCredentials)">
            <summary>goes to the Google auth service, and gets a new auth token</summary> 
            <returns>the auth token, or NULL if none received</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataGAuthRequest.Execute">
            <summary>Executes the request and prepares the response stream. Also 
            does error checking</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataGAuthRequest.Execute(System.Int32)">
            <summary>Executes the request and prepares the response stream. Also 
            does error checking</summary> 
            <param name="retryCounter">indicates the n-th time this is run</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataGAuthRequest.CopyRequestData">
            <summary>takes our copy of the stream, and puts it into the request stream</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataGAuthRequest.RequestCopy">
            <summary>Read only accessor for requestCopy</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataGAuthRequest.ResponseVersion">
            <summary>
            returns the version information that the response indicated
            can be NULL if used against a non versioned endpoint
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GAuthSubRequest.factory">
            <summary>holds the factory instance</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GAuthSubRequest.#ctor(EnterpriseDT.Google.GData.Client.GDataRequestType,System.Uri,EnterpriseDT.Google.GData.Client.GAuthSubRequestFactory)">
            <summary>default constructor</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GAuthSubRequest.EnsureCredentials">
            <summary>sets up the correct credentials for this call, pending 
            security scheme</summary> 
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.GDataLoggingRequestFactory">
            <summary>base GDataRequestFactory implmentation</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GDataLoggingRequestFactory.strInput">
            <summary>holds the filename for the input request</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GDataLoggingRequestFactory.strOutput">
            <summary>holds the filename for the output response</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GDataLoggingRequestFactory.strCombined">
            <summary>holds the filename for the combined logger</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataLoggingRequestFactory.#ctor(System.String,System.String)">
            <summary>default constructor</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataLoggingRequestFactory.CreateRequest(EnterpriseDT.Google.GData.Client.GDataRequestType,System.Uri)">
            <summary>default constructor</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataLoggingRequestFactory.RequestFileName">
            <summary>accessor method public string RequestFileName</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataLoggingRequestFactory.ResponseFileName">
            <summary>accessor method public string ResponseFileName</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataLoggingRequestFactory.CombinedLogFileName">
            <summary>accessor method public string CombinedLogFileName</summary> 
            <returns> </returns>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.GDataLoggingRequest">
            <summary>base GDataRequest implementation</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GDataLoggingRequest.strInput">
            <summary>holds the filename for the input request</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GDataLoggingRequest.strOutput">
            <summary>holds the filename for the output response</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GDataLoggingRequest.strCombined">
            <summary>holds the filename for the combined logger</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataLoggingRequest.#ctor(EnterpriseDT.Google.GData.Client.GDataRequestType,System.Uri,EnterpriseDT.Google.GData.Client.GDataGAuthRequestFactory,System.String,System.String,System.String)">
            <summary>default constructor</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataLoggingRequest.Dispose(System.Boolean)">
            <summary>does the real disposition</summary> 
            <param name="disposing">indicates if dispose called it or finalize</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataLoggingRequest.Execute">
            <summary>Executes the request and prepares the response stream. Also 
            does error checking</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataLoggingRequest.LogRequest(System.Net.WebRequest)">
            <summary>Log's the request object if overridden in subclass</summary>
            <param name="request">the request to log</param> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataLoggingRequest.LogResponse(System.Net.WebResponse)">
            <summary>Log's the response object if overridden in subclass</summary>
            <param name="response">the response to log</param> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataLoggingRequest.Reset">
            <summary>resets the object's state</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataLoggingRequest.SaveStream(System.IO.Stream,System.IO.StreamWriter,System.IO.StreamWriter)">
            <summary>private void SaveStream()</summary> 
            <param name="stream">the stream to save </param>
            <param name="outOne">the first stream to save into </param>
            <param name="outCombined">the combined stream to save into</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataLoggingRequest.SaveHeaders(System.Boolean,System.Net.WebHeaderCollection,System.String,System.Uri,System.IO.StreamWriter)">
            <summary>private void SaveStream()</summary> 
            <param name="isRequest">indicates wether this is a request or a response log</param>
            <param name="headers"> the webheader collection to save</param>
            <param name="method"> indicates the HTTP method used</param>
            <param name="target">the target URI of the request</param>
            <param name="outputStream">the stream to save to</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataLoggingRequest.GetResponseStream">
            <summary>gets the readable response stream. In the logger, we need to
            copy the response to be able to log it. So we return a memory stream</summary> 
            <returns> the response stream</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.EchoCommand">
            <summary>  Echo command, to display the value of a variable
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.2 $
            
            </version>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.Shared.SocketController.SetShuttingDownSSL(System.Boolean)">
            <summary>
            
            </summary>
            <param name="waitOnShutdownSSL"></param>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.GData.GDataClient">
            <summary>
            Provides low-level access to Google Data file transfers. <see cref="T:EnterpriseDT.Net.Ftp.ExFTPConnection"/>
            provides a superior interface and is recommended for general use.
            </summary>
            <author>Hans Andersen</author>
            <version>$Revision: 1.9 $</version>    
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Http.HttpClient">
            <summary>
            Provides low-level access to HTTP file transfers. <see cref="T:EnterpriseDT.Net.Ftp.ExFTPConnection"/>
            provides a superior interface and is recommended for general use.
            </summary>
            <author>Bruce Blackshaw</author>
            <version>$Revision: 1.33 $</version>    
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.IExFileTransferClient">
            <summary>
            Interface containing methods common to "Extended Feature" FTP clients.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.IFileTransferClient">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.Connect">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.Quit">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.QuitImmediately">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.TestConnection">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.Get(System.IO.Stream,System.String)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.Get(System.String,System.String)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.Get(System.String)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.Put(System.Byte[],System.String)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.Put(System.Byte[],System.String,System.Boolean)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.Put(System.String,System.String)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.Put(System.String,System.String,System.Boolean)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.Put(System.IO.Stream,System.String)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.Put(System.IO.Stream,System.String,System.Boolean)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.CdUp">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.ChDir(System.String)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.Dir">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.Dir(System.String,System.Boolean)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.Dir(System.String)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.DirDetails(System.String)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.DirDetails(System.String,EnterpriseDT.Net.Ftp.FTPFileCallback)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.DirDetails">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.MkDir(System.String)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.Pwd">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.RmDir(System.String)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.Exists(System.String)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.Delete(System.String)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.ModTime(System.String)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.SetModTime(System.String,System.DateTime)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.Rename(System.String,System.String)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.Size(System.String)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.CancelResume">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.CancelTransfer">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.Resume">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.ResumeDownload(System.Int64)">
            <summary/>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.IFileTransferClient.CloseStreamsAfterTransfer">
            <summary/>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.IFileTransferClient.ControlPort">
            <summary/>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.IFileTransferClient.DeleteOnFailure">
            <summary/>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.IFileTransferClient.IsConnected">
            <summary/>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.IFileTransferClient.RemoteHost">
            <summary/>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.IFileTransferClient.Timeout">
            <summary/>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.IFileTransferClient.TransferBufferSize">
            <summary/>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.IFileTransferClient.TransferNotifyInterval">
            <summary/>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.IFileTransferClient.TransferNotifyListings">
            <summary/>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.IFileTransferClient.TransferType">
            <summary/>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.IFileTransferClient.ShowHiddenFiles">
            <summary/>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.IFileTransferClient.WelcomeMessage">
            <summary/>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.IFileTransferClient.LastBytesTransferred">
            <summary/>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.IFileTransferClient.LastFileTransferred">
            <summary/>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.IFileTransferClient.IsResuming">
            <summary/>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.IFileTransferClient.BytesTransferred">
            <summary/>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.IFileTransferClient.TransferCompleteEx">
            <summary/>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.IFileTransferClient.TransferStartedEx">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IExFileTransferClient.Unlock(System.String,System.String)">
            <summary>
            Unlock the software for use. This method should be used when
            a configuration file isn't available
            </summary>
            <param name="owner">owner string</param>
            <param name="key">license key</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IExFileTransferClient.GetLocalCRC(System.String)">
            <summary>
            Get the CRC-32 checksum for the named local file
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IExFileTransferClient.GetRemoteCRC(System.String)">
            <summary>
            Get the CRC-32 checksum for the named remote file. Not supported
            by all servers (requires the XCRC command).
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IExFileTransferClient.DirDetails(System.String,System.Boolean)">
            <summary>
            Returns the given directory's contents and optionally that of its subdirectories 
            as an array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.
            </summary>
            <remarks>
            <para>If <c>includeSubdirectories</c> is set to <c>true</c> then the <see cref="P:EnterpriseDT.Net.Ftp.FTPFile.Children"/> property 
            of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects corresponding to subdirectories will contain the content of
            that subdirectory.</para>
            <para>This method works for Windows and most Unix FTP servers.  Please inform EDT
            about unusual formats (<a href="support@enterprisedt.com">support@enterprisedt.com</a>).</para>
            </remarks>
            <param name="directory">Name of directory AND/OR filemask.</param>
            <param name="includeSubdirectories">Use <c>true</c> if subdirectories are required.</param>
            <returns>An array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IExFileTransferClient.MultipleDelete(System.String)">
            <summary>
            Delete multiple files in the current remote directory
            </summary>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <remarks>Wildcard characters supported are <c>?</c> for single characters and <c>*</c> for multiple characters</remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IExFileTransferClient.MultipleDelete(EnterpriseDT.Net.Ftp.FileFilter)">
            <summary>
            Delete multiple files in the current remote directory
            </summary>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IExFileTransferClient.MultipleDelete(System.String,System.String,System.Boolean)">
            <summary>
            Delete multiple files in the current remote directory and its subdirectories.
            </summary>
            <param name="remoteDir">remote directory to delete</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="recurse">if true, recurse down into subdirectories</param>
            <remarks>Wildcard characters supported are '?' and '*'. Subdirectories are not deleted</remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IExFileTransferClient.MultipleDelete(System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary>
            Delete multiple files in a remote directory and its subdirectories.
            </summary>
            <param name="remoteDir">remote directory to delete files from</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="recurse">if true, recurse down into subdirectories</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IExFileTransferClient.MultipleDeleteDirectories(System.String)">
            <summary>
            Remove a remote directory, and all its files and its subdirectories
            </summary>
            <param name="remoteDir">the remote directory's name</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IExFileTransferClient.MultiplePut(System.String,System.String)">
            <summary>
            Put multiple files from the specified local directory into the current remote directory
            </summary>
            <param name="localDir">local directory to get files from</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IExFileTransferClient.MultiplePut(System.String,EnterpriseDT.Net.Ftp.FileFilter)">
            <summary>
            Put multiple files from the specified local directory into the current remote directory
            </summary>
            <param name="localDir">local directory to get files from</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IExFileTransferClient.MultiplePut(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Put multiple files from the specified local directory into the specified remote directory
            </summary>
            <remarks>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories
            </remarks>
            <param name="localDir">local directory name</param>
            <param name="remoteDir">remote directory name</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="recurse">if true, subdirectories are put</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IExFileTransferClient.MultiplePut(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary>
            Put multiple files from the specified local directory into the specified remote directory
            </summary>
            <remarks>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories
            </remarks>
            <param name="localDir">local directory name</param>
            <param name="remoteDir">remote directory name</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="recurse">if true, subdirectories are put</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IExFileTransferClient.MultipleGet(System.String,System.String)">
            <summary>
            Get multiple files into the specified local directory from the current remote directory
            </summary>
            <param name="localDir">local directory to get files into</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IExFileTransferClient.MultipleGet(System.String,EnterpriseDT.Net.Ftp.FileFilter)">
            <summary>
            Get multiple files into the specified local directory from the current remote directory
            </summary>
            <param name="localDir">local directory to get files into</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IExFileTransferClient.MultipleGet(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Get multiple files from the specified remote directory into the specified local directory
            </summary>
            <remarks>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories
            </remarks>
            <param name="localDir">local directory name</param>
            <param name="remoteDir">remote directory name</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="recurse">if true, subdirectories are put</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IExFileTransferClient.MultipleGet(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary>
            Get multiple files from the specified remote directory into the specified local directory
            </summary>
            <remarks>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories
            </remarks>
            <param name="localDir">local directory name</param>
            <param name="remoteDir">remote directory name</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="recurse">if true, subdirectories are put</param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.IExFileTransferClient.SocksContext">
            <summary>
            Settings for SOCKS proxy.
            </summary>
            <remarks>
            <para>
            SOCKS may be used for FTPing through firewalls.  For this to be possible
            a SOCKS proxy must be available, and a user account must be set up on that proxy.
            <c>ExFTPConnection</c> supports all the popular versions of SOCKS - 4, 4A, and 5.
            </para>
            <para>
            The SOCKS features are controlled entirely through the <see cref="P:EnterpriseDT.Net.Ftp.IExFileTransferClient.SocksContext"/>
            property.  If it is <c>null</c> (the default) then SOCKS is not used.  To use SOCKS,
            the property must be set to an instance of <see cref="T:EnterpriseDT.Util.Socks.Socks4Context"/> or 
            <see cref="T:EnterpriseDT.Util.Socks.Socks5Context"/>.
            For example, for SOCKS4:
            </para>
            <code>
                   myFTPClient.SocksContext = new Socks4Context("192.168.0.2", 1080, "marvin23");
            </code>
            and for SOCKS5:
            <code>
                   Socks5Context socksContext = new Socks5Context("192.168.0.2", 1080);
                   socksContext.AuthMethods.Add(new Socks5NoAuthMethod());
                   socksContext.AuthMethods.Add(new Socks5UserNamePasswordAuthMethod("marvin23", "m31erk"));
                   myFTPClient.SocksContext = socksContext;
            </code>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.IExFileTransferClient.ProxySettings">
            <summary>
            Settings for using proxies.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.IExFileTransferClient.LicenseOwner">
            <summary>
            The license owner string.
            </summary>
            <remarks>
            The license owner must be set for the software to function correctly past the trial period.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.IExFileTransferClient.LicenseKey">
            <summary>
            The license key string.
            </summary>
            <remarks>
            The license key must be set for the software to function correctly past the trial period.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.IExFileTransferClient.DetectTransferMode">
            <summary>
            If set to true, the transfer mode in operations involving multiple files is 
            automatically changed between ASCII and binary as appropriate.
            </summary>
            <remarks>
            <see cref="M:EnterpriseDT.Net.Ftp.FileTypes.RegisterExtension(System.String)"/> for how to register a file extension as ASCII, and
            <see cref="T:EnterpriseDT.Net.Ftp.FileTypes"/> for how to obtain the current registered extensions
            </remarks> 
        </member>
        <!-- Badly formed XML comment ignored for member "P:EnterpriseDT.Net.Ftp.IExFileTransferClient.MaxTransferRate" -->
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.DEFAULT_MONITOR_INTERVAL">
            <summary> Default byte interval for transfer monitor</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.DEFAULT_BUFFER_SIZE">
            <summary> Default transfer buffer size</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.DEFAULT_PORT">
            <summary> Default port</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.DEFAULT_USER_AGENT">
            <summary> Default user agent</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.DEFAULT_CODE_PAGE">
            <summary>
            Default code page, also used for ISO-8859-1
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.log">
            <summary>
            Logger
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.controlPort">
            <summary>
            Port on which we connect to the FTP server and messages are passed
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.remoteHost">
            <summary>
            Remote host we are connecting to
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.userName">
            <summary>
            Optional username for HTTP authentication
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.password">
            <summary>
            Optional password for HTTP authentication
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.timeout">
            <summary>Timeout for requests in milliseconds
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.monitorInterval">
            <summary> Bytes transferred in between monitor callbacks</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.transferNotifyListings">
            <summary>  Should BytesTransferred event be triggered in directory listings?</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.currentlyListing">
            <summary>  A directory listing is being performed</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.transferBufferSize">
            <summary> Size of transfer buffers</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.httpMethod">
            <summary>
            This is how external clients set POST if they want to post the params
            for a download instead of using GET. It's a way for clients to 
            communicate, and isn't used otherwise. So the HttpWebRequest.Method can
            be set to other values, e.g.DELETE without this member being involved. Pretty
            average but no simple solution so far.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.httpParams">
            <summary>
            HTTP parameters
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.hrefRegex">
            <summary>
            Regex for hrefs
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.connected">
            <summary>
            Indicates whether Connect() has been called (or Quit()).
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.resume">
            <summary> If true, a file transfer is being resumed</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.deleteOnFailure">
            <summary>If a download to a file fails, delete the partial file</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.resumeMarker">
            <summary> Resume byte marker point</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.cancelTransfer">
            <summary>  Can be used to cancel a transfer</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.dataEncoding">
            <summary>
            Encoding to use in ASCII mode
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.currentDirectory">
            <summary>
            Current directory
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.cookies">
            <summary>
            Cookies retrieved from the site
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.proxySettings">
            <summary>
            Proxy settings
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.throttler">
            <summary>
            Threshold for throttling
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.rops">
            <summary>  
            Helper class for performing recursive ops
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.detectTransferMode">
            <summary>  
            Do we detect transfer mode when transferring files?
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.socks">
            <summary>
            SOCKS settings
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.transferType">
            <summary>  Record of the transfer type - make the default BINARY for now</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.closeStreamsAfterTransfer">
            <summary>
            If <c>true</c> then streams are closed after a transfer has completed.
            </summary>
            <remarks>
            The default is <c>true</c>.
            </remarks>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.lastBytesTransferred">
            <summary>
            Holds the number of bytes transferred in that most recent transfer.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.lastFileTransferred">
            <summary>
            Name of the last file transferred.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.key">
            <summary>
            License key
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.owner">
            <summary>
            License owner
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.GetLocalCRC(System.String)">
            <summary>
            Get the CRC-32 checksum for the named local file
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.GetRemoteCRC(System.String)">
            <summary>
            Get the CRC-32 checksum for the named remote file. Not supported in HTTP.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.Connect">
            <summary>Does nothing for this protocol.</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.TestConnection">
            <summary>
            Does nothing for HTTP protocol
            </summary>
            <returns>true if connection ok</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.Quit">
            <summary>Quit the HTTP session.</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.QuitImmediately">
            <summary>
            Quit the FTP session immediately by closing the control socket
            without sending the <c>QUIT</c> command.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.Get(System.IO.Stream,System.String)">
            <summary>
            Get data from the HTTP server.
            </summary>
            <remarks>
            The stream is closed after the transfer is complete if
            <see cref="P:EnterpriseDT.Net.Ftp.Http.HttpClient.CloseStreamsAfterTransfer"/> is <c>true</c> (the default) and are left
            open otherwise.
            </remarks>
            <param name="destStream">Data stream to write data to.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.Get(System.String,System.String)">
            <summary>
            Get data from the HTTP server.
            </summary>
            <param name="localPath">Local file to put data in.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.CreateRequest(System.String,System.String)">
            <summary>
            Create the web request
            </summary>
            <param name="remoteFile">remote file</param>
            <returns>web request ready to fetch</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.CreateRequest(System.String)">
            <summary>
            Create the web request
            </summary>
            <param name="remoteFile">remote file</param>
            <returns>web request ready to fetch</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:EnterpriseDT.Net.Ftp.Http.HttpClient.GetParamString(System.Collections.Specialized.NameValueCollection)" -->
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.DebugResponse(EnterpriseDT.Net.Ftp.Http.ITransferResponse)">
            <summary>
            Dump the response to debug
            </summary>
            <param name="response">response to log</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.GetASCII(System.String,System.String,EnterpriseDT.Net.Ftp.Http.ITransferRequest)">
            <summary>
            Get as ASCII, i.e. read a line at a time and write
            using the correct newline separator for the OS.
            </summary>
            <param name="localPath">Local file to put data in.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.GetASCII(System.IO.Stream,System.String,EnterpriseDT.Net.Ftp.Http.ITransferRequest)">
            <summary>
            Get as ASCII, i.e. read a line at a time and write
            using the correct newline separator for the OS.
            </summary>
            <remarks>
            The stream is closed after the transfer is complete if
            <see cref="P:EnterpriseDT.Net.Ftp.Http.HttpClient.CloseStreamsAfterTransfer"/> is <c>true</c> (the default) and are left
            open otherwise.
            </remarks>
            <param name="destStream">Data stream to write data to.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.GetBinary(System.String,System.String,EnterpriseDT.Net.Ftp.Http.ITransferRequest)">
            <summary>Get as binary file, i.e. straight transfer of data.</summary>
            <param name="localPath">Local file to put data in.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.GetBinary(System.IO.Stream,System.String,EnterpriseDT.Net.Ftp.Http.ITransferRequest)">
            <summary>Get as binary file, i.e. straight transfer of data.</summary>
            <remarks>
            The stream is closed after the transfer is complete if
            <see cref="P:EnterpriseDT.Net.Ftp.Http.HttpClient.CloseStreamsAfterTransfer"/> is <c>true</c> (the default) and are left
            open otherwise.
            </remarks>
            <param name="destStream">Stream to write to.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.Get(System.String)">
            <summary>Get data from the FTP server.</summary>
            <remarks>
            Transfers in whatever mode we are in. Retrieve as a byte array. Note
            that we may experience memory limitations as the
            entire file must be held in memory at one time.
            </remarks>
            <param name="remoteFile">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.ReadChunk(System.IO.Stream,System.Byte[],System.Int32)">
            <summary>
            Attempts to read a specified number of bytes from the given 
            <code>BufferedStream</code> and place it in the given byte-array.
            </summary>
            <remarks>
            The purpose of this method is to permit subclasses to execute
            any additional code necessary when performing this operation. 
            </remarks>
            <param name="input">The <code>Stream</code> to read from.</param>
            <param name="chunk">The byte-array to place read bytes in.</param>
            <param name="chunksize">Number of bytes to read.</param>
            <returns>Number of bytes actually read.</returns>
            <throws>SystemException Thrown if there was an error while reading. </throws>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.ReadChar(System.IO.StreamReader)">
            <summary>Attempts to read a single character from the given <code>StreamReader</code>.</summary>
            <remarks>
            The purpose of this method is to permit subclasses to execute
            any additional code necessary when performing this operation. 
            </remarks>
            <param name="input">The <code>StreamReader</code> to read from.</param>
            <returns>The character read.</returns>
            <throws>SystemException Thrown if there was an error while reading. </throws>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.ReadLine(System.IO.StreamReader)">
            <summary>
            Attempts to read a single line from the given <code>StreamReader</code>. 
            </summary>
            <remarks>
            The purpose of this method is to permit subclasses to execute
            any additional code necessary when performing this operation. 
            </remarks>
            <param name="input">The <code>StreamReader</code> to read from.</param>
            <returns>The string read.</returns>
            <throws>SystemException Thrown if there was an error while reading. </throws>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.Put(System.Byte[],System.String)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.Put(System.Byte[],System.String,System.Boolean)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.Put(System.String,System.String)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.Put(System.String,System.String,System.Boolean)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.Put(System.IO.Stream,System.String)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.Put(System.IO.Stream,System.String,System.Boolean)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.PutASCII(System.String,System.String,EnterpriseDT.Net.Ftp.Http.ITransferRequest)">
            <summary>
            Put as ASCII, i.e. read a line at a time and write
            using the correct newline separator for the OS.
            </summary>
            <param name="localPath">Local file to transfer data from.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.PutASCII(System.IO.Stream,System.String,EnterpriseDT.Net.Ftp.Http.ITransferRequest,System.Boolean)">
            <summary>
            Put as ASCII, i.e. read a line at a time and write
            using the correct newline separator for the OS.
            </summary>
            <param name="localPath">Local file to transfer data from.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.PutBinary(System.String,System.String,EnterpriseDT.Net.Ftp.Http.ITransferRequest)">
            <summary>Put as binary file, i.e. straight transfer of data.</summary>
            <param name="localPath">Local file to read data from.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.PutBinary(System.IO.Stream,System.String,EnterpriseDT.Net.Ftp.Http.ITransferRequest,System.Boolean)">
            <summary>Put as binary file, i.e. straight transfer of data.</summary>
            <param name="localPath">Local file to read data from.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.CdUp">
            <summary>Change the remote working directory to the parent directory.</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.ChDir(System.String)">
            <summary>Change the remote working directory to that supplied.</summary>
            <param name="dir">Name of remote directory to change to.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.Dir">
            <summary>
            List an HTML page's hrefs as an array of strings.
            </summary>
            <returns>An array of strings.</returns>        
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.Dir(System.String,System.Boolean)">
            <summary>
            List an HTML page's hrefs as an array of strings.
            </summary>
            <param name="dirname">directory or HTML filename</param>
            <returns>An array of strings.</returns>        
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.Dir(System.String)">
            <summary>
            List an HTML page's hrefs as an array of strings.
            </summary>
            <param name="dirname">directory or HTML filename</param>
            <returns>An array of strings.</returns>        
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.DirDetails(System.String)">
            <summary>
            List an HTML page's hrefs as an array of FTPFile objects.
            </summary>
            <remarks>
            Each href in the page is represented as an FTPFile object. hrefs that
            appear to be to other HTML pages are represented as directories (as they
            will contain their own list of hrefs). Non HTML references (e.g. links to
            files such as xyz.zip) are represented as files.
            </remarks>
            <param name="dirname">directory or HTML filename</param>
            <returns>An array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.</returns>        
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.DirDetails(System.String,System.Boolean)">
            <summary>
            Returns the given directory's contents and optionally that of its subdirectories 
            as an array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.
            </summary>
            <remarks>
            <para>If <c>includeSubdirectories</c> is set to <c>true</c> then the <see cref="P:EnterpriseDT.Net.Ftp.FTPFile.Children"/> property 
            of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects corresponding to subdirectories will contain the content of
            that subdirectory.</para>
            <para>This method works for Windows and most Unix FTP servers.  Please inform EDT
            about unusual formats (<a href="support@enterprisedt.com">support@enterprisedt.com</a>).</para>
            </remarks>
            <param name="directory">Name of directory AND/OR filemask.</param>
            <param name="includeSubdirectories">Use <c>true</c> if subdirectories are required.</param>
            <returns>An array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.IsDirectory(System.String)">
            <summary>
            Is this URL a directory of hrefs, i.e. a normal
            web page that can have its links displayed?
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.IsPage(System.String)">
            <summary>
            Is this url an HTML page?
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.DirDetails">
            <summary>
            List the current directory's hrefs as an array of FTPFile objects.
            </summary>
            <remarks>
            Each href in the page is represented as an FTPFile object. hrefs that
            appear to be to other HTML pages are represented as directories (as they
            will contain their own list of hrefs). Non HTML references (e.g. links to
            files such as xyz.zip) are represented as files.
            </remarks>
            <returns>An array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.</returns>        
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.MkDir(System.String)">
            <summary>
            Not supported by HTTP 
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.Pwd">
            <summary>Get the current remote working directory.</summary>
            <returns>The current working directory.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.RmDir(System.String)">
            <summary>
            Not supported by HTTP 
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.Exists(System.String)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.Delete(System.String)">
            <summary>
            Not supported by all HTTP servers
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.ModTime(System.String)">
            <summary>Get modification time for a remote file.</summary>
            <param name="remoteFile">Name of remote file.</param>
            <returns>Modification time of file as a <c>DateTime</c>.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.SetModTime(System.String,System.DateTime)">
            <summary>
            Not supported by HTTP 
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.Rename(System.String,System.String)">
            <summary>
            Not supported by HTTP 
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.Size(System.String)">
            <summary>
            Get the size of a remote file. 
            </summary>
            <param name="remoteFile">Name or path of remote file in current directory.</param>
            <returns>Size of file in bytes.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.CancelTransfer">
            <summary>Cancels the current transfer.</summary>
            <remarks>This method is generally called from a separate
            thread. Note that this may leave partially written files on the
            server or on local disk, and should not be used unless absolutely
            necessary. The server is not notified.</remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.Resume">
            <summary>Make the next file transfer resume.</summary>
            <remarks>
            <para>
            For downloads, if 
            writing to a file, it is opened in append mode, and only the bytes
            required are transferred.
            </para>
            <para>
            Currently resume is only supported for BINARY transfers (which is
            generally what it is most useful for). 
            </para>
            </remarks>
            <throws>FTPException</throws>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.ResumeDownload(System.Int64)">
            <summary>Make the next download resume at a specific point.</summary>
            <remarks>
            <para>
            This resume method allows the resume offset to be set explicitly for downloads. 
            Offset bytes are skipped before downloading the file.
            </para>
            <para>
            Currently resume is only supported for BINARY transfers (which is
            generally what it is most useful for). 
            </para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.CancelResume">
            <summary> 
            Cancel the resume. Use this method if something goes wrong
            and the client is left in an inconsistent state
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.MultipleDelete(System.String)">
            <summary>
            Delete multiple files in the current remote directory
            </summary>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <remarks>Wildcard characters supported are '?' and '*'</remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.MultipleDelete(EnterpriseDT.Net.Ftp.FileFilter)">
            <summary>
            Delete multiple files in the current remote directory
            </summary>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.MultipleDelete(System.String,System.String,System.Boolean)">
            <summary>
            Delete multiple files in the current remote directory and its subdirectories.
            </summary>
            <param name="remoteDir">remote directory to delete</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="recurse">if true, recurse down into subdirectories</param>
            <remarks>Wildcard characters supported are '?' and '*'. Subdirectories are not deleted</remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.MultipleDelete(System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary>
            Delete multiple files in the current remote directory and its subdirectories.
            </summary>
            <param name="remoteDir">remote directory to delete</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="recurse">if true, recurse down into subdirectories</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.MultipleDeleteDirectories(System.String)">
            <summary>
            Remove a remote directory, and all its files and its subdirectories
            </summary>
            <param name="remoteDir">the remote directory's name</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.MultiplePut(System.String,System.String)">
            <summary>
            Put multiple files from the specified local directory into the current remote directory
            </summary>
            <param name="localDir">local directory to get files from</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.MultiplePut(System.String,EnterpriseDT.Net.Ftp.FileFilter)">
            <summary>
            Put multiple files from the specified local directory into the current remote directory
            </summary>
            <param name="localDir">local directory to get files from</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.MultiplePut(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Put multiple files from the specified local directory into the specified remote directory
            </summary>
            <remarks>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories
            </remarks>
            <param name="localDir">local directory name</param>
            <param name="remoteDir">remote directory name</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="recurse">if true, subdirectories are put</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.MultiplePut(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary>
            Put multiple files from the specified local directory into the specified remote directory
            </summary>
            <remarks>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories
            </remarks>
            <param name="localDir">local directory name</param>
            <param name="remoteDir">remote directory name</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="recurse">if true, subdirectories are put</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.MultipleGet(System.String,System.String)">
            <summary>
            Get multiple files into the specified local directory from the current remote directory
            </summary>
            <param name="localDir">local directory to get files into</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.MultipleGet(System.String,EnterpriseDT.Net.Ftp.FileFilter)">
            <summary>
            Get multiple files into the specified local directory from the current remote directory
            </summary>
            <param name="localDir">local directory to get files into</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.MultipleGet(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Get multiple files from the specified remote directory into the specified local directory
            </summary>
            <remarks>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories
            </remarks>
            <param name="localDir">local directory name</param>
            <param name="remoteDir">remote directory name</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="recurse">if true, subdirectories are put</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.MultipleGet(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary>
            Get multiple files from the specified remote directory into the specified local directory
            </summary>
            <remarks>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories
            </remarks>
            <param name="localDir">local directory name</param>
            <param name="remoteDir">remote directory name</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="recurse">if true, subdirectories are put</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.Unlock(System.String,System.String)">
            <summary>
            Unlock the software for use. This method should be used when
            a configuration file isn't available
            </summary>
            <param name="owner">owner string</param>
            <param name="key">license key</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.CheckLicense">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.CloseStreamsAfterTransfer">
            <summary>
            If <c>true</c> then streams are closed after a transfer has completed.
            </summary>
            <remarks>The default is <c>true</c>.</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.HttpParameters">
            <summary>
            Holds the HTTP parameters to be used for the
            next operation. These should be cleared if no
            parameters are to be used.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.HttpMethod">
            <summary>
            HTTP method to use - GET is the default
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.ControlPort">
            <summary>
            The port on the server to which to connect to. 
            </summary>
            <remarks>
            <para>Most HTTP servers use port 80 (the default)</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.DataEncoding">
            <summary>
            The encoding to use for data when transferring in ASCII mode.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.ShowHiddenFiles">
            <summary>
            Include hidden files in operations that involve listing of directories,
            and if supported by the server. Not applicable for HTTP.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.WelcomeMessage">
            <summary>
            Returns nothing since HTTP doesn't inherently support welcome messages.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.LastBytesTransferred">
            <summary>
            The number of bytes transferred in the last transfer operation.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.LastFileTransferred">
            <summary>
            The remote name/path of the last file transferred.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.DeleteOnFailure">
            <summary>
            Controls whether or not a file is deleted when a failure occurs.
            </summary>
            <remarks>
            <para>
            If <c>true</c>, a partially downloaded file is deleted if there
            is a failure during the download.  For example, the connection
            to the HTTP server might have failed. If <c>false</c>, the partially
            downloaded file remains on the client machine - and the download
            may be resumed, if it is a binary transfer.
            </para>
            <para>
            By default this flag is set to <c>true</c>.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.IsConnected">
            <summary>
            Indicates whether the client is currently connected with the server.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.RemoteHost">
            <summary>
            The domain-name or IP address of the HTTP server.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.UserAgent">
            <summary>
            User agent for HTTP requests
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.UserName">
            <summary>
            User name to use (if required)
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.Password">
            <summary>
            Password to user (if required)
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.Cookies">
            <summary>
            Stores any cookies returned by the server
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.Timeout">
            <summary> 
            Timeout on the requests in milliseconds.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.TransferBufferSize">
            <summary>
            The size of the buffers (in bytes) used in writing to and reading from the data-sockets.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.TransferNotifyInterval">
            <summary>
            The number of bytes transferred between each notification of the
            <see cref="E:EnterpriseDT.Net.Ftp.Http.HttpClient.BytesTransferred"/> event.
            </summary>
            <remarks>
            Reduce this value to receive more frequent notifications of transfer progress.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.TransferNotifyListings">
            <summary>
            By default the BytesTransferred event is not triggered during directory 
            listings - this property can be used to enable this behaviour.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.TransferType">
            <summary>The current file transfer type (BINARY or ASCII).</summary>
            <remarks>When the transfer-type is set to <c>BINARY</c> then files
            are transferred byte-for-byte such that the transferred file will
            be identical to the original.
            When the transfer-type is set to <c>ASCII</c> then end-of-line
            characters will be translated where necessary between Windows and
            UNIX formats.</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.MaxTransferRate">
            <summary>
            The maximum transfer rate in bytes per sec
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.IsResuming">
            <summary>
            Returns <c>true</c> if the next transfer is to be resumed (i.e. <see cref="M:EnterpriseDT.Net.Ftp.Http.HttpClient.Resume"/> has been called).
            </summary>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Http.HttpClient.TransferStartedEx">
            <summary>
            Notifies of the start of a transfer
            </summary>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Http.HttpClient.TransferCompleteEx">
            <summary>
            Notifies of the completion of a transfer
            </summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Http.HttpClient.BytesTransferred">
            <summary>
            Event triggered every time <see cref="P:EnterpriseDT.Net.Ftp.Http.HttpClient.TransferNotifyInterval"/> bytes transferred.
            </summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Http.HttpClient.ParseHtmlLink">
            <summary>
            If set this event allows customized parsing of HTML links 
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.CountBeforeSleep">
            <summary>
            Number of transfers before going to sleep
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.SleepEnabled">
            <summary>
            Enabling or not of sleeping after a certain number of transfers
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.SleepTime">
            <summary>
            Number of seconds spent asleep
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.DetectTransferMode">
            <summary>
            If set to true, the transfer mode in operations involving multiple files is 
            automatically changed between ASCII and binary as appropriate.
            </summary>
            <remarks>
            <see cref="M:EnterpriseDT.Net.Ftp.FileTypes.RegisterExtension(System.String)"/> for how to register a file extension as ASCII, and
            <see cref="T:EnterpriseDT.Net.Ftp.FileTypes"/> for how to obtain the current registered extensions
            </remarks> 
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.SocksContext">
            <summary>
            Not applicable for HTTP. SOCKS proxies are not supported.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.ProxySettings">
            <summary>
            Settings for using proxies.
            </summary>
            <remarks>
            <para>
            Proxies may be used for transferring files through firewalls.  Only HTTP proxies
             are supported for HTTP transfers.
            supported.  
            </para>
            <para>
             Often a username and password will be required to authenticate with the proxy.
             These can be set in <c>ProxySettings</c>. 
            </para>
            <para><c>ProxySettings</c> is easiest to edit via the Property View.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.LicenseOwner">
            <summary>
            The license owner string.
            </summary>
            <remarks>
            The license owner must be set for the software to function correctly past the trial period.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.LicenseKey">
            <summary>
            The license key string.
            </summary>
            <remarks>
            The license key must be set for the software to function correctly past the trial period.
            </remarks>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.GData.GDataClient.ALL_ITEMS">
            <summary>String used for 'All items' folder.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.GData.GDataClient.log">
            <summary>INTERNAL</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.GData.GDataClient.docService">
            <summary>INTERNAL</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.GData.GDataClient.ssService">
            <summary>INTERNAL</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.GData.GDataClient.documentsBase">
            <summary>INTERNAL</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.GData.GDataClient.absolutePath">
            <summary>INTERNAL</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.GData.GDataClient.uploadCompleteSignal">
            <summary>INTERNAL</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.GData.GDataClient.currentUpload">
            <summary>INTERNAL</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.GData.GDataClient.uploadError">
            <summary>INTERNAL</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.GData.GDataClient.uploadWithExtension">
            <summary>INTERNAL</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.GData.GDataClient.convertOnUpload">
            <summary>Convert documents when uploaded</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.GData.GDataClient.#ctor">
            <summary>
            Constructs a <c>GDataClient</c> object.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.GData.GDataClient.Connect">
            <summary>
            Verifies that the Google Docs server is accessible and that the
            credentials are valid.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.GData.GDataClient.Get(System.String,System.String)">
            <summary>
            Get a file from the Google Docs system.
            </summary>
            <param name="localPath">Local file to put data in.</param>
            <param name="remoteFile">Name or URI of remote document or file.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.GData.GDataClient.Put(System.String,System.String,System.Boolean)">
            <summary>
            Put a file onto the Google Docs server.  Appending is not supported.
            </summary>
            <param name="localPath">Local file to upload.</param>
            <param name="remoteFile">File-name or -path to upload to</param>
            <param name="append">Must be <c>false</c> as appending is not supported.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.GData.GDataClient.Put(System.Byte[],System.String,System.Boolean)">
            <summary>
            Put data onto the Google Docs server. Appending is not supported.
            </summary>
            <param name="bytes">Array of bytes to put.</param>
            <param name="remoteFile">File-name or -path to upload to.</param>
            <param name="append">Must be <c>false</c> as appending is not supported.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.GData.GDataClient.Put(System.IO.Stream,System.String,System.Boolean)">
            <summary>
            Put a stream of data onto the Google Docs server.  
            Appending is not supported.
            </summary>
            <remarks>
            The stream is closed after the transfer is complete if
            <see cref="!:CloseStreamsAfterTransfer"/> is <c>true</c> (the default) and are left
            open otherwise.
            </remarks>
            <param name="srcStream">Input stream of data to put.</param>
            <param name="remoteFile">File-name or -path to upload to.</param>
            <param name="append">Must be <c>false</c> as appending is not supported.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.GData.GDataClient.ChDir(System.String)">
            <summary>Change the remote working directory to that supplied.</summary>
            <param name="dir">Name of remote directory to change to.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.GData.GDataClient.Rename(System.String,System.String)">
            <summary>Rename a file or directory.</summary>
            <param name="from">Name of file or directory to rename.</param>
            <param name="to">Intended name.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.GData.GDataClient.Delete(System.String)">
            <summary>Delete the specified remote file.</summary>
            <param name="remoteFile">Name of remote file to delete.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.GData.GDataClient.Size(System.String)">
            <summary>
            Get the size of a remote file if available. 
            </summary>
            <remarks>
            Sizes are not available for some document formats.
            </remarks>
            <param name="remoteFile">Name or path of remote file in current directory.</param>
            <returns>Size of file in bytes or -1 if unavailable.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.GData.GDataClient.ModTime(System.String)">
            <summary>Get modification time for a remote file.</summary>
            <param name="remoteFile">Name of remote file.</param>
            <returns>Modification time of file as a <c>DateTime</c>.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.GData.GDataClient.CancelTransfer">
            <summary>Cancels the current transfer.</summary>
            <remarks>This method is generally called from a separate
            thread. Note that this may leave partially written files on the
            server or on local disk.</remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.GData.GDataClient.DirDetails(System.String)">
            <summary>
            List a directory's contents as an array of FTPFile objects.
            </summary>
            <remarks>
            URIs are provided in the Identifier properties of the returned FTPFile objects.
            These uniquely identify files and may be passed to GDataClient methods instead of file-names.
            </remarks>
            <param name="dirname">Name of directory.</param>
            <returns>An array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.GData.GDataClient.Put(System.IO.Stream,System.String,System.String)">
            <summary>INTERNAL</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.GData.GDataClient.GetValidName(System.String)">
            <summary>INTERNAL</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.GData.GDataClient.CreateRequest(System.String)">
            <summary>
            Create the web request
            </summary>
            <param name="remoteFile">remote file</param>
            <returns>web request ready to fetch</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.GData.GDataClient.CreateRequest(System.String,System.String)">
            <summary></summary>
            <param name="remoteFile"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.GData.GDataClient.GetExtension(EnterpriseDT.Google.GData.Documents.DocumentEntry)">
            <summary>INTERNAL</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.GData.GDataClient.FindEntry(System.String)">
            <summary>INTERNAL</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.GData.GDataClient.service_AsyncOperationProgress(System.Object,EnterpriseDT.Google.GData.Client.AsyncOperationProgressEventArgs)">
            <summary>INTERNAL</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.GData.GDataClient.service_AsyncOperationCompleted(System.Object,EnterpriseDT.Google.GData.Client.AsyncOperationCompletedEventArgs)">
            <summary>INTERNAL</summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.GData.GDataClient.RemoteHost">
            <summary>
            The <c>RemoteHost</c> property is fixed to <c>"docs.google.com"</c> and cannot be set.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.GData.GDataClient.ConvertOnUpload">
            <summary>
            When a document such as "MyDoc.doc" is uploaded to Google Docs via the web interface,
            Google detects that it is a Word document and converts to a Google document. If this
            property is set to false, the conversion will not be performed. The default is true
            for standard types, but if the uploaded file is not a standard type (document, spreadsheet, 
            presentation or drawing), it will never be converted.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.GData.GDataClient.UploadWithExtension">
            <summary>
            When a document such as "MyDoc.doc" is uploaded to Google Docs via the web interface,
            the name displayed will be "MyDoc", i.e. Google removes the extension. This convention
            is maintained, so that by default this property is false. Set to true if you wish
            extensions to be preserved.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.GData.GDataClient.DocService">
            <summary>INTERNAL</summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.GData.GDataClient.SsService">
            <summary>INTERNAL</summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.GData.GDataTransferRequest">
            <summary>INTERNAL</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.GData.GDataTransferRequest.req">
            <summary>INTERNAL</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.GData.GDataTransferRequest.entry">
            <summary>INTERNAL</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.GData.GDataTransferRequest.#ctor(EnterpriseDT.Google.GData.Client.IGDataRequest,EnterpriseDT.Google.GData.Documents.DocumentEntry)">
            <summary>INTERNAL</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.GData.GDataTransferRequest.AddRange(System.Int32)">
            <summary>INTERNAL</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.GData.GDataTransferRequest.GetResponse">
            <summary>INTERNAL</summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.GData.GDataTransferRequest.Uri">
            <summary>INTERNAL</summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.GData.GDataTransferRequest.Method">
            <summary>INTERNAL</summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.GData.GDataTransferResponse">
            <summary>INTERNAL</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.GData.GDataTransferResponse.req">
            <summary>INTERNAL</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.GData.GDataTransferResponse.#ctor(EnterpriseDT.Google.GData.Client.IGDataRequest)">
            <summary>INTERNAL</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.GData.GDataTransferResponse.GetResponseStream">
            <summary>INTERNAL</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.GData.GDataTransferResponse.Close">
            <summary>INTERNAL</summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.GData.GDataTransferResponse.StatusCode">
            <summary>INTERNAL</summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.GData.GDataTransferResponse.StatusDescription">
            <summary>INTERNAL</summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.GData.GDataTransferResponse.ContentLength">
            <summary>INTERNAL</summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.GData.GDataTransferResponse.LastModified">
            <summary>INTERNAL</summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.GData.GDataTransferResponse.Cookies">
            <summary>INTERNAL</summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore">
            <summary>
            Defines a certificate store.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.CAStore">
            <summary>Represents the predefined system certificate store "CA". This field is constant.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.MyStore">
            <summary>Represents the predefined system certificate store "My". This field is constant.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.RootStore">
            <summary>Represents the predefined system certificate store "Root". This field is constant.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.TrustStore">
            <summary>Represents the predefined system certificate store "Trust". This field is constant.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.UnTrustedStore">
            <summary>Represents the untrusted certificate store. This field is constant.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.SoftwarePublisherStore">
            <summary>Represents the software publisher certificate store. This field is constant.</summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.CreateFromPfxFile(System.String,System.String)">
            <summary>
            Creates a new certificate store from a PFX/P12 encoded file.
            </summary>
            <param name="file">The full path to the PFX file.</param>
            <param name="password">The password used to encrypt the private key.</param>
            <returns>A <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> or <paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.IO.IOException">An error occurs whil reading from the specified file.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while loading the PFX file.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="password"/> is invalid.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.CreateFromPfxFile(System.String,System.String,System.Boolean)">
            <summary>
            Creates a new certificate store from a PFX/P12 encoded file.
            </summary>
            <param name="file">The full path to the PFX file.</param>
            <param name="password">The password used to encrypt the private key.</param>
            <param name="exportable"><b>true</b> if the private keys associated with the certificates should be marked as exportable, <b>false</b> otherwise.</param>
            <returns>A <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> or <paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.IO.IOException">An error occurs whil reading from the specified file.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while loading the PFX file.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="password"/> is invalid.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.CreateFromPfxFile(System.String,System.String,System.Boolean,EnterpriseDT.Mentalis.Security.Certificates.KeysetLocation)">
            <summary>
            Creates a new certificate store from a PFX/P12 encoded file.
            </summary>
            <param name="file">The full path to the PFX file.</param>
            <param name="password">The password used to encrypt the private key.</param>
            <param name="exportable"><b>true</b> if the private keys associated with the certificates should be marked as exportable, <b>false</b> otherwise.</param>
            <param name="location">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.KeysetLocation"/> values.</param>
            <returns>A <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> or <paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.IO.IOException">An error occurs whil reading from the specified file.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while loading the PFX file.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="password"/> is invalid.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.CreateFromPfxFile(System.Byte[],System.String)">
            <summary>
            Creates a new certificate store from a PFX/P12 encoded file.
            </summary>
            <param name="file">The contents of a PFX file.</param>
            <param name="password">The password used to encrypt the private key.</param>
            <returns>A <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> or <paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="password"/> is invalid.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while loading the PFX file.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.CreateFromPfxFile(System.Byte[],System.String,System.Boolean)">
            <summary>
            Creates a new certificate store from a PFX/P12 encoded file.
            </summary>
            <param name="file">The contents of a PFX file.</param>
            <param name="password">The password used to encrypt the private key.</param>
            <param name="exportable"><b>true</b> if the private keys associated with the certificates should be marked as exportable, <b>false</b> otherwise.</param>
            <returns>A <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> or <paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="password"/> is invalid.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while loading the PFX file.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.CreateFromPfxFile(System.Byte[],System.String,System.Boolean,EnterpriseDT.Mentalis.Security.Certificates.KeysetLocation)">
            <summary>
            Creates a new certificate store from a PFX/P12 encoded file.
            </summary>
            <param name="file">The contents of a PFX file.</param>
            <param name="password">The password used to encrypt the private key.</param>
            <param name="exportable"><b>true</b> if the private keys associated with the certificates should be marked as exportable, <b>false</b> otherwise.</param>
            <param name="location">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.KeysetLocation"/> values.</param>
            <returns>A <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> or <paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="password"/> is invalid.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while loading the PFX file.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.GetFileContents(System.String)">
            <summary>
            Returns the contents of a file.
            </summary>
            <param name="file">The file to read from.</param>
            <returns>A byte array with the contents of the specified file.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.IO.IOException">An error occurs while reading from the specified file.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.CreateFromCerFile(System.String)">
            <summary>
            Creates a new certificate store from a certificate file.
            </summary>
            <param name="file">The certificate file.</param>
            <returns>A <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while loading the certificate.</exception>
            <remarks>The provider opens the file and first attempts to read the file as a serialized store, then as a PKCS #7 signed message, and finally as a single encoded certificate.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.#ctor(EnterpriseDT.Mentalis.Security.Certificates.CertificateStore)">
            <summary>
            Duplicates an exisiting <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/>.
            </summary>
            <param name="store">The store to duplicate.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="store"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.#ctor(System.IntPtr)">
            <summary>
            Initializes a new <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/> from a given handle.
            </summary>
            <param name="handle">The handle from which to initialize the CertificateStore from.</param>
            <remarks>The handle will not be duplicated; when this CertificateStore instance is garbage collected, the handle will be freed.</remarks>
            <exception cref="T:System.ArgumentException"><paramref name="handle"/> is invalid.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/> from a given handle.
            </summary>
            <param name="handle">The handle from which to initialize the CertificateStore from.</param>
            <param name="duplicate"><b>true</b> if the handle should be duplicated, <b>false</b> otherwise.</param>
            <exception cref="T:System.ArgumentException"><paramref name="handle"/> is invalid.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/> from a given store name.
            </summary>
            <param name="store">The name of the system store to open.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="store"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while opening the specified store.</exception>
            <remarks>
            <para>If the system store name provided in this parameter is not the name of an existing system store, a new system store will be created and used.</para>
            <para>Some example system stores are listed in the following table. 
            <list type="table">
            	<listheader>
            		<term>Predefined system store name</term>
            		<description>Meaning</description>
            	</listheader>
            	<item>
            		<term>"CA"</term>
            		<description>Certification authority certificates.</description>
            	</item>
            	<item>
            		<term>"MY"</term>
            		<description>A certificate store holding "My" certificates with their associated private keys.</description>
            	</item>
            	<item>
            		<term>"ROOT"</term>
            		<description>Root certificates.</description>
            	</item>
            	<item>
            		<term>"SPC"</term>
            		<description>Software publisher certificates.</description>
            	</item>
            </list></para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.#ctor(EnterpriseDT.Mentalis.Security.Certificates.StoreLocation,System.String)">
            <summary>
            Initializes a new <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/> from a given store name and a given store location.
            </summary>
            <param name="location">The location of the store.</param>
            <param name="store">The name of the store to open.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="store"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while opening the specified store.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.#ctor">
            <summary>
            Initializes a new temporary <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/> in memory.
            </summary>
            <remarks>If the store is closed, all the data in the store is lost.</remarks>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while creating the store.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new temporary <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/> in memory and adds the specified certificates to it.
            </summary>
            <param name="certs">A set of certificates.</param>
            <remarks>If the store is closed, all the data in the store is lost.</remarks>
            <exception cref="T:System.InvalidCastException"><i>certs</i> contains at least one object that is not of type <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/>.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.#ctor(System.Byte[],EnterpriseDT.Mentalis.Security.Certificates.CertificateStoreType)">
            <summary>
            Opens a serialized certificate store or a certificate store with signed PKCS7 messages.
            </summary>
            <param name="buffer">The bytes of the store to open.</param>
            <param name="type">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStoreType"/> values.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while opening the store.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.InitStore(System.IntPtr,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/> from a given handle.
            </summary>
            <param name="handle">The handle from which to initialize the CertificateStore from.</param>
            <param name="duplicate"><b>true</b> if the handle should be duplicated, <b>false</b> otherwise.</param>
            <exception cref="T:System.ArgumentException"><paramref name="handle"/> is invalid.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.FindCertificate">
            <summary>
            Returns the first certificate from the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/>.
            </summary>
            <returns>A <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> from the store.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.FindCertificate(EnterpriseDT.Mentalis.Security.Certificates.Certificate)">
            <summary>
            Returns a certificate from the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/>.
            </summary>
            <param name="previous">The previous certificate.</param>
            <returns>The <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> that comes after <paramref name="previous"/> -or- a null reference (<b>Nothing in Visual Basic</b>) if there is no certificate after <paremref name="previous"/>.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.FindCertificateByUsage(System.String[])">
            <summary>
            Finds a certificate having an enhanced key extension that matches one of the <paramref name="keyUsage"/> members.
            </summary>
            <param name="keyUsage">The list of enhanced key usages to search for.</param>
            <returns>A <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> that has at least one of the specified key usages -or- a null reference (<b>Nothing in Visual Basic</b>) if no valid certificate could be found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyUsage"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="keyUsage"/> is invalid.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.FindCertificateByUsage(System.String[],EnterpriseDT.Mentalis.Security.Certificates.Certificate)">
            <summary>
            Finds a certificate having an enhanced key extension that matches one of the <paramref name="keyUsage"/> members.
            </summary>
            <param name="keyUsage">The list of enhanced key usages to search for.</param>
            <param name="previous">The previous certificate.</param>
            <returns>The <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> that comes after <paramref name="previous"/> and that has at least one of the specified key usages -or- a null reference (<b>Nothing in Visual Basic</b>) if no other valid certificate could be found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyUsage"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="keyUsage"/> is invalid.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.FindCertificateByHash(System.Byte[])">
            <summary>
            Finds a certificate with a matching hash.
            </summary>
            <param name="hash">The hash to search for.</param>
            <returns>The <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> with the matching default hash -or- a null reference (<b>Nothing</b> in Visual Basic) if no certificate with that hash could be found in the store.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="hash"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.FindCertificateByHash(System.Byte[],EnterpriseDT.Mentalis.Security.Certificates.HashType)">
            <summary>
            Finds a certificate with a matching hash.
            </summary>
            <param name="hash">The hash to search for.</param>
            <param name="hashType">One of the HashType values.</param>
            <returns>The <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> with the matching hash -or- a null reference (<b>Nothing</b> in Visual Basic) if no certificate with that hash could be found in the store.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="hash"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.FindCertificateByKeyIdentifier(System.Byte[])">
            <summary>
            Finds a certificate with a matching key identifier.
            </summary>
            <param name="keyID">The key identifier to search for.</param>
            <returns>The <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> with the matching key identifier -or- a null reference (<b>Nothing</b> in Visual Basic) if no matching certificate could be found in the store.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyID"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="keyID"/> is invalid.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.FindCertificateBySubjectName(System.String)">
            <summary>
            Finds a certificate with a matching subject name.
            </summary>
            <param name="name">The X500 string to search for.</param>
            <returns>A <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> with a matching subject name -or- a null reference (<b>Nothing</b> in Visual Basic) if no matching certificate could be found in the store.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="name"/> is invalid.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.FindCertificateBySubjectName(System.String,EnterpriseDT.Mentalis.Security.Certificates.Certificate)">
            <summary>
            Finds a certificate with a matching subject name.
            </summary>
            <param name="name">The X500 string to search for.</param>
            <param name="previous">The previous certificate.</param>
            <returns>A <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> with a matching subject name -or- a null reference (<b>Nothing</b> in Visual Basic) if no matching certificate could be found in the store.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="name"/> is invalid.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while encoding the specified string.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.FindCertificateBySubjectString(System.String)">
            <summary>
            Finds a certificate with a subject that contains a specified string.
            </summary>
            <param name="subject">The string to search for.</param>
            <returns>A <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> with a matching subject string -or- a null reference (<b>Nothing</b> in Visual Basic) if no matching certificate could be found in the store.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="subject"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="subject"/> is invalid.</exception>
            <remarks>The string matching algorithm used is case-insensitive.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.FindCertificateBySubjectString(System.String,EnterpriseDT.Mentalis.Security.Certificates.Certificate)">
            <summary>
            Finds a certificate with a subject that contains a specified string.
            </summary>
            <param name="subject">The string to search for.</param>
            <param name="previous">The previous certificate.</param>
            <returns>A <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> with a matching subject string -or- a null reference (<b>Nothing</b> in Visual Basic) if no matching certificate could be found in the store.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="subject"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="subject"/> is invalid.</exception>
            <remarks>The string matching algorithm used is case-insensitive.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.EnumCertificates">
            <summary>
            Enumerates all the certificates in the store.
            </summary>
            <returns>An array of <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> instances.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.EnumCertificates(System.String[])">
            <summary>
            Enumerates all the certificates in the store.
            </summary>
            <param name="keyUsage">The list of enhanced key usages to search for.</param>
            <returns>An array of <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> instances.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyUsage"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="keyUsage"/> is invalid.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.ToPfxFile(System.String,System.String,System.Boolean)">
            <summary>
            Saves the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/> as a PFX encoded file.
            </summary>
            <param name="filename">The filename of the new PFX file.</param>
            <param name="password">The password to use when encrypting the private keys.</param>
            <param name="exportPrivateKeys"><b>true</b> if the private keys should be exported [if possible], <b>false</b> otherwise.</param>
            <remarks>If the specified file already exists, the method will throw an exception.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="filename"/> or <paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while exporting the certificate store.</exception>
            <exception cref="T:System.IO.IOException">An error occurs while writing the data to the file.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.ToPfxBuffer(System.String,System.Boolean)">
            <summary>
            Saves the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/> as a PFX encoded file.
            </summary>
            <param name="password">The password to use when encrypting the private keys.</param>
            <param name="exportPrivateKeys"><b>true</b> if the private keys should be exported [if possible], <b>false</b> otherwise.</param>
            <returns>An array of bytes that represents the PFX encoded store.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while exporting the certificate store.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.GetPfxBuffer(System.String,System.Boolean)">
            <summary>
            Returns the byte representation of the PFX encoded store.
            </summary>
            <param name="password">The password to use when encrypting the private keys.</param>
            <param name="exportPrivateKeys"><b>true</b> if the private keys should be exported [if possible], <b>false</b> otherwise.</param>
            <returns>An array of bytes that represents the PFX encoded store.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.ToCerFile(System.String,EnterpriseDT.Mentalis.Security.Certificates.CertificateStoreType)">
            <summary>
            Saves the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/> in a file.
            </summary>
            <param name="filename">The filename of the serialized store.</param>
            <param name="type">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStoreType"/> values.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="filename"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while saving the store to the memory buffer.</exception>
            <exception cref="T:System.IO.IOException">An error occurs while writing the data.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.ToCerBuffer(EnterpriseDT.Mentalis.Security.Certificates.CertificateStoreType)">
            <summary>
            Saves the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/> in a buffer.
            </summary>
            <param name="type">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStoreType"/> values.</param>
            <returns>An array of bytes that represents the encoded store.</returns>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while saving the store to the memory buffer.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.GetCerBuffer(EnterpriseDT.Mentalis.Security.Certificates.CertificateStoreType)">
            <summary>
            Returns the byte representation of the serialized store.
            </summary>
            <param name="type">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStoreType"/> values.</param>
            <returns>An array of bytes that represents the encoded store.</returns>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while saving the store to the memory buffer.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.SaveToFile(System.Byte[],System.String)">
            <summary>
            Writes a buffer with data to a file.
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="filename">The filename to write the data to.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> or <paramref name="filename"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.IO.IOException">An error occurs while writing the data.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.AddCertificate(EnterpriseDT.Mentalis.Security.Certificates.Certificate)">
            <summary>
            Adds a <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> to the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/>.
            </summary>
            <param name="cert">The certificate to add to the store.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="cert"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while adding the certificate to the store.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.DeleteCertificate(EnterpriseDT.Mentalis.Security.Certificates.Certificate)">
            <summary>
            Deletes a <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> from the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="cert"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while removing the certificate from the store.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.Finalize">
            <summary>
            Disposes of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/>.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.Dispose">
            <summary>
            Disposes of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/>.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.GetCachedStore(System.String)">
            <summary>
            Returns a CertificateStore from a list of cached stores. If the store is not yet cached, it will be created first.
            </summary>
            <param name="name">The name of the store.</param>
            <returns>The cached store.</returns>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.m_Handle">
            <summary>
            Holds the handle of the certificate store.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.m_CachedStores">
            <summary>
            Holds the cached stores
            </summary>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.Handle">
            <summary>
            Gets the handle of the CertificateStore.
            </summary>
            <value>An IntPtr that represents the handle of the certificate.</value>
            <remarks>The handle returned by this property should not be closed. If the handle is closed by an external actor, the methods of the CertificateStore object may fail in undocumented ways [for instance, an Access Violation may occur].</remarks>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Cryptography.HMAC">
            <summary>
            Implements the HMAC keyed message authentication code algorithm.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.HMAC.#ctor(System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.HMAC"/> class. This class cannot be inherited.
            </summary>
            <param name="hash">The underlying hash algorithm to use.</param>
            <remarks>A random key will be generated and used by the HMAC.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="hash"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.HMAC.#ctor(System.Security.Cryptography.HashAlgorithm,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.HMAC"/> class.
            </summary>
            <param name="hash">The underlying hash algorithm to use.</param>
            <param name="rgbKey">The key to use for the HMAC -or- a null reference (<b>Nothing</b> in Visual Basic).</param>
            <remarks>If <paramref name="rgbKey"/> is a null reference, the HMAC class will generate a random key.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="hash"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.HMAC.Initialize">
            <summary>
            Initializes the HMAC.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The HMAC instance has been disposed.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Routes data written to the object into the hash algorithm for computing the hash.
            </summary>
            <param name="rgb">The input for which to compute the hash code. </param>
            <param name="ib">The offset into the byte array from which to begin using data. </param>
            <param name="cb">The number of bytes in the byte array to use as data. </param>
            <exception cref="T:System.ObjectDisposedException">The HMAC instance has been disposed.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.HMAC.HashFinal">
            <summary>
            Finalizes the hash computation after the last data is processed by the cryptographic stream object.
            </summary>
            <returns>The computed hash code.</returns>
            <exception cref="T:System.ObjectDisposedException">The HMAC instance has been disposed.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.HMAC.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the HMAC.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.HMAC.Finalize">
            <summary>
            Finalizes the HMAC.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.HMAC.m_HashAlgorithm">
            <summary>
            Holds the internal hash algorithm
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.HMAC.m_KeyBuffer">
            <summary>
            Holds the key buffer.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.HMAC.m_IsHashing">
            <summary>
            <b>true</b> if a hash operation is in prograss, <b>false</b> otherwise.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.HMAC.m_IsDisposed">
            <summary>
            <b>true</b> if the object has been disposed, <b>false</b> otherwise.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.HMAC.HashSize">
            <summary>
            Gets the size of the computed hash code in bits.
            </summary>
            <value>The size of the computed hash code in bits.</value>
        </member>
        <member name="P:EnterpriseDT.Net.Zlib.ZOutputStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:EnterpriseDT.Net.Zlib.ZOutputStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Design.SecureFTPConnectionSerializer">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Design.ExFTPConnectionSerializer">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPConnectionSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="manager"></param>
            <param name="codeDomObject"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPConnectionSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="manager"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPConnectionSerializer.GetTargetObject(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="manager"></param>
            <param name="codeDomObject"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.SecureFTPConnectionSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="manager"></param>
            <param name="codeDomObject"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.SecureFTPConnectionSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="manager"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:EnterpriseDT.Util.DataBuffer.offset">
            <summary>
            Where the current data starts
            </summary>
        </member>
        <member name="F:EnterpriseDT.Util.DataBuffer.length">
            <summary>
            length of current data
            </summary>
        </member>
        <member name="P:EnterpriseDT.Util.DataBuffer.Length">
            <summary>
            Length of data
            </summary>
        </member>
        <member name="P:EnterpriseDT.Util.DataBuffer.Offset">
            <summary>
            Start of data in internal buffer
            </summary>
        </member>
        <member name="P:EnterpriseDT.Util.DataBuffer.FreeSpace">
            <summary>
            Free space left (at the end)
            </summary>
        </member>
        <member name="T:EnterpriseDT.Util.Debug.FileAppender">
            <summary>  
            Appends log statements to a file
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.14 $
            </version>
        </member>
        <member name="T:EnterpriseDT.Util.Debug.Appender">
            <summary>  Interface for classes that output log
            statements 
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.5 $
            </version>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Appender.Close">
            <summary> Close this appender</summary>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Appender.Log(System.String)">
            <summary> Log a message
            
            </summary>
            <param name="msg"> message to log
            </param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Appender.Log(System.Exception)">
            <summary> 
            Log a stack trace
            </summary>
            <param name="t"> throwable object
            </param>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.FileAppender.logger">
            <summary> Destination</summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.FileAppender.fileName">
            <summary> Log file</summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.FileAppender.closed">
            <summary>
            True if closed
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.FileAppender.#ctor(System.String)">
            <summary>Constructor</summary>
            <param name="fileName">name of file to log to</param>
            <throws>  IOException </throws>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.FileAppender.Log(System.String)">
            <summary> 
            Log a message
            </summary>
            <param name="msg"> message to log
            </param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.FileAppender.Log(System.Exception)">
            <summary> 
            Log a stack trace
            </summary>
            <param name="t"> throwable object
            </param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.FileAppender.Close">
            <summary> 
            Close this appender
            </summary>
        </member>
        <member name="P:EnterpriseDT.Util.Debug.FileAppender.FileName">
            <summary>
            Name of file to log to.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Util.Debug.CustomLogLevelAppender">
            <summary>
            Extends <see cref="T:EnterpriseDT.Util.Debug.Appender"/> by allowing an appender to have its own log-level.
            </summary>
            <remarks>
            Appenders implementing this interface have their own log-level, which overrides the global
            logging level, <see cref="P:EnterpriseDT.Util.Debug.Logger.CurrentLevel"/>.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Util.Debug.CustomLogLevelAppender.CurrentLevel">
            <summary>
            Logging level for this appender.  This does not affect the global logging level.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStoreCollection">
            <summary>
            Defines a collection of certificate stores.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStoreCollection.#ctor(EnterpriseDT.Mentalis.Security.Certificates.CertificateStore[])">
            <summary>
            Initializes a new instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStoreCollection"/> class.
            </summary>
            <param name="stores">An array of stores that should be added to the collection.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stores"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/> objects in the array is a <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStoreCollection"/> instance. This is not allowed to avoid circular dependencies.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while adding a certificate to the collection.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStoreCollection.#ctor(EnterpriseDT.Mentalis.Security.Certificates.CertificateStoreCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStoreCollection"/> class.
            </summary>
            <param name="collection">The CertificateStoreCollection whose elements are copied to the new certificate store collection.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while adding a certificate to the collection.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStoreCollection.AddStore(EnterpriseDT.Mentalis.Security.Certificates.CertificateStore)">
            <summary>
            Adds a certificate store to the collection.
            </summary>
            <param name="store">An instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/> class.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="store"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The specified certificate store is a <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStoreCollection"/> instance. This is not allowed to avoid circular dependencies.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while adding the certificate to the collection.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStoreCollection.RemoveStore(EnterpriseDT.Mentalis.Security.Certificates.CertificateStore)">
            <summary>
            Removes a certificate store from the collection.
            </summary>
            <param name="store">An instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/> class.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="store"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStoreCollection.m_Stores">
            <summary>
            Holds the references to the CertificateStore instances in the collection. This is to avoid CertificateStores finalizing and destroying their handles.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.HttpUtility.HtmlDecode(System.String)">
            <summary>
            Decodes an HTML-encoded string and returns the decoded string.
            </summary>
            <param name="s">The HTML string to decode. </param>
            <returns>The decoded text.</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.HttpUtility.HtmlDecode(System.String,System.IO.TextWriter)">
            <summary>
            Decodes an HTML-encoded string and sends the resulting output to a TextWriter output stream.
            </summary>
            <param name="s">The HTML string to decode</param>
            <param name="output">The TextWriter output stream containing the decoded string. </param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.HttpUtility.HtmlEncode(System.String)">
            <summary>
            HTML-encodes a string and returns the encoded string.
            </summary>
            <param name="s">The text string to encode. </param>
            <returns>The HTML-encoded text.</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.HttpUtility.HtmlEncode(System.String,System.IO.TextWriter)">
            <summary>
            HTML-encodes a string and sends the resulting output to a TextWriter output stream.
            </summary>
            <param name="s">The string to encode. </param>
            <param name="output">The TextWriter output stream containing the encoded string. </param>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Cryptography.MD4CryptoServiceProvider">
            <summary>
            Computes the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.MD4"/> hash for the input data using the implementation provided by the cryptographic service provider (CSP).
            </summary>
            <remarks>Warning: The MD4 algorithm is a broken algorithm. It should <i>only</i> be used for compatibility with older systems.</remarks>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Cryptography.MD4">
            <summary>
            Represents the abstract class from which all implementations of the MD4 hash algorithm inherit.
            </summary>
            <remarks>Warning: The MD4 algorithm is a broken algorithm. It should <i>only</i> be used for compatibility with older systems.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.MD4.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.MD4"/>.
            </summary>
            <remarks>You cannot create an instance of an abstract class. Application code will create a new instance of a derived class.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.MD4.Create">
            <summary>
            Creates an instance of the default implementation of the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.MD4"/> hash algorithm.
            </summary>
            <returns>A new instance of the MD4 hash algorithm.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.MD4.Create(System.String)">
            <summary>
            Creates an instance of the specified implementation of the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.MD4"/> hash algorithm.
            </summary>
            <param name="hashName">The name of the specific implementation of MD4 to use.</param>
            <returns>A new instance of the specified implementation of MD4.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.MD4CryptoServiceProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.MD4CryptoServiceProvider"/> class. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.MD4CryptoServiceProvider.Initialize">
            <summary>
            Initializes an instance of <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.MD4CryptoServiceProvider"/>.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The MD4CryptoServiceProvider instance has been disposed.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.MD4CryptoServiceProvider.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Routes data written to the object into the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.MD4"/> hash algorithm for computing the hash.
            </summary>
            <param name="array">The array of data bytes.</param>
            <param name="ibStart">The offset into the byte array from which to begin using data.</param>
            <param name="cbSize">The number of bytes in the array to use as data.</param>
            <exception cref="T:System.ObjectDisposedException">The MD4CryptoServiceProvider instance has been disposed.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The data could not be hashed.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.MD4CryptoServiceProvider.HashFinal">
            <summary>
            Returns the computed <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.MD4CryptoServiceProvider"/> hash as an array of bytes after all data has been written to the object.
            </summary>
            <returns>The computed hash value.</returns>
            <exception cref="T:System.ObjectDisposedException">The MD4CryptoServiceProvider instance has been disposed.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The data could not be hashed.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.MD4CryptoServiceProvider.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.MD4CryptoServiceProvider"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.MD4CryptoServiceProvider.Finalize">
            <summary>
            Finalizes the MD4CryptoServiceProvider.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.MD4CryptoServiceProvider.m_Provider">
            <summary>
            Holds the handle of the crypto service provider.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.MD4CryptoServiceProvider.m_Hash">
            <summary>
            Holds the hash handle.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.MD4CryptoServiceProvider.m_Disposed">
            <summary>
            <b>true</b> if the object ahs been disposed, <b>false</b> otherwise.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.OpenSSHPublicKeyFormat">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.IPublicKeyFormat">
            <summary>
            Defines methods for public key formats
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.IPublicKeyFormat.IsFormatted(System.Byte[])">
            <summary>
            Are the supplied raw key bytes in this key format?
            </summary>
            <param name="formattedKey">raw bytes from keyfile</param>
            <returns>true if in this format, false otherwise</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.IPublicKeyFormat.GetKeyBlob(System.Byte[])">
            <summary>
            Get the key blob from the raw key bytes
            </summary>
            <param name="formattedKey">raw bytes from keyfile</param>
            <returns>the key blob</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.OpenSSHPublicKeyFormat.IsFormatted(System.Byte[])">
            <summary>
            Are the supplied raw key bytes in this key format?
            </summary>
            <param name="formattedKey">raw bytes from keyfile</param>
            <returns>true if in this format, false otherwise</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.OpenSSHPublicKeyFormat.GetKeyBlob(System.Byte[])">
            <summary>
            Get the key blob from the raw key bytes
            </summary>
            <param name="formattedKey">raw bytes from keyfile</param>
            <returns>the key blob</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.OpenSSHPublicKeyFormat.GetKeyBlob(System.String)">
            <summary>
            Get the key blob from the string
            </summary>
            <param name="formattedKey">string from keyfile</param>
            <returns>the key blob</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.RenameCommand">
            <summary>  Description
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.3 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Forms.FTPRemoteFileList">
            <summary>
            Displays a list of remote files and directories available for download via FTP.
            </summary>
            <remarks>
            <para>
            <c>FTPRemoteFileList</c> is analogous to a <see cref="T:System.Windows.Forms.ListView"/>, and displays a list of remote 
            files and directories available on an FTP server for download.
            </para>
            <para>
            When an instance of <c>FTPRemoteFileList</c> is placed on a Windows form, it will 
            automatically detect an instance of <see cref="T:EnterpriseDT.Net.Ftp.ExFTPConnection"/> or 
            <see cref="T:EnterpriseDT.Net.Ftp.SecureFTPConnection"/>. 
            </para>
            <para>
            If the connection has been established to the FTP server, a listing of the 
            current remote working directory will be displayed. Clicking on a filename 
            displayed in the list will cause the file to be downloaded to the current 
            local working directory of the connection.
            </para>
            <para>
            <c>FTPRemoteFileList</c> also supports drag and drop in conjunction with 
            <see cref="T:EnterpriseDT.Net.Ftp.Forms.FTPLocalFileList"/>. If files are dragged from an instance of 
            <c>FTPRemoteFileList</c> and dropped on an instance of <c>FTPLocalFileList</c>, 
            they will be downloaded to the current local directory, and the file list refreshed.
            </para>
            <para>
            Renaming of remote files is also supported by the standard single click 
            mechanism, and remote files and directories can be deleted via the delete key. 
            A warning prompt is displayed before the deletion occurs. Download, rename 
            and delete are also available as right mouse click menu items.
            </para>
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Forms.FTPFileList">
            <summary>
            Displays a list of files and directories available for upload or download via FTP.
            </summary>
            <remarks>
            <para>
            FTPFileList is an abstract class that provides much of the functionality required 
            to display a list of files (and directories) that can be uploaded or downloaded
            via the various FTP protocols (including secure protocols such as SFTP and FTPS).
            It supports renaming of files, deleting of files, and transfer via drag and drop and
            double-click, as well as a right mouse button menu providing the same functionality.
            </para> 
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.IFTPComponent">
            <summary>
            Interface implemented by all FTP components.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFTPComponent.LinkComponent(EnterpriseDT.Net.Ftp.IFTPComponent)">
            <summary>
            Called by the given FTP component when it is added to a container.
            </summary>
            <remarks>
            This method allows FTP components to interlink themselves automatically.
            </remarks>
            <param name="component">FTP component just added to the container.</param>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPFileList.showParentDir">
            <summary>INTERNAL USE ONLY.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPFileList.showItemIcons">
            <summary>INTERNAL USE ONLY.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPFileList.fileIconList">
            <summary>INTERNAL USE ONLY.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPFileList.fileListView">
            <summary>INTERNAL USE ONLY.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPFileList.nameColumn">
            <summary>INTERNAL USE ONLY.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPFileList.sizeColumn">
            <summary>INTERNAL USE ONLY.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPFileList.dateColumn">
            <summary>INTERNAL USE ONLY.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPFileList.itemMenu">
            <summary>INTERNAL USE ONLY.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPFileList.uploadMenuItem">
            <summary>INTERNAL USE ONLY.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPFileList.downloadMenuItem">
            <summary>INTERNAL USE ONLY.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPFileList.deleteMenuItem">
            <summary>INTERNAL USE ONLY.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPFileList.renameMenuItem">
            <summary>INTERNAL USE ONLY.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPFileList.createDirMenuItem">
            <summary>INTERNAL USE ONLY.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPFileList.dirPanel">
            <summary>INTERNAL USE ONLY.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPFileList.allowUpload">
            <summary>INTERNAL USE ONLY.</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.fileListView_ColumnClick(System.Object,System.Windows.Forms.ColumnClickEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.fileListView_DrawColumnHeader(System.Object,System.Windows.Forms.DrawListViewColumnHeaderEventArgs)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.fileListView_DrawItem(System.Object,System.Windows.Forms.DrawListViewItemEventArgs)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.fileListView_DrawSubItem(System.Object,System.Windows.Forms.DrawListViewSubItemEventArgs)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.fileListView_DoubleClick(System.Object,System.EventArgs)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.fileListView_AfterLabelEdit(System.Object,System.Windows.Forms.LabelEditEventArgs)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.CreateDirectory">
            <summary>
            Creates a sub-directory in the current directory.
            </summary>
            <remarks>
            <para>
            The initial name of the sub-directory is the text of 'create directory' menu-item 
            with a number appended.
            </para>
            <para>
            This method emulates a click on the 'create directory' menu-item.
            </para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.RenameSelectedItem">
            <summary>
            Allows the user to edit the name of a file.
            </summary>
            <remarks>
            <para>
            When the method is called, the first selected item is put into edit mode.  The file
            will be renamed when the item loses focus or when the Escape button is pressed, in 
            which case the rename operation is abandoned.
            </para>
            <para>
            This method emulates a click on the 'rename' menu-item.
            </para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.TransferSelectedItems">
            <summary>
            Causes the selected items to be transferred (i.e. uploaded or downloaded).
            </summary>
            <para>
            This method emulates a click on the 'download' or 'upload' menu-item.
            </para>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.DeleteSelectedItems">
            <summary>
            Deletes the selected items.
            </summary>
            <para>
            This method emulates a click on the 'delete' menu-item.
            </para>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.FindFileListItem(System.String,System.Boolean)">
            <summary>
            Returns the list item with the given name (or null if one doesn't exist).
            </summary>
            <param name="fileName">Name of item to look for.</param>
            <param name="ignoreCase">Should case be ignored?</param>
            <returns>The list item with the given name (or null if one doesn't exist).</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.FindFileListItem(System.String)">
            <summary>
            Returns the list item with the given name (or null if one doesn't exist).
            </summary>
            <param name="fileName">Name of item to look for.</param>
            <returns>The list item with the given name (or null if one doesn't exist).</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.OnShowMenu(System.Drawing.Point)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.OnSelectItem(EnterpriseDT.Net.Ftp.Forms.FTPFileListItem,System.Boolean)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="selectedItem"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.OnNameChange(EnterpriseDT.Net.Ftp.Forms.FTPFileListItem,System.String)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="selectedItem"></param>
            <param name="newName"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.OnDeleteItem(EnterpriseDT.Net.Ftp.Forms.FTPFileListItem)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="item"></param>
            <param name="file"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.OnCreateDirectory(System.String)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="item"></param>
            <param name="file"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.GetDragData(EnterpriseDT.Net.Ftp.Forms.FTPFileListItem[])">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.RefreshFileList">
            <summary>
            Refresh the file listing currently displayed.
            </summary>
            <remarks>
            This method will typically be overridden in subclasses.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.CreateListViewItem(EnterpriseDT.Net.Ftp.FTPFile)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.CreateListViewItem(System.String,System.Boolean,System.Int64,System.DateTime)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="name"></param>
            <param name="isDir"></param>
            <param name="size"></param>
            <param name="modifiedDate"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.ShowFile(EnterpriseDT.Net.Ftp.FTPFile)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.ShowFile(System.String,System.Int64,System.DateTime)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="name"></param>
            <param name="size"></param>
            <param name="lastModifiedTime"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.FindItem(EnterpriseDT.Net.Ftp.FTPFile)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.GetIconFromExtension(System.String)">
            <summary>
            Returns the system icon for the given file extension (or folder if null).
            </summary>
            <param name="extension">Extension or null to get folder icon.</param>
            <returns>System icon</returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.BackgroundImage">
            <summary>
            Gets or sets the background image displayed in the control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.CheckBoxes">
            <summary>
            Gets or sets a value indicating whether a check box appears next to 
            each item in the control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.ColumnName">
            <summary>
            Gets the name column header.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.ColumnSize">
            <summary>
            Gets the size column header.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.ColumnDate">
            <summary>
            Gets the date column header.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.DirectoryPanelVisible">
            <summary>
            Get or set the property that determines whether or not the directory panel is visible.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.FullRowSelect">
            <summary>
            Get or set the property that determines whether full rows are selectable (true) or just the file-name (false).
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.GridLines">
            <summary>
            Gets or sets a value indicating whether grid lines appear between the 
            rows and columns containing the items and subitems in the control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.ListBackColor">
            <summary>
            Gets or sets the background color for the control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.ShowIcons">
            <summary>
            Get or set the property that determines whether or not icons are displayed.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.Text">
            <summary>
            Gets or sets the text associated with this control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.View">
            <summary>
            Gets or sets the style in which the file-list is displayed.
            </summary>
            <remarks>
            The View property allows you to specify the type of display is used to 
            display the file-list. You can set the View property to display each item 
            with large or small icons or display items in a vertical list.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.Activation">
            <summary>
            Gets or sets the type of action the user must take to activate an item.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.AllowColumnReorder">
            <summary>
            Get or set the property that determines whether or not the user is allowed to reorder columns.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.AllowContextMenu">
            <summary>
            Get or set the property that determines whether or not to allow the context menu on right-click.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.AllowDelete">
            <summary>
            Get or set the property that allows deletion of files via the delete key.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.AllowDownload">
            <summary>
            Indicates whether or not downloading of files is permitted.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.AllowUpload">
            <summary>
            Indicates whether or not uploading of files is permitted.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.AllowCreateDirectory">
            <summary>
            Get or set the property that allows creation of directories.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.AllowDrop">
            <summary>
            Indicates whether the user can transfer files using drag-and-drop operations.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.AllowRename">
            <summary>
            Get or set the property that allows renaming of files via label editing.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.Connection">
            <summary>
            Get or set the FTP connection object to use for FTP operations.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.HeaderStyle">
            <summary>
            Gets or sets the column header style.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.HideSelection">
            <summary>
            Gets or sets a value indicating whether the selected item in 
            the control remains highlighted when the control loses focus.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.HoverSelection">
            <summary>
            Gets or sets a value indicating whether an item is automatically selected when the 
            mouse pointer remains over the item for a few seconds.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.LabelWrap">
            <summary>
            Gets or sets a value indicating whether item 
            labels wrap when items are displayed in the control as icons.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.LargeImageList">
            <summary>
            Gets or sets the ImageList to use when displaying items as large icons in the control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.MultiSelect">
            <summary>
            Get or set the property that determines whether or not multiple 
            files may be selected.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.PromptOnDelete">
            <summary>
            Get or set the property that determines whether or not the user is
            prompted before a file is deleted.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.Scrollable">
            <summary>
            Get or set the property that determines whether or not scroll-bars will be displayed.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.SelectedIndices">
            <summary>
            Gets the indexes of the selected items in the control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.ShowDirectories">
            <summary>
            Get or set the property that determines whether or not directories are displayed.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.ShowParentDirEllipsis">
            <summary>
            Get or set the property that determines whether or not an entry for 
            the parent directory ('..') is displayed.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.SmallImageList">
            <summary>
            Gets or sets the ImageList to use when displaying items as small icons in the control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.Sorting">
            <summary>
            Gets or sets the sort order for items in the control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.UserMessages">
            <summary>
            Get the text messages displayed to user.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.WildcardFilter">
            <summary>
            Get or set the wildcard filter string for displaying files.
            </summary>
            <remarks>
            '?' matches any single character and '*' matches zero or more characters.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.SortColumn">
            <summary>
            Column to use for sorting.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.SortAscending">
            <summary>
            Direction in which the column will be sorted.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.SortDirsPrecedeFiles">
            <summary>
            Should directories be shown before files?
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.Menu">
            <summary>
            Get the context menu shown on right-click.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.MenuItemUpload">
            <summary>
            Get the menu-item representing uploads.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.MenuItemDownload">
            <summary>
            Get the menu-item representing downloads.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.MenuItemRename">
            <summary>
            Get the menu-item representing renaming.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.MenuItemCreateDirectory">
            <summary>
            Get the menu-item representing directory creation.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.MenuItemDelete">
            <summary>
            Get the menu-item representing deleting.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.CheckedIndices">
            <summary>
            Gets the indexes of the currently checked items in the control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.CheckedItems">
            <summary>
            Gets the currently checked items in the control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.Columns">
            <summary>
            Gets the collection of all column headers that appear in the control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.CustomFilter">
            <summary>
            Gets or sets the FileFilter used for displaying files.
            </summary>
            <remarks>
            This can be used as an alternative to the <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.WildcardFilter"/>. If this 
            property is set, it overrides the <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.WildcardFilter"/>.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.FileItems">
            <summary>
            Gets a collection containing all items in the control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.FocusedFile">
            <summary>
            Gets the item in the control that currently has focus.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.ListViewItemSorter">
            <summary>
            Gets or sets the sorting comparer for the control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.SelectedFileItems">
            <summary>
            Gets the file items that are selected in the control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.TopItem">
            <summary>
            Gets the first visible item in the control.
            </summary>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Forms.FTPFileList.DeletingFile">
            <summary>
            Occurs before a file is deleted. 
            </summary>
            <remarks>
            Use <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.SelectedFileItems"/> to see which files will be deleted.
            </remarks>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Forms.FTPFileList.AfterLabelEdit">
            <summary>
            Occurs after a label has been edited but before the corresponding file is renamed.
            </summary>
            <remarks>
            The <c>Cancel</c> property of the arguments may be used to prevent the renaming of the file.
            </remarks>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Forms.FTPFileList.SelectedIndexChanged">
            <summary>
            Occurs when the selected index has been changed.
            </summary>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Forms.FTPFileList.ItemCheck">
            <summary>
            Occurs when the when the check state of an item changes.
            </summary>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Forms.FTPFileList.ItemChecked">
            <summary>
            Occurs when the when the checked state of an item changes.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Forms.FTPFileList.Messages">
            <summary>
            Defines the messages that can be presented to a user by this component.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPFileList.Messages.DEFAULT_DELETE_TITLE">
            <summary>
            Default title of message-box displayed when a file is being deleted.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPFileList.Messages.DEFAULT_DELETE_PROMPT">
            <summary>
            Default prompt shown to user when a file is being deleted.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPFileList.Messages.DEFAULT_DELETE_MULTIPLE_PROMPT">
            <summary>
            Default prompt shown to user when a file is being deleted.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPFileList.Messages.DEFAULT_NAME_EXISTS_TITLE">
            <summary>
            Default title of message-box shown when an attempt is made to rename a file or folder to a name 
            that is already used by another file or folder.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPFileList.Messages.DEFAULT_NAME_EXISTS_MESSAGE">
            <summary>
            Default message shown when an attempt is made to rename a file or folder to a name already used by another file or folder.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.Messages.NameExistsTitle">
            <summary>
            Title of message-box shown when an attempt is made to rename a file or folder to a name that is already used by another file or folder.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.Messages.NameExistsMessage">
            <summary>
            Message shown when an attempt is made to rename a file or folder to a name already used by another file or folder.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.Messages.DeleteTitle">
            <summary>
            Title of message-box displayed when a file is being deleted.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.Messages.DeletePrompt">
            <summary>
            Prompt shown to user when a file is being deleted.
            </summary>
            <remarks>
            The file-name is substituted for '{0}'.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.Messages.DeleteMultiplePrompt">
            <summary>
            Prompt shown to user when two or more files are being deleted.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPRemoteFileList.#ctor">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPRemoteFileList.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPRemoteFileList.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPRemoteFileList.ChangeDirectory(System.String)">
            <summary>
            Changes the directory which the <see cref="T:EnterpriseDT.Net.Ftp.Forms.FTPRemoteFileList"/> is displaying.
            </summary>
            <param name="newDirectory">New directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPRemoteFileList.OnSelectItem(EnterpriseDT.Net.Ftp.Forms.FTPFileListItem,System.Boolean)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="selectedItem"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPRemoteFileList.OnNameChange(EnterpriseDT.Net.Ftp.Forms.FTPFileListItem,System.String)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="selectedItem"></param>
            <param name="newName"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPRemoteFileList.GetDragData(EnterpriseDT.Net.Ftp.Forms.FTPFileListItem[])">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPRemoteFileList.OnDeleteItem(EnterpriseDT.Net.Ftp.Forms.FTPFileListItem)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="item"></param>
            <param name="file"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPRemoteFileList.OnFileDeleted(System.IAsyncResult)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPRemoteFileList.OnDirectoryDeleted(System.IAsyncResult)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPRemoteFileList.RefreshFileList">
            <summary>
            Refresh the file listing for the current remote working directory
            from the FTP server.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPRemoteFileList.AllowUpload">
            <summary>
            Indicates whether or not uploading of files is permitted.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPRemoteFileList.ReadOnly">
            <summary>
            Get or set the property that controls whether files can be renamed, 
            deleted or uploaded.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPRemoteFileList.Connection">
            <summary>
            Get or set the FTP connection object associated with this file list.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPRemoteFileList.CurrentDirectory">
            <summary>
            Returns the path of the directory currently shown in the file-list.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPRemoteFileList.DirectoryPanel">
            <summary>
            Get the panel in which directory information is displayed.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPRemoteFileList.DirectoryLabel">
            <summary>
            Get the label of the directory panel.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPRemoteFileList.DirectoryTextBox">
            <summary>
            Get the textbox showing the directory.
            </summary>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Forms.FTPRemoteFileList.DragDrop">
            <summary>
            Occurs when a drag-and-drop operation is completed.
            </summary>
            <remarks>
            This event may be used to replace the default DragDrop behavior.
            If this event is handled then the default DragDrop behavior is not performed.
            </remarks>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Forms.FTPRemoteFileList.DirectoryChanged">
            <summary>
            Occurs when the current directory has been changed or when an attempt has failed.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ssh.Routrek.SSHC.SSHUtil.WriteIntToByteArray(System.Byte[],System.Int32,System.Int32)">
            Network-byte-order‚Å32ƒrƒbƒg’l‚ð‘‚«ž‚ÞB
        </member>
        <member name="T:EnterpriseDT.Net.Ssh.Routrek.SSHC.SSHDataReader">
            read/write primitive types
            
        </member>
        <member name="M:EnterpriseDT.Net.Ssh.Routrek.SSHC.SSHDataReader.ReadMPInt">
            multi-precise integer
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaRssExtensions">
            <summary>
            helper to instantiate all factories defined in here and attach 
            them to a base object
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaRssExtensions.AddExtension(EnterpriseDT.Google.GData.Client.AtomBase)">
            <summary>
            helper to add all MediaRss extensions to a base object
            </summary>
            <param name="baseObject"></param>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaRssNameTable">
            <summary>
            short table for constants related to mediaRss declarations
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaRssNameTable.NSMediaRss">
            <summary>static string to specify the mediarss namespace
            TODO: picasa has the namespace slighly wrong.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaRssNameTable.mediaRssPrefix">
            <summary>static string to specify the used mediarss prefix</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaRssNameTable.MediaRssGroup">
            <summary>static string to specify the media:group element</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaRssNameTable.MediaRssCredit">
            <summary>static string to specify the media:credit element</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaRssNameTable.MediaRssContent">
            <summary>static string to specify the media:content element</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaRssNameTable.MediaRssCategory">
            <summary>static string to specify the media:category element</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaRssNameTable.MediaRssDescription">
            <summary>static string to specify the media:description element</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaRssNameTable.MediaRssKeywords">
            <summary>static string to specify the media:keywords element</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaRssNameTable.MediaRssThumbnail">
            <summary>static string to specify the media:thumbnail element</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaRssNameTable.MediaRssTitle">
            <summary>static string to specify the media:title element</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaRssNameTable.MediaRssRating">
            <summary>static string to specify the media:rating element</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaRssNameTable.MediaRssRestriction">
            <summary>static string to specify the media:restriction element</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaRssNameTable.MediaRssPlayer">
            <summary>static string to specify the media:player element</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaRssNameTable.AttributeUrl">
            <summary>
            the attribute string for the URL attribute
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaRssNameTable.AttributeHeight">
            <summary>
            the attribute string for the height attribute
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaRssNameTable.AttributeWidth">
            <summary>
            the attribute string for the width attribute
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaRssNameTable.AttributeTime">
            <summary>
            the attribute string for the time attribute
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaRssNameTable.AttributeType">
            <summary>
            the attribute string for the type attribute
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaRssNameTable.AttributeDefault">
            <summary>
            the attribute string for the isDefault attribute
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaRssNameTable.AttributeExpression">
            <summary>
            the attribute string for the expression attribute
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaRssNameTable.AttributeDuration">
            <summary>
            the attribute string for the duration attribute
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaGroup">
            <summary>
            MediaGroup container element for the MediaRss namespace
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaGroup.#ctor">
            <summary>
            default constructor for media:group
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaGroup.Credit">
            <summary>
            returns the media:credit element
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaGroup.Restriction">
            <summary>
            returns the media:credit element
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaGroup.Content">
            <summary>
            returns the media:content element
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaGroup.Description">
            <summary>
            returns the media:credit element
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaGroup.Keywords">
            <summary>
            The media:keywords tag contains a comma-separated list of words associated with a video. 
            You must provide at least one keyword for each video in your feed. This field has a 
            maximum length of 120 characters, including commas, and may contain all valid UTF-8 
            characters except &gt; and &lt;  In addition, each keyword must be at least two characters 
            long and may not be longer than 25 characters.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaGroup.Title">
            <summary>
            returns the media:credit element
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaGroup.Rating">
            <summary>
            returns the media:rating element
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaGroup.Thumbnails">
            <summary>
             property accessor for the Thumbnails 
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaGroup.Contents">
            <summary>
             property accessor for the Contents Collection 
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaGroup.Categories">
            <summary>
             property accessor for the Category Collection 
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaGroup.Player">
            <summary>
            returns the media:player element
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaCredit">
            <summary>
            media:credit schema extension describing an credit given to media
            it's a child of media:group
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaCredit.#ctor">
            <summary>
            default constructor for media:credit
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaCredit.#ctor(System.String)">
            <summary>
            default constructor for media:credit with an initial value
            </summary>
            <param name="initValue"/>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaCredit.Scheme">
            <summary>
             returns the schem of the credit element
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaCredit.Role">
            <summary>
             returns the role of the credit element
            </summary>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaRestriction">
            <summary>
            media:restriction schema extension identifies the country or countries where a
             video may or may not be played. The attribute value is a space-delimited 
            list of ISO 3166 two-letter country codes. 
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaRestriction.#ctor">
            <summary>
            default constructor for media:credit
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaRestriction.#ctor(System.String)">
            <summary>
            default constructor for media:credit with an initial value
            </summary>
            <param name="initValue"/>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaRestriction.Type">
            <summary>
             returns the schem of the credit element
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaRestriction.Relationship">
            <summary>
             returns the role of the credit element
            </summary>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaDescription">
            <summary>
            media:description schema extension describing an description given to media
            it's a child of media:group
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaDescription.#ctor">
            <summary>
            default constructor for media:description 
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaDescription.#ctor(System.String)">
            <summary>
            default constructor for media:description with an initial value
            </summary>
            <param name="initValue"/>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaPlayer">
            <summary>
            media:player schema extension describing the player URL
            it's a child of media:group
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaPlayer.#ctor">
            <summary>
            default constructor for media:content
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaPlayer.Url">
            <summary>convienience accessor for the Url</summary> 
            <returns> </returns>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaContent">
            <summary>
            media:content schema extension describing the content URL
            it's a child of media:group
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaContent.#ctor">
            <summary>
            default constructor for media:content
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaContent.Url">
            <summary>convienience accessor for the Url</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaContent.Height">
            <summary>convienience accessor for the Height</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaContent.Width">
            <summary>convienience accessor for the Width</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaContent.Type">
            <summary>convienience accessor for the Width</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaContent.Duration">
            <summary>convienience accessor for the Duration</summary> 
            <returns> </returns>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaCategory">
            <summary>
            media:content schema extension describing the content URL
            it's a child of media:group
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaCategory.#ctor">
            <summary>
            default constructor for media:content
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaCategory.#ctor(System.String)">
            <summary>
            default constructor for media:credit with an initial value
            </summary>
            <param name="initValue"/>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaCategory.#ctor(System.String,System.String)">
            <summary>
            Constructor for MediaCategory with an initial value
            and a scheme.
            </summary>
            <param name="initValue">The value of the tag</param>
            <param name="scheme">The scheme of the tag</param>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaKeywords">
            <summary>
            media:keywords schema extension describing a 
            comma seperated list of keywords
            it's a child of media:group
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaKeywords.#ctor">
            <summary>
            default constructor for media:keywords
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaKeywords.#ctor(System.String)">
            <summary>
            default constructor for media:keywords with an initial value
            </summary>
            <param name="initValue"/>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaThumbnail">
            <summary>
            media:thumbnail schema extension describing a 
            thumbnail URL with height/width
            it's a child of media:group
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaThumbnail.#ctor">
            <summary>
            default constructor for media:thumbnail
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaThumbnail.Url">
            <summary>convienience accessor for the Url</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaThumbnail.Height">
            <summary>convienience accessor for the Height</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaThumbnail.Width">
            <summary>convienience accessor for the Width</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaThumbnail.Time">
            <summary>convienience accessor for the time attribute</summary> 
            <returns> </returns>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaTitle">
            <summary>
            media:title schema extension describing the title given to media
            it's a child of media:group
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaTitle.#ctor">
            <summary>
            default constructor for media:title
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaTitle.#ctor(System.String)">
            <summary>
            default constructor for media:title with an initial value
            </summary>
            <param name="initValue"/>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaRating">
            <summary>
            media:rating schema extension describing the rating given to media
            it's a child of media:group
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaRating.#ctor">
            <summary>
            default constructor for media:rating
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaRating.#ctor(System.String)">
            <summary>
            default constructor for media:rating with an initial value
            </summary>
            <param name="initValue"/>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaRating.#ctor(System.String,System.String)">
            <summary>
            Constructor for MediaRating with an initial value
            and a scheme.
            </summary>
            <param name="initValue">The value of the tag</param>
            <param name="scheme">The scheme of the tag</param>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaRating.Scheme">
            <summary>
             returns the schem for the media rating
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.MediaRss.MediaRating.Country">
            <summary>
             returns the country for this rating
            </summary>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Google.GData.AccessControl.AclEntry">
            <summary>
            Entry API customization class for defining entries in an AccessControl feed.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.AbstractEntry">
            <summary>
            Entry API customization class for defining entries in a custom feed
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.AtomEntry">
            <summary>AtomEntry object, representing an item in the RSS/Atom feed
             Version 1.0 removed atom-Head
               element atom:entry {
                  atomCommonAttributes,
                  (atomAuthor*
                    atomCategory*
                   atomContent?
                   atomContributor*
                   atomId
                   atomLink*
                   atomPublished?
                   atomRights?
                   atomSource?
                   atomSummary?
                   atomTitle
                   atomUpdated
                   extensionElement*)
               }
             </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomEntry.title">
            <summary>/feed/entry/title property as string</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomEntry.id">
            <summary>/feed/entry/id property as string</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomEntry.links">
            <summary>/feed/entry/link collection</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomEntry.lastUpdateDate">
            <summary>/feed/entry/updated property as string</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomEntry.publicationDate">
            <summary>/feed/entry/published property as string</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomEntry.authors">
            <summary>/feed/entry/author property as Author object</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomEntry.contributors">
            <summary>/feed/entry/atomContributor property as Author object</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomEntry.rights">
            <summary>The "atom:rights" element is a Text construct that conveys a human-readable copyright statement for an entry or feed.</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomEntry.categories">
            <summary>/feed/entry/category/@term property as a list of AtomCategories</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomEntry.summary">
            <summary>The "atom:summary" element is a Text construct that conveys a short summary, abstract or excerpt of an entry.</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomEntry.content">
            <summary>contains the content as an object</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomEntry.source">
            <summary>atom:source element</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomEntry.service">
            <summary>GData service to use</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomEntry.feed">
            <summary>holds the owning feed</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomEntry.AddOtherNamespaces(System.Xml.XmlWriter)">
            <summary>checks to see if we are a batch feed, if so, adds the batchNS</summary> 
            <param name="writer">the xmlwriter, where we want to add default namespaces to</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomEntry.SkipNode(System.Xml.XmlNode)">
            <summary>checks if this is a namespace 
            decl that we already added</summary> 
            <param name="node">XmlNode to check</param>
            <returns>true if this node should be skipped </returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomEntry.SaveInnerXml(System.Xml.XmlWriter)">
            <summary>saves the inner state of the element</summary> 
            <param name="writer">the xmlWriter to save into </param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomEntry.#ctor">
            <summary>
            default AtomEntry constructor. Adds the AppControl element
            as a default extension
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomEntry.setFeed(EnterpriseDT.Google.GData.Client.AtomFeed)">
            <summary>internal method to set the feed</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomEntry.ImportFromFeed(EnterpriseDT.Google.GData.Client.AtomEntry)">
            <summary>helper method to create a new, decoupled entry based on a feedEntry</summary> 
            <param name="entryToImport">the entry from a feed that you want to put somewhere else</param>
            <returns> the new entry ready to be inserted</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomEntry.Update">
            <summary>commits the item to the server</summary> 
            <returns>throws an exception if an error occured updating, returns 
            the updated entry from the service</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomEntry.Delete">
            <summary>deletes the item from the server</summary> 
            <returns>throws an exception if an error occured updating</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomEntry.CopyEntry(EnterpriseDT.Google.GData.Client.AtomEntry)">
            <summary>takes the updated entry returned and sets the properties to this object</summary> 
            <param name="updatedEntry"> </param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomEntry.CreateAtomSubElement(System.Xml.XmlReader,EnterpriseDT.Google.GData.Client.AtomFeedParser)">
            <summary>
            this is the subclassing method for AtomBase derived 
            classes to overload what childelements should be created
            needed to create CustomLink type objects, like WebContentLink etc
            </summary>
            <param name="reader">The XmlReader that tells us what we are working with</param>
            <param name="parser">the parser is primarily used for nametable comparisons</param>
            <returns>AtomBase</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomEntry.BaseUriChanged(EnterpriseDT.Google.GData.Client.AtomUri)">
            <summary>just go down the child collections</summary> 
            <param name="uriBase"> as currently calculated</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomEntry.WalkTree(EnterpriseDT.Google.GData.Client.IBaseWalkerAction)">
            <summary>calls the action on this object and all children</summary> 
            <param name="action">an IAtomBaseAction interface to call </param>
            <returns>true or false, pending outcome</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomEntry.Parse(EnterpriseDT.Google.GData.Client.ExtensionElementEventArgs,EnterpriseDT.Google.GData.Client.AtomFeedParser)">
            <summary>
            Parses the inner state of the element
            </summary>
            <param name="e">The extension element that should be added to this entry</param>
            <param name="parser">The AtomFeedParser that called this</param>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomEntry.XmlName">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomEntry.Feed">
            <summary>Read only accessor for feed</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomEntry.Service">
            <summary>accessor method for the GData Service to use</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomEntry.BatchData">
            <summary>accessor to the batchdata for the entry</summary> 
            <returns> GDataBatch object </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomEntry.EditUri">
            <summary>accessor method public Uri EditUri</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomEntry.SelfUri">
            <summary>accessor for the self URI</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomEntry.MediaUri">
            <summary>accessor to find the edit-media link</summary> 
            <returns>the Uri as AtomUri to the media upload Service</returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomEntry.AlternateUri">
            <summary>accessor to find the alternate link, in HTML only
            The method scans the link collection for a link that is of type rel=alternate
            and has a media type of HTML, otherwise it return NULL. The same is true for setting this. 
            If you need to use a rel/alternate with a different media type, you need
            to use the links collection directly</summary> 
            <returns>the Uri as AtomUri to HTML representation</returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomEntry.FeedUri">
            <summary>accessor method public string Feed</summary> 
            <returns>returns the Uri as string for the feed service </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomEntry.Updated">
            <summary>accessor method public DateTime UpdateDate</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomEntry.Published">
            <summary>accessor method public DateTime PublicationDate</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomEntry.AppControl">
            <summary>
            returns the app:control element
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomEntry.IsDraft">
            <summary>specifies if app:control/app:draft is yes or no. 
            this is determined by walking the extension elements collection</summary> 
            <returns>true if this is a draft element</returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomEntry.Authors">
            <summary>accessor method public Contributors AtomPersonCollection</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomEntry.Contributors">
            <summary>accessor method public Contributors AtomPersonCollection</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomEntry.Content">
            <summary>accessor method public string Content</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomEntry.Summary">
            <summary>accessor method public string Summary</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomEntry.Links">
            <summary>accessor method public Links AtomLinkCollection</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomEntry.Categories">
            <summary>holds an array of AtomCategory objects</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomEntry.Id">
            <summary>accessor method public AtomId Id</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomEntry.Title">
            <summary>accessor method public AtomTextConstruct Title</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomEntry.Source">
            <summary>if the entry was copied, represents the source</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomEntry.Rights">
            <summary>accessor method public string rights</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomEntry.ReadOnly">
            <summary>returns whether or not the entry is read-only </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AbstractEntry.#ctor">
            <summary>
            default constructor, adding app:edited and etag extensions
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AbstractEntry.AddOtherNamespaces(System.Xml.XmlWriter)">
            <summary>
            base implementation, as with the abstract feed, we are adding
            the gnamespace
            </summary>
            <param name="writer">The XmlWrite, where we want to add default namespaces to</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AbstractEntry.SkipNode(System.Xml.XmlNode)">
            <summary>
            Checks if this is a namespace declaration that we already added
            </summary>
            <param name="node">XmlNode to check</param>
            <returns>True if this node should be skipped</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AbstractEntry.ToggleCategory(EnterpriseDT.Google.GData.Client.AtomCategory,System.Boolean)">
            <summary>
            helper to toggle categories
            </summary>
            <param name="cat"></param>
            <param name="value"></param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AbstractEntry.GetExtensionValue(System.String,System.String)">
            <summary>
            we have one string based getter
            usage is: entry.getExtensionValue("namespace", "tagname") to get the elements value
            </summary>
            <param name="extension">the name of the extension to look for</param>
            <param name="ns">the namespace of the extension to look for</param>
            <returns>value as string, or NULL if the extension was not found</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AbstractEntry.SetExtensionValue(System.String,System.String,System.String)">
            <summary>
            we have one string based setter
            usage is: entry.setExtensionValue("tagname", "ns", "value") to set the element
            this will create the extension if it's not there
            note, you can ofcourse, just get an existing one and work with that 
            object: 
            </summary>
            <param name="extension">the name of the extension to look for</param>
            <param name="ns">the namespace of the extension to look for</param>
            <param name="newValue">the new value for this extension element</param>
            <returns>SimpleElement, either a brand new one, or the one
            returned by the service</returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AbstractEntry.MediaSource">
            <summary>access the associated media element. Note, that setting this
            WILL cause subsequent updates to be done using MIME multipart posts
            </summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AbstractEntry.Etag">
            <summary>returns this entries etag, if any
            This is a protocol version 2 feature
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AbstractEntry.Edited">
            <summary>
            returns the app:edited element of the entry, if any. 
            This is a protocol version 2 feature
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.AccessControl.AclEntry.ACL_CATEGORY">
            <summary>
            Category used to label entries that contain AccessControl extension data.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.AccessControl.AclEntry.#ctor">
            <summary>
            Constructs a new AccessControlEntry instance with the appropriate category
            to indicate that it is an AccessControlEntry.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.AccessControl.AclEntry.Role">
            <summary>
             property accessor for the AclRole
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.AccessControl.AclEntry.Scope">
            <summary>
             property accessor for the AclScope
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.ExtendedProperty">
            <summary>
            GData schema extension describing an extended property/value pair
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.SimpleNameValueAttribute">
            <summary>
            a simple element with two attributes, called value and name, that exposes 
            the given value as the Value property
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.SimpleAttribute">
            <summary>
            a simple element with one attribute, called value, that exposes 
            the given value as the Value property
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.SimpleAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            constructor
            </summary>
            <param name="name">the xml name</param>
            <param name="prefix">the xml prefix</param>
            <param name="ns">the xml namespace</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.SimpleAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            constructor
            </summary>
            <param name="name">the xml name</param>
            <param name="prefix">the xml prefix</param>
            <param name="ns">the xml namespace</param>
            <param name="value">the initial value</param>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.SimpleAttribute.Value">
            <summary>Accessor for "value" attribute.</summary> 
            <returns> </returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.SimpleNameValueAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            constructor
            </summary>
            <param name="name">the xml name</param>
            <param name="prefix">the xml prefix</param>
            <param name="ns">the xml namespace</param>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.SimpleNameValueAttribute.Name">
            <summary>Accessor for "name" attribute.</summary> 
            <returns> </returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.ExtendedProperty.#ctor">
            <summary>
            default constructor for an extended property
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.ExtendedProperty.#ctor(System.String)">
            <summary>
            default constructor with an initial value
            </summary>
            <param name="initValue"></param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.ExtendedProperty.#ctor(System.String,System.String)">
            <summary>
            default constructor with a value and a key name
            </summary>
            <param name="initValue">initial value</param>
            <param name="initName">name for the key</param>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket">
            <summary>
            Implements the Berkeley sockets interface.
            </summary>
            <remarks>
            The VirtualSocket class implements exactly the same methods as the System.Net.Sockets.Socket class,
            however all these methods are marked as virtual so they can be overridden in derived classes.
            In addition to the constructor specified by the Socket class, the VirtualSocket class also
            has a constructor that accepts an already created Socket; this can be very useful is you have
            to override the Accept and BeginAccept/EndAccept methods in a derived class.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)">
            <summary>
            Initializes a new instance of the VirtualSocket class.
            </summary>
            <param name="addressFamily">One of the <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.AddressFamily"/> values.</param>
            <param name="socketType">One of the <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.SocketType"/> values.</param>
            <param name="protocolType">One of the <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.ProtocolType"/> values.</param>
            <exception cref="T:System.Net.Sockets.SocketException">The combination of <paramref name="addressFamily"/>, <paramref name="socketType"/>, and <paramref name="protocolType"/> results in an invalid socket.</exception>
            <remarks>The <paramref name="addressFamily"/> parameter specifies the addressing scheme that the VirtualSocket uses, the <paramref name="socketType"/> parameter specifies the type of the VirtualSocket, and <paramref name="protocolType"/> specifies the protocol used by the VirtualSocket. The three parameters are not independent. Some address families restrict which protocols can be used with them, and often the socket type is implicit in the protocol. If the combination of address family, socket type, and protocol type results in an invalid VirtualSocket, a SocketException is thrown.<br>The AddressFamily enumeration defines the valid address families, the SocketType enumeration defines the valid socket types, and the ProtocolType enumeration defines the valid protocol types.</br></remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Initializes a new instance of the VirtualSocket class.
            </summary>
            <param name="internalSocket">The accepted socket.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="internalSocket"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.Accept">
            <summary>
            Creates a new VirtualSocket to handle an incoming connection request.
            </summary>
            <returns>A VirtualSocket to handle an incoming connection request.</returns>
            <exception cref="T:System.Net.Sockets.SocketException">The VirtualSocket is invalid.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>The Accept method extracts the first connection request from the queue of pending requests and creates a new VirtualSocket to handle it.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.InternalAccept">
            <summary>
            Creates a new Socket to handle an incoming connection request.
            </summary>
            <returns>A Socket to handle an incoming connection request.</returns>
            <exception cref="T:System.Net.Sockets.SocketException">The VirtualSocket is invalid.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>The InternalAccept method extracts the first connection request from the queue of pending requests and creates a new <see cref="T:System.Net.Sockets.Socket"/> to handle it.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.BeginAccept(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to create a new VirtualSocket to accept an incoming connection request.
            </summary>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object containing state information for this request. </param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous VirtualSocket creation.</returns>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while creating the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>The BeginAccept method starts an asynchronous request to create a VirtualSocket to handle an incoming connection request. You must create a callback method that implements the AsyncCallback delegate. This callback method should use the <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.EndAccept(System.IAsyncResult)"/> method to retrieve the VirtualSocket.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for a connection to a network device.
            </summary>
            <param name="remoteEP">An EndPoint that represents the remote device.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request. </param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous connection.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="remoteEP"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while creating the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>The BeginConnect method starts an asynchronous request for a remote host connection. You must create a callback method that implements the AsyncCallback delegate. This callback method should use the <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.EndConnect(System.IAsyncResult)"/> method to return the VirtualSocket.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)">
            <summary>
            Begins to asynchronously receive data from a connected VirtualSocket.
            </summary>
            <param name="buffer">The storage location for the received data.</param>
            <param name="offset">The zero-based position in the buffer parameter at which to store the received data.</param>
            <param name="size">The number of bytes to receive.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object containing state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous read.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">VirtualSocket has been closed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> is outside the bounds of buffer or size is either smaller or larger than the buffer size.</exception>
            <remarks>The BeginReceive method starts asynchronously reading data from a VirtualSocket. You must create a callback method that implements the AsyncCallback delegate. This callback method should use the <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.EndReceive(System.IAsyncResult)"/> method to return the data read from the VirtualSocket.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.BeginReceiveInternal(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)">
            <summary>
            Begins to asynchronously receive data from a connected VirtualSocket.
            This method triggers the Receiving event.
            </summary>
            <param name="buffer">The storage location for the received data.</param>
            <param name="offset">The zero-based position in the buffer parameter at which to store the received data.</param>
            <param name="size">The number of bytes to receive.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object containing state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous read.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">VirtualSocket has been closed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> is outside the bounds of buffer or size is either smaller or larger than the buffer size.</exception>
            <remarks>The BeginReceive method starts asynchronously reading data from a VirtualSocket. You must create a callback method that implements the AsyncCallback delegate. This callback method should use the <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.EndReceive(System.IAsyncResult)"/> method to return the data read from the VirtualSocket.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)">
            <summary>
            Begins to asynchronously receive data from a specified network device.
            </summary>
            <param name="buffer">The storage location for the received data.</param>
            <param name="offset">The zero-based position in the buffer parameter at which to store the data.</param>
            <param name="size">The number of bytes to receive.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <param name="remoteEP">An <see cref="T:System.Net.EndPoint"/> that represents the source of the data.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object containing state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous read.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).<br>-or-</br>
            <br><paramref name="remoteEP"/> is a null reference (<b>Nothing</b> in Visual Basic).</br><br>-or-</br><br><paramref name="offset"/> is outside the bounds of buffer.</br></exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified offset or size exceeds the size of buffer.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)">
            <summary>
            Sends data asynchronously to a connected VirtualSocket.
            </summary>
            <param name="buffer">The data to send.</param>
            <param name="offset">The zero-based position in the buffer parameter at which to begin sending data.</param>
            <param name="size">The number of bytes to send.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object containing state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous send.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified offset or size exceeds the size of buffer.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>The BeginSend method starts asynchronously sending data through a socket. You must create a callback method that implements the AsyncCallback delegate. This callback method should use the <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.EndSend(System.IAsyncResult)"/> method to complete sending data.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.BeginSendInternal(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)">
            <summary>
            Sends data asynchronously to a connected VirtualSocket.
            This method triggers the Sending event.
            </summary>
            <param name="buffer">The data to send.</param>
            <param name="offset">The zero-based position in the buffer parameter at which to begin sending data.</param>
            <param name="size">The number of bytes to send.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object containing state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous send.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified offset or size exceeds the size of buffer.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>The BeginSend method starts asynchronously sending data through a socket. You must create a callback method that implements the AsyncCallback delegate. This callback method should use the <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.EndSend(System.IAsyncResult)"/> method to complete sending data.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)">
            <summary>
            Sends data asynchronously to a specific remote host.
            </summary>
            <param name="buffer">The data to send. </param>
            <param name="offset">The zero-based position in the buffer parameter at which to begin sending data.</param>
            <param name="size">The number of bytes to send. </param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <param name="remoteEP">An <see cref="T:System.Net.EndPoint"/> that represents the remote device. </param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate. </param>
            <param name="state">An object containing state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous send.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).<br>-or-</br><br><paramref name="remoteEP"/> is a null reference (<b>Nothing</b> in Visual Basic).</br></exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified offset or size exceeds the size of buffer.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>The BeginSendTo method starts asynchronously sending data through a socket. You must create a callback method that implements the AsyncCallback delegate. This callback method should use the <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.EndSendTo(System.IAsyncResult)"/> method to complete sending data.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.Bind(System.Net.EndPoint)">
            <summary>
            Associates a VirtualSocket with a local endpoint.
            </summary>
            <param name="localEP">The local <see cref="T:System.Net.EndPoint"/> to associate with the VirtualSocket.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="localEP"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>If you want to use a specific local endpoint, you can call the Bind method before you call the <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.Listen(System.Int32)"/> or <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.Connect(System.Net.EndPoint)"/> methods.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.Close">
            <summary>
            Forces a VirtualSocket connection to close.
            </summary>
            <remarks><para>The <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.Connected"/> property is set to <b>false</b> when the socket is closed.</para><para>The application should call <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.Shutdown(System.Net.Sockets.SocketShutdown)"/> before calling Close to ensure that all pending data is sent or received before the VirtualSocket is closed.</para></remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.Connect(System.Net.EndPoint)">
            <summary>
            Establishes a connection to a remote device.
            </summary>
            <param name="remoteEP">An <see cref="T:System.Net.EndPoint"/> that represents the remote device.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="remoteEP"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>The Connect method establishes a network connection between <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.LocalEndPoint"/> and the device identified by <paramref name="remoteEP"/>. Once the connection has been made, you can send data to the remote device with one of the <c>Send</c> methods, or receive data from the remote device with one of the <c>Receive</c> methods.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.EndAccept(System.IAsyncResult)">
            <summary>
            Ends an asynchronous request to create a new VirtualSocket to accept an incoming connection request.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>A VirtualSocket to handle the incoming connection.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="asyncResult"/> was not created by a call to <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.BeginAccept(System.AsyncCallback,System.Object)"/>.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>The EndAccept method completes a request for a connection that was started with the BeginAccept method.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.InternalEndAccept(System.IAsyncResult)">
            <summary>
            Ends an asynchronous request to create a new <see cref="T:System.Net.Sockets.Socket"/> to accept an incoming connection request.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>A VirtualSocket to handle the incoming connection.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="asyncResult"/> was not created by a call to <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.BeginAccept(System.AsyncCallback,System.Object)"/>.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>The InternalEndAccept method completes a request for a connection that was started with the InternalBeginAccept method.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.EndConnect(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous connection request.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user-defined data.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="asyncResult"/> was not returned by a call to the <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)"/> method.</exception>
            <exception cref="T:System.InvalidOperationException">EndConnect was previously called for the asynchronous connection.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>To maintain the asynchronous nature of the operation, call this method from the callback delegate. You can pass either the <see cref="T:System.IAsyncResult"/> returned from BeginConnect or the callback delegate used as an input parameter to BeginConnect as the asyncresult parameter. The EndConnect method blocks.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.EndReceive(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous read.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>The number of bytes received.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="asyncResult"/> was not returned by a call to the <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)"/> method.</exception>
            <exception cref="T:System.InvalidOperationException">EndReceive was previously called for the asynchronous read.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>To maintain the asynchronous nature of the operation, call this method from the callback delegate. You can pass either the <see cref="T:System.IAsyncResult"/> returned from <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)"/> or the callback delegate used as an input parameter to BeginReceive as the asyncResult parameter. The EndReceive method blocks until the read ends.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.EndReceiveFrom(System.IAsyncResult,System.Net.EndPoint@)">
            <summary>
            Ends a pending asynchronous read from a specific endpoint.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <param name="endPoint">The source <see cref="T:System.Net.EndPoint"/>.</param>
            <returns>If successful, the number of bytes received. If unsuccessful, returns 0 if the connection is closed by the remote host.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="asyncResult"/> was not returned by a call to the BeginReceiveFrom method.</exception>
            <exception cref="T:System.InvalidOperationException">EndReceiveFrom was previously called for the asynchronous read.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>To maintain the asynchronous nature of the operation, call this method from the callback delegate. You can pass either the <see cref="T:System.IAsyncResult"/> returned from <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)"/> or the callback delegate used as an input parameter to BeginReceiveFrom. as the asyncResult parameter. The EndReceiveFrom method frees any resources allocated by the BeginReceiveFrom method. The EndReceiveFrom method blocks until read ends.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.EndSend(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous send.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>If successful, the number of bytes sent to the VirtualSocket; otherwise, an invalid VirtualSocket error.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="asyncResult"/> was not returned by a call to the <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)"/> method.</exception>
            <exception cref="T:System.InvalidOperationException">EndSend was previously called for the asynchronous read.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>To maintain the asynchronous nature of the operation, call this method from the callback delegate. You can pass either the <see cref="T:System.IAsyncResult"/> returned from <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)"/> or the callback delegate used as an input parameter to BeginSend as the asyncResult parameter. The EndSend method frees any resources allocated by the BeginSend method. The EndSend method blocks until the send ends.<br>The EndSend method frees any resources allocated by the BeginSend method.</br></remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.EndSendTo(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous send to a specific location.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data .</param>
            <returns>If successful, the number of bytes sent; otherwise, an invalid VirtualSocket error.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="asyncResult"/> was not returned by a call to the <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)"/> method.</exception>
            <exception cref="T:System.InvalidOperationException">EndSendTo was previously called for the asynchronous read.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks><br>To maintain the asynchronous nature of the operation, call this method from the callback delegate. You can pass either the <see cref="T:System.IAsyncResult"/> returned from <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)"/> or the callback delegate used as an input parameter to BeginSendTo as the asyncResult parameter. The EndSendTo method frees any resources allocated by the BeginSendTo method. The EndSendTo method blocks until send is complete.</br><br>The EndSendTo method frees any resources allocated by the BeginSendTo method.</br></remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.GetHashCode">
            <summary>
            This member overrides Object.GetHashCode.
            </summary>
            <returns>A hash code for the current VirtualSocket.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)">
            <summary>
            Gets the value of a specified socket option.
            </summary>
            <param name="optionLevel">One of the <see cref="T:System.Net.Sockets.SocketOptionLevel"/> values.</param>
            <param name="optionName">One of the <see cref="T:System.Net.Sockets.SocketOptionName"/> values.</param>
            <returns>The value of the option. When the optionName parameter is set to Linger the return value is an instance of the LingerOption. When optionName is set to AddMembership or DropMembership, the return value is an instance of the MulticastOption. When optionName is any other value, the return value is an integer.</returns>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>VirtualSocket options determine the behavior of the current instance. Upon successful completion, GetSocketOption returns an object describing the requested option. For example, if you specify Linger as the option, a LingerOption is returned.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])">
            <summary>
            Gets the specified VirtualSocket option setting.
            </summary>
            <param name="optionLevel">One of the <see cref="T:System.Net.Sockets.SocketOptionLevel"/> values.</param>
            <param name="optionName">One of the <see cref="T:System.Net.Sockets.SocketOptionName"/> values.</param>
            <param name="optionValue">The buffer that is to receive the option setting.</param>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>Socket options determine the behavior of the current Socket. Upon successful completion of this method, the array specified by the optionValue parameter contains the value of the specified Socket option. When the length of the optionValue array is smaller than the number of bytes required to store the value of the specified Socket option, a <see cref="T:System.Net.Sockets.SocketException"/> is thrown.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)">
            <summary>
            Returns the value of the specified Socket option and returns in an array.
            </summary>
            <param name="optionLevel">One of the <see cref="T:System.Net.Sockets.SocketOptionLevel"/> values.</param>
            <param name="optionName">One of the <see cref="T:System.Net.Sockets.SocketOptionName"/> values.</param>
            <param name="optionLength">The length, in bytes, of the expected return value.</param>
            <returns>An array of bytes containing the value of the socket option.</returns>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>The optionLength parameter sets the maximum size of the returned byte array. If the option value requires fewer bytes, the array will contain only that many bytes. If the option value requires more bytes, a SocketException will be thrown.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.IOControl(System.Int32,System.Byte[],System.Byte[])">
            <summary>
            Sets low-level operating modes for the VirtualSocket.
            </summary>
            <param name="ioControlCode">The control code of the operation to perform.</param>
            <param name="optionInValue">The input data required by the operation.</param>
            <param name="optionOutValue">The output data returned by the operation.</param>
            <returns>The number of bytes in optionOutValue parameter.</returns>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>The IOControl method provides low-level access to the operating system socket underlying the current instance of the VirtualSocket class. For more information about IOControl, see the WSAIoct documentation in MSDN.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.Listen(System.Int32)">
            <summary>
            Places a VirtualSocket in a listening state.
            </summary>
            <param name="backlog">The Maximum length of the queue of pending connections.</param>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>In a listening state, the VirtualSocket will poll for incoming connection attempts. If you want to listen using a specific network interface on a specific port, you must call the Bind method first.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.Poll(System.Int32,System.Net.Sockets.SelectMode)">
            <summary>
            Determines the status of the VirtualSocket.
            </summary>
            <param name="microSeconds">The time to wait for a response, in microseconds.</param>
            <param name="mode">One of the <see cref="T:System.Net.Sockets.SelectMode"/> values.</param>
            <returns>See the Socket documentation for the return values.</returns>
            <exception cref="T:System.NotSupportedException">The mode parameter is not one of the SelectMode values.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>Set microSeconds parameter to a negative integer if you would like to wait indefinitely for a response.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.Receive(System.Byte[])">
            <summary>
            Receives data from a connected VirtualSocket in a specific location of the receive buffer.
            </summary>
            <param name="buffer">The storage location for received data.</param>
            <returns>The number of bytes received.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>
            <para>This overload only requires you to provide a receive buffer. The offset defaults to 0, size defaults to the buffer length, and the socketFlags value defaults to None.</para>
            <para>The Blocking determines the behavior of this method when no incoming data is available. When false, a SocketException is thrown. When true, this method blocks and waits for data to arrive. For Stream Socket types, if the remote Socket was shut down gracefully, and all the data was received, this method immediately returns zero, regardless of the blocking state.</para>
            <para>If you are using a message-oriented Socket, and the message is larger than the size of the buffer parameter, buffer is filled with the first part of the message, and a SocketException is thrown. With unreliable protocols the excess data is lost; with reliable protocols, the data is retained by the service provider.</para>
            <para><b>Note</b>   If you specify the OutOfBand flag as the socketFlags parameter, and the Socket is configured for in-line reception of out-of-band (OOB) data (using the OutOfBandInline option) and OOB data is available, then only OOB data is returned. When the Peek flag is specified as the socketFlags parameter, available data is copied into the receive buffer but is not removed from the system buffer.</para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.Receive(System.Byte[],System.Net.Sockets.SocketFlags)">
            <summary>
            Receives data from a connected VirtualSocket in a specific location of the receive buffer.
            </summary>
            <param name="buffer">The storage location for received data.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values. </param>
            <returns>The number of bytes received.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>
            <para>This overload only requires you to provide a receive buffer and the necessary SocketFlags. The offset defaults to 0, and the size defaults to the buffer length.</para>
            <para>The Blocking determines the behavior of this method when no incoming data is available. When false, a SocketException is thrown. When true, this method blocks and waits for data to arrive. For Stream Socket types, if the remote Socket was shut down gracefully, and all the data was received, this method immediately returns zero, regardless of the blocking state.</para>
            <para>If you are using a message-oriented Socket, and the message is larger than the size of the buffer parameter, buffer is filled with the first part of the message, and a SocketException is thrown. With unreliable protocols the excess data is lost; with reliable protocols, the data is retained by the service provider.</para>
            <para><b>Note</b>   If you specify the OutOfBand flag as the socketFlags parameter, and the Socket is configured for in-line reception of out-of-band (OOB) data (using the OutOfBandInline option) and OOB data is available, then only OOB data is returned. When the Peek flag is specified as the socketFlags parameter, available data is copied into the receive buffer but is not removed from the system buffer.</para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Receives data from a connected VirtualSocket in a specific location of the receive buffer.
            </summary>
            <param name="buffer">The storage location for received data.</param>
            <param name="size">The number of bytes to receive.</param>
            <param name="socketFlags">A bitwise combination of the SocketFlags values. </param>
            <returns>The number of bytes received.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The size exceeds the size of buffer.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>
            <para>This overload only requires you to provide a receive buffer, the number of bytes you want to send, and the necessary SocketFlags. The offset defaults to 0.</para>
            <para>The Blocking determines the behavior of this method when no incoming data is available. When false, a SocketException is thrown. When true, this method blocks and waits for data to arrive. For Stream Socket types, if the remote Socket was shut down gracefully, and all the data was received, this method immediately returns zero, regardless of the blocking state.</para>
            <para>If you are using a message-oriented Socket, and the message is larger than the size of the buffer parameter, buffer is filled with the first part of the message, and a SocketException is thrown. With unreliable protocols the excess data is lost; with reliable protocols, the data is retained by the service provider.</para>
            <para><b>Note</b>   If you specify the OutOfBand flag as the socketFlags parameter, and the Socket is configured for in-line reception of out-of-band (OOB) data (using the OutOfBandInline option) and OOB data is available, then only OOB data is returned. When the Peek flag is specified as the socketFlags parameter, available data is copied into the receive buffer but is not removed from the system buffer.</para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Receives data from a connected VirtualSocket in a specific location of the receive buffer.
            </summary>
            <param name="buffer">The storage location for received data.</param>
            <param name="offset">The location in buffer to store the received data. </param>
            <param name="size">The number of bytes to receive.</param>
            <param name="socketFlags">A bitwise combination of the SocketFlags values. </param>
            <returns>The number of bytes received.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified offset or size exceeds the size of buffer.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>
            <para>The Blocking determines the behavior of this method when no incoming data is available. When false, a SocketException is thrown. When true, this method blocks and waits for data to arrive. For Stream Socket types, if the remote Socket was shut down gracefully, and all the data was received, this method immediately returns zero, regardless of the blocking state.</para>
            <para>If you are using a message-oriented Socket, and the message is larger than the size of the buffer parameter, buffer is filled with the first part of the message, and a SocketException is thrown. With unreliable protocols the excess data is lost; with reliable protocols, the data is retained by the service provider.</para>
            <para><b>Note</b>   If you specify the OutOfBand flag as the socketFlags parameter, and the Socket is configured for in-line reception of out-of-band (OOB) data (using the OutOfBandInline option) and OOB data is available, then only OOB data is returned. When the Peek flag is specified as the socketFlags parameter, available data is copied into the receive buffer but is not removed from the system buffer.</para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.ReceiveFrom(System.Byte[],System.Net.EndPoint@)">
            <summary>
            Receives a datagram in a specific location in the data buffer and stores the endpoint.
            </summary>
            <param name="buffer">The storage location for received data.</param>
            <param name="remoteEP">An <see cref="T:System.Net.EndPoint"/>, passed by reference, that represents the remote server.</param>
            <returns>The number of bytes received.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>
            <para>This overload only requires you to provide a receive buffer, and EndPoint representing the remote host. The offset defaults to 0. The size defaults to the buffer length and the socketFlags value defaults to None.</para>
            <para>If you use a connectionless protocol, the remoteEP parameter contains the EndPoint associated with the Socket that sent the data. If you use a connection-oriented protocol, remoteEP is left unchanged. You must set the LocalEndPoint property before calling this method. When no incoming data is available, and the Blocking property is false, a SocketException is thrown. When Blocking is true, this method blocks and waits for data to arrive. For Stream Socket types, if the remote Socket was shut down gracefully, and all data was received, this method immediately returns zero, regardless of the blocking state.</para>
            <para>If you are using a message-oriented Socket, and the message is larger than the size of the buffer parameter, then buffer is filled with the first part of the message, and a SocketException is thrown. With unreliable protocols the excess data is lost; with reliable protocols, the data is retained by the service provider.</para>
            <para>When the OutOfBand flag is specified as the socketFlags parameter and the Socket is configured for in-line reception of out-of-band (OOB) data (using OutOfBandInline) and OOB data is available, only OOB data is returned. When the SocketFlags. Peek flag is specified as the socketFlags parameter, available data is copied into the receive buffer but not removed from the system buffer.</para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.ReceiveFrom(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint@)">
            <summary>
            Receives a datagram in a specific location in the data buffer and stores the endpoint.
            </summary>
            <param name="buffer">The storage location for received data.</param>
            <param name="socketFlags">A bitwise combination of the SocketFlags values.</param>
            <param name="remoteEP">An <see cref="T:System.Net.EndPoint"/>, passed by reference, that represents the remote server.</param>
            <returns>The number of bytes received.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>
            <para>This overload only requires you to provide a receive buffer, the necessary SocketFlags, and the EndPoint representing the remote host. The offset defaults to 0. The size defaults to the buffer length.</para>
            <para>If you use a connectionless protocol, the remoteEP parameter contains the EndPoint associated with the Socket that sent the data. If you use a connection-oriented protocol, remoteEP is left unchanged. You must set the LocalEndPoint property before calling this method. When no incoming data is available, and the Blocking property is false, a SocketException is thrown. When Blocking is true, this method blocks and waits for data to arrive. For Stream Socket types, if the remote Socket was shut down gracefully, and all data was received, this method immediately returns zero, regardless of the blocking state.</para>
            <para>If you are using a message-oriented Socket, and the message is larger than the size of the buffer parameter, then buffer is filled with the first part of the message, and a SocketException is thrown. With unreliable protocols the excess data is lost; with reliable protocols, the data is retained by the service provider.</para>
            <para>When the OutOfBand flag is specified as the socketFlags parameter and the Socket is configured for in-line reception of out-of-band (OOB) data (using OutOfBandInline) and OOB data is available, only OOB data is returned. When the SocketFlags. Peek flag is specified as the socketFlags parameter, available data is copied into the receive buffer but not removed from the system buffer.</para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.ReceiveFrom(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)">
            <summary>
            Receives a datagram in a specific location in the data buffer and stores the endpoint.
            </summary>
            <param name="buffer">The storage location for received data.</param>
            <param name="size">The number of bytes to receive.</param>
            <param name="socketFlags">A bitwise combination of the SocketFlags values.</param>
            <param name="remoteEP">An <see cref="T:System.Net.EndPoint"/>, passed by reference, that represents the remote server.</param>
            <returns>The number of bytes received.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The size parameter exceeds the size of buffer.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>
            <para>This overload only requires you to provide a receive buffer, the number of bytes you want to receive, the necessary SocketFlags, and the EndPoint representing the remote host. The offset defaults to 0.</para>
            <para>If you use a connectionless protocol, the remoteEP parameter contains the EndPoint associated with the Socket that sent the data. If you use a connection-oriented protocol, remoteEP is left unchanged. You must set the LocalEndPoint property before calling this method. When no incoming data is available, and the Blocking property is false, a SocketException is thrown. When Blocking is true, this method blocks and waits for data to arrive. For Stream Socket types, if the remote Socket was shut down gracefully, and all data was received, this method immediately returns zero, regardless of the blocking state.</para>
            <para>If you are using a message-oriented Socket, and the message is larger than the size of the buffer parameter, then buffer is filled with the first part of the message, and a SocketException is thrown. With unreliable protocols the excess data is lost; with reliable protocols, the data is retained by the service provider.</para>
            <para>When the OutOfBand flag is specified as the socketFlags parameter and the Socket is configured for in-line reception of out-of-band (OOB) data (using OutOfBandInline) and OOB data is available, only OOB data is returned. When the SocketFlags. Peek flag is specified as the socketFlags parameter, available data is copied into the receive buffer but not removed from the system buffer.</para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)">
            <summary>
            Receives a datagram in a specific location in the data buffer and stores the endpoint.
            </summary>
            <param name="buffer">The storage location for received data.</param>
            <param name="offset">The position in the buffer parameter to store the received data.</param>
            <param name="size">The number of bytes to receive.</param>
            <param name="socketFlags">A bitwise combination of the SocketFlags values.</param>
            <param name="remoteEP">An <see cref="T:System.Net.EndPoint"/>, passed by reference, that represents the remote server.</param>
            <returns>The number of bytes received.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified offset or size exceeds the size of buffer.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>
            <para>If you use a connectionless protocol, the remoteEP parameter contains the EndPoint associated with the Socket that sent the data. If you use a connection-oriented protocol, remoteEP is left unchanged. You must set the LocalEndPoint property before calling this method. When no incoming data is available, and the Blocking property is false, a SocketException is thrown. When Blocking is true, this method blocks and waits for data to arrive. For Stream Socket types, if the remote Socket was shut down gracefully, and all data was received, this method immediately returns zero, regardless of the blocking state.</para>
            <para>If you are using a message-oriented Socket, and the message is larger than the size of the buffer parameter, then buffer is filled with the first part of the message, and a SocketException is thrown. With unreliable protocols the excess data is lost; with reliable protocols, the data is retained by the service provider.</para>
            <para>When the OutOfBand flag is specified as the socketFlags parameter and the Socket is configured for in-line reception of out-of-band (OOB) data (using OutOfBandInline) and OOB data is available, only OOB data is returned. When the SocketFlags. Peek flag is specified as the socketFlags parameter, available data is copied into the receive buffer but not removed from the system buffer.</para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.Send(System.Byte[])">
            <summary>
            Sends data to a connected VirtualSocket, starting at the indicated location in the data.
            </summary>
            <param name="buffer">The data to be sent.</param>
            <returns>The number of bytes sent to the VirtualSocket.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>
            <para>Use Send for connection-oriented protocols only. For connectionless protocols, either use SendTo or call Connect first, and then call Send. This overload only requires you to provide a data buffer. The offset defaults to 0, the size defaults to the buffer length, and SocketFlags value defaults to None.</para>
            <para>You must set the LocalEndPoint property of the current instance before calling this method.</para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.Send(System.Byte[],System.Net.Sockets.SocketFlags)">
            <summary>
            Sends data to a connected VirtualSocket, starting at the indicated location in the data.
            </summary>
            <param name="buffer">The data to be sent.</param>
            <param name="socketFlags">A bitwise combination of the SocketFlags values. </param>
            <returns>The number of bytes sent to the VirtualSocket.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>
            <para>Use Send for connection-oriented protocols only. For connectionless protocols, either use SendTo or call Connect first, and then call Send.</para>
            <para>This overload only requires you to provide a data buffer and SocketFlags. The offset defaults to 0, and the size parameter defaults to the buffer length.</para>
            <para>You must set the LocalEndPoint property of the current instance before calling this method.</para>
            <para>If you specify the DontRoute flag as the socketflags parameter, the data you are sending will not be routed. If you specify the OutOfBand flag as the socketflags parameter, only out-of-band (OOB) data is sent.</para>
            <para>If you set the Blocking property to true, and buffer space is not available within the underlying protocol, this method blocks.</para>
            <para>If you are using a message-oriented Socket, and the size of the buffer is greater than the maximum message size of the underlying protocol, no data is sent and Socket will throw a SocketException.</para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Sends data to a connected VirtualSocket, starting at the indicated location in the data.
            </summary>
            <param name="buffer">The data to be sent.</param>
            <param name="size">The number of bytes to send. </param>
            <param name="socketFlags">A bitwise combination of the SocketFlags values. </param>
            <returns>The number of bytes sent to the VirtualSocket.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The size parameter exceeds the size of buffer.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>
            <para>Use Send for connection-oriented protocols only. For connectionless protocols, either use SendTo or call Connect first, and then call Send.</para>
            <para>This overload only requires you to provide a data buffer, SocketFlags, and the number bytes to be sent. The offset defaults to 0.</para>
            <para>You must set the LocalEndPoint property of the current instance before calling this method.</para>
            <para>If you specify the DontRoute flag as the socketflags parameter, the data you are sending will not be routed. If you specify the OutOfBand flag as the socketflags parameter, only out-of-band (OOB) data is sent.</para>
            <para>If you set the Blocking property to true, and buffer space is not available within the underlying protocol, this method blocks.</para>
            <para>If you are using a message-oriented Socket, and the size of the buffer is greater than the maximum message size of the underlying protocol, no data is sent and Socket will throw a SocketException.</para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Sends data to a connected VirtualSocket, starting at the indicated location in the data.
            </summary>
            <param name="buffer">The data to be sent.</param>
            <param name="offset">The position in the data buffer to begin sending data.</param>
            <param name="size">The number of bytes to send. </param>
            <param name="socketFlags">A bitwise combination of the SocketFlags values. </param>
            <returns>The number of bytes sent to the VirtualSocket.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The offset or size parameter exceeds the size of buffer.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>
            <para>Use Send for connection-oriented protocols only. For connectionless protocols, either use SendTo or call Connect first, and then call Send.</para>
            <para>This overload gives you the flexibility to specify the Send starting position in the data buffer, the number bytes you are sending, and the necessary SocketFlags.</para>
            <para>You must set the LocalEndPoint property of the current instance before calling this method.</para>
            <para>If you specify the DontRoute flag as the socketflags parameter, the data you are sending will not be routed. If you specify the OutOfBand flag as the socketflags parameter, only out-of-band (OOB) data is sent.</para>
            <para>If you set the Blocking property to true, and buffer space is not available within the underlying protocol, this method blocks.</para>
            <para>If you are using a message-oriented Socket, and the size of the buffer is greater than the maximum message size of the underlying protocol, no data is sent and Socket will throw a SocketException.</para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.SendTo(System.Byte[],System.Net.EndPoint)">
            <summary>
            Sends data to a specific endpoint, starting at the indicated location in the data.
            </summary>
            <param name="buffer">The data to be sent.</param>
            <param name="remoteEP">The <see cref="T:System.Net.EndPoint"/> representing the destination location for the data.</param>
            <returns>The number of bytes sent.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).<br>-or-</br><br>The remoteEP parameter is a null reference (Nothing).</br></exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>
            <para>
            If you are using a connection-oriented protocol or a connected Socket 
            using a connectionless protocol, remoteEP overrides the endpoint specified 
            in RemoteEndPoint. If you are using an unconnected Socket with a 
            connectionless protocol, this method sets the LocalEndPoint property of the 
            current instance to a value determined by the protocol. You must subsequently 
            receive data on the LocalEndPoint. This overload only requires you to provide 
            a data buffer, and the remote EndPoint. The offset defaults to 0. The size 
            defaults to the buffer length, and SocketFlags value defaults to None.
            </para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.SendTo(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint)">
            <summary>
            Sends data to a specific endpoint, starting at the indicated location in the data.
            </summary>
            <param name="buffer">The data to be sent.</param>
            <param name="socketFlags">A bitwise combination of the SocketFlags values.</param>
            <param name="remoteEP">The <see cref="T:System.Net.EndPoint"/> representing the destination location for the data.</param>
            <returns>The number of bytes sent.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).<br>-or-</br><br>The remoteEP parameter is a null reference (Nothing).</br></exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>
            <para>If you are using a connection-oriented protocol or a connected Socket using a connectionless protocol, remoteEP overrides the endpoint specified in RemoteEndPoint. If you are using an unconnected Socket with a connectionless protocol, this method sets the LocalEndPoint property of the current instance to a value determined by the protocol. You must subsequently receive data on the LocalEndPoint.</para>
            <para>This overload only requires you to provide a data buffer, SocketFlags, and the remote EndPoint. The offset defaults to 0, and size defaults to the buffer length.</para>
            <para>Note   If you specify the DontRoute flag as the socketflags parameter, the data you are sending will not be routed. If you specify the OutOfBand flag as the socketflags parameter, only out-of-band (OOB) data is sent. If you set the Blocking property to true, and buffer space is not available within the underlying protocol, this method blocks. If you are using a message-oriented Socket, and the size of buffer is greater than the maximum message size of the underlying protocol, no data is sent and Socket will throw a SocketException. If you are using a connection-oriented Socket, remoteEp is ignored.</para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.SendTo(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)">
            <summary>
            Sends data to a specific endpoint, starting at the indicated location in the data.
            </summary>
            <param name="buffer">The data to be sent.</param>
            <param name="size">The number of bytes to send.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <param name="remoteEP">The <see cref="T:System.Net.EndPoint"/> representing the destination location for the data.</param>
            <returns>The number of bytes sent.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).<br>-or-</br><br>The remoteEP parameter is a null reference (Nothing).</br></exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified size exceeds the size of buffer.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>
            <para>If you are using a connection-oriented protocol or a connected Socket using a connectionless protocol, remoteEP overrides the endpoint specified in RemoteEndPoint. If you are using an unconnected Socket with a connectionless protocol, this method sets the LocalEndPoint property of the current instance to a value determined by the protocol. You must subsequently receive data on the LocalEndPoint.</para>
            <para>This overload only requires you to provide a data buffer, SocketFlags, the number bytes to be sent and the remote EndPoint. The offset defaults to 0.</para>
            <para>Note   If you specify the DontRoute flag as the socketflags parameter, the data you are sending will not be routed. If you specify the OutOfBand flag as the socketflags parameter, only out-of-band (OOB) data is sent. If you set the Blocking property to true, and buffer space is not available within the underlying protocol, this method blocks. If you are using a message-oriented Socket, and the size of buffer is greater than the maximum message size of the underlying protocol, no data is sent and Socket will throw a SocketException. If you are using a connection-oriented Socket, remoteEp is ignored.</para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)">
            <summary>
            Sends data to a specific endpoint, starting at the indicated location in the data.
            </summary>
            <param name="buffer">The data to be sent.</param>
            <param name="offset">The position in the data buffer to begin sending data.</param>
            <param name="size">The number of bytes to send.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <param name="remoteEP">The <see cref="T:System.Net.EndPoint"/> representing the destination location for the data.</param>
            <returns>The number of bytes sent.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).<br>-or-</br><br>The remoteEP parameter is a null reference (Nothing).</br></exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The offset or size parameter exceeds the size of buffer.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>
            <para>If you are using a connection-oriented protocol or a connected Socket using a connectionless protocol, remoteEP overrides the endpoint specified in RemoteEndPoint. If you are using an unconnected Socket with a connectionless protocol, this method sets the LocalEndPoint property of the current instance to a value determined by the protocol. You must subsequently receive data on the LocalEndPoint.</para>
            <para><b>Note</b>   If you specify the DontRoute flag as the socketflags parameter, the data you are sending will not be routed. If you specify the OutOfBand flag as the socketflags parameter, only out-of-band (OOB) data is sent. If you set the Blocking property to true, and buffer space is not available within the underlying protocol, this method blocks. If you are using a message-oriented Socket, and the size of buffer is greater than the maximum message size of the underlying protocol, no data is sent and Socket will throw a SocketException. If you are using a connection-oriented Socket, remoteEp is ignored.</para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])">
            <summary>
            Sets the specified option to the specified value.
            </summary>
            <param name="optionLevel">A <see cref="T:System.Net.Sockets.SocketOptionLevel"/> value. </param>
            <param name="optionName">A <see cref="T:System.Net.Sockets.SocketOptionName"/> value.</param>
            <param name="optionValue">A byte array representing the value of the option.</param>
            <exception cref="T:System.Net.Sockets.SocketException">The VirtualSocket has been closed.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>Socket options determine the behavior of the current Socket. Use this overload to set those Socket options that require a byte array as an option value.<br>Windows 98, Windows NT 4.0 Platform Note:  You must call the Bind method before using AddMembership as the optionName parameter.</br></remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)">
            <summary>
            Sets the specified option to the specified value.
            </summary>
            <param name="optionLevel">A <see cref="T:System.Net.Sockets.SocketOptionLevel"/> value. </param>
            <param name="optionName">A <see cref="T:System.Net.Sockets.SocketOptionName"/> value.</param>
            <param name="optionValue">A value of the option.</param>
            <exception cref="T:System.Net.Sockets.SocketException">The VirtualSocket has been closed.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>Socket options determine the behavior of the current Socket. For an option with a Boolean data type, specify a nonzero value to enable the option, and a zero value to disable the option. For an option with an integer data type, specify the appropriate value. Socket options are grouped by level of protocol support.<br>Windows 98, Windows NT 4.0 Platform Note:  You must call the Bind method before using AddMembership as the optionName parameter.</br></remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Object)">
            <summary>
            Sets the specified option to the specified value.
            </summary>
            <param name="optionLevel">A <see cref="T:System.Net.Sockets.SocketOptionLevel"/> value. </param>
            <param name="optionName">A <see cref="T:System.Net.Sockets.SocketOptionName"/> value.</param>
            <param name="optionValue">A LingerOption or MulticastOption containing the value of the option.</param>
            <exception cref="T:System.Net.Sockets.SocketException">The VirtualSocket has been closed.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="optionValue"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <remarks>Socket options determine the behavior of the current Socket. Use this overload to set those Socket options that require anything other than an integer or Boolean as an option value. For example, to set the Linger option, you must create an instance of LingerOption and pass it to SetSocketOption as the optionvalue parameter.<br>Windows 98, Windows NT 4.0 Platform Note:  You must call the Bind method before using AddMembership as the optionName parameter.</br></remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.Shutdown(System.Net.Sockets.SocketShutdown)">
            <summary>
            Disables sends and receives on a VirtualSocket.
            </summary>
            <param name="how">The <see cref="T:System.Net.Sockets.SocketShutdown"/> value specifying the operation that will no longer be allowed.</param>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurs while closing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>
            <para>Setting how to Send, specifies that subsequent calls to Send are not allowed. With TCP sockets, a FIN will be sent after all data is sent and acknowledged by the receiver.</para>
            <para>Setting how to Receive, specifies that subsequent calls to Receive are not allowed. This has no effect on lower protocol layers. For TCP sockets, the connection is reset if data is waiting to be received or if more data arrives after the Socket is disabled. For UDP sockets, datagrams are accepted and queued.</para>
            <para>Setting how to Both disables both sends and receives as described above.</para>
            <para>To finish closing the Socket, a call to Close must be made after the call to Shutdown. You should not attempt to reuse the Socket.</para>
            </remarks>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.m_InternalSocket">
            <summary>Holds the value of the <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.InternalSocket"/> property.</summary>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.InternalSocket">
            <summary>
            Gets or sets the internal <see cref="T:System.Net.Sockets.Socket"/> value.
            </summary>
            <value>An instance of the Socket class.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.Blocking">
            <summary>
            Gets or sets a value that indicates whether the VirtualSocket is in blocking mode.
            </summary>
            <value><b>true</b> if the VirtualSocket will block; otherwise, <b>false</b>. The default is <b>true</b>.</value>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.AddressFamily">
            <summary>
            Gets the address family of the VirtualSocket.
            </summary>
            <value>One of the <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.AddressFamily"/> values.</value>
            <remarks>AddressFamily specifies the addressing scheme that an instance of the VirtualSocket class can use. This property is read-only and is set when the VirtualSocket is created.</remarks>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.Available">
            <summary>
            Gets the amount of data that has been received from the network and is available to be read.
            </summary>
            <value>The number of bytes of data that has been received from the network and are available to be read.</value>
            <remarks>If you are using a Stream VirtualSocket type, the available data is generally the total amount of data queued on the current instance. If you are using a message-oriented VirtualSocket type such as Dgram, the available data is the first message in the input queue.</remarks>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.Connected">
            <summary>
            Gets a value indicating whether a VirtualSocket is connected to a remote resource.
            </summary>
            <value><b>true</b> if the VirtualSocket is connected to a remote resource; otherwise, <b>false</b>.</value>
            <remarks>Gets the connection state of the VirtualSocket. This property will return the latest known state of the VirtualSocket. When it returns <b>false</b>, the VirtualSocket was either never connected, or no longer connected. When it returns <b>true</b>, the VirtualSocket was connected at the time of the last I/O operation.<br><b>Note</b>   There is no guarantee that the VirtualSocket is still Connected even though Connected returns <b>true</b>.</br></remarks>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.Handle">
            <summary>
            Gets the operating system handle for the VirtualSocket.
            </summary>
            <value>An <see cref="T:System.IntPtr"/> representing the operating system handle for the VirtualSocket.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.LocalEndPoint">
            <summary>
            Gets the local endpoint.
            </summary>
            <value>The local endpoint that the VirtualSocket is using for communications.</value>
            <remarks>The LocalEndPoint property contains the network connection information associated with the local network device. LocalEndPoint is set by calling the Bind method.</remarks>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurs while reading the property.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.ProtocolType">
            <summary>
            Gets the protocol type of the VirtualSocket.
            </summary>
            <value>One of the <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.ProtocolType"/> values.</value>
            <remarks>ProtocolType is set when the VirtualSocket is created, and specifies the protocol used by that VirtualSocket.</remarks>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.RemoteEndPoint">
            <summary>
            Gets the remote endpoint.
            </summary>
            <value>The remote endpoint that the VirtualSocket is using for communications.</value>
            <remarks>The RemoteEndPoint property gets the network connection information associated with the remote host. RemoteEndPoint is set by VirtualSocket methods that establish a connection to a remote host.</remarks>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurs while reading the property.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.SocketType">
            <summary>
            Gets the type of the VirtualSocket.
            </summary>
            <value>One of the <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.SocketType"/> values.</value>
            <remarks>SocketType is set when the class is created.</remarks>
        </member>
        <member name="E:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.Receiving">
            <summary>
            Fires every time BeginReceive is called.
            </summary>
        </member>
        <member name="E:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.Sending">
            <summary>
            Fires every time BeginSend is called.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Ssl.SocketTransferEventDelegate">
            <summary>
            Used for events in VirtualSocket.  Note that the EventArgs pattern is not used
            for efficiency reasons (i.e. less object creations).
            </summary>
            <param name="sender">Socket which triggered the event.</param>
            <param name="byteCount">Number of bytes transferred.</param>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpSymlink">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <remarks>
            byte   SSH_FXP_SYMLINK
            uint32 request-id
            string linkpath [UTF-8]
            string targetpath [UTF-8]
            uint32 flags (this looks only for recent versions? don't use here yet)
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpSymlink.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPPassiveDataSocket">
            <summary>  Passive data socket handling class
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.10 $
            </version>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPPassiveDataSocket.#ctor(EnterpriseDT.Net.BaseSocket)">
            <summary>  
            Constructor
            </summary>
            <param name="sock"> client socket to use
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPPassiveDataSocket.Close">
            <summary>  
            Closes underlying socket
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPPassiveDataSocket.Timeout">
            <summary>   
            Set the TCP timeout on the underlying control socket.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPPassiveDataSocket.DataStream">
            <summary>  
            Gets the stream of the connection
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.LoggedException">
            <summary>standard exception class to be used inside the query object
            </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.LoggedException.#ctor">
            <summary>default constructor so that FxCop does not complain</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.LoggedException.#ctor(System.String)">
            <summary>standard overloaded constructor</summary> 
            <param name="msg">msg for the exception</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.LoggedException.#ctor(System.String,System.Exception)">
            <summary>standard overloaded constructor</summary> 
            <param name="msg">msg for the exception</param>
            <param name="exception">inner exception</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.LoggedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>here to please FxCop and maybe for future use</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.LoggedException.EnsureLogging">
            <summary>protected void EnsureLogging()</summary> 
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.ClientQueryException">
            <summary>standard exception class to be used inside the query object
            </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.ClientQueryException.#ctor">
            <summary>default constructor so that FxCop does not complain</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.ClientQueryException.#ctor(System.String)">
            <summary>standard overloaded constructor</summary> 
            <param name="msg">msg for the exception</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.ClientQueryException.#ctor(System.String,System.Exception)">
            <summary>here to please FxCop and for future use</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.ClientQueryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>here to please FxCop and maybe for future use</summary> 
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.ClientFeedException">
            <summary>standard exception class to be used inside the feed object
            </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.ClientFeedException.#ctor">
            <summary>default constructor so that FxCop does not complain</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.ClientFeedException.#ctor(System.String)">
            <summary>standard overloaded constructor</summary> 
            <param name="msg">msg for the exception</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.ClientFeedException.#ctor(System.String,System.Exception)">
            <summary>here to please FxCop and for future use</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.ClientFeedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>here to please FxCop and maybe for future use</summary> 
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.GDataBatchRequestException">
            <summary>standard exception class to be used inside the feed object
            </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataBatchRequestException.#ctor">
            <summary>standard overloaded constructor</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataBatchRequestException.#ctor(EnterpriseDT.Google.GData.Client.AtomFeed)">
            <summary>default constructor so that FxCop does not complain</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataBatchRequestException.#ctor(System.String)">
            <summary>standard overloaded constructor</summary> 
            <param name="msg">msg for the exception</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataBatchRequestException.#ctor(System.String,System.Exception)">
            <summary>here to please FxCop and for future use</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataBatchRequestException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>here to please FxCop and maybe for future use</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataBatchRequestException.BatchResult">
            <summary>
            Returns the BatchResult Feed that contains the problem
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.GDataRequestException">
            <summary>standard exception class to be used inside GDataRequest
            </summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GDataRequestException.webResponse">
            <summary>holds the webresponse object</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GDataRequestException.responseText">
            <summary>cache to hold the responseText in an error scenario</summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataRequestException.#ctor">
            <summary>default constructor so that FxCop does not complain</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataRequestException.ReadResponseString">
            <summary>
            this uses the webresponse object to get at the
            stream send back from the server.
            </summary>
            <returns>the error message</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataRequestException.#ctor(System.String,System.Exception)">
            <summary>public GDataRequestException(WebException e)</summary> 
            <param name="msg"> the exception message as a string</param>
            <param name="exception"> the inner exception</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataRequestException.#ctor(System.String)">
            <summary>public GDataRequestException(WebException e)</summary> 
            <param name="msg"> the exception message as a string</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataRequestException.#ctor(System.String,System.Net.WebException)">
            <summary>public GDataRequestException(WebException e)</summary> 
            <param name="msg"> the exception message as a string</param>
            <param name="exception"> the inner exception</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataRequestException.#ctor(System.String,System.Net.WebResponse)">
            <summary>public GDataRequestException(WebException e)</summary> 
            <param name="msg"> the exception message as a string</param>
            <param name="response"> the webresponse object that caused the exception</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataRequestException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>here to please FxCop and maybe for future use</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataRequestException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>overridden to make FxCop happy and future use</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataRequestException.Response">
            <summary>Read only accessor for response</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataRequestException.ResponseString">
            <summary>
            this is the error message returned by the server
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.GDataForbiddenException">
            <summary>exception class thrown when we encounter an access denied
            (HttpSTatusCode.Forbidden) when accessing a server
            </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataForbiddenException.#ctor(System.String,System.Net.WebResponse)">
            <summary>constructs a forbidden exception</summary> 
            <param name="msg"> the exception message as a string</param>
            <param name="response"> the webresponse object that caused the exception</param>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.GDataRedirectException">
            <summary>exception class thrown when we encounter a redirect
            (302 and 307) when accessing a server
            </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataRedirectException.#ctor(System.String,System.Net.WebResponse)">
            <summary>constructs a redirect execption</summary> 
            <param name="msg"> the exception message as a string</param>
            <param name="response"> the webresponse object that caused the exception</param>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataRedirectException.Location">
            <summary>
            returns the location header of the webresponse object
            which should be the location we should redirect to
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.GDataNotModifiedException">
            <summary>exception class thrown when we encounter a not-modified
            response (HttpStatusCode.NotModified) when accessing a server
            </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataNotModifiedException.#ctor(System.String,System.Net.WebResponse)">
            <summary>constructs a not modified exception</summary> 
            <param name="msg"> the exception message as a string</param>
            <param name="response"> the webresponse object that caused the exception</param>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.GDataVersionConflictException">
            <summary>exception class is thrown when you tried 
                 to modified/update a resource and the server detected a version 
                   conflict.
             </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataVersionConflictException.#ctor(System.String,System.Net.WebResponse)">
            <summary>constructs a version conflict exeception</summary> 
            <param name="msg"> the exception message as a string</param>
            <param name="response"> the webresponse object that caused the exception</param>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.AsyncOperationCompletedEventHandler">
            <summary>Delegate declaration for the operation completed event in a service</summary> 
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.AsyncOperationProgressEventHandler">
            <summary>Delegate declaration for the operation progress update event in a service</summary> 
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.AsyncOperationCompletedEventArgs">
            <summary>
            EventArgument class for async events, this one is used
            when the operation is completed.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AsyncOperationCompletedEventArgs.#ctor(EnterpriseDT.Google.GData.Client.AsyncData)">
            <summary>
            constructor. takes the async data blob
            </summary>
            <param name="data">async data to constructor</param>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AsyncOperationCompletedEventArgs.Feed">
            <summary>the feed that was created. If NULL, a stream or entry was returned</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AsyncOperationCompletedEventArgs.Entry">
            <summary>the entry that was created. If NULL, a stream or feed was returned</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AsyncOperationCompletedEventArgs.ResponseStream">
            <summary>the stream that was created. If NULL, a feed or entry was returned</summary> 
            <returns> </returns>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.AsyncOperationProgressEventArgs">
            <summary>
            EventArgument class for async operation progress reports
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AsyncOperationProgressEventArgs.#ctor(System.Int64,System.Int64,System.Int32,System.Uri,System.String,System.Object)">
            <summary>
            constructor. Takes the URI and the service this event applies to
            </summary>
            <param name="completeSize">the completesize of the request</param>
            <param name="currentPosition">the current position in the upload/download</param>
            <param name="percentage">progress percentage</param>
            <param name="userData">The userdata identifying the request</param>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AsyncOperationProgressEventArgs.CompleteSize">
            <summary>the complete upload size</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AsyncOperationProgressEventArgs.Position">
            <summary>the current position in the upload process</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AsyncOperationProgressEventArgs.Uri">
            <summary>the Uri that was used</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AsyncOperationProgressEventArgs.HttpVerb">
            <summary>
            returns the http verb that is executed
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.AsyncQueryData">
            <summary>
            internal class for the data to pass to the async worker thread
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AsyncQueryData.Modified">
            <summary>
             the date for the ifModified timestamp
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.PutCommand">
            <summary>  Put a file
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.3 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.ExFTPConnection">
            <summary>
            Extension to <see cref="T:EnterpriseDT.Net.Ftp.FTPConnection"/> providing advanced features 
            including multi-file operations, 
            asynchronous programming methods,
            visual design tools and support for SOCKS proxies.
            </summary>
            <remarks>
            <para><c>ExFTPConnection</c> provides a range of advanced features that
            save development time and improve the quality of applications using FTP.
            These features include:
            <list type="bullet">
            <item><term>Multi-file operations:</term>
            <description>Methods such as
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DownloadMultiple(System.String,System.String)"/> and 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DeleteDirectoryTree(System.String)"/> enable the developer to execute FTP
            operations on multiple files and directories with a single line of code.
            </description></item>
            <item><term>Asynchronous methods:</term>
            <description>These are virtually essential when writing GUI application 
            since they vastly improve responsiveness by executing time-consuming FTP operations 
            in the background.</description></item>
            <item><term>Visual design tools:</term>
            <description><c>ExFTPConnection</c> integrates with Visual Studio and other
            IDEs to provide design-time tools that make FTP development easier.  For example,
            the Connection Tester allows the developer to test their <c>ExFTPConnection</c>
            properties by connecting to an FTP server from within the development 
            environment.</description></item>
            <item><term>Proxy support:</term>
            <description>FTP operations may be performed through SOCKS4, SOCKS4A, SOCKS5 
            and HTTP proxies.</description>
            </item>
            </list></para>
            <para><c>ExFTPConnection</c> also provides the connectivity for our 
            range of <b>FTP Visual Controls</b>, which are .NET GUI Controls 
            that can be dropped onto Windows Forms to add sophisticated visual 
            FTP application features with virtually no programming.</para>
            <para><b>Multi-file Operations</b> are methods that operate on multiple
            files.  Operations that can be done of multiple files are:
            <list type="bullet">
            <item>Download of files matching a wildcard
            (see <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DownloadMultiple(System.String,System.String)"/>
            and <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DownloadMultiple(System.String,System.String,System.String,System.Boolean)"/>).</item>
            <item>Download of files matching a user-defined <see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/>
            (see <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DownloadMultiple(System.String,EnterpriseDT.Net.Ftp.FileFilter)"/>
            and <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DownloadMultiple(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)"/>).</item>
            <item>Upload of files matching a wildcard
            (see <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.UploadMultiple(System.String,System.String)"/>
            and <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.UploadMultiple(System.String,System.String,System.String,System.Boolean)"/>).</item>
            <item>Upload of files matching a user-defined <see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/>
            (see <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.UploadMultiple(System.String,EnterpriseDT.Net.Ftp.FileFilter)"/>
            and <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.UploadMultiple(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)"/>).</item>
            <item>Deletion of files matching a wildcard 
            (see <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DeleteMultipleFiles(System.String)"/> and 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DeleteMultipleFiles(System.String,System.String,System.Boolean)"/>).</item>
            <item>Deletion of files matching a user-defined <see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/>
            (see <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DeleteMultipleFiles(EnterpriseDT.Net.Ftp.FileFilter)"/>
            and <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DeleteMultipleFiles(System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)"/>).</item>
            <item>Deletion of directory trees
            (see <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DeleteDirectoryTree(System.String)"/>).</item>
            </list>
            FTP and FTPS (unlike SFTP) have certain characteristics that can sometimes
            cause problems when transferring a large number of files in a short time.
            <c>ExFTPConnection</c> can be configured to avoid these problems by means
            of the <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.MultiTransferSleepEnabled"/>, 
            <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.MultiTransferCountBeforeSleep"/> and 
            <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.MultiTransferSleepTime"/> properties.
            </para>
            
            <para><b>Asynchronous Methods</b> are supported by means of a large number of
            <c>Begin___()</c> and <c>End___()</c> methods.  Nearly every synchronous method offered in 
            <see cref="T:EnterpriseDT.Net.Ftp.FTPConnection"/>and <c>ExFTPConnection</c> has matching asynchronous 
            operations in the form of a matching Begin___() and End___() pair of methods.  
            The following example illustrates the use of <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadFile(System.String,System.String,System.AsyncCallback,System.Object)"/>
            <code>
              private void button1_Click(object sender, System.EventArgs e)
              {
                exFTPConnection1.BeginDownloadFile(fileName, fileName, new AsyncCallback(DownloadComplete), fileName);
              }
            
              private void DownloadComplete(IAsyncResult ar)
              {
                exFTPConnection1.EndDownloadFile(ar);
                label1.Text = "Finished downloading " + (string)ar.AsyncState;
              }
            </code>
            The <c>button1_Click</c> method initiates the download using the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadFile(System.String,System.String,System.AsyncCallback,System.Object)"/>
            method and returns immediately (i.e. before the file has been downloaded).  
            The <c>DownloadComplete</c> method is then called once the file has been downloaded allowing
            us to notify the user of this fact.  Since the download happens in the background the
            application may perform other processing while the file is being downloaded.
            </para>
            
            <para>Each <c>Begin___()</c> method returns an <see cref="T:System.IAsyncResult"/> reference,
            which may be cast to <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/>.  <c>FTPTask</c> contains an identifier
            called <see cref="P:EnterpriseDT.Net.Ftp.FTPTask.TaskID"/>, which uniquely identifies the method-call.
            Information about the task may also be obtained through this object.  The task
            may be cancelled by calling the <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.CancelTask(System.IAsyncResult)"/> method with the given
            task ID.
            </para>
            
            <para>When <b>Concurrent transfers</b> are <see cref="!:ConcurrentTransferSettings.Enabled"/>
            multiple files may be transferred at the same time.  This is achieved by maintaining a set
            of connections (called a "connection pool").  Each connection in the pool may transfer one file 
            at a time, so the maximum number of files that may be transferred simultaneously is equal to
            the size of the pool (<see cref="!:ConcurrentTransferSettings.MaxConnections"/>.
            </para>
            
            <para>The <b>Connection Tester</b> may be used to assist with setting the properties
            of <c>ExFTPConnection</c>.
            It allows the developer to test various property-settings interactively without running 
            their application.  The Connection Tester may be accessed by 
            (1) double-clicking on the component, (2) right-clicking on the component and 
            selecting "Connection Designer" from the context menu, or (3) selecting the component
            and then clicking on the "Connection Tester" link at the bottom of the Properties View.</para>
            <para><b>Proxy Settings</b> may be controlled through the
            <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.ProxySettings"/> property.</para>
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPConnection">
            <summary>Provides FTP client functionality.</summary>
            <remarks>
            <para><c>FTPConnection</c> provides FTP client functionality.  It is a .NET Component which
            may be used in visual designers, or it may be used as a conventional class.</para>
            
            <para><b>Constructing and connecting: </b>
            The constructor for <c>FTPConnection</c> takes no arguments.  Before connecting to
            a server, the <c>FTPConnection</c> must be configured with the 
            <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.ServerAddress"/>, <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.UserName"/> and <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.Password"/>.
            After this has been done, the <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.Connect"/> method should be called, 
            which will connect and log onto the server.
            <code>
              FTPConnection ftp = new FTPConnection();
              ftp.ServerAddress = "myservername";
              ftp.UserName = "myusername";
              ftp.Password = "mypassword";
              ftp.Connect();
              ftp.Close();
            </code>
            The <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.Close"/> method should be called when the required FTP operations
            have been completed so that the connection to the server is released.
            </para>
            
            <para><b>Directory listings: </b>
            Directory listings may be obtained in two basic forms: 
            (1) The method <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.GetFiles(System.String)"/> returns strings containing file-names.
            (2) The method <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.GetFileInfos(System.String)"/> returns <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects which
            contain information about the file including name, size, and date.</para>
            
            <para><b>Downloading and uploading files: </b>
            There are many different methods for downloading files from the server 
            and uploading them to the server.  Data may be copied from or to:
            <list type="number">
            <item>Files (<see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.DownloadFile(System.String,System.String)"/> and 
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.UploadFile(System.String,System.String)"/></item>
            <item>Streams (<see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.DownloadStream(System.IO.Stream,System.String)"/> and 
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.UploadStream(System.IO.Stream,System.String)"/>)</item>
            <item>Byte-arrays (<see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.DownloadByteArray(System.String)"/> and 
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.UploadByteArray(System.Byte[],System.String)"/></item>
            </list>
            Methods for downloading and uploading multiple files and directories are available in 
            <c>ExFTPConnection</c> and <c>SecureFTPConnection</c>, which are included in 
            <a href="http://www.enterprisedt.com/products/edtftpnetpro/overview.html">
            EDT's commercial .NET FTP products</a>.
            </para>
            
            <para><b>Other file operations:</b>
            Other operations that may be performed on files are:
            <list type="bullet">
            <item>Renaming files using the <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.RenameFile(System.String,System.String)"/> method.</item>
            <item>Deleting files using the <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.DeleteFile(System.String)"/> method.</item>
            <item>Getting a files size using the <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.GetSize(System.String)"/> method and 
            its modification time using the <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.GetLastWriteTime(System.String)"/> method.</item>
            </list></para>
            
            <para><b>Directories: </b>
            The server maintains a "working directory" for each session.  The path of the current
            working directory may be set and retrieved using the <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.WorkingDirectory"/> 
            property.  Changing directory to a subdirectory of the current working directory 
            may be done by setting the same property, or by using
            the <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.ChangeWorkingDirectory(System.String)"/> method.  Changing up to a parent 
            directory is done using the <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.ChangeWorkingDirectoryUp"/> method.
            Empty directories may be removed using <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.DeleteDirectory(System.String)"/>.  If a
            non-empty directory is to be deleted then all the files and subdirectories in it
            must be deleted first.  <c>ExFTPConnection</c> and <c>SecureFTPConnection</c> have
            methods for achieving this in a single method-call.</para>
            
            <para><b>Events:</b>
            <c>FTPConnection</c> fires events before and after most FTP operations.  For example,
            before a file is downloaded the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Downloading"/> event is fired,
            while it's downloading the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.BytesTransferred"/> event is fired
            each time <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.TransferNotifyInterval"/> bytes have been transferred, and after
            it's been downloaded the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Downloaded"/> event is fired.  Operations
            that have corresponding events are:
            <list type="table">
            <listheader><term>FTP Operation</term><description>Events</description></listheader>
            <item><term>Connecting and logging in</term>
            <description><see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Connecting"/>, <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.LoggingIn"/>,
            <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.LoggedIn"/>, and <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Connected"/></description></item>
            <item><term>Closing</term>
            <description><see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Closing"/> and <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Closed"/></description></item>
            <item><term>Downloading data</term>
            <description><see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Downloading"/>, <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.BytesTransferred"/> 
            and <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Downloaded"/></description></item>
            <item><term>Uploading data</term>
            <description><see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Uploading"/>, <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.BytesTransferred"/> 
            and <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Uploaded"/></description></item>
            <item><term>Changing directories</term>
            <description><see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.DirectoryChanging"/> and <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.DirectoryChanged"/></description></item>
            <item><term>Deleting files/directories</term>
            <description><see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Deleting"/> and <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Deleted"/></description></item>
            <item><term>Sending FTP commands</term>
            <description><see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.CommandSent"/> and <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.ReplyReceived"/></description></item>
            </list></para>
            
            <para><b>Logging:</b>
            It is often very helpful to look at the detailed 
            logging output if any problems are experienced communicating 
            with FTP servers.  All commands sent to the FTP server and subsequent replies are 
            logged, and can be made available on the console or directed to a 
            log file.  Much other useful information is also logged.</para>
            
            <para>Operations are logged at different levels, 
            ranging from no logging (<see cref="F:EnterpriseDT.Util.Debug.LogLevel.Off">Off</see>) 
            to most verbose (<see cref="F:EnterpriseDT.Util.Debug.LogLevel.All">All</see>). 
            Intermediate levels are <see cref="F:EnterpriseDT.Util.Debug.LogLevel.Fatal">Fatal</see>,
            <see cref="F:EnterpriseDT.Util.Debug.LogLevel.Error">Error</see>, 
            <see cref="F:EnterpriseDT.Util.Debug.LogLevel.Warning">Warning</see> and 
            <see cref="F:EnterpriseDT.Util.Debug.LogLevel.Information">Information</see>.For example, if the overall level is set to Information, then 
            Fatal, Error, Warning and Information log statements will be outputted, 
            but Debug statements will not be logged.</para>
            
            <para>The overall level can be set via the LogLevel property:
            <code>
              ftpConnection.LogLevel = LogLevel.Information;
            </code>
            The destination for logging can be set via several properties, described below:
            <list type="table">
            <listheader><term>Property</term><description>Description</description></listheader>
            <item><term>LogToConsole</term><description>If set to <c>true</c>, logging is directed to the console.</description></item>
            <item><term>LogToTrace</term><description>If set to <c>true</c>, logging is directed to .NET's Trace facility.</description></item>
            <item><term>LogFile</term><description>If to a valid filename, logging is directed to the file.</description></item>
            </list></para>
            
            <para><b>Overview of the FTP protocol: </b> FTP is defined in the Request For Comments 959 document (RFC 959), 
            which can be obtained from the Internet Engineering Task Force.</para>
            
            <para>FTP requires a client program (FTP client) and a server program (FTP server). The FTP client 
            can fetch files and file details from the server, and also upload files to the server. 
            The server is generally loginPassword protected.</para>
            
            <para>FTP commands are initiated by the FTP client, which opens a TCP connection called the control 
            connection to the server. This control connection is used for the entire duration of a 
            session between the FTP client and server. A session typically begins when the FTP client logs in, 
            and ends when the quit command is sent to the server. The control connection is used 
            exclusively for sending FTP commands and reading server replies - it is never used to 
            transfer files.</para>
            
            <para>Transient TCP connections called data connections are set up whenever data (normally a 
            file's contents) is to be transferred. For example, the FTP client issues a command to 
            retrieve a file from the server via the control channel. A data connection is then 
            established, and the file's contents transferred to the FTP client across it. Once the 
            transfer is complete, the data connection is closed. Meanwhile, the control connection 
            is maintained.</para>
            
            <para><b>Compliance: </b> <see cref="T:EnterpriseDT.Net.Ftp.FTPClient"/> implements
            FTP as defined by RFC959.  It attempts to match the standard as closely as possible, 
            but due to variation in the level of compliance of the numerous FTP servers available,
            it sometime allows servers some tolerance.  If the property <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.StrictReturnCodes"/>
            is set to <c>false</c> then <see cref="T:EnterpriseDT.Net.Ftp.FTPClient"/> is more tolerant of 
            non-compliant servers.</para>
            </remarks>
            <author>Hans Andersen</author>
            <author>Bruce Blackshaw</author>
            <version>$Revision: 1.164 $</version>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.DEFAULT_WORKING_DIRECTORY">
            <summary>
            Default initial working directory.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.components">
            <summary>Required designer variable.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.log">
            <summary> Logging object</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.logTag">
            <summary>Logging tag</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.instanceCount">
            <summary>
            Counts instances of FTPConnection.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.instanceCountMutex">
            <summary>
            Used for mutexing instanceCount.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.instanceNumber">
            <summary>
            Number of this instance.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.name">
            <summary>
            Name of this connection.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.clientLock">
            <summary>
            Used for locking connection.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.ftpClient">
            <summary>Instance of <c>FTPClient</c>.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.activeClient">
            <summary>Instance of <c>IFileTransferClient</c>.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.loginUserName">
            <summary>User-name to log in with.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.loginPassword">
            <summary>Password to log in with.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.accountInfoStr">
            <summary>Account information string, for use in FTP/FTPS with the ACCT command.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.fileTransferType">
            <summary>Record of the transfer type - make the default ASCII.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.ftpType">
            <summary>Protocol used.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.useAutoLogin">
            <summary>Determines if the components will automatically log in upon connection.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.useAutoFeatures">
            <summary>Determines if the components will automatically send the FEAT command after logging in.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.areEventsEnabled">
            <summary>Determines if events will be fired.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.isTransferringData">
            <summary>Determines if events will be fired.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.guiControl">
            <summary>Reference to the main window.</summary>
            <remarks>
            This reference is used for invoking delegates such that they can perform GUI-related actions.
            </remarks>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.haveQueriedForControl">
            <summary>Flag used to remember whether or not we've tried to find the main window yet.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.invokeSemaphore">
            <summary>
            Used to limit the number of concurrent Control.BeginInvoke calls inside InvokeDelegate.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.useGuiThread">
            <summary>
            Flag indicating whether or not event-handlers will run on the GUI thread if one is
            available.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.localDir">
            <summary>
            Current local working directory.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.remoteDir">
            <summary>
            Current remote working directory.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.homeDir">
            <summary>
            User's home directory on the server.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.lastTransferCancel">
            <summary>
            Flag indicating that the most recent transfer-operation was cancelled
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Creates an instance of FTPConnection within the given container.
            </summary>
            <param name="container">Container to place the new instance in.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.#ctor">
            <summary>
            Default constructor for FTPConnection.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.#ctor(EnterpriseDT.Net.Ftp.FTPClient)">
            <summary>
            Create an FTPConnection using the given FTP client.
            </summary>
            <param name="ftpClient"><see cref="T:EnterpriseDT.Net.Ftp.FTPClient"/>-instance to use.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.Dispose(System.Boolean)">
            <summary>Disconnect from the server (if connected).</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.SetIsTransferring(System.Boolean)">
            <summary>
            Used internal to set the is transferring flag
            </summary>
            <param name="isTransferring"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.Connect">
            <summary>Connect to the FTP server and (if <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.AutoLogin"/> is set) log into the server.</summary>
            <remarks>
            <para>The <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.ServerAddress"/> property must be set prior to calling this method.</para>
            <para>If <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.AutoLogin"/> is <c>true</c> then the component will attempt to
            log in immediately after successfully connecting.</para>
            <para>This method will throw an <c>FTPException</c> if the component is already connected to the server.</para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.PostLogin">
            <summary>
            Called after the user has been successfully logged in.
            </summary>
            <remarks>
            Sets the transfer-type and the current working directory. If
            AutoLogin is set to false, this method should be called
            explicitly to initialise the client state.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.PerformAutoLogin">
            <summary>Attempt to log into the server if <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.AutoLogin"/> is on.</summary>
            <remarks>A login attempt will take place only if the <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.UserName"/> property
            and (optionally) the <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.Password"/> property have been set.</remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.Close">
            <summary>Quit the FTP session.</summary> 
            <remarks>The session will be closed by sending a <c>QUIT</c> command before closing the socket.</remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.Close(System.Boolean)">
            <summary>Close the FTP connection.</summary> 
            <remarks>If <c>abruptClose</c> is <c>true</c> then the session will be closed immediately 
            by closing the control socket without sending the <c>QUIT</c> command, otherwise the
            session will be closed by sending a <c>QUIT</c> command before closing the socket.</remarks>
            <param name="abruptClose">Closes session abruptly (see comments).</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.Login">
            <summary>Log into an account on the FTP server using <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.UserName"/> and <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.Password"/>.</summary>
            <remarks>This is only necessary if <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.AutoLogin"/> is <c>false</c>.</remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.SendUserName(System.String)">
            <summary>
            Supply the user-name to log into an account on the FTP server. 
            Must be followed by the <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.SendPassword(System.String)"/> method.
            </summary>
            <remarks>This is only necessary if <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.AutoLogin"/> is <c>false</c>.</remarks>
            <param name="user">User-name of the client's account on the server.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.SendPassword(System.String)">
            <summary>
            Supply the password for the previously supplied
            user-name to log into the FTP server. Must be
            preceeded by the <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.SendUserName(System.String)"/> method
            </summary>
            <remarks>This is only necessary if <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.AutoLogin"/> is <c>false</c>.</remarks>
            <param name="loginPassword">Password of the client's account on the server.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.SendAccountInfo(System.String)">
            <summary>
            Supply account info to the FTP server. 
            </summary>
            <remarks>This can be used for a variety of purposes - for example, 
            the server could
            indicate that a password has expired (by sending 332 in reply to
            PASS) and a new password automatically supplied via ACCT. Or it could
            be used by proxies to supply a proxy password. It
            is up to the server (or proxy) how it uses this string.
            </remarks>
            <param name="accountInfo">Account information string.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.CancelTransfer">
            <summary>Cancels the current transfer.</summary>
            <remarks>This method is generally called from a separate
            thread. Note that this may leave partially written files on the
            server or on local disk, and should not be used unless absolutely
            necessary. The server is not notified.</remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.ResumeTransfer">
            <summary>Make the next file transfer (upload or download) resume.</summary>
            <remarks>
            <para>
            For uploads, the
            bytes already transferred are skipped over, while for downloads, if 
            writing to a file, it is opened in append mode, and only the bytes
            required are transferred.
            </para>
            <para>
            Currently resume is only supported for BINARY transfers (which is
            generally what it is most useful for). 
            </para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.ResumeNextTransfer">
            <summary>Make the next file transfer (upload or download) resume.</summary>
            <remarks>
            <para>
            For uploads, the
            bytes already transferred are skipped over, while for downloads, if 
            writing to a file, it is opened in append mode, and only the bytes
            required are transferred.
            </para>
            <para>
            Currently resume is only supported for BINARY transfers (which is
            generally what it is most useful for). 
            </para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.ResumeNextDownload(System.Int64)">
            <summary>Make the next download resume at a specific point.</summary>
            <remarks>
            <para>
            This resume method allows the resume offset to be set explicitly for downloads. 
            Offset bytes are skipped before downloading the file.
            </para>
            <para>
            Currently resume is only supported for BINARY transfers (which is
            generally what it is most useful for). 
            </para>
            <para>
            If the next transfer is an upload, this setting is cancelled. 
            </para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.CancelResume">
            <summary>Cancel the resume.</summary>
            <remarks>
            Use this method if something goes wrong
            and the server is left in an inconsistent state.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.UploadFile(System.String,System.String)">
            <summary>
            Upload a local file to the FTP server in the current working directory.
            </summary>
            <remarks>
            <para>The stream is closed after the transfer is complete if
            <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.CloseStreamsAfterTransfer"/> is <c>true</c> (the default) and are left
            open otherwise.  If the stream is left open the its position will be at the
            end of the stream.  Use <see cref="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)"/> to change the
            position if required.</para>
            </remarks>
            <param name="localPath">Path of the local file.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.UploadStream(System.IO.Stream,System.String)">
             <summary>
             Upload a stream of data to the FTP server in the current working directory.
             </summary>
             <remarks>
             <para>The stream is closed after the transfer is complete if
             <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.CloseStreamsAfterTransfer"/> is <c>true</c> (the default) and are left
             open otherwise.  If the stream is left open the its position will be at the
             end of the stream.  Use <see cref="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)"/> to change the
             position if required.</para>
             <para><example>The following example uploads the contents of 
             a <see cref="T:System.IO.MemoryStream"/> to the server and downloads the
             same file into another MemoryStream:</example>
             <code>
              // build StringStream (defined below) for "Hello world"
             byte[] bytes = Encoding.ASCII.GetBytes("Hello world");
             MemoryStream inStr = new MemoryStream(bytes);
            
             // upload the stream to a file on the server
             ftpConnection.UploadStream(inStr, "helloworld.txt");
             inStr.Close();
            
             // create a MemoryStream and download into it
             MemoryStream outStr = new MemoryStream();
             ftpConnection.DownloadStream(outStr, "helloworld.txt");
             outStr.Seek(0, SeekOrigin.Begin);
             string str = Encoding.GetString(outStr.GetBuffer());
             Console.WriteLine(str);
             outStr.Close();
             </code></para>
             </remarks>
             <param name="srcStream">Input stream of data to put.</param>
             <param name="remoteFile">Name of remote file in current working directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.UploadByteArray(System.Byte[],System.String)">
             <summary>
             Upload an array of bytes to the FTP server in the current working directory.
             </summary>
             <para><example>The following example uploads the string <c>"Hello world"</c>
             to the server into a file called <c>helloworld.txt</c>:</example>
             <code>
                // get data to be transferred
               string s = "Hello world";
               byte[] bytes = Encoding.ASCII.GetBytes(s);
            
               // upload the byte-array to a file on the server
               ftpConnection.UploadByteArray(bytes, "helloworld.txt");
             </code></para>
             <param name="bytes">Array of bytes to put.</param>
             <param name="remoteFile">Name of remote file in current working directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.UploadFile(System.String,System.String,System.Boolean)">
            <summary>
            Upload a local file to the FTP server in the current working directory. Allows appending
            if current file exists.
            </summary>
            <param name="localPath">Path of the local file.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="append"><c>true</c> if appending, <c>false</c> otherwise.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.UploadFile(System.String,System.String,EnterpriseDT.Net.Ftp.WriteMode)">
            <summary>
            Upload a local file to the FTP server in the current working directory. Allows appending
            if current file exists.
            </summary>
            <param name="localPath">Path of the local file.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="writeMode">Overwrite, Append or Resume.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.UploadStream(System.IO.Stream,System.String,System.Boolean)">
            <summary>
            Upload a stream of data to the FTP server in the current working directory.  Allows appending
            if current file exists.
            </summary>
            <remarks>
            The stream is closed after the transfer is complete if
            <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.CloseStreamsAfterTransfer"/> is <c>true</c> (the default) and are left
            open otherwise.
            </remarks>
            <param name="srcStream">Input stream of data to put.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="append"><c>true</c> if appending, <c>false</c> otherwise.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.UploadByteArray(System.Byte[],System.String,System.Boolean)">
            <summary>
            Upload data to the FTP server in the current working directory. Allows
            appending if current file exists.
            </summary>
            <param name="bytes">Array of bytes to put.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="append"><c>true</c> if appending, <c>false</c> otherwise.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.DownloadFile(System.String,System.String)">
            <summary>Download a file from the FTP server and save it locally.</summary>
            <remarks>Transfers in the current <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.TransferType"/>. </remarks>
            <param name="localPath">Local file to put data in.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.DownloadFile(System.String,System.String,EnterpriseDT.Net.Ftp.WriteMode)">
            <summary>Download a file from the FTP server and save it locally.</summary>
            <remarks>Transfers in the current <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.TransferType"/>. </remarks>
            <param name="localPath">Local file to put data in.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="writeMode">Overwrite, Append or Resume.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.DownloadStream(System.IO.Stream,System.String)">
            <summary>Download a file from the FTP server and write it to the given stream.</summary>
            <remarks>
            <para>Transfers are in the current <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.TransferType"/>.
            The stream is closed after the transfer is complete if
            <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.CloseStreamsAfterTransfer"/> is <c>true</c> (the default) is are left
            open otherwise.  If the stream is left open the its position will be at the
            end of the stream.  Use <see cref="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)"/> to change the
            position if required.</para>
            <para>
            <example>The following example shows a file being downloaded into a 
            <see cref="T:System.IO.MemoryStream"/>, which is then used to initialize a
            <see cref="T:System.IO.StreamReader"/>.</example>
            <code>ftpConnection.CloseStreamsAfterTransfer = false;
            MemoryStream memStr = new MemoryStream();
            ftpConnection.DownloadStream(memStr, "filename");
            memStr.Seek(0, SeekOrigin.Begin);
            StreamReader inStr = new StreamReader(memStr);
            ... use sr for whatever ...</code></para>
            </remarks>
            <param name="destStream">Data stream to write data to.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.DownloadByteArray(System.String)">
            <summary>Download data from the FTP server and return it as a byte-array.</summary>
            <remarks>
            <para>Transfers in the current <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.TransferType"/>. Note
            that we may experience memory limitations as the
            entire file must be held in memory at one time.</para>
            </remarks>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <returns>Returns a byte-array containing the file-data.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.InvokeSiteCommand(System.String,System.String[])">
            <summary>
            Invokes the given site command on the server.
            </summary>
            <remarks>
            <para>
            Site-specific commands are special commands that may be defined by a server.  
            Such commands are defined on a server-by-server basis.
            </para>
            <para>
            For example, a specific FTP server might define a <c>PROCESS</c> site-command which 
            results in another piece of software on the server being directed to perform some
            sort of processing on a particular file.  The command required might be:
            </para>
            <code>
            	SITE PROCESS file-path
            </code>
            <para>
            In this case, the site-command would be invoked as follows:
            </para>
            <code>
            	ftpConnection.InvokeSiteCommand("PROCESS", filePath);
            </code>
            </remarks>
            <param name="command">Site-specific command to be invoked.</param>
            <param name="arguments">Arguments of the command to be invoked.</param>
            <returns>The reply returned by the server.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.InvokeFTPCommand(System.String,System.String[])">
            <summary>
            Invokes the given literal FTP command on the server.
            </summary>
            <remarks>
            <para>
            If a particular FTP command is not supported by <see cref="T:EnterpriseDT.Net.Ftp.FTPConnection"/>, this
            method may sometimes be used to invoke the command.  This will only work for 
            simple commands that don't require special processing.
            </para>
            <para>
            An example of an FTP command that could be invoked using this method is the 
            <c>FEAT</c> command (which is actually behind the <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.GetFeatures"/> method.
            This would be done as follows:
            </para>
            <code>
            	string features = ftpConnection.InvokeFTPCommand("FEAT", "211");
            </code>
            The returned <c>string</c> could then be parsed to obtain the supported features
            of the server.
            </remarks>
            <param name="command">Command to be sent.</param>
            <param name="validCodes">Valid return-codes (used for validating reply).</param>
            <returns>The reply returned by the server.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.GetFeatures">
            <summary>Get the server supplied features.</summary>
            <returns>
            <c>string</c>-array containing server features, or <c>null</c> if no features or not supported.
            </returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.GetSystemType">
            <summary>Get the type of the operating system at the server.</summary>
            <returns>The type of server operating system.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.GetCommandHelp(System.String)">
            <summary>Get the help text for the specified FTP command.</summary>
            <param name="command">Name of the FTP command to get help for.</param>
            <returns>Help text from the server for the supplied command.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.GetFileInfos">
            <summary>
            Returns the working directory's contents as an array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.
            </summary>
            <remarks>
            This method works for Windows and most Unix FTP servers.  Please inform EDT
            about unusual formats (<a href="support@enterprisedt.com">support@enterprisedt.com</a>).
            </remarks>
            <returns>An array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.GetFileInfos(System.String)">
            <summary>
            Returns the given directory's contents as an array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.
            </summary>
            <remarks>
            This method works for Windows and most Unix FTP servers.  Please inform EDT
            about unusual formats (<a href="support@enterprisedt.com">support@enterprisedt.com</a>).
            </remarks>
            <param name="directory">Name of directory AND/OR filemask.</param>
            <returns>An array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.GetFileInfos(System.String,EnterpriseDT.Net.Ftp.FTPFileCallback)">
            <summary>
            Returns the given directory's contents as an array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.
            </summary>
            <remarks>
            This method works for Windows and most Unix FTP servers.  Please inform EDT
            about unusual formats (<a href="support@enterprisedt.com">support@enterprisedt.com</a>).
            </remarks>
            <param name="directory">Name of directory AND/OR filemask.</param>
            <param name="dirListCallback">Callback to notify for each listing item</param>
            <returns>An array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.GetFiles">
            <summary>
            Lists current working directory's contents as an array of strings of file-names.
            </summary>
            <returns>An array of current working directory listing strings.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.GetFiles(System.String)">
            <summary>
            List the given directory's contents as an array of strings of file-names.
            </summary>
            <param name="directory">Name of directory</param>
            <remarks>
            The directory name can sometimes be a file mask depending on the FTP server.
            </remarks>
            <returns>An array of directory listing strings.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.GetFiles(System.String,System.Boolean)">
            <summary>
            List the given directory's contents as an array of strings of file-names or
            full file details.
            </summary>
            <param name="directory">Name of directory</param>
            <param name="full">true if the full listing is required including file size</param>
            <remarks>
            The directory name can sometimes be a file mask depending on the FTP server.
            </remarks>
            <returns>An array of directory listing strings.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.DeleteDirectory(System.String)">
            <summary>Delete the specified remote directory.</summary>
            <remarks>
            This method does not recursively delete files.
            </remarks>
            <param name="directory">Name of remote directory to delete.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.CreateDirectory(System.String)">
            <summary>Create the specified remote directory.</summary>
            <param name="directory">Name of remote directory to create.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.GetWorkingDirectory">
            <summary>
            Returns the working directory on the server.
            </summary>
            <returns>The working directory on the server.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.ChangeWorkingDirectory(System.String)">
            <summary>
            Changes the working directory.
            </summary>
            <param name="directory">Directory to change to (may be relative or absolute).</param>
            <returns><c>true</c> if the working directory was changed.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.ChangeWorkingDirectoryUp">
            <summary>
            Changes to the parent of the current working directory on the server.
            </summary>
            <returns><c>true</c> if the working directory was changed.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.DeleteFile(System.String)">
            <summary>Delete the specified remote file.</summary>
            <param name="remoteFile">Name of remote file to delete.</param>
            <returns><c>true</c> if file was deleted successfully.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RenameFile(System.String,System.String)">
            <summary>Rename a file or directory.</summary>
            <param name="from">Name of file or directory to rename.</param>
            <param name="to">New file-name.</param>
            <returns><c>true</c> if the file was renamed successfully.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.GetSize(System.String)">
            <summary>
            Get the size of a remote file. 
            </summary>
            <remarks>
            This is not a standard FTP command, it is defined in "Extensions to FTP", a draft RFC 
            (draft-ietf-ftpext-mlst-16.txt).
            </remarks>
            <param name="remoteFile">Name or path of remote file in current working directory.</param>
            <returns>Size of file in bytes.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.GetSize(System.String,System.Boolean)">
            <summary>
            Get the size of a remote file, providing options on how errors are handled. 
            </summary>
            <remarks>
            This is not a standard FTP command, it is defined in "Extensions to FTP", a draft RFC 
            (draft-ietf-ftpext-mlst-16.txt).  If <c>throwOnError is</c> <c>true</c> then an exception 
            is thrown if there's an error, otherwise <c>-1</c> is returned.
            </remarks>
            <param name="remoteFile">Name or path of remote file in current working directory.</param>
            <param name="throwOnError">If <c>true</c> then an exception is thrown if there's an error,
            otherwise <c>-1</c> is returned.</param>
            <returns>Size of file in bytes.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.Exists(System.String)">
            <summary>
            Checks for the existence of a file on the server.
            </summary>
            <remarks>
            <para>
            Not all servers support absolute paths, so it's safer to use relative paths.  The
            path separator should be '/'.  If problems are encountered the safest option is
            to change into the desired directory prior to calling this method and then supplying
            the name of the file without its path.
            </para>
            <para>
            The existence of local files may be checked using the <see cref="M:System.IO.File.Exists(System.String)"/>
            method.
            </para>
            </remarks>
            <param name="remoteFile">Path of remote file.</param>
            <returns><c>true</c> if the named file exists on the server.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.DirectoryExists(System.String)">
            <summary>
            Tests if the given directory exists.
            </summary>
            <remarks>
            The FTP protocol doesn't specify a standard way of testing for the existence of a directory, so
            this method tries to change into the directory and assumes that that the directory doesn't
            exist if an exception is thrown.  The current working directory is restored before the method 
            returns.
            </remarks>
            <param name="dir">Name of directory</param>
            <returns><c>true</c> if directory exists and false otherwise</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.GetLastWriteTime(System.String)">
            <summary>Get modification time for a remote file.</summary>
            <param name="remoteFile">Name of remote file.</param>
            <returns>Last write time of file as a <c>DateTime</c>.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.GetLastWriteTime(System.String,System.Boolean)">
            <summary>Get modification time for a remote file.</summary>
            <remarks> If <c>throwOnError is</c> <c>true</c> then an exception 
            is thrown if there's an error, otherwise <c>-1</c> is returned.</remarks>
            <param name="remoteFile">Name of remote file.</param>
            <param name="throwOnError">If <c>true</c> then an exception is thrown if there's an error,
            otherwise <c>-1</c> is returned.</param>
            <returns>Last write time of file as a <c>DateTime</c>.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.SetLastWriteTime(System.String,System.DateTime)">
            <summary>Set modification time for a remote file.</summary>
            <remarks>
            Although times are passed to the server with second precision, some
            servers may ignore seconds and only provide minute precision.  
            May not be supported by some FTP servers.
            </remarks>
            <param name="remoteFile">Name of remote file.</param>
            <param name="lastWriteTime">Desired write-time (given in local timezone).</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.InvokeEventHandler(System.Delegate,System.Object,System.EventArgs)">
            <summary>
            Invokes the given event-handler.
            </summary>
            <param name="eventHandler">Event-handler to invoke.</param>
            <param name="sender">Sender of the event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.InvokeEventHandler(System.Boolean,System.Delegate,System.Object,System.EventArgs)">
            <summary>
            Invokes the given event-handler.
            </summary>
            <param name="preferGuiThread">If <c>true</c> then an attempt will be made to 
            run on the GUI thread</param>
            <param name="eventHandler">Event-handler to invoke.</param>
            <param name="sender">Sender of the event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.InvokeEventHandler(System.Boolean,System.Boolean,System.Delegate,System.Object,System.EventArgs)">
            <summary>
            Invokes the given event-handler.
            </summary>
            <param name="preferGuiThread">If <c>true</c> then an attempt will be made to 
            run on the GUI thread</param>
            <param name="permitAsync">Allow delegate to be called asynchronously.</param>
            <param name="del">Delegate to invoke.</param>
            <param name="eventHandler">Event-handler to invoke.</param>
            <param name="sender">Sender of the event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.InvokeDelegate(System.Boolean,System.Boolean,System.Delegate,System.Object[])">
            <summary>
            Invokes the given delegate.
            </summary>
            <param name="preferGuiThread">If <c>true</c> then an attempt will be made to 
            run on the GUI thread</param>
            <param name="permitAsync">Allow delegate to be called asynchronously.</param>
            <param name="del">Delegate to invoke.</param>
            <param name="args">Arguments with which to invoke the delegate.</param>
            <returns>Return value of delegate (if any).</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnConnecting">
            <summary>
            Called when a connection-attempt is being made.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnConnected(System.Boolean)">
            <summary>
            Called when a connection-attempt has completed.
            </summary>
            <param name="hasConnected"><c>true</c> if the connection-attempt succeeded.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnConnected(System.Exception)">
            <summary>
            Called when a connection is about to close.
            </summary>
            <param name="exception">Exception that occurred during operation.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnLoggingIn(System.String,System.String,System.Boolean)">
            <summary>
            Called when the client is about to log in.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnLoggedIn(System.String,System.String,System.Boolean)">
            <summary>
            Called when the client has logged in.
            </summary>
            <param name="userName">User-name of account.</param>
            <param name="password">Password of account.</param>
            <param name="hasLoggedIn"><c>true</c> if the client logged in successfully.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnClosing">
            <summary>
            Called when a connection is about to close.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnClosing(System.Exception)">
            <summary>
            Called when a connection is about to close.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnClosed">
            <summary>
            Called when a connection has closed.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnClosed(System.Exception)">
            <summary>
            Called when a connection has closed.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnUploading(System.String,System.String@,EnterpriseDT.Net.Ftp.WriteMode@)">
            <summary>
            Called when a file is about to be uploaded.
            </summary>
            <param name="localPath">Path of local file.</param>
            <param name="remoteFile">Path of remote file.</param>
            <param name="writeMode">Write-mode of the transfer (i.e. overwrite, append or resume).</param>
            <returns><c>true</c> if the operation is to continue.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnUploaded(System.String,System.String,System.Int64,EnterpriseDT.Net.Ftp.WriteMode,System.Exception)">
            <summary>
            Called when a file uploading operation has completed (though it may have been cancelled).
            </summary>
            <param name="localPath">Path of local file.</param>
            <param name="remoteFile">Path of remote file.</param>
            <param name="append">Flag indicating whether or not the remote file was being appended to.</param>
            <param name="ex">Exception thrown (if failed)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnUploading(System.IO.Stream,System.String@,System.Boolean@,System.Int64@)">
            <summary>
            Called when a stream is about to be uploaded.
            </summary>
            <param name="srcStream">Stream to upload.</param>
            <param name="remoteFile">Path of remote file.</param>
            <param name="append">Flag indicating whether or not the remote file is being appended to.</param>
            <returns><c>true</c> if the operation is to continue.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnUploaded(System.IO.Stream,System.Int64,System.String,System.Boolean,System.Exception,System.Int64)">
            <summary>
            Called when a file uploading operation has completed (though it may have been cancelled).
            </summary>
            <param name="srcStream">Stream to upload.</param>
            <param name="remoteFile">Path of remote file.</param>
            <param name="append">Flag indicating whether or not the remote file was being appended to.</param>
            <param name="ex">Exception thrown (if failed)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnUploading(System.Byte[],System.String@,System.Boolean@)">
            <summary>
            Called when a byte-array is about to be uploaded.
            </summary>
            <param name="bytes">Byte-array to upload.</param>
            <param name="remoteFile">Path of remote file.</param>
            <param name="append">Flag indicating whether or not the remote file is being appended to.</param>
            <returns><c>true</c> if the operation is to continue.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnUploaded(System.Byte[],System.String,System.Int64,System.Boolean,System.Exception)">
            <summary>
            Called when a file uploading operation has completed (though it may have been cancelled).
            </summary>
            <param name="bytes">Byte-array to upload.</param>
            <param name="remoteFile">Path of remote file.</param>
            <param name="append">Flag indicating whether or not the remote file was being appended to.</param>
            <param name="ex">Exception thrown (if failed)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnDownloading(System.String@,System.String,System.Boolean@,System.Int64@,System.DateTime@)">
            <summary>
            Called when a file is about to be downloaded.
            </summary>
            <param name="localPath">Path of local file.</param>
            <param name="remoteFile">Path of remote file.</param>
            <returns><c>true</c> if the operation is to continue.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnDownloaded(System.String,System.String,System.Int64,System.Boolean,System.Exception,System.Int64,System.DateTime)">
            <summary>
            Called when a file downloading operation has completed (though it may have been cancelled).
            </summary>
            <param name="localPath">Path of local file.</param>
            <param name="remoteFile">Path of remote file.</param>
            <param name="ex">Exception thrown (if failed)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnDownloading(System.IO.Stream,System.String,System.Int64,System.Int64@,System.DateTime@)">
            <summary>
            Called when a file is about to be downloaded.
            </summary>
            <param name="destStream">Stream to which data will be written.</param>
            <param name="remoteFile">Path of remote file.</param>
            <returns><c>true</c> if the operation is to continue.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnDownloaded(System.IO.Stream,System.String,System.Int64,System.Exception,System.Int64,System.DateTime)">
            <summary>
            Called when a file downloading operation has completed (though it may have been cancelled).
            </summary>
            <param name="destStream">Stream to which data will be written.</param>
            <param name="remoteFile">Path of remote file.</param>
            <param name="ex">Exception thrown (if failed)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnDownloading(System.String,System.Int64@,System.DateTime@)">
            <summary>
            Called when a file is about to be downloaded.
            </summary>
            <param name="remoteFile">Path of remote file.</param>
            <returns><c>true</c> if the operation is to continue.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnDownloaded(System.Byte[],System.String,System.Int64,System.Exception,System.Int64,System.DateTime)">
            <summary>
            Called when a file downloading operation has completed (though it may have been cancelled).
            </summary>
            <param name="bytes">Byte-array containing downloaded data.</param>
            <param name="remoteFile">Path of remote file.</param>
            <param name="ex">Exception thrown (if failed)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnBytesTransferred(System.String,System.Int64,System.Int64)">
            <summary>
            Called every time a specified number of bytes of data have been transferred.
            </summary>
            <param name="remoteFile">The name of the file being transferred.</param>
            <param name="byteCount">The current count of bytes transferred.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnChangingServerDirectory(System.String,System.String)">
            <summary>
            Called when the server directory is about to be changed.
            </summary>
            <param name="oldDirectory">Current directory.</param>
            <param name="newDirectory">New directory</param>
            <returns><c>true</c> if the operation is to continue.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnChangingLocalDirectory(System.String,System.String)">
            <summary>
            Called when the local directory is about to be changed.
            </summary>
            <param name="oldDirectory">Current directory.</param>
            <param name="newDirectory">New directory</param>
            <returns><c>true</c> if the operation is to continue.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnCreatingDirectory(System.String)">
            <summary>
            Called when a directory is about to be created.
            </summary>
            <param name="dir">Directory name</param>
            <returns><c>true</c> if the operation is to continue.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnCreatedDirectory(System.String,System.Boolean,System.Exception)">
            <summary>
            Called when a directory has been created.
            </summary>
            <param name="dir">Directory name</param>
            <param name="cancelled"><c>true</c> if the operation was cancelled (and the file was not deleted).</param>
            <param name="ex">Exception thrown (if failed)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnDeletingDirectory(System.String)">
            <summary>
            Called when a directory is about to be deleted.
            </summary>
            <param name="dir">Directory name</param>
            <returns><c>true</c> if the operation is to continue.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnDeletedDirectory(System.String,System.Boolean,System.Exception)">
            <summary>
            Called when a directory has been deleted.
            </summary>
            <param name="dir">Directory name</param>
            <param name="cancelled"><c>true</c> if the operation was cancelled (and the file was not deleted).</param>
            <param name="ex">Exception thrown (if failed)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnDirectoryListing(System.String)">
            <summary>
            Called when a directory listing is about to be retrieved.
            </summary>
            <param name="dir">Directory name</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnDirectoryListed(System.String,EnterpriseDT.Net.Ftp.FTPFile[],System.Exception)">
            <summary>
            Called when a directory listing has been retrieved.
            </summary>
            <param name="files">File-details.</param>
            <param name="dir">Directory name</param>
            <param name="ex">Exception thrown (if failed)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnChangedServerDirectory(System.String,System.String,System.Boolean,System.Exception)">
            <summary>
            Called when the server directory has been changed.
            </summary>
            <param name="oldDirectory">Previous directory.</param>
            <param name="newDirectory">New directory</param>
            <param name="ex">Exception thrown (if failed)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnChangedLocalDirectory(System.String,System.String,System.Boolean)">
            <summary>
            Called when the local directory has been changed.
            </summary>
            <param name="oldDirectory">Previous directory.</param>
            <param name="newDirectory">New directory</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnDeleting(System.String,System.DateTime@)">
            <summary>
            Called when a file is about to be deleted.
            </summary>
            <param name="remoteFile">File to delete.</param>
            <returns><c>true</c> if the operation is to continue.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnDeleted(System.String,System.Boolean,System.Exception,System.DateTime)">
            <summary>
            Called when a file deletion operation has completed (though it may have been cancelled).
            </summary>
            <param name="remoteFile">File deleted.</param>
            <param name="cancelled"><c>true</c> if the operation was cancelled (and the file was not deleted).</param>
            <param name="ex">Exception thrown (if failed)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnRenaming(System.String,System.String)">
            <summary>
            Called when a file is about to be renamed.
            </summary>
            <param name="from">Current name.</param>
            <param name="to">New name.</param>
            <returns><c>true</c> if the operation is to continue.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnRenamed(System.String,System.String,System.Boolean,System.Exception)">
            <summary>
            Called when a file has been renamed.
            </summary>
            <param name="from">Previous name.</param>
            <param name="to">New name.</param>
            <param name="cancelled">Indicates whether or not the rename operation was cancelled.</param>
            <param name="ex">Exception thrown (if failed)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnActivePortRangeChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a property is changed in ActivePort
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnFileNotFoundMessagesChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a member of FileNotFoundMessagesChanged is added, removed or changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnTransferCompleteMessagesChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a member of TransferCompleteMessages is added, removed or changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnDirectoryEmptyMessagesChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a member of DirectoryEmptyMessages is added, removed or changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnPropertyChanged(System.String)">
            <summary>
            Called when a property has been changed.
            </summary>
            <param name="propertyName">Name of property.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.ftpClient_BytesTransferred(System.Object,EnterpriseDT.Net.Ftp.BytesTransferredEventArgs)">
            <summary>
            Event-handler for <see cref="E:EnterpriseDT.Net.Ftp.IFileTransferClient.BytesTransferred"/> events received from <see cref="T:EnterpriseDT.Net.Ftp.IFileTransferClient"/>s.
            </summary>
            <remarks>This method simply passes <see cref="E:EnterpriseDT.Net.Ftp.IFileTransferClient.BytesTransferred"/> events onto
            <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.BytesTransferred"/> handlers.</remarks>
            <param name="sender">Sender of events.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.ftpClient_CommandSent(System.Object,EnterpriseDT.Net.Ftp.FTPMessageEventArgs)">
            <summary>
            Event-handler for <see cref="!:IFileTransferClient.CommandSent"/> events received from <see cref="T:EnterpriseDT.Net.Ftp.IFileTransferClient"/>s.
            </summary>
            <remarks>This method simply passes <see cref="!:IFileTransferClient.CommandSent"/> events onto
            <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.CommandSent"/> handlers.</remarks>
            <param name="sender">Sender of events.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.ftpClient_CommandError(System.Object,EnterpriseDT.Net.Ftp.FTPErrorEventArgs)">
            <summary>
            Test if the connection is still alive.
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Arguments</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.ftpClient_ReplyReceived(System.Object,EnterpriseDT.Net.Ftp.FTPMessageEventArgs)">
            <summary>
            Event-handler for <see cref="!:IFileTransferClient.ReplyReceived"/> events received from <see cref="T:EnterpriseDT.Net.Ftp.IFileTransferClient"/>s.
            </summary>
            <remarks>This method simply passes <see cref="!:IFileTransferClient.ReplyReceived"/> events onto
            <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.ReplyReceived"/> handlers.</remarks>
            <param name="sender">Sender of events.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseBytesTransferred(EnterpriseDT.Net.Ftp.BytesTransferredEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.BytesTransferred"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseClosed(EnterpriseDT.Net.Ftp.FTPConnectionEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Closed"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseClosing(EnterpriseDT.Net.Ftp.FTPConnectionEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Closing"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseCommandSent(EnterpriseDT.Net.Ftp.FTPMessageEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.CommandSent"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseConnected(EnterpriseDT.Net.Ftp.FTPConnectionEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Connected"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseConnecting(EnterpriseDT.Net.Ftp.FTPConnectionEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Connecting"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseCreatedDirectory(EnterpriseDT.Net.Ftp.FTPDirectoryEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.CreatedDirectory"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseCreatingDirectory(EnterpriseDT.Net.Ftp.FTPDirectoryEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.CreatingDirectory"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseDeleted(EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Deleted"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseDeletedDirectory(EnterpriseDT.Net.Ftp.FTPDirectoryEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.DeletedDirectory"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseDeleting(EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Deleting"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseDeletingDirectory(EnterpriseDT.Net.Ftp.FTPDirectoryEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.DeletingDirectory"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseDirectoryChanged(EnterpriseDT.Net.Ftp.FTPDirectoryEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.DirectoryChanged"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseDirectoryChanging(EnterpriseDT.Net.Ftp.FTPDirectoryEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.DirectoryChanging"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseDirectoryListed(EnterpriseDT.Net.Ftp.FTPDirectoryListEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.DirectoryListed"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseDirectoryListing(EnterpriseDT.Net.Ftp.FTPDirectoryListEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.DirectoryListing"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseDownloaded(EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Downloaded"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseDownloading(EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Downloading"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseLocalDirectoryChanged(EnterpriseDT.Net.Ftp.FTPDirectoryEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.LocalDirectoryChanged"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseLocalDirectoryChanging(EnterpriseDT.Net.Ftp.FTPDirectoryEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.LocalDirectoryChanging"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseLoggedIn(EnterpriseDT.Net.Ftp.FTPLogInEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.LoggedIn"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseLoggingIn(EnterpriseDT.Net.Ftp.FTPLogInEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.LoggingIn"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaisePropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.PropertyChanged"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseRenamedFile(EnterpriseDT.Net.Ftp.FTPFileRenameEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.RenamedFile"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseRenamingFile(EnterpriseDT.Net.Ftp.FTPFileRenameEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.RenamingFile"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseReplyReceived(EnterpriseDT.Net.Ftp.FTPMessageEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.ReplyReceived"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseServerDirectoryChanged(EnterpriseDT.Net.Ftp.FTPDirectoryEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.ServerDirectoryChanged"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseServerDirectoryChanging(EnterpriseDT.Net.Ftp.FTPDirectoryEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.ServerDirectoryChanging"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseUploaded(EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Uploaded"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseUploading(EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Uploading"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.CheckConnection(System.Boolean)">
            <summary> 
            Checks if the client has connected to the server and throws an exception if it hasn't.
            This is only intended to be used by subclasses
            </summary>
            <throws>FTPException Thrown if the client has not connected to the server. </throws>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.CheckFTPType(System.Boolean)">
            <summary>
            Checks the FTP type and throws an exception if it's incorrect.
            </summary>
            <param name="ftpOnly"><c>true</c> if the type must be FTP.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RelativePathToAbsolute(System.String,System.String)">
            <summary>
            Combines a relative path with an absolute path.
            </summary>
            <remarks>
            <para>
            An example of an absolute path is 'C:\work\ftp'. Examples of a relative
            path combined with this are shown below:
            </para>
            <list>
            <item>'myfiles\cv.txt' => 'c:\work\ftp\myfiles\cv.txt'</item>
            <item>'.\myfiles\cv.txt' => 'c:\work\ftp\myfiles\cv.txt'</item>
            <item>'..\myfiles\cv.txt' => 'c:\work\myfiles\cv.txt'</item>
            </list>
            </remarks>
            <param name="absolutePath">Absolute path</param>
            <param name="relativePath">Relative path</param>
            <returns>Combination of absolute and relative paths.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.GetURL">
            <summary>
            Returns a URL corresponding to the current state of this <c>SecureFTPConnection</c>.
            </summary>
            <returns>URL corresponding to the current state of this <c>SecureFTPConnection</c></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.GetURL(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns a URL corresponding to the current state of this <c>SecureFTPConnection</c>.
            The URL optionally includes the directory, user-name and password.
            </summary>
            <param name="includeDirectory">Should the directory be included in the URL?</param>
            <param name="includeUserName">Should the user-name be included in the URL?</param>
            <param name="includePassword">Should the password be included in the URL?</param>
            <returns>URL corresponding to the current state of this <c>SecureFTPConnection</c></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.GetHashCode">
            <summary>
            Returns hash-code for this connection.
            </summary>
            <returns>The hash-code for this connection.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.ToString">
            <summary>
            Returns a string representation of the connection.
            </summary>
            <returns>A string representation of the connection</returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.InstanceNumber">
            <summary>
            Returns the number of this instance.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.Name">
            <summary>
            Name of this component.
            </summary>
            <remarks>May be used by to identify connections as desired.</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.ParentControl">
            <summary>
            Reference to Windows Forms controls (if available).
            </summary>
            <remarks>
            <para>This property only applies to Windows Forms applications.</para>
            <para>If the <c>ParentControl</c> property is set then all events and callbacks 
            will be executed in the thread in which this control was created.  If it is not
            set then FTPConnection will still attempt to find a control on whose thread
            events and callback will be executed.  This prevents cross-thread errors.</para>
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "P:EnterpriseDT.Net.Ftp.FTPConnection.Protocol" -->
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.Version">
            <summary>The version of the assembly.</summary>
            <value>An <c>int</c> array of <c>{major,middle,minor}</c> version numbers.</value>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.BuildTimestamp">
            <summary>The assembly's build timestamp.</summary>
            <value>
            Timestamp of when the assembly was built in the format <c>d-MMM-yyyy HH:mm:ss z</c>.
            </value>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.StrictReturnCodes">
            <summary>Controls whether or not checking of return codes is strict.</summary>
            <remarks>
            <para>
            Some servers return non-standard reply-codes.  When this property is <c>false</c>
            only the first digit of the reply-code is checked, thus decreasing the sensitivity
            of edtFTPj to non-standard reply-codes.  The default is <c>true</c> meaning that
            reply-codes must match exactly.
            </para>
            </remarks>
            <value>  
            <c>true</c> if strict return code checking, <c>false</c> if non-strict.
            </value>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.PublicIPAddress">
            <summary>
            IP address of the client as the server sees it.
            </summary>
            <remarks>
            This property is necessary when using active mode in situations where the
            FTP client is behind a firewall.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.AutoPassiveIPSubstitution">
            <summary>
            Use <c>AutoPassiveIPSubstitution</c> to ensure that 
            data-socket connections are made to the same IP address
            that the control socket is connected to.
            </summary>
            <remarks>
            <para>
            <c>AutoPassiveIPSubstitution</c> is useful in passive mode when the 
            FTP server is supplying an incorrect IP address to the client for 
            use in creating data connections (directory listings and file 
            transfers), e.g. an internal IP address that is not accessible from 
            the client. Instead, the client will use the IP address obtained 
            from the FTP server's hostname.
            </para>
            <para>
            This usually happens when an FTP server is behind
            a NAT router and has not been configured to reflect the fact that
            its internal (LAN) IP address is different from the address that
            external (Internet) machines connect to.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.ActivePortRange">
            <summary>
            Specifies the range of ports to be used for data-channels in active mode.
            </summary>
            <remarks>
            <para>By default, the operating system selects the ports to be used for
            active-mode data-channels.  When ActivePortRange is defined,
            a port within this range will be selected.</para>
            <para>This settings is not used in passive mode.</para>
            <para>This can be particularly useful in scenarios where it is necessary to 
            configure a NAT router to statically route a certain range of ports to the
            machine on which the FTP client is running.</para>	
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.FileNotFoundMessages">
            <summary>
            Holds fragments of server messages that indicate a file was not found
            </summary>
            <remarks>
            The fragments are used when it is necessary to examine the message
            returned by a server to see if it is saying a file was not found. 
            If an FTP server is returning a different message that still clearly 
            indicates a file was not found, use this property to add a new server 
            fragment to the repository via the Add method. It would be helpful to
            email support at enterprisedt dot com to inform us of the message so
            it can be added to the next build.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.TransferCompleteMessages">
            <summary>
            Holds fragments of server messages that indicate a transfer completed.
            </summary>
            <remarks>
            The fragments are used when it is necessary to examine the message
            returned by a server to see if it is saying a transfer completed.
            If an FTP server is returning a different message that still clearly 
            indicates the transfer complete, use this property to add a new server 
            fragment to the repository via the Add method. It would be helpful to
            email support at enterprisedt dot com to inform us of the message so
            it can be added to the next build.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.DirectoryEmptyMessages">
            <summary>
            Holds fragments of server messages that indicate a directory
            is empty.
            </summary>
            <remarks>
            The fragments are used when it is necessary to examine the message
            returned by a server to see if it is saying a directory is empty, which
            is normally used by DirDetails. If an FTP server is returning a different
            message that still clearly indicates a directory is empty, use this
            property to add a new server fragment to the repository via the Add method.
            It would be helpful to email support at enterprisedt dot com to inform 
            us of the message so it can be added to the next build.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.Timeout">
            <summary> 
            TCP timeout (in milliseconds) of the underlying sockets (0 means none).
            </summary>
            <summary> 
            TCP timeout (in milliseconds) of the underlying sockets (0 means none).
            </summary>
            <remarks>Timout value in milliseconds.  The default value is 120000, which indicates 
            a 120 second timeout period.</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.ShowHiddenFiles">
            <summary>
            Include hidden files in operations that involve listing of directories,
            and if supported by the server (FTP and FTPS).
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.ConnectMode">
            <summary>
            The connection-mode (passive or active) of data-channels.
            </summary>
            <remarks>
            <para>
            When the connection-mode is active, the server will initiate connections
            to the FTP client, meaning that the FTP client must open a socket and wait for the
            server to connect to it.  This often causes problems if the FTP client is behind
            a firewall.
            </para>
            <para>
            When the connection-mode is passive, the FTP client will initiates connections
            to the server, meaning that the FTP client will connect to a particular socket
            on the server.  This is generally used if the FTP client is behind a firewall.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.IsConnected">
            <summary>
            Indicates whether the FTP client is currently connected with the server.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.IsTransferring">
            <summary>
            Indicates whether the FTP client is currently transferring data.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.TransferNotifyInterval">
            <summary>
            The number of bytes transferred between each notification of the
            <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.BytesTransferred"/> event.
            </summary>
            <remarks>
            <para>This property determines the approximate number of bytes transferred
            between each <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.BytesTransferred"/> event.</para>
            <para>The default value is 4096.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.TransferNotifyListings">
            <summary>
            By default the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.BytesTransferred"/> event is not triggered 
            during directory listings - this property can be used to enable this behaviour.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.TransferBufferSize">
            <summary>
            The size of the buffers used in writing to and reading from the data-sockets.
            </summary>
            <remarks>
            <para>The size of receive and transmit buffers.</para>
            <para>The default value is 4096.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.CloseStreamsAfterTransfer">
            <summary>
            Determines if transfer-methods taking <see cref="T:System.IO.Stream"/>s as arguments should
            close the stream once the transfer is completed.
            </summary>
            <remarks>
            If <c>CloseStreamsAfterTransfer</c> is <c>true</c> (the default) then streams are closed after 
            a transfer has completed, otherwise they are left open.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.ServerAddress">
            <summary>
            The domain-name or IP address of the FTP server.
            </summary>
            <remarks>
            <para>This property may only be set if not currently connected.</para>
            <para><example>The following example illustrates an FTP client
            connecting to a server:</example>
            <code>
            FTPConnection ftp = new FTPConnection();
            ftp.ServerAddress = "my-server-name";
            ftp.UserName = "my-username";
            ftp.Password = "my-password";
            ftp.Connect();
            ftp.Close();
            </code></para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.ServerPort">
            <summary>
            The port on the server to which to connect the control-channel. 
            </summary>
            <remarks>
            <para>Most FTP servers use port 21 (the default)</para>
            <para>This property may only be set if not currently connected.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.WorkingDirectory">
            <summary>
            The current working directory on the server. 
            </summary>
            <remarks>
            If the client is not currently connected, this is the initial
            working directory that will be changed to once the client connects.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.HomeDirectory">
            <summary>
            The server-side directory that the client is in immediately after connecting.
            </summary>
            <remarks>Prior to logging in the value is <c>null</c>.
            If the <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.ServerDirectory"/> property was not set prior to connection then its
            value immediately after logging in will be the same as that of HomeDirectory.</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.ServerDirectory">
            <summary>
            The initial/current working directory on the server. 
            </summary>
            <remarks>
            If the client is not currently connected, this is the initial
            working directory that will be changed to once the client connects.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.LocalDirectory">
            <summary>
            The working directory on the local file-system into which files are downloaded. 
            </summary>
            <remarks>
            <para><c>LocalDirectory</c> must be an absolute path, e.g. C:\work\ftp</para>
            <para><c>LocalDirectory</c> is specific to this component, i.e. changing it does not
            change the working directory of the application using this assembly. Files are downloaded
            into this directory if it is set and a relative path or no path is supplied as the destination
            filename. 
            </para>
            <para><c>LocalDirectory</c> is <c>null</c> by default meaning that the application's 
            normal working directory is used when downloading files.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.DeleteOnFailure">
            <summary>
            Controls whether or not a file is deleted when a failure occurs.
            </summary>
            <remarks>
            <para>
            If <c>true</c>, a partially downloaded file is deleted if there
            is a failure during the download.  For example, the connection
            to the FTP server might have failed. If <c>false</c>, the partially
            downloaded file remains on the FTP client machine - and the download
            may be resumed, if it is a binary transfer.
            </para>
            <para>
            By default this flag is set to <c>true</c>.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.DataEncoding">
            <summary>
            The character-encoding to use for transferring data in ASCII mode.
            </summary>
            <remarks>
            <para>
            The default is to use the default character encoding (generally UTF8). 
            Some common character encodings to try for western European languages are 
            <c>Windows-1252</c> and <c>ISO-8859-1</c>. 
            </para>
            <para>
            This encoding is not used when transferring data in binary mode.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.CommandEncoding">
            <summary>
            The character-encoding to use for FTP control commands and when dealing with file- and directory-paths.
            </summary>
            <remarks>
            <para>
            The default is <c>ASCII</c>, but should be changed when using file-names or
            directories containing non-ASCII characters.
            </para>
            <para>
            Officially the FTP protocol (RFC959) only supports 7-bit ASCII characters. This 
            means that file and directory names transferred across the control channel can 
            only be ASCII. Fortunately, most servers actually support at least 8-bit ASCII. However 
            there is no standard for what extended ASCII encoding is to be used. As a result, the meaning of 
            characters 0 to 127 is well defined, but the meaning of characters 128 to 255 
            varies from one server to the other. One server might interpret character 
            193 as an accented A, whereas another might interpret it as an accented E. 
            </para>
            <para>
            By default, <c>FTPConnection</c> supports 7-bit ASCII. If it encounters a character
            whose code is 128 to 255 it will represent it as a question mark. This property 
            allows the developer to select 
            an 8-bit character encoding that matches that of the server. Unfortunately many 
            servers do not state what 8-bit ASCII character set they are using, so it is 
            often necessary to use trial and error to find out. Some common character 
            encodings to try for western European languages are <c>Windows-1252</c> and <c>ISO-8859-1</c>.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.SynchronizePassiveConnections">
            <summary> 
            For cases where the FTP server does not properly manage PASV connections,
            it may be necessary to synchronize the creation of passive data sockets.
            It has been reported that some FTP servers (such as those at Akamai) 
            appear to get confused when multiple FTP clients from the same IP address
            attempt to connect at the same time (the server sends the same port number to multiple clients). 
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.FilePathEncoding">
            <summary>
            The character-encoding to use when dealing with file- and directory-paths.
            </summary>
            <remarks>
            The default is <c>ASCII</c>, but should be changed when communicating with FTP servers
            that have file-names containing non-ASCII characters
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.ParsingCulture">
            <summary>The culture for parsing file listings.</summary>
            <remarks>
            <para>
            The <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.GetFileInfos(System.String)"/> method parses the file listings returned.  The names of the file
            can contain a wide variety of characters, so it is sometimes necessary to set this
            property to match the character-set used on the server.
            </para>
            <para>
            The default is <c>Invariant Language (Invariant Country)</c>.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.FileInfoParser">
            <summary>
            Override the chosen file factory with a user created one - meaning
            that a specific parser has been selected
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.TimeDifference">
            <summary>
            [FTP/FTPS Only] Time difference between server and client (relative to client).
            </summary>
            <remarks>
            The time-difference is relative to the server such that, for example, if the server is
            in New York and the client is in London then the difference would be -5 hours 
            (ignoring daylight savings differences).  This property only applies to FTP and FTPS.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.TimeIncludesSeconds">
            <summary>
            [FTP/FTPS Only] Indicates whether seconds were included in the most recent directoy listing.
            </summary>
            <remarks>
            Some FTP and FTPS servers don't return file-modified times that include seconds.  This flag
            indicates whether or not the most recent directory listing included seconds.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.LastValidReply">
            <summary>The latest valid reply from the server.</summary>
            <value>
            Reply object encapsulating last valid server response.
            </value>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.WelcomeMessage">
            <summary>
            Server's welcome message.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.TransferType">
            <summary>The current file transfer type (BINARY or ASCII).</summary>
            <value>Transfer-type to be used for uploads and downloads.</value>
            <remarks>When the transfer-type is set to <c>BINARY</c> then files
            are transferred byte-for-byte such that the transferred file will
            be identical to the original.
            When the transfer-type is set to <c>ASCII</c> then end-of-line
            characters will be translated where necessary between Windows and
            UNIX formats.</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.UserName">
            <summary>User-name of account on the server.</summary>
            <value>The user-name of the account the FTP server that will be logged into upon connection.</value>
            <remarks>
            <para>This property must be set before a connection with the server is made.</para>
            <para><example>The following example illustrates an FTP client
            connecting to a server:</example>
            <code>
            FTPConnection ftp = new FTPConnection();
            ftp.ServerAddress = "my-server-name";
            ftp.UserName = "my-username";
            ftp.Password = "my-password";
            ftp.Connect();
            ftp.Close();
            </code></para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.Password">
            <summary>Password of account on the server.</summary>
            <value>The password of the account the FTP server that will be logged into upon connection.</value>
            <remarks>
            <para>>This property must be set before a connection with the server is made.</para>
            <para><example>The following example illustrates an FTP client
            connecting to a server:</example>
            <code>
            FTPConnection ftp = new FTPConnection();
            ftp.ServerAddress = "my-server-name";
            ftp.UserName = "my-username";
            ftp.Password = "my-password";
            ftp.Connect();
            ftp.Close();
            </code></para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.AccountInfo">
            <summary>Account information string.</summary>
            <value>The string supplied for use with the FTP ACCT command.</value>
            <remarks>
            <para>This property must be set before a connection with the server is made. It
            is used to supply optional information to the FTP server, and should only be set
            if it is known to be required.</para>
            <para>
            Some proxy servers use this value for their proxy password.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.AutoLogin">
            <summary>Determines if the component will automatically log in upon connection.</summary>
            <remarks>
            <para>
            If this flag if <c>true</c> (the default) then the component will automatically attempt 
            to log in when the <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.Connect"/> method is called.  The <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.UserName"/> and 
            <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.Password"/> (if required) properties should be set previously.
            </para>
            <para>
            If the flag is <c>false</c> then the component will not log in until the <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.Login"/>
            method is called.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.AutoFeatures">
            <summary>Determines if the component will automatically send the FEAT command.</summary>
            <remarks>
            <para>
            If this flag if <c>true</c> then the component will automatically send the 
            FEAT command after logging in when the <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.Connect"/> method is called. This is
            used to detect if UTF-8 is supported, amongst other things.
            </para>
            <para>
            If the flag is <c>false</c> (the default) then the component will not send the FEAT command after logging
            in.
            </para>
            <para>
            The default has been changed to false because on some FTP servers, calling FEAT affects the
            state of the server - there are problems creating passive sockets for listings and transfers. 
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.EventsEnabled">
            <summary>Determines whether or not events are currently enabled.</summary>
            <value>The <c>EventsEnabled</c> flag determines whether or not events are currently enabled.
            If the flag is <c>true</c> (the default) then events will fire as appropriate.
            If the flag is <c>false</c> then no events will be fired by this object.</value>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.UseGuiThreadIfAvailable">
            <summary>Determines whether or not event-handlers will be run on the GUI thread if one is available.</summary>
            <value>The <c>UseGuiThreadIfAvailable</c> flag determines whether or not event-handlers will be run 
            on the GUI thread if one is available.
            If the flag is <c>true</c> (the default) then they will be run on the GUI thread if one is available 
            (only for Windows Forms applications).
            If the flag is <c>false</c> then they will be run on a worker-thread.</value>
            <remarks>
            It is important to note that if event-handlers are run on a worker-thread then Windows Forms
            related operations will usually fail.  Since such operations are commonly used in event-handlers,
            the default is <c>true</c>.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.LogLevel">
            <summary>
            Determines the level of logs written.
            </summary>
            <remarks>
            <para>
            Note that no logs will be written unless <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.LogToConsole"/> is
            <c>true</c> or <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.LogFile"/> is set.
            </para>
            <para>
            This method wraps <see cref="P:EnterpriseDT.Util.Debug.Logger.CurrentLevel"/> so setting either
            is equivalent to setting the other.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.LogFile">
            <summary>
            Name of file to which logs will be written.
            </summary>
            <remarks>
            <para>
            This method wraps <see cref="P:EnterpriseDT.Util.Debug.Logger.PrimaryLogFile"/> so setting either
            is equivalent to setting the other.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.LogToConsole">
            <summary>
            Determines whether or not logs will be written to the console.
            </summary>
            <remarks>
            <para>
            This method wraps <see cref="P:EnterpriseDT.Util.Debug.Logger.LogToConsole"/> so setting either
            is equivalent to setting the other.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.LogToTrace">
            <summary>
            Determines whether or not logs will be written using <see cref="T:System.Diagnostics.Trace"/>.
            </summary>
            <remarks>
            <para>
            This method wraps <see cref="P:EnterpriseDT.Util.Debug.Logger.LogToTrace"/> so setting either
            is equivalent to setting the other.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.ActiveClient">
            <summary>
            Reference to the currently active <see cref="T:EnterpriseDT.Net.Ftp.IFileTransferClient"/>.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.LastTransferCancelled">
            <summary>
            Indicates whether or not the most recent transfer was cancelled.
            </summary>
            <value>Flag is <c>true</c> if the most recent transfer was cancelled and <c>false</c> otherwise.</value>
            <remarks>
            Download and upload operations can be cancelled by the 
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.CancelTransfer"/> method.  This property will be <c>true</c> if 
            this method was called during the the most recent transfer and <c>false</c> otherwise.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.LogTag">
            <summary>
            Logging tag
            </summary>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.Connecting">
            <summary>Occurs when the component is connecting to the server.</summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.Connected">
            <summary>Occurs when the component has connected to the server.</summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.LoggingIn">
            <summary>Occurs when the component is about to log in.</summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.LoggedIn">
            <summary>Occurs when the component has logged in.</summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.Closing">
            <summary>Occurs when the component is about to close its connection to the server.</summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.Closed">
            <summary>Occurs when the component has closed its connection to the server.</summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.Uploading">
            <summary>Occurs when a file is about to be uploaded to the server.</summary>
            <remarks>The <see cref="T:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs"/> argument passed to
            handlers has a <see cref="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.Cancel"/> property,
            that, if set to <c>true</c> will result in the transfer being cancelled.</remarks>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.Uploaded">
            <summary>Occurs when a file has been uploaded to the server.</summary> 
            <remarks>The <see cref="T:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs"/> argument passed to
            handlers has a <see cref="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.Cancel"/> property,
            that indicates whether or not the transfer was cancelled.</remarks>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.Downloading">
            <summary>Occurs when a file is about to be downloaded from the server.</summary> 
            <remarks>
            <para>The <see cref="T:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs"/> argument passed to
            handlers has a <see cref="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.Cancel"/> property,
            that, if set to <c>true</c> will result in the transfer being cancelled.</para>
            
            <para>If the <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.DownloadFile(System.String,System.String)"/> method was used to initiate the
            transfer then the <see cref="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.LocalPath"/> property may be
            set in order to change the path of the downloaded file.</para>
            </remarks>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.Downloaded">
            <summary>Occurs when a file has been downloaded from the server.</summary> 
            <remarks>The <see cref="T:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs"/> argument passed to
            handlers has a <see cref="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.Cancel"/> property,
            that indicates whether or not the transfer was cancelled.</remarks>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.BytesTransferred">
            <summary>Occurs every time a specified number of bytes of data have been transferred.</summary>
            <remarks>The property, <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.TransferNotifyInterval"/>, determines
            the number of bytes sent between notifications.</remarks>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.RenamingFile">
            <summary>Occurs when a remote file is about to be renamed.</summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.RenamedFile">
            <summary>Occurs when a remote file has been renamed.</summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.Deleting">
            <summary>Occurs when a file is about to be deleted from the server.</summary> 
            <remarks>The <see cref="T:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs"/> argument passed to
            handlers has a <see cref="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.Cancel"/> property,
            that, if set to <c>true</c> will result in the deletion being cancelled.</remarks>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.Deleted">
            <summary>Occurs when a file has been deleted from the server.</summary> 
            <remarks>The <see cref="T:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs"/> argument passed to
            handlers has a <see cref="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.Cancel"/> property,
            that indicates whether or not the deletion was cancelled.</remarks>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.DirectoryChanging">
            <summary>Occurs when the server directory is about to be changed.</summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.DirectoryChanged">
            <summary>Occurs when the server directory has been changed.</summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.ServerDirectoryChanging">
            <summary>Occurs when the server directory is about to be changed.</summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.ServerDirectoryChanged">
            <summary>Occurs when the server directory has been changed.</summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.LocalDirectoryChanging">
            <summary>Occurs when the local directory is about to be changed.</summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.LocalDirectoryChanged">
            <summary>Occurs when the local directory has been changed.</summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.DirectoryListing">
            <summary>Occurs when a directory listing operations is commenced.</summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.DirectoryListed">
            <summary>Occurs when a directory listing operations is completed.</summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.CreatingDirectory">
            <summary>Occurs when a directory is about to be created on the server.</summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.CreatedDirectory">
            <summary>Occurs when a local directory has been created on the server.</summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.DeletingDirectory">
            <summary>Occurs when a directory is about to be deleted on the server.</summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.DeletedDirectory">
            <summary>Occurs when a local directory has been deleted on the server.</summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.CommandSent">
            <summary>Occurs when a command is sent to the server.</summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.ReplyReceived">
            <summary>Occurs when a reply is received from the server.</summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.PropertyChanged">
            <summary>Occurs when a property is changed.</summary> 
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.KEEP_ALIVE_PERIOD_WARN">
            <summary>Number of seconds below which the user will be warned about a low KeepAlivePeriodSecs.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.DEFAULT_RETRY_COUNT">
            <summary>Default number of retries.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.DEFAULT_RETRY_DELAY">
            <summary>Default retry delay.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.log">
            <summary>Logging object</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.pool">
            <summary>
            Connection pool.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.poolSettings">
            <summary>
            Stores settings for the connection pool.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.currentTask">
            <summary>
            Current asynchronous task (<c>null</c> if none).
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.currentTaskLock">
            <summary>
            Lock for <c>currentTask</c>.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.taskCounter">
            <summary>
            Counter for async ops.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.taskCounterLock">
            <summary>
            Lock for the async op counter.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.gdataClient">
            <summary>
            Reference to HttpClient which does all the Google Data work.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.httpClient">
            <summary>
            Reference to HttpClient which does all the HTTP work.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.rops">
            <summary>  
            Helper class for performing recursive ops
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.detectTransferMode">
            <summary>  
            Do we detect transfer mode when transferring files?
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.licenseProps">
            <summary>  
            Licensing check
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.key">
            <summary>
            License key.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.owner">
            <summary>
            License owner.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.simpleXmlProperties">
            <summary>
            List of names of properties that may be serialized using the <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.SerializeProperty(System.Xml.XmlWriter,System.String)"/> method.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.keepConnectionAliveIdle">
            <summary>
            Are we keeping the connection alive when idle?
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.keepConnectionAliveTransfer">
            <summary>
            Are we keeping the connection alive when transferring?
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.keepAliveTime">
            <summary>
            Seconds between "keep alive" commands.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.keepAliveThread">
            <summary>
            Thread on which keep-alive runs.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.keepAliveRunning">
            <summary>
            Indicates whether or not the keepAliveThread is currently running.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.keepAliveThreadCount">
            <summary>
            Counts the number of keep-alive threads that have been created.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.keepAliveThreadCountMutex">
            <summary>
            Used for mutexing access to keepAliveThreadCount.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.lastReplyTime">
            <summary>
            Time of last reply.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.loadingProperties">
            <summary>
            True if properties are currently being loaded.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.synchronizer">
            <summary>
            Synchronizer used for all synchronization operations.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.defaultSyncRules">
            <summary>
            Default synchronization rules.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.retryCount">
            <summary>
            Number of times to retry an operation before giving up.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.retryDelay">
            <summary>
            Number of milliseconds to wait before retrying.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.integrityCheckTransfers">
            <summary>
            Do integrity checking?
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.forceConnectModeExtensions">
            <summary>
            Force use of EPRT and EPSV?
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.compressionPreferred_">
            <summary>
            Is compression preferred?
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.crcSupported">
            <summary>
            Is CRC supported?
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.isDirCached">
            <summary>
            Should directories be cached?
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.dirCache">
            <summary>
            Cache of directory listings
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Constructs a <c>ExFTPConnection</c> object and places it in the given container.
            </summary>
            <param name="container">Component container</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.#ctor">
            <summary>
            Initializes a new instance of the <c>ExFTPConnection</c> class.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.#ctor(EnterpriseDT.Net.Ftp.ExFTPClient)">
            <summary>
            Create an <c>ExFTPConnection</c> using the given FTP client.
            </summary>
            <param name="ftpClient"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes a connection object from the given <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.
            </summary>
            <param name="information">Serialization information.</param>
            <param name="context">Serialization context.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Clone">
            <summary>
            Creates a new <c>ExFTPConnection</c> that is a copy of the current instance. 
            </summary>
            <returns>A new <c>ExFTPConnection</c> whose properties match those of the current instance.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.CopyProperties(EnterpriseDT.Net.Ftp.ExFTPConnection)">
            <summary>
            Copies the properties of the given source <c>ExFTPConnection</c> into this instance.
            </summary>
            <param name="source"><c>ExFTPConnection</c> from which properties should be copied</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Dispose(System.Boolean)">
            <summary> 
            Close the connection if it is open.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Connect">
            <summary>Connect to the FTP server and (if <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.AutoLogin"/> is set) log into the server.</summary>
            <remarks>
            <para>If this component is being used on a form or within another component then
            it is a good idea to use the "Connection Tester" to test the property settings.</para>
            
            <para>Connections are not opened until the <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Connect"/> method is called.
            Connection-, Authentication-, and Security-related properties should be set
            prior to opening the connection.</para>
            
            <para>At a minimum, the following properties should be set prior to connection.
            <list type="table">
              <listheader>
            	<term>Property</term>
            	<term>Description</term>
              </listheader>
              <item>
                <term><see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.Protocol">Protocol</see></term>
                <description>The <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.Protocol">protocol</see> to use: 
                SFTP, explicit FTPS, implicit FTPS or plain FTP.</description>
              </item>
              <item>
                <term><see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.ServerAddress">ServerAddress</see></term>
                <description>The domain-name or IP-address of the server.</description>
              </item>
              <item>
                <term><see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.UserName">UserName</see></term>
                <description>User-name of account on the server.</description>
              </item>
              <item>
                <term><see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.Password">Password</see></term>
                <description>Password of account on the server.</description>
              </item>
            </list></para>
            
            <para>If <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.AutoLogin"/> is <c>true</c> then the 
            component will attempt to log in immediately after successfully connecting.</para>
            
            <para>This method will throw an <c>FTPException</c> if the component is already 
            connected to the server.</para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.PostLogin">
            <summary>
            Called after the user has been successfully logged in.
            </summary>
            <remarks>
            Sets the transfer-type and the current working directory. If
            AutoLogin is set to false, this method should be called
            explicitly to initialise the client state.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.PerformAutoLogin">
            <summary>Attempt to log into the server if <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.AutoLogin"/> is on.</summary>
            <remarks>A login attempt will take place only if the <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.UserName"/> property
            and (optionally) the <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.Password"/> property have been set.</remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.AbortAsynchronous(System.Boolean)">
            <summary>
            Aborts all queued asynchronous operations.
            </summary>
            <remarks>
            This method clears the queue of pending asynchronous operations (i.e. those initiated
            using the BeginXXX methods).  If <c>interruptCurrent</c> is <c>true</c> then any
            transfer currently being performed is cancelled.
            </remarks>
            <param name="interruptCurrentTransfer">Causes any current transfer to be cancelled.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Close(System.Boolean)">
            <summary>Quit the FTP session.</summary> 
            <remarks>If <c>abruptClose</c> is <c>true</c> then the session will be closed immediately 
            by closing the control socket without sending the <c>QUIT</c> command, otherwise the
            session will be closed by sending a <c>QUIT</c> command before closing the socket.</remarks>
            <param name="abruptClose">Closes session abruptly (see comments).</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginConnect(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to connect to an FTP server.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginConnect</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.Connect"/>.</para>
            </remarks>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous connection.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndConnect(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginConnect(System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginConnect(System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginConnect(System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginConnect(System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndConnect</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginClose(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to close the FTP connection.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginClose</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.Close"/>.</para>
            </remarks>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous closure.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginClose(System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to close the FTP connection.
            </summary>
            <remarks>
            <para>If <c>abruptClose</c> is <c>true</c> then the session will be closed immediately 
            by closing the control socket without sending the <c>QUIT</c> command, otherwise the
            session will be closed by sending a <c>QUIT</c> command before closing the socket.</para>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginClose</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.Close"/>.</para>
            </remarks>
            <param name="abruptClose">Closes session abruptly (see comments).</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous closure.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndClose(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginClose(System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginClose(System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginClose(System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginClose(System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndClose</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginLogin(System.AsyncCallback,System.Object)">
            <summary>
            [FTP/FTPS Only] Begins an asynchronous request to log into an account on the FTP server using 
            <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.UserName"/> and <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.Password"/>.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginLogin</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.Login"/>.</para>
            </remarks>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous login.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndLogin(System.IAsyncResult)">
            <summary>
            [FTP/FTPS Only] Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginLogin(System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginLogin(System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginLogin(System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginLogin(System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndLogin</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginSendUserName(System.String,System.AsyncCallback,System.Object)">
            <summary>
            [FTP/FTPS Only] Begins an asynchronous request to supply the user-name to log into an account on the FTP server.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginSendUserName</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.SendUserName(System.String)"/>.</para>
            </remarks>
            <param name="user">User-name of the client's account on the server.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous send.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndSendUserName(System.IAsyncResult)">
            <summary>
            [FTP/FTPS Only] Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginSendUserName(System.String,System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginSendUserName(System.String,System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginSendUserName(System.String,System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginSendUserName(System.String,System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndSendUserName</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginSendPassword(System.String,System.AsyncCallback,System.Object)">
            <summary>
            [FTP/FTPS Only] Begins an asynchronous request to supply the password for the previously supplied
            user-name to log into the FTP server.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginSendPassword</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.SendPassword(System.String)"/>.</para>
            </remarks>
            <param name="password">Password of the client's account on the server.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous send.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndSendPassword(System.IAsyncResult)">
            <summary>
            [FTP/FTPS Only] Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginSendPassword(System.String,System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginSendPassword(System.String,System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginSendPassword(System.String,System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginSendPassword(System.String,System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndSendPassword</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Login">
            <summary>Log into an account on the FTP server using <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.UserName"/> and <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.Password"/>.</summary>
            <remarks>This is only necessary if <see cref="!:AutoLogin"/> is <c>false</c>.</remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.SendUserName(System.String)">
            <summary>
            Supply the user-name to log into an account on the FTP server. 
            Must be followed by the <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.SendPassword(System.String)"/> method.
            </summary>
            <remarks>This is only necessary if <see cref="!:AutoLogin"/> is <c>false</c>.</remarks>
            <param name="user">User-name of the client's account on the server.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.SendPassword(System.String)">
            <summary>
            Supply the password for the previously supplied
            user-name to log into the FTP server. Must be
            preceeded by the <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.SendUserName(System.String)"/> method
            </summary>
            <remarks>This is only necessary if <see cref="!:AutoLogin"/> is <c>false</c>.</remarks>
            <param name="loginPassword">Password of the client's account on the server.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.ResumeTransfer">
            <summary>Make the next file transfer (upload or download) resume.</summary>
            <remarks>
            <para>
            For uploads, the
            bytes already transferred are skipped over, while for downloads, if 
            writing to a file, it is opened in append mode, and only the bytes
            required are transferred.
            </para>
            <para>
            Currently resume is only supported for BINARY transfers (which is
            generally what it is most useful for). 
            </para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.ResumeNextTransfer">
            <summary>Make the next file transfer (upload or download) resume.</summary>
            <remarks>
            <para>
            For uploads, the
            bytes already transferred are skipped over, while for downloads, if 
            writing to a file, it is opened in append mode, and only the bytes
            required are transferred.
            </para>
            <para>
            Currently resume is only supported for BINARY transfers (which is
            generally what it is most useful for). 
            </para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.ResumeNextDownload(System.Int64)">
            <summary>Make the next download resume at a specific point.</summary>
            <remarks>
            <para>
            This resume method allows the resume offset to be set explicitly for downloads. 
            Offset bytes are skipped before downloading the file.
            </para>
            <para>
            Currently resume is only supported for BINARY transfers (which is
            generally what it is most useful for). 
            </para>
            <para>
            If the next transfer is an upload, this setting is cancelled. 
            </para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.CancelTransfer">
            <summary>Cancels the current transfer.</summary>
            <remarks>
            <para>This method is generally called from a separate
            thread. Note that this may leave partially written files on the
            server or on local disk, and should not be used unless absolutely
            necessary. The server is not notified.</para>
            <para>Any asynchronous transfers currently queued cancelled also.</para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.CancelTask(System.IAsyncResult)">
            <summary>
            Cancels the given asynchronous task.
            </summary>
            <remarks>
            <para>The task will always be removed if it isn't currently executing.  If the task
            is currently executing then it can only be cancelled if it is a file-transfer
            or a directory-listing.</para>
            </remarks>
            <param name="task">Task to be cancelled.  Pass in the object returned by a connection's BeginXYZ() method.</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.CancelTask(System.Int32)">
            <summary>
            Cancels the asynchronous task with the given ID.
            </summary>
            <remarks>
            <para>The task will always be removed if it isn't currently executing.  If the task
            is currently executing then it can only be cancelled if it is a file-transfer
            or a directory-listing.</para>
            </remarks>
            <param name="task">ID of task to be cancelled.  Pass in the object returned by a connection's BeginXYZ() method.</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginResumeTransfer(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to make the next file transfer (upload or download) resume.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginResumeTransfer</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.ResumeTransfer"/>.</para>
            </remarks>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous resumption.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndResumeTransfer(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginResumeTransfer(System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginResumeTransfer(System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginResumeTransfer(System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginResumeTransfer(System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndResumeTransfer</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.TransferFileFXP(EnterpriseDT.Net.Ftp.ExFTPConnection,System.String,System.String)">
            <summary>
            Transfer a file between FTP servers using FXP.
            </summary>
            <remarks>
            <para>
            For this to succeed, both FTP servers must have FXP
            enabled. The source (which is this connection's server)
            and destination FTPClients must already
            be connected to their FTP servers when this method is called.
            </para>
            <para>
            The file will be transferred in whatever mode is currently set, i.e.
            BINARY or ASCII.
            </para>
            <para>
            The file must be in the current working directory of the source, and will
            be placed in the current working directory of the destination.
            </para>
            </remarks>
            <param name="destination">Connection to the destination server.</param>
            <param name="sourceFile">name of file on source server to transfer</param>
            <param name="destinationFile">name of file to be written to destination server</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.UploadStream(System.IO.Stream,System.String)">
             <summary>
             Upload a stream of data to the FTP server in the current working directory.
             </summary>
             <remarks>
             <para>The stream is closed after the transfer is complete if
             <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.CloseStreamsAfterTransfer"/> is <c>true</c> (the default) and are left
             open otherwise.  If the stream is left open the its position will be at the
             end of the stream.  Use <see cref="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)"/> to change the
             position if required.</para>
             <para><example>The following example uploads the contents of 
             a <see cref="T:System.IO.MemoryStream"/> to the server and downloads the
             same file into another MemoryStream:</example>
             <code>
              // build StringStream (defined below) for "Hello world"
             byte[] bytes = Encoding.ASCII.GetBytes("Hello world");
             MemoryStream inStr = new MemoryStream(bytes);
            
             // upload the stream to a file on the server
             ftpConnection.UploadStream(inStr, "helloworld.txt");
             inStr.Close();
            
             // create a MemoryStream and download into it
             MemoryStream outStr = new MemoryStream();
             ftpConnection.DownloadStream(outStr, "helloworld.txt");
             outStr.Seek(0, SeekOrigin.Begin);
             string str = Encoding.GetString(outStr.GetBuffer());
             Console.WriteLine(str);
             outStr.Close();
             </code></para>
             </remarks>
             <param name="srcStream">Input stream of data to put.</param>
             <param name="remoteFile">Name of remote file in current working directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.UploadByteArray(System.Byte[],System.String)">
             <summary>
             Upload an array of bytes to the FTP server in the current working directory.
             </summary>
             <para><example>The following example uploads the string <c>"Hello world"</c>
             to the server into a file called <c>helloworld.txt</c>:</example>
             <code>
                // get data to be transferred
               string s = "Hello world";
               byte[] bytes = Encoding.ASCII.GetBytes(s);
            
               // upload the byte-array to a file on the server
               ftpConnection.UploadByteArray(bytes, "helloworld.txt");
             </code></para>
             <param name="bytes">Array of bytes to put.</param>
             <param name="remoteFile">Name of remote file in current working directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.UploadStream(System.IO.Stream,System.String,System.Boolean)">
            <summary>
            Upload a stream of data to the FTP server in the current working directory.  Allows appending
            if current file exists.
            </summary>
            <remarks>
            The stream is closed after the transfer is complete if
            <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.CloseStreamsAfterTransfer"/> is <c>true</c> (the default) and are left
            open otherwise.
            </remarks>
            <param name="srcStream">Input stream of data to put.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="append"><c>true</c> if appending, <c>false</c> otherwise.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.UploadByteArray(System.Byte[],System.String,System.Boolean)">
            <summary>
            Upload data to the FTP server in the current working directory. Allows
            appending if current file exists.
            </summary>
            <param name="bytes">Array of bytes to put.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="append"><c>true</c> if appending, <c>false</c> otherwise.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.UploadFile(System.String,System.String,System.Boolean)">
            <summary>
            Upload a local file to the FTP server in the current working directory. Allows appending
            if current file exists.
            </summary>
            <param name="localPath">Path of the local file.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="append"><c>true</c> if appending, <c>false</c> otherwise.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.SyncUploadFile(System.String,System.String,EnterpriseDT.Net.Ftp.WriteMode)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="localPath"></param>
            <param name="remoteFile"></param>
            <param name="append"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.UploadDirectory(System.String,System.String)">
            <summary>
            Uploads the local directory (and its subdirectories) to the remote directory.
            </summary>
            <remarks>
            <para>The remote directory will be created if it doesn't already exist.</para>
            <para><see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.UploadMultiple(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)"/> should be used if 
            more control over which files are transferred is required.</para>
            </remarks>
            <param name="localDirectory">Local directory</param>
            <param name="remoteDirectory">Remote directory (will be created if it doesn't already exist)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.UploadMultiple(System.String,System.String)">
            <summary>
            Put multiple files from the specified local directory into the current remote directory.
            </summary>
            <remarks>
            <para>Wildcard expression use <c>'?'</c> to match any single character and <c>'*'</c>
            to match multiple characters.  For example, <c>"file*.txt"</c> will match any file-name
            starting with <c>"file"</c> and having an extension <c>".txt"</c>.</para>
            <para>Note that if the <c>LocalDirectory</c> property is set and <c>localDirectory</c> is a relative path,
            it will be combined with the <c>LocalDirectory</c> to find the target directory.
            </para>
            </remarks>
            <param name="localDirectory">local directory to get files from</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.SyncUploadMultiple(System.String,System.String)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="localDirectory"></param>
            <param name="wildcard"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.UploadMultiple(System.String,EnterpriseDT.Net.Ftp.FileFilter)">
            <summary>
            Put multiple files from the specified local directory into the current remote directory.
            </summary>
            <remarks><para>Note that if the <c>LocalDirectory</c> property is set and <c>localDirectory</c> is a relative path,
            it will be combined with the <c>LocalDirectory</c> to find the target directory.
            </para>
            </remarks>
            <param name="localDirectory">local directory to get files from</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.SyncUploadMultiple(System.String,EnterpriseDT.Net.Ftp.FileFilter)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="localDirectory"></param>
            <param name="filter"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.UploadMultiple(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Put multiple files from the specified local directory into the specified remote directory.
            </summary>
            <remarks><para>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories.</para>
            <para>Wildcard expression use <c>'?'</c> to match any single character and <c>'*'</c>
            to match multiple characters.  For example, <c>"file*.txt"</c> will match any file-name
            starting with <c>"file"</c> and having an extension <c>".txt"</c>.</para>
            <para>Note that if the <c>LocalDirectory</c> property is set and <c>localDirectory</c> is a relative path,
            it will be combined with the <c>LocalDirectory</c> to find the target directory.
            </para>
            </remarks>
            <param name="localDirectory">local directory name</param>
            <param name="remoteDirectory">remote directory name</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="includeSubDirs">if <c>true</c>, subdirectories are put</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.SyncUploadMultiple(System.String,System.String,System.String,System.Boolean)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="localDirectory"></param>
            <param name="remoteDirectory"></param>
            <param name="wildcard"></param>
            <param name="includeSubDirs"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.UploadMultiple(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary>
            Put multiple files from the specified local directory into the specified remote directory.
            </summary>
            <remarks><para>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories.</para>
            <para>Wildcard expression use <c>'?'</c> to match any single character and <c>'*'</c>
            to match multiple characters.  For example, <c>"file*.txt"</c> will match any file-name
            starting with <c>"file"</c> and having an extension <c>".txt"</c>.</para>
            <para>Note that if the <c>LocalDirectory</c> property is set and <c>localDirectory</c> is a relative path,
            it will be combined with the <c>LocalDirectory</c> to find the target directory.
            </para>
            </remarks>
            <param name="localDirectory">local directory name</param>
            <param name="remoteDirectory">remote directory name</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="includeSubDirs">if <c>true</c>, subdirectories are put</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.SyncUploadMultiple(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="localDirectory"></param>
            <param name="remoteDirectory"></param>
            <param name="filter"></param>
            <param name="includeSubDirs"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginTransferFileFXP(EnterpriseDT.Net.Ftp.ExFTPConnection,System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously transfer a file between FTP servers using FXP.
            </summary>
            <remarks>
            <para>
            For this to succeed, both FTP servers must have FXP
            enabled. The source (which is this connection's server)
            and destination FTPClients must already
            be connected to their FTP servers when this method is called.
            </para>
            <para>
            The file will be transferred in whatever mode is currently set, i.e.
            BINARY or ASCII.
            </para>
            <para>
            The file must be in the current working directory of the source, and will
            be placed in the current working directory of the destination.
            </para>
            </remarks>
            <param name="destination">Connection to the destination server.</param>
            <param name="sourceFile">name of file on source server to transfer</param>
            <param name="destinationFile">name of file to be written to destination server</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous upload.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndTransferFileFXP(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in the <c>BeginTransferFileFXP</c> method.
            </summary>
            <remarks>
            <para>Before calling <c>BeginTransferFileFXP</c>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <c>BeginTransferFileFXP</c> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <c>BeginTransferFileFXP</c> method as a parameter.  This parameter may then be
            passed to the <c>EndTransferFileFXP</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginUploadFile(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to upload a local file to the FTP server in the current working directory.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginUploadFile</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.UploadFile(System.String,System.String)"/>.</para>
            </remarks>
            <param name="localPath">Local file to put data in.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous upload.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginUploadFile(System.String,System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to upload a local file to the FTP server in the 
            current working directory. Allows appending if current file exists.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginUploadFile</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.UploadFile(System.String,System.String,System.Boolean)"/>.</para>
            </remarks>
            <param name="localPath">Path of the local file.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="append"><c>true</c> if appending, <c>false</c> otherwise.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous upload.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginUploadFile(System.String,System.String,EnterpriseDT.Net.Ftp.WriteMode,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to upload a local file to the FTP server in the 
            current working directory. Allows appending if current file exists.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginUploadFile</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.UploadFile(System.String,System.String,System.Boolean)"/>.</para>
            </remarks>
            <param name="localPath">Path of the local file.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="writeMode">Overwrite, Append or Resume.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous upload.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginUploadDirectory(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to upload the local directory (and its subdirectories) to the remote directory.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginUploadDirectory</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.UploadDirectory(System.String,System.String)"/>.</para>
            </remarks>
            <param name="localDirectory">Local directory</param>
            <param name="remoteDirectory">Remote directory (will be created if it doesn't already exist)</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous upload.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndUploadDirectory(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in one of the <c>BeginUploadFile</c> methods.
            </summary>
            <remarks>
            <para>Before calling <c>BeginUploadDirectory</c>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <c>BeginUploadDirectory</c> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <c>BeginUploadDirectory</c> method as a parameter.  This parameter may then be
            passed to the <c>EndUploadDirectory</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <seealso cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginUploadDirectory(System.String,System.String,System.AsyncCallback,System.Object)"/>
            <seealso cref="!:BeginUploadDirectory(string, string, bool, AsyncCallback, object)"/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginUploadMultiple(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to upload multiple files to the FTP server. 
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginUploadMultiple</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.UploadMultiple(System.String,System.String)"/>.</para>
            </remarks>
            <param name="localDirectory">local directory to get files from</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous upload.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginUploadMultiple(System.String,EnterpriseDT.Net.Ftp.FileFilter,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to upload multiple files to the FTP server. 
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginUploadMultiple</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.UploadMultiple(System.String,EnterpriseDT.Net.Ftp.FileFilter)"/>.</para>
            </remarks>
            <param name="localDirectory">local directory to get files from</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous upload.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginUploadMultiple(System.String,System.String,System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to upload multiple files to the FTP server. 
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginUploadMultiple</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.UploadMultiple(System.String,System.String,System.String,System.Boolean)"/>.</para>
            </remarks>
            <param name="localDirectory">local directory name</param>
            <param name="remoteDirectory">remote directory name</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="includeSubDirs">if <c>true</c>, subdirectories are put</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous upload.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginUploadMultiple(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to upload multiple files to the FTP server. 
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginUploadMultiple</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.UploadMultiple(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)"/>.</para>
            </remarks>
            <param name="localDirectory">local directory name</param>
            <param name="remoteDirectory">remote directory name</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="includeSubDirs">if <c>true</c>, subdirectories are put</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous upload.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndUploadFile(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in one of the <c>BeginUploadFile</c> methods.
            </summary>
            <remarks>
            <para>Before calling <c>BeginUploadFile</c>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <c>BeginUploadFile</c> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <c>BeginUploadFile</c> method as a parameter.  This parameter may then be
            passed to the <c>EndUploadFile</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <seealso cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginUploadFile(System.String,System.String,System.AsyncCallback,System.Object)"/>
            <seealso cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginUploadFile(System.String,System.String,System.Boolean,System.AsyncCallback,System.Object)"/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndUploadMultiple(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in one of the <c>BeginUploadMultiple</c> methods.
            </summary>
            <remarks>
            <para>Before calling <c>BeginUploadMultiple</c>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <c>BeginUploadMultiple</c> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <c>BeginUploadMultiple</c> method as a parameter.  This parameter may then be
            passed to the <c>EndUploadMultiple</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <seealso cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginUploadMultiple(System.String,System.String,System.AsyncCallback,System.Object)"/>
            <seealso cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginUploadMultiple(System.String,EnterpriseDT.Net.Ftp.FileFilter,System.AsyncCallback,System.Object)"/>
            <seealso cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginUploadMultiple(System.String,System.String,System.String,System.Boolean,System.AsyncCallback,System.Object)"/>
            <seealso cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginUploadMultiple(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean,System.AsyncCallback,System.Object)"/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginUploadStream(System.IO.Stream,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to upload a stream of data to the FTP server in the current working directory.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginUploadStream</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.UploadStream(System.IO.Stream,System.String)"/>.</para>
            </remarks>
            <param name="srcStream">Input stream of data to put.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous upload.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginUploadStream(System.IO.Stream,System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to upload a stream of data to the FTP server 
            in the current working directory.  
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginUploadStream</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.UploadStream(System.IO.Stream,System.String,System.Boolean)"/>.</para>
            </remarks>
            <param name="srcStream">Input stream of data to put.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="append"><c>true</c> if appending, <c>false</c> otherwise.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous upload.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndUploadStream(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in one of the <c>BeginUploadStream</c> methods.
            </summary>
            <remarks>
            <para>Before calling <c>BeginUploadStream</c>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <c>BeginUploadStream</c> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <c>BeginUploadStream</c> method as a parameter.  This parameter may then be
            passed to the <c>EndUploadStream</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <seealso cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginUploadStream(System.IO.Stream,System.String,System.AsyncCallback,System.Object)"/>
            <seealso cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginUploadStream(System.IO.Stream,System.String,System.Boolean,System.AsyncCallback,System.Object)"/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginUploadByteArray(System.Byte[],System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to upload an array of bytes to the FTP server in the current working directory.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginUploadByteArray</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.UploadByteArray(System.Byte[],System.String)"/>.</para>
            </remarks>
            <param name="bytes">Array of bytes to put.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous upload.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginUploadByteArray(System.Byte[],System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to upload data to the FTP server in the current working directory.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginUploadByteArray</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.UploadByteArray(System.Byte[],System.String,System.Boolean)"/>.</para>
            </remarks>
            <param name="bytes">Array of bytes to put.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="append"><c>true</c> if appending, <c>false</c> otherwise.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous upload.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndUploadByteArray(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in one of the <c>BeginUploadByteArray</c>
            methods.
            </summary>
            <remarks>
            <para>Before calling <c>BeginUploadByteArray</c>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <c>BeginUploadByteArray</c> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <c>BeginUploadByteArray</c> method as a parameter.  This parameter may then be
            passed to the <c>EndUploadByteArray</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <seealso cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginUploadByteArray(System.Byte[],System.String,System.AsyncCallback,System.Object)"/>
            <seealso cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginUploadByteArray(System.Byte[],System.String,System.Boolean,System.AsyncCallback,System.Object)"/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DownloadStream(System.IO.Stream,System.String)">
            <summary>Download a file from the FTP server and write it to the given stream.</summary>
            <remarks>
            <para>Transfers are in the current <see cref="!:TransferType"/>.
            The stream is closed after the transfer is complete if
            <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.CloseStreamsAfterTransfer"/> is <c>true</c> (the default) is are left
            open otherwise.  If the stream is left open the its position will be at the
            end of the stream.  Use <see cref="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)"/> to change the
            position if required.</para>
            <para>
            <example>The following example shows a file being downloaded into a 
            <see cref="T:System.IO.MemoryStream"/>, which is then used to initialize a
            <see cref="T:System.IO.StreamReader"/>.</example>
            <code>ftpConnection.CloseStreamsAfterTransfer = false;
            MemoryStream memStr = new MemoryStream();
            ftpConnection.DownloadStream(memStr, "filename");
            memStr.Seek(0, SeekOrigin.Begin);
            StreamReader inStr = new StreamReader(memStr);
            ... use sr for whatever ...</code></para>
            </remarks>
            <param name="destStream">Data stream to write data to.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DownloadByteArray(System.String)">
            <summary>Download data from the FTP server and return it as a byte-array.</summary>
            <remarks>
            <para>Transfers in the current <see cref="!:TransferType"/>. Note
            that we may experience memory limitations as the
            entire file must be held in memory at one time.</para>
            </remarks>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <returns>Returns a byte-array containing the file-data.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DownloadFile(System.String,System.String)">
            <summary>Download a file from the FTP server and save it locally.</summary>
            <remarks>Transfers in the current <see cref="!:TransferType"/>. </remarks>
            <param name="localPath">Local file to put data in.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DownloadFile(System.String,System.String,EnterpriseDT.Net.Ftp.TransferParameters)">
            <summary>Download a file from the FTP server and save it locally.</summary>
            <remarks>Transfers in the current <see cref="!:TransferType"/>. </remarks>
            <param name="localPath">Local file to put data in.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="transferParams">Additional transfer parameters</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.SyncDownloadFile(System.String,System.String,EnterpriseDT.Net.Ftp.WriteMode,EnterpriseDT.Net.Ftp.TransferParameters)">
            <summary>
            INTERNAL USE ONLY
            </summary>
            <param name="localPath"></param>
            <param name="remoteFile"></param>
            <param name="transferParams"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DownloadDirectory(System.String,System.String)">
            <summary>
            Downloads the remote directory (and its subdirectories) to the local directory.
            </summary>
            <remarks>
            <para>The local directory will be created if it doesn't already exist.</para>
            <para><see cref="!:DownloadMultiple(string,string,FileFilter,bool"/> should be used if 
            more control over which files are transferred is required.</para>
            </remarks>
            <param name="localDirectory">Local directory</param>
            <param name="remoteDirectory">Remote directory (will be created if it doesn't already exist)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DownloadMultiple(System.String,System.String)">
            <summary>
            Get multiple files into the specified local directory from the current remote directory
            </summary>
            <remarks>
            Note that if the <c>LocalDirectory</c> property is set and <c>localDirectory</c> is a relative path,
            it will be combined with the <c>LocalDirectory</c> to find the target directory.
            </remarks>
            <param name="localDirectory">local directory to get files into</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.SyncDownloadMultiple(System.String,System.String)">
            <summary>
            INTERNAL USE ONLY
            </summary>
            <param name="localDirectory"></param>
            <param name="wildcard"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DownloadMultiple(System.String,EnterpriseDT.Net.Ftp.FileFilter)">
            <summary>
            Get multiple files into the specified local directory from the current remote directory
            </summary>
            <remarks>
            Note that if the <c>LocalDirectory</c> property is set and <c>localDirectory</c> is a relative path,
            it will be combined with the <c>LocalDirectory</c> to find the target directory.
            </remarks>
            <param name="localDirectory">local directory to get files into</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.SyncDownloadMultiple(System.String,EnterpriseDT.Net.Ftp.FileFilter)">
            <summary>
            INTERNAL USE ONLY
            </summary>
            <param name="localDirectory"></param>
            <param name="filter"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DownloadMultiple(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Get multiple files from the specified remote directory into the specified local directory
            </summary>
            <remarks>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories. Note that if the <c>LocalDirectory</c> 
            property is set and <c>localDirectory</c> is a relative path,
            it will be combined with the <c>LocalDirectory</c> to find the target directory.
            </remarks>
            <param name="localDirectory">local directory name</param>
            <param name="remoteDirectory">remote directory name</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="includeSubDirs">if true, subdirectories are put</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.SyncDownloadMultiple(System.String,System.String,System.String,System.Boolean)">
            <summary>
            INTERNAL USE ONLY
            </summary>
            <param name="localDirectory"></param>
            <param name="remoteDirectory"></param>
            <param name="wildcard"></param>
            <param name="includeSubDirs"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DownloadMultiple(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary>
            Get multiple files from the specified remote directory into the specified local directory
            </summary>
            <remarks>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories. Note that if the <c>LocalDirectory</c> property is set and <c>localDirectory</c> is a relative path,
            it will be combined with the <c>LocalDirectory</c> to find the target directory.
            </remarks>
            <param name="localDirectory">local directory name</param>
            <param name="remoteDirectory">remote directory name</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="includeSubDirs">if true, subdirectories are put</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.SyncDownloadMultiple(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary>
            INTERNAL USE ONLY
            </summary>
            <param name="localDirectory"></param>
            <param name="remoteDirectory"></param>
            <param name="filter"></param>
            <param name="includeSubDirs"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadFile(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to download a file from the FTP server and save it locally.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginDownloadFile</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.DownloadFile(System.String,System.String)"/>.</para>
            </remarks>
            <param name="localPath">Local file to put data in.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous download.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadFile(System.String,System.String,EnterpriseDT.Net.Ftp.WriteMode,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to download a file from the FTP server and save it locally.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginDownloadFile</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.DownloadFile(System.String,System.String)"/>.</para>
            </remarks>
            <param name="localPath">Local file to put data in.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="writeMode">Overwrite, Append or Resume.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous download.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadFile(System.String,System.String,EnterpriseDT.Net.Ftp.TransferParameters,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to download a file from the FTP server and save it locally.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginDownloadFile</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.DownloadFile(System.String,System.String)"/>.</para>
            </remarks>
            <param name="localPath">Local file to put data in.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="transferParams">Additional transfer parameters</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous download.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadDirectory(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to upload the local directory (and its subdirectories) to the remote directory.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginDownloadDirectory</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DownloadDirectory(System.String,System.String)"/>.</para>
            </remarks>
            <param name="localDirectory">Local directory</param>
            <param name="remoteDirectory">Remote directory (will be created if it doesn't already exist)</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous upload.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadMultiple(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to download multiple files from the FTP server and save them locally.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginDownloadMultiple</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DownloadMultiple(System.String,System.String)"/>.</para>
            </remarks>
            <param name="localDirectory">local directory to get files into</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous download.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadMultiple(System.String,EnterpriseDT.Net.Ftp.FileFilter,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to download multiple files from the FTP server and save them locally.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginDownloadMultiple</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DownloadMultiple(System.String,EnterpriseDT.Net.Ftp.FileFilter)"/>.</para>
            </remarks>
            <param name="localDirectory">local directory to get files into</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous download.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadMultiple(System.String,System.String,System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to download multiple files from the FTP server and save them locally.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginDownloadMultiple</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DownloadMultiple(System.String,System.String,System.String,System.Boolean)"/>.</para>
            </remarks>
            <param name="localDirectory">local directory name</param>
            <param name="remoteDirectory">remote directory name</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="includeSubDirs">if true, subdirectories are put</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous download.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadMultiple(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to download multiple files from the FTP server and save them locally.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginDownloadMultiple</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DownloadMultiple(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)"/>.</para>
            </remarks>
            <param name="localDirectory">local directory name</param>
            <param name="remoteDirectory">remote directory name</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="includeSubDirs">if true, subdirectories are put</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous download.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndDownloadFile(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadFile(System.String,System.String,System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadFile(System.String,System.String,System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadFile(System.String,System.String,System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadFile(System.String,System.String,System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndDownloadFile</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndDownloadDirectory(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in one of the <c>BeginDownloadFile</c> methods.
            </summary>
            <remarks>
            <para>Before calling <c>BeginDownloadDirectory</c>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <c>BeginDownloadDirectory</c> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <c>BeginDownloadDirectory</c> method as a parameter.  This parameter may then be
            passed to the <c>EndDownloadDirectory</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <seealso cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadDirectory(System.String,System.String,System.AsyncCallback,System.Object)"/>
            <seealso cref="!:BeginDownloadDirectory(string, string, bool, AsyncCallback, object)"/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndDownloadMultiple(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in one of the <c>BeginDownloadMultiple</c>
            methods.
            </summary>
            <remarks>
            <para>Before calling <c>BeginDownloadMultiple</c>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <c>BeginDownloadMultiple</c> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <c>BeginDownloadMultiple</c> method as a parameter.  This parameter may then be
            passed to the <c>EndDownloadMultiple</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <seealso cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadMultiple(System.String,System.String,System.AsyncCallback,System.Object)"/>
            <seealso cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadMultiple(System.String,EnterpriseDT.Net.Ftp.FileFilter,System.AsyncCallback,System.Object)"/>
            <seealso cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadMultiple(System.String,System.String,System.String,System.Boolean,System.AsyncCallback,System.Object)"/>
            <seealso cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadMultiple(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean,System.AsyncCallback,System.Object)"/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadStream(System.IO.Stream,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to download a file from the FTP server and write it to the given stream.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginDownloadStream</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.DownloadStream(System.IO.Stream,System.String)"/>.</para>
            </remarks>
            <param name="destStream">Data stream to write data to.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous download.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndDownloadStream(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadStream(System.IO.Stream,System.String,System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadStream(System.IO.Stream,System.String,System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadStream(System.IO.Stream,System.String,System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadStream(System.IO.Stream,System.String,System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndDownloadStream</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadByteArray(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to download data from the FTP server and return it as a byte-array.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginDownloadByteArray</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.DownloadByteArray(System.String)"/>.</para>
            </remarks>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous download.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndDownloadByteArray(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadByteArray(System.String,System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadByteArray(System.String,System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadByteArray(System.String,System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadByteArray(System.String,System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndDownloadByteArray</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DeleteFile(System.String)">
            <summary>Delete the specified remote file.</summary>
            <param name="remoteFile">Name of remote file to delete.</param>
            <returns><c>true</c> if file was deleted successfully.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DeleteDirectory(System.String)">
            <summary>Delete the specified remote directory.</summary>
            <remarks>
            This method does not recursively delete files.
            </remarks>
            <param name="directory">Name of remote directory to delete.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DeleteMultipleFiles(System.String)">
            <summary>
            Delete multiple files in the current remote directory.
            </summary>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DeleteMultipleFiles(EnterpriseDT.Net.Ftp.FileFilter)">
            <summary>
            Delete multiple files in the current remote directory.
            </summary>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DeleteMultipleFiles(System.String,System.String,System.Boolean)">
            <summary>
            Delete all the files in the supplied remote directory (and optionally its subdirectories) 
            that match the supplied wildcard.
            </summary>
            <remarks>
            No directories are deleted. Only files matching the wildcard are deleted.
            </remarks>
            <param name="remoteDirectory">name of remote directory</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="includeSubDirs">true if recursing through subdirectories</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DeleteMultipleFiles(System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary>
            Delete all the files in the supplied remote directory (and optionally its subdirectories) 
            that match the supplied filter.
            </summary>
            <remarks>
            No directories are deleted. Only files matching the filter are deleted.
            </remarks>
            <param name="remoteDirectory">name of remote directory</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="includeSubDirs">true if recursing through subdirectories</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DeleteDirectoryTree(System.String)">
            <summary> 
            Delete this entire remote directory and its contents recursively, including all
            subdirectories.
            </summary>
            <remarks>
            Use this method with extreme care!
            </remarks>
            <param name="remoteDirectory">name of remote directory</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDeleteMultipleFiles(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to delete all the files in the current directory
            that match the given wild-card.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginDeleteMultipleFiles</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DeleteMultipleFiles(System.String)"/>.</para>
            </remarks>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous delete.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDeleteMultipleFiles(EnterpriseDT.Net.Ftp.FileFilter,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to delete all the files in the current directory
            that match the given <see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/>.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginDeleteMultipleFiles</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DeleteMultipleFiles(EnterpriseDT.Net.Ftp.FileFilter)"/>.</para>
            </remarks>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous delete.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDeleteMultipleFiles(System.String,System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to delete all the files in the given directory
            that match the given wild-card.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginDeleteMultipleFiles</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DeleteMultipleFiles(System.String,System.String,System.Boolean)"/>.</para>
            </remarks>
            <param name="remoteDirectory">remote directory name</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="includeSubDirs">determines whether or not subdirectories should be included</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous delete.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDeleteMultipleFiles(System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to delete all the files in the current directory
            that match the given <see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/>.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginDeleteMultipleFiles</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DeleteMultipleFiles(System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)"/>.</para>
            </remarks>
            <param name="remoteDirectory">remote directory name</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="includeSubDirs">determines whether or not subdirectories should be included</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous delete.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndDeleteMultipleFiles(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in one of the <c>BeginDeleteMultipleFiles</c>
            methods.
            </summary>
            <remarks>
            <para>Before calling <c>BeginDeleteMultipleFiles</c>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <c>BeginDeleteMultipleFiles</c> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <c>BeginDeleteMultipleFiles</c> method as a parameter.  This parameter may then be
            passed to the <c>EndDeleteMultipleFiles</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <seealso cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDeleteMultipleFiles(System.String,System.AsyncCallback,System.Object)"/>
            <seealso cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDeleteMultipleFiles(EnterpriseDT.Net.Ftp.FileFilter,System.AsyncCallback,System.Object)"/>
            <seealso cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDeleteMultipleFiles(System.String,System.String,System.Boolean,System.AsyncCallback,System.Object)"/>
            <seealso cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDeleteMultipleFiles(System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean,System.AsyncCallback,System.Object)"/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDeleteDirectory(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to delete all the files in the given directory.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginDeleteDirectory</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.DeleteDirectory(System.String)"/>.</para>
            </remarks>
            <param name="remoteDirectory">remote directory name</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous delete.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndDeleteDirectory(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDeleteDirectory(System.String,System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDeleteDirectory(System.String,System.AsyncCallback,System.Object)"/>, 
            you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <c>BeginDeleteDirectory</c> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <c>BeginDeleteMultipleFiles</c> method as a parameter.  This parameter may then be
            passed to the <c>EndDeleteDirectory</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Synchronize">
            <summary>
            Synchronizes <see cref="!:LocalDirectory"/> on the local machine with 
            <see cref="!:ServerDirectory"/> according to the synchronization rules
            in <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.DefaultSyncRules"/>.
            </summary>
            <remarks>
            See <see cref="!:Synchronize(FTPSyncRules,string,string)"/> for more details.
            </remarks>
            <returns><see cref="!:FTPSyncReport"/> containing results of synchronization operation</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Synchronize(System.String,System.String)">
            <summary>
            Synchronizes the given local directory with the given remote directory 
            according to the synchronization rules in <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.DefaultSyncRules"/>.
            </summary>
            <remarks>
            See <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Synchronize(System.String,System.String,EnterpriseDT.Net.Ftp.FTPSyncRules)"/> for more details.
            </remarks>
            <param name="localDirectory">Directory on the local machine to synchronize.</param>
            <param name="serverDirectory">Directory on the server to synchronize.</param>
            <returns><see cref="!:FTPSyncReport"/> containing results of synchronization operation</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Synchronize(EnterpriseDT.Net.Ftp.FTPSyncRules)">
            <summary>
            Synchronizes <see cref="!:LocalDirectory"/> on the local machine with 
            <see cref="!:ServerDirectory"/> according to the given synchronization rules.
            </summary>
            <remarks>
            See <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Synchronize(System.String,System.String,EnterpriseDT.Net.Ftp.FTPSyncRules)"/> for more details.
            </remarks>
            <param name="syncRules">Rules to apply to the synchronization operation.</param>
            <returns><see cref="!:FTPSyncReport"/> containing results of synchronization operation</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Synchronize(System.String,System.String,EnterpriseDT.Net.Ftp.FTPSyncRules)">
            <summary>
            Synchronizes the given local directory with the given remote directory 
            according to the given synchronization rules.
            </summary>
            <remarks>
            <para>Synchronization aims to ensure that the files in a directory
            on the local machine match those in a directory on the remote machine.</para>
            <para>The instructions contained in <see cref="T:EnterpriseDT.Net.Ftp.FTPSyncRules"/> inform
            the synchronization process how files should be matched.  If these rules
            are insufficient then the <see cref="E:EnterpriseDT.Net.Ftp.ExFTPConnection.SynchronizingFile"/> event may be used
            to provide customized logic for matching files.</para>
            <para>The <see cref="E:EnterpriseDT.Net.Ftp.ExFTPConnection.Synchronizing"/> and <see cref="E:EnterpriseDT.Net.Ftp.ExFTPConnection.Synchronized"/> events
            are triggered before and after the synchronization operation is performed,
            respectively.</para>
            </remarks>
            <param name="localDirectory">Directory on the local machine to synchronize.
            If this argument is <c>null</c> then <see cref="!:LocalDirectory"/> will be used.</param>
            <param name="serverDirectory">Directory on the server to synchronize.
            If this argument is <c>null</c> then <see cref="!:ServerDirectory"/> will be used.</param>
            <param name="syncRules">Rules to apply to the synchronization operation.
            If this argument is <c>null</c> then <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.DefaultSyncRules"/> will be used.</param>
            <returns><see cref="!:FTPSyncReport"/> containing results of synchronization operation</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginSynchronize(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to synchronize a local directory with a directory
            on the server. 
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginSynchronize</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginSynchronize(System.AsyncCallback,System.Object)"/>.</para>
            </remarks>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous synchronization.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginSynchronize(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to synchronize a local directory with a directory
            on the server. 
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginSynchronize</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginSynchronize(System.AsyncCallback,System.Object)"/>.</para>
            </remarks>
            <param name="localDirectory">Directory on the local machine to synchronize.
            If this argument is <c>null</c> then <see cref="!:LocalDirectory"/> will be used.</param>
            <param name="serverDirectory">Directory on the server to synchronize.
            If this argument is <c>null</c> then <see cref="!:ServerDirectory"/> will be used.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous synchronization.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginSynchronize(EnterpriseDT.Net.Ftp.FTPSyncRules,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to synchronize a local directory with a directory
            on the server. 
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginSynchronize</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginSynchronize(System.AsyncCallback,System.Object)"/>.</para>
            </remarks>
            <param name="syncRules">Rules to apply to the synchronization operation.
            If this argument is <c>null</c> then <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.DefaultSyncRules"/> will be used.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous synchronization.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginSynchronize(EnterpriseDT.Net.Ftp.FTPSyncRules,System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to synchronize a local directory with a directory
            on the server. 
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginSynchronize</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginSynchronize(System.AsyncCallback,System.Object)"/>.</para>
            </remarks>
            <param name="localDirectory">Directory on the local machine to synchronize.
            If this argument is <c>null</c> then <see cref="!:LocalDirectory"/> will be used.</param>
            <param name="serverDirectory">Directory on the server to synchronize.
            If this argument is <c>null</c> then <see cref="!:ServerDirectory"/> will be used.</param>
            <param name="syncRules">Rules to apply to the synchronization operation.
            If this argument is <c>null</c> then <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.DefaultSyncRules"/> will be used.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous synchronization.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndSynchronize(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginSynchronize(System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginSynchronize(System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginSynchronize(System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginSynchronize(System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndSynchronize</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns><see cref="!:FTPSyncReport"/> containing results of synchronization operation</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.InvokeSiteCommand(System.String,System.String[])">
            <summary>
            Invokes the given site command on the server.
            </summary>
            <remarks>
            <para>
            Site-specific commands are special commands that may be defined by a server.  
            Such commands are defined on a server-by-server basis.
            </para>
            <para>
            For example, a specific FTP server might define a <c>PROCESS</c> site-command which 
            results in another piece of software on the server being directed to perform some
            sort of processing on a particular file.  The command required might be:
            </para>
            <code>
            	SITE PROCESS file-path
            </code>
            <para>
            In this case, the site-command would be invoked as follows:
            </para>
            <code>
            	ftpConnection.InvokeSiteCommand("PROCESS", filePath);
            </code>
            </remarks>
            <param name="command">Site-specific command to be invoked.</param>
            <param name="arguments">Arguments of the command to be invoked.</param>
            <returns>The reply returned by the server.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.InvokeFTPCommand(System.String,System.String[])">
            <summary>
            Invokes the given literal FTP command on the server.
            </summary>
            <remarks>
            <para>
            If a particular FTP command is not supported by <see cref="T:EnterpriseDT.Net.Ftp.FTPConnection"/>, this
            method may sometimes be used to invoke the command.  This will only work for 
            simple commands that don't require special processing.
            </para>
            <para>
            An example of an FTP command that could be invoked using this method is the 
            <c>FEAT</c> command (which is actually behind the <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.GetFeatures"/> method.
            This would be done as follows:
            </para>
            <code>
            	string features = ftpConnection.InvokeFTPCommand("FEAT", "211");
            </code>
            The returned <c>string</c> could then be parsed to obtain the supported features
            of the server.
            </remarks>
            <param name="command">Command to be sent.</param>
            <param name="validCodes">Valid return-codes (used for validating reply).</param>
            <returns>The reply returned by the server.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.GetFeatures">
            <summary>Get the server supplied features.</summary>
            <returns>
            <c>string</c>-array containing server features, or <c>null</c> if no features or not supported.
            </returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.GetSystemType">
            <summary>Get the type of the operating system at the server.</summary>
            <returns>The type of server operating system.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.GetCommandHelp(System.String)">
            <summary>Get the help text for the specified FTP command.</summary>
            <param name="command">Name of the FTP command to get help for.</param>
            <returns>Help text from the server for the supplied command.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginInvokeFTPCommand(System.String,System.String[],System.AsyncCallback,System.Object)">
            <summary>
            [FTP/FTPS Only] Begins an asynchronous request to invoke the given literal FTP command on the server.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginInvokeFTPCommand</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.InvokeFTPCommand(System.String,System.String[])"/>.</para>
            </remarks>
            <param name="command">Command to be sent.</param>
            <param name="validCodes">Valid return-codes (used for validating reply).</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous get.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndInvokeFTPCommand(System.IAsyncResult)">
            <summary>
            [FTP/FTPS Only] Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginInvokeFTPCommand(System.String,System.String[],System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginInvokeFTPCommand(System.String,System.String[],System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginInvokeFTPCommand(System.String,System.String[],System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginInvokeFTPCommand(System.String,System.String[],System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndInvokeFTPCommand</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns>The reply returned by the server.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginInvokeSiteCommand(System.String,System.String[],System.AsyncCallback,System.Object)">
            <summary>
            [FTP/FTPS Only] Begins an asynchronous request to invoke the given site command on the server.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginInvokeSiteCommand</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.InvokeSiteCommand(System.String,System.String[])"/>.</para>
            </remarks>
            <param name="command">Site-specific command to be invoked.</param>
            <param name="arguments">Arguments of the command to be invoked.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous get.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndInvokeSiteCommand(System.IAsyncResult)">
            <summary>
            [FTP/FTPS Only] Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginInvokeFTPCommand(System.String,System.String[],System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginInvokeSiteCommand(System.String,System.String[],System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginInvokeSiteCommand(System.String,System.String[],System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginInvokeSiteCommand(System.String,System.String[],System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndInvokeSiteCommand</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns>The reply returned by the server.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetFeatures(System.AsyncCallback,System.Object)">
            <summary>
            [FTP/FTPS Only] Begins an asynchronous request to get the server supplied features.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginGetFeatures</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.GetFeatures"/>.</para>
            </remarks>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous get.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndGetFeatures(System.IAsyncResult)">
            <summary>
            [FTP/FTPS Only] Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetFeatures(System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetFeatures(System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetFeatures(System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetFeatures(System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndGetFeatures</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns>
            <c>string</c>-array containing server features, or <c>null</c> if no features or not supported.
            </returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetSystemType(System.AsyncCallback,System.Object)">
            <summary>
            [FTP/FTPS Only] Begins an asynchronous request to get the type of the operating system at the server.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginGetSystemType</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.GetSystemType"/>.</para>
            </remarks>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous get.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndGetSystemType(System.IAsyncResult)">
            <summary>
            [FTP/FTPS Only] Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetSystemType(System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetSystemType(System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetSystemType(System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetSystemType(System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndGetSystemType</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns>The type of server operating system.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetCommandHelp(System.String,System.AsyncCallback,System.Object)">
            <summary>
            [FTP/FTPS Only] Begins an asynchronous request to get the help text for the specified FTP command.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginGetCommandHelp</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.GetCommandHelp(System.String)"/>.</para>
            </remarks>
            <param name="command">Name of the FTP command to get help for.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous get.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndGetCommandHelp(System.IAsyncResult)">
            <summary>
            [FTP/FTPS Only] Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetCommandHelp(System.String,System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetCommandHelp(System.String,System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetCommandHelp(System.String,System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetCommandHelp(System.String,System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndGetCommandHelp</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns>Help text from the server for the supplied command.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.GetFileInfos">
            <summary>
            Returns the working directory's contents as an array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.
            </summary>
            <remarks>
            This method works for Windows and most Unix FTP servers.  Please inform EDT
            about unusual formats (<a href="support@enterprisedt.com">support@enterprisedt.com</a>).
            </remarks>
            <returns>An array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.GetFileInfos(System.String)">
            <summary>
            Returns the given directory's contents as an array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.
            </summary>
            <remarks>
            This method works for Windows and most Unix FTP servers.  Please inform EDT
            about unusual formats (<a href="support@enterprisedt.com">support@enterprisedt.com</a>).
            </remarks>
            <param name="directory">Name of directory AND/OR filemask.</param>
            <returns>An array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.GetFiles">
            <summary>
            Lists current working directory's contents as an array of strings of file-names.
            </summary>
            <returns>An array of current working directory listing strings.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.GetFiles(System.String)">
            <summary>
            List the given directory's contents as an array of strings of file-names.
            </summary>
            <param name="directory">Name of directory</param>
            <remarks>
            The directory name can sometimes be a file mask depending on the FTP server.
            </remarks>
            <returns>An array of directory listing strings.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.GetFiles(System.String,System.Boolean)">
            <summary>
            List the given directory's contents as an array of strings of file-names or
            full file details.
            </summary>
            <param name="directory">Name of directory</param>
            <param name="full">true if the full listing is required including file size</param>
            <remarks>
            The directory name can sometimes be a file mask depending on the FTP server.
            </remarks>
            <returns>An array of directory listing strings.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.GetFileInfos(System.String,System.Boolean)">
            <summary>
            Returns the given directory's contents and optionally that of its subdirectories 
            as an array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.
            </summary>
            <remarks>
            <para>If <c>includeSubdirectories</c> is set to <c>true</c> then the <see cref="P:EnterpriseDT.Net.Ftp.FTPFile.Children"/> property 
            of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects corresponding to subdirectories will contain the content of
            that subdirectory.</para>
            <para>This method works for Windows and most Unix FTP servers.  Please inform EDT
            about unusual formats (<a href="support@enterprisedt.com">support@enterprisedt.com</a>).</para>
            </remarks>
            <param name="directory">Name of directory AND/OR filemask.</param>
            <param name="includeSubdirectories">Use <c>true</c> if subdirectories are required.</param>
            <returns>An array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.GetFileInfos(System.String,System.String,System.Boolean)">
            <summary>
            Returns the files in the given directory that match the wildcard, and optionally 
            that of its subdirectories.
            </summary>
            <remarks>
            <para>If <c>includeSubdirectories</c> is set to <c>true</c> then the <see cref="P:EnterpriseDT.Net.Ftp.FTPFile.Children"/> property 
            of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects corresponding to subdirectories will contain the content of
            that subdirectory.</para>
            
            <para>This method works for Windows and most Unix FTP servers.  Please inform EDT
            about unusual formats (<a href="support@enterprisedt.com">support@enterprisedt.com</a>).</para>
            </remarks>
            <param name="directory">Name of directory AND/OR filemask.</param>
            <param name="wildcard">Wildcard filter (not supported on all servers)</param>
            <param name="includeSubdirectories">Use <c>true</c> if subdirectories are required.</param>
            <returns>An array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.CreateDirectory(System.String)">
            <summary>Create the specified remote directory.</summary>
            <param name="directory">Name of remote directory to create.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.GetWorkingDirectory">
            <summary>
            Returns the working directory on the server.
            </summary>
            <returns>The working directory on the server.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.ChangeWorkingDirectory(System.String)">
            <summary>
            Changes the working directory.
            </summary>
            <param name="directory">Directory to change to (may be relative or absolute).</param>
            <returns><c>true</c> if the working directory was changed.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.ChangeWorkingDirectoryUp">
            <summary>
            Changes to the parent of the current working directory on the server.
            </summary>
            <returns><c>true</c> if the working directory was changed.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.ClearDirectoryCache">
            <summary>
            Clears the directory cache completely.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.ClearDirectoryCache(System.String)">
            <summary>
            Clears a particular directory-listing from the directory cache.
            </summary>
            <param name="directory">Directory to remove.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetFileInfos(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to retrieve the working directory's contents as an array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginGetFileInfos</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.GetFileInfos"/>.</para>
            </remarks>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous get.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetFileInfos(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to retrieve the given directory's contents as an array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginGetFileInfos</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.GetFileInfos(System.String)"/>.</para>
            </remarks>
            <param name="directory">Name of directory AND/OR filemask.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous get.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetFileInfos(System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to retrieve the given directory's contents (and optionally that
            of its subdirectories) as an array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginGetFileInfos</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.GetFileInfos(System.String)"/>.</para>
            </remarks>
            <param name="directory">Name of directory AND/OR filemask.</param>
            <param name="includeSubdirectories">Use <c>true</c> if subdirectories are required.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous get.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetFileInfos(System.String,System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to retrieve the given directory's contents (and optionally that
            of its subdirectories) as an array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginGetFileInfos</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.GetFileInfos(System.String)"/>.</para>
            </remarks>
            <param name="directory">Name of directory AND/OR filemask.</param>
            <param name="wildcard">Wildcard filter (not supported on all servers)</param>
            <param name="includeSubdirectories">Use <c>true</c> if subdirectories are required.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous get.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndGetFileInfos(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in one of the <c>BeginGetFileInfos</c> methods.
            </summary>
            <remarks>
            <para>Before calling <c>BeginGetFileInfos</c>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <c>BeginGetFileInfos</c> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <c>BeginGetFileInfos</c> method as a parameter.  This parameter may then be
            passed to the <c>EndGetFileInfos</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns>An array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.</returns>
            <seealso cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetFileInfos(System.AsyncCallback,System.Object)"/>
            <seealso cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetFileInfos(System.String,System.AsyncCallback,System.Object)"/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetFiles(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to list the current working directory's contents as an array of strings of file-names.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginGetFiles</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.GetFiles"/>.</para>
            </remarks>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous get.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetFiles(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to retrieve the given directory's contents as an array of strings of file-names.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginGetFiles</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.GetFiles(System.String)"/>.</para>
            </remarks>
            <param name="directory">Name of directory AND/OR filemask.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous get.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndGetFiles(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in one of the <c>BeginGetFiles</c> methods.
            </summary>
            <remarks>
            <para>Before calling <c>BeginGetFiles</c>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <c>BeginGetFiles</c> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <c>BeginGetFiles</c> method as a parameter.  This parameter may then be
            passed to the <c>EndGetFiles</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns>An array of current working directory listing strings.</returns>
            <seealso cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetFiles(System.AsyncCallback,System.Object)"/>
            <seealso cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetFiles(System.String,System.AsyncCallback,System.Object)"/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDeleteDirectoryTree(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to delete the specified remote directory.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginDeleteDirectoryTree</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DeleteDirectoryTree(System.String)"/>.</para>
            </remarks>
            <param name="directory">Name of directory AND/OR filemask.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous deletion.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndDeleteDirectoryTree(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDeleteDirectoryTree(System.String,System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDeleteDirectoryTree(System.String,System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDeleteDirectoryTree(System.String,System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDeleteDirectoryTree(System.String,System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndDeleteDirectory</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginCreateDirectory(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to create the specified remote directory.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginCreateDirectory</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.CreateDirectory(System.String)"/>.</para>
            </remarks>
            <param name="directory">Name of directory AND/OR filemask.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous creation.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndCreateDirectory(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginCreateDirectory(System.String,System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginCreateDirectory(System.String,System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginCreateDirectory(System.String,System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginCreateDirectory(System.String,System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndCreateDirectory</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetWorkingDirectory(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to get the working directory on the server.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginGetWorkingDirectory</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.GetWorkingDirectory"/>.</para>
            </remarks>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous get.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndGetWorkingDirectory(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetWorkingDirectory(System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetWorkingDirectory(System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetWorkingDirectory(System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetWorkingDirectory(System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndGetWorkingDirectory</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns>The working directory on the server.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginChangeWorkingDirectory(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to change the working directory.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginChangeWorkingDirectory</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.ChangeWorkingDirectory(System.String)"/>.</para>
            </remarks>
            <param name="directory">Name of directory AND/OR filemask.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous change.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndChangeWorkingDirectory(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginChangeWorkingDirectory(System.String,System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginChangeWorkingDirectory(System.String,System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginChangeWorkingDirectory(System.String,System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginChangeWorkingDirectory(System.String,System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndChangeWorkingDirectory</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns><c>true</c> if the directory was changed successfully.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginChangeWorkingDirectoryUp(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to change to the parent of the current working directory on the server.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginChangeWorkingDirectoryUp</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.ChangeWorkingDirectoryUp"/>.</para>
            </remarks>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous change.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndChangeWorkingDirectoryUp(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginChangeWorkingDirectoryUp(System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginChangeWorkingDirectoryUp(System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginChangeWorkingDirectoryUp(System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginChangeWorkingDirectoryUp(System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndChangeWorkingDirectoryUp</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns><c>true</c> if the directory was changed successfully.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.RenameFile(System.String,System.String)">
            <summary>Rename a file or directory.</summary>
            <param name="from">Name of file or directory to rename.</param>
            <param name="to">New file-name.</param>
            <returns><c>true</c> if the file was renamed successfully.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.GetSize(System.String)">
            <summary>
            Get the size of a remote file. 
            </summary>
            <remarks>
            This is not a standard FTP command, it is defined in "Extensions to FTP", a draft RFC 
            (draft-ietf-ftpext-mlst-16.txt).
            </remarks>
            <param name="remoteFile">Name or path of remote file in current working directory.</param>
            <returns>Size of file in bytes.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Exists(System.String)">
            <summary>
            Checks for the existence of a file on the server.
            </summary>
            <remarks>
            <para>
            Not all servers support absolute paths, so it's safer to use relative paths.  The
            path separator should be '/'.  If problems are encountered the safest option is
            to change into the desired directory prior to calling this method and then supplying
            the name of the file without its path.
            </para>
            <para>
            The existence of local files may be checked using the <see cref="M:System.IO.File.Exists(System.String)"/>
            method.
            </para>
            </remarks>
            <param name="remoteFile">Path of remote file.</param>
            <returns><c>true</c> if the named file exists on the server.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DirectoryExists(System.String)">
            <summary>
            Tests if the given directory exists.
            </summary>
            <remarks>
            The FTP protocol doesn't specify a standard way of testing for the existence of a directory, so
            this method tries to change into the directory and assumes that that the directory doesn't
            exist if an exception is thrown.  The current working directory is restored before the method 
            returns.
            </remarks>
            <param name="dir">Name of directory</param>
            <returns><c>true</c> if directory exists and false otherwise</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.GetLastWriteTime(System.String)">
            <summary>Get modification time for a remote file.</summary>
            <param name="remoteFile">Name of remote file.</param>
            <returns>Last write time of file as a <c>DateTime</c>.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDeleteFile(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to delete the specified remote file.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginDeleteFile</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.DeleteFile(System.String)"/>.</para>
            </remarks>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous deletion.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndDeleteFile(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDeleteFile(System.String,System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDeleteFile(System.String,System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDeleteFile(System.String,System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDeleteFile(System.String,System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndDeleteFile</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns><c>true</c> if file was deleted successfully.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginRenameFile(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to rename a file or directory.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginRenameFile</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.RenameFile(System.String,System.String)"/>.</para>
            </remarks>
            <param name="from">Name of file or directory to rename.</param>
            <param name="to">New file-name.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous rename.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndRenameFile(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginRenameFile(System.String,System.String,System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginRenameFile(System.String,System.String,System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginRenameFile(System.String,System.String,System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginRenameFile(System.String,System.String,System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndRenameFile</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns><c>true</c> if the directory was changed successfully.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginExists(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to check for the existence of a file on the server.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginExists</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.Exists(System.String)"/>.</para>
            </remarks>
            <param name="remoteFile">Path of remote file.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous rename.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndExists(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginExists(System.String,System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginExists(System.String,System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginExists(System.String,System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginExists(System.String,System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndExists</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns><c>true</c> if the file exists.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDirectoryExists(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to check for the existence of a directory on the server.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginDirectoryExists</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.Exists(System.String)"/>.</para>
            </remarks>
            <param name="remoteFile">Path of remote file.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous rename.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndDirectoryExists(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDirectoryExists(System.String,System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDirectoryExists(System.String,System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDirectoryExists(System.String,System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDirectoryExists(System.String,System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndExists</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns><c>true</c> if the file exists.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetSize(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to get the size of a remote file. 
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginGetSize</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.GetSize(System.String)"/>.</para>
            </remarks>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous get.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndGetSize(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetSize(System.String,System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetSize(System.String,System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetSize(System.String,System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetSize(System.String,System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndGetSize</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns>Size of file in bytes.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetLastWriteTime(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to get the modification time for a remote file.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginGetLastWriteTime</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.GetLastWriteTime(System.String)"/>.</para>
            </remarks>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous get.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndGetLastWriteTime(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetLastWriteTime(System.String,System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetLastWriteTime(System.String,System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetLastWriteTime(System.String,System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetLastWriteTime(System.String,System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndGetWriteTime</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns>Modification time of file as a <c>DateTime</c>.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Unlock(System.String,System.String)">
            <summary>
            Unlock the software for use. This method should be used when
            a configuration file isn't available
            </summary>
            <param name="owner">owner string</param>
            <param name="key">license key</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.CheckLicense">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.ReadLicenseDetailsFromRegistry">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.WriteLicenseDetailsToRegistry">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.ClearProperties">
            <summary>
            Clears properties by setting them to their default values.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Load(System.String)">
            <summary>
            Loads properties from the given file.
            </summary>
            <remarks>
            <para>The file must be in the format produced by <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Save(System.String)"/>
            and <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Load(System.IO.Stream)"/>.</para>
            <para><see cref="!:PropertyChanged"/> events are not triggered while properties are being loaded.</para>
            </remarks>
            <param name="filePath">Path of the file containing the properties.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Load(System.IO.Stream)">
            <summary>
            Loads properties from the given <see cref="T:System.IO.Stream"/>.
            </summary>
            <remarks>
            <para>The content of the stream must be in the format produced by <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Load(System.String)"/>
            and <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Load(System.IO.Stream)"/>.</para>
            <para><see cref="!:PropertyChanged"/> events are not triggered while properties are being loaded.</para>
            </remarks>
            <param name="inputStream">Stream containing the properties.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Save(System.String)">
            <summary>
            Saves the properties of the current connection in the given file.
            </summary>
            <remarks>
            The content is written in XML format with the root element being called <c>ExFTPConnection</c>
            and each property having an XML element of the same name.
            </remarks>
            <param name="filePath">Name of the file in which to store the properties.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Save(System.IO.Stream)">
            <summary>
            Saves the properties of the current connection in the given <see cref="T:System.IO.Stream"/>.
            </summary>
            <remarks>
            The content is written in XML format with the root element being called <c>ExFTPConnection</c>
            and each property having an XML element of the same name.
            </remarks>
            <param name="outputStream">Stream in which to store the properties.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Serialization context.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.GetXml">
            <summary>
            Returns a string containing an XML representation of the current instance.
            </summary>
            <returns>XML representation of the current instance</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts the current connection into its XML representation. 
            </summary>
            <remarks>
            <para>
            The content is written in XML format with the root element being called <c>ExFTPConnection</c>
            and each property having an XML element of the same name.
            </para>
            <para>
            Note that connections can be written directly to files and streams using the 
            methods <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Save(System.String)"/> and <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Save(System.IO.Stream)"/>, respectively.
            </para>
            </remarks>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> to which the connection is serialized.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.GetSchema">
            <summary>
            This method is only included to satisfy the <see cref="T:System.Xml.Serialization.IXmlSerializable"/> interface.
            It returns <c>null</c>.
            </summary>
            <returns>This method always returns <c>null</c>.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.ReadXml(System.String)">
            <summary>
            Initializes a connection the given XML representation.
            </summary>
            <param name="xml">XML representation of a connection instance.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.ReadXml(System.Xml.XmlReader)">
            <summary>
            Initializes a connection from its XML representation.
            </summary>
            <remarks>
            Connections can be initialized directly from files and streams using the 
            methods <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Load(System.String)"/> and <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Load(System.IO.Stream)"/>, respectively.
            </remarks>
            <param name="reader"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.ReadXml(System.Xml.XmlDocument)">
            <summary>
            Initializes a connection from its XML representation.
            </summary>
            <remarks>
            Connections can be initialized directly from files and streams using the 
            methods <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Load(System.String)"/> and <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Load(System.IO.Stream)"/>, respectively.
            </remarks>
            <param name="reader"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.ParseXml(System.Xml.XmlElement)">
            <summary>
            Extracts the connection properties from the given <see cref="T:System.Xml.XmlElement"/>.
            </summary>
            <param name="element">The element whose children contain the properties.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.OnConnected(System.Exception)">
            <summary>
            Call base then start the keep-alive thread.
            </summary>
            <param name="exception">Exception that occurred during operation.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.OnClosing(System.Exception)">
            <summary>
            Stop the keep-alive thread then call base.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.StartKeepAliveThread">
            <summary>
            Start the keep-alive thread.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.StopKeepAliveThread">
            <summary>
            Clear the flag that keeps the keep-alive thread running.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.KeepAliveRun">
            <summary>
            Keep-alive thread's run method.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.ftpClient_ReplyReceived(System.Object,EnterpriseDT.Net.Ftp.FTPMessageEventArgs)">
            <summary>
            Remember the time so that we don't send keep-alives unnecessarily.
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Arguments</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.TestConnection">
            <summary>
            Test if the connection is still alive.  If not then call Close so
            that events occur as they should.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.OnProxySettingsChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when one of the properties of ProxySettings has changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.OnPropertyChanged(System.String)">
            <summary>
            Called when a property has been changed.
            </summary>
            <param name="propertyName">Name of property.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.poolSettings_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a ConcurrentTransferSettings property is changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.OnSynchronizing(System.String,System.String)">
            <summary>
            Called before synchronization begins.
            </summary>
            <param name="localDirectory">Local directory</param>
            <param name="serverDirectory">Remote directory</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.OnSynchronized(System.String,System.String,System.Boolean,System.Exception,EnterpriseDT.Net.Ftp.FTPSyncResults)">
            <summary>
            Called after synchronization ends.
            </summary>
            <param name="localDirectory">Local directory</param>
            <param name="serverDirectory">Remote directory</param>
            <param name="cancelled"><c>true</c> if the operation was cancelled (and the file was not deleted).</param>
            <param name="ex">Exception thrown (if failed)</param>
            <param name="results">Results of the operation</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.OnSynchronizingFile(EnterpriseDT.Net.Ftp.FTPSyncFileEventArgs)">
            <summary>
            Called when a file is about to be synchronized.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.OnTaskQueued(EnterpriseDT.Net.Ftp.FTPTaskEventArgs)">
            <summary>
            Called when a new task is queued.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.OnTaskRunning(EnterpriseDT.Net.Ftp.FTPTaskEventArgs)">
            <summary>
            Called just before a task is run.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.OnTaskCompleted(EnterpriseDT.Net.Ftp.FTPTaskEventArgs)">
            <summary>
            Called just after a task is run.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.OnTaskCancelled(EnterpriseDT.Net.Ftp.FTPTaskEventArgs)">
            <summary>
            Called when a task has been cancelled.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.NewSite">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.InvokeEventHandler(System.Delegate,System.Object,System.EventArgs)">
            <summary>
            Invokes the given event-handlers (on the GUI thread if possible).
            </summary>
            <param name="eventHandler">Event-handlers to invoke.</param>
            <param name="sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.InvokeEventHandler(System.Boolean,System.Delegate,System.Object,System.EventArgs)">
            <summary>
            Invokes the given event-handlers (on the GUI thread if possible).
            </summary>
            <param name="preferGuiThread">If <c>true</c> then the handler will be invoked on the GUI thread if possible.</param>
            <param name="eventHandler">Event-handlers to invoke.</param>
            <param name="sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.InvokeEventHandler(System.Boolean,System.Boolean,System.Delegate,System.Object,System.EventArgs)">
            <summary>
            Invokes the given event-handlers (on the GUI thread if possible).
            </summary>
            <param name="preferGuiThread">If <c>true</c> then the handler will be invoked on the GUI thread if possible.</param>
            <param name="permitAsync">Allow delegate to be called asynchronously.</param>
            <param name="eventHandler">Event-handlers to invoke.</param>
            <param name="sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.RaiseError(EnterpriseDT.Net.Ftp.FTPErrorEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.ExFTPConnection.Error"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.RaisePropertiesLoaded(EnterpriseDT.Net.Ftp.FTPLoadSaveEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.ExFTPConnection.PropertiesLoaded"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.RaisePropertiesSaved(EnterpriseDT.Net.Ftp.FTPLoadSaveEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.ExFTPConnection.PropertiesSaved"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.RaiseSynchronized(EnterpriseDT.Net.Ftp.FTPSyncEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.ExFTPConnection.Synchronized"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.RaiseSynchronizing(EnterpriseDT.Net.Ftp.FTPSyncEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.ExFTPConnection.Synchronizing"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.RaiseSynchronizingFile(EnterpriseDT.Net.Ftp.FTPSyncFileEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.ExFTPConnection.SynchronizingFile"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.RaiseTaskQueuedEvent(EnterpriseDT.Net.Ftp.FTPTaskEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.ExFTPConnection.TaskQueued"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.RaiseTaskRunningEvent(EnterpriseDT.Net.Ftp.FTPTaskEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.ExFTPConnection.TaskCompleted"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.RaiseTaskCompletedEvent(EnterpriseDT.Net.Ftp.FTPTaskEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.ExFTPConnection.TaskCompleted"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.RaiseTaskCancelledEvent(EnterpriseDT.Net.Ftp.FTPTaskEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.ExFTPConnection.TaskCancelled"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.Protocol">
            <summary>
            Type of file transfer to use.
            </summary>
            <remarks>
            edtFTPnet/Express offers two types of non-secure file transfer, FTP and HTTP. Secure file transfer
            protocols are available in edtFTPnet/PRO:
            <list type="bullet">
            <listheader><term>Type</term></listheader>
            <item>
            <term>FTP</term>
            <description>Traditional unencrypted FTP.</description>
            </item>
            <item>
            <term>FTPSExplicit</term>
            <description>FTP-over-SSL which allows switching between secure and unsecure transfers. edtFTPnet/PRO only.</description>
            </item>
            <item>
            <term>FTPSImplicit</term>
            <description>FTP-over-SSL which simply performs FTP over pure SSL sockets. edtFTPnet/PRO only.</description>
            </item>
            <item>
            <term>SFTP</term>
            <description>SSH File Transfer Protocol. edtFTPnet/PRO only.</description>
            </item>
            <item>
            <term>HTTP</term>
            <description>HTTP File Transfers. Currently, only downloads can be performed.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.Timeout">
            <summary> 
            TCP timeout (in milliseconds) of the underlying sockets (0 means none).
            </summary>
            <remarks>Timout value in milliseconds.  The default value is 120000, which indicates 
            a 120 second timeout period.</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.TransferBufferSize">
            <summary>
            The size of the buffers used in writing to and reading from the TCP sockets.
            </summary>
            <remarks>
            <para>The size of receive and transmit buffers.</para>
            <para>The default value is 4096.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.CloseStreamsAfterTransfer">
            <summary>
            Determines if transfer-methods taking <see cref="T:System.IO.Stream"/>s as arguments should
            close the stream once the transfer is completed.
            </summary>
            <remarks>
            If <c>CloseStreamsAfterTransfer</c> is <c>true</c> (the default) then streams are closed after 
            a transfer has completed, otherwise they are left open.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.TransferNotifyInterval">
            <summary>
            The number of bytes transferred between each notification of the
            <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.BytesTransferred"/> event.
            </summary>
            <remarks>
            <para>This property determines the approximate number of bytes transferred
            between each <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.BytesTransferred"/> event.</para>
            <para>The default value is 4096.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.TransferNotifyListings">
            <summary>
            By default the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.BytesTransferred"/> event is not triggered 
            during directory listings - this property can be used to enable this behaviour.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.IntegrityCheckTransfers">
            <summary>
            Control integrity checking after file transfers.
            </summary>
            <remarks>
            <para>
            Some FTP servers support the XCRC command, permitting a checksum to be
            calculated after transferring a file to ensure it transferred correctly. 
            </para>
            <para>
            If this flag is switched on, CRC checks will be attempted for binary transfers. An exception will
            be thrown if CRC checks are not supported by the server. Also, integrity checks cannot be performed
            for appends.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.ForceConnectModeExtensions">
            <summary>
            Force the use of EPRT and EPSV extensions even for IPv4
            </summary>
            <remarks>
            <para>
            The IPv6 EPRT and EPSV commands are supported, but by default only used
            for IPv6. They can, however be used for IPv4, and will be if this flag
            is set to true.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.CompressionPreferred">
            <summary>
            Flag to enable or disable MODE Z compression for FTP/FTPS transfers.
            </summary>
            <remarks>
            <para>
            Some FTP servers support the MODE Z command, permitting transfers to
            be compressed. This speeds up transfers significantly for files that
            are compressible such as text files.
            </para>
            <para>
            If this flag is switched on, MODE Z compression is enabled if the
            server permits it. If the flag is later switched off, MODE Z compression
            is not disabled until the connection is closed and then re-opened again.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.DataEncoding">
            <summary>
            The character-encoding to use for transferring data in ASCII mode.
            </summary>
            <remarks>
            <para>
            The default is to use the default character encoding (generally UTF8). 
            Some common character encodings to try for western European languages are 
            <c>Windows-1252</c> and <c>ISO-8859-1</c>. 
            </para>
            <para>
            This encoding is not used when transferring data in binary mode.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.ServerAddress">
            <summary>
            The domain-name or IP address of the FTP server.
            </summary>
            <remarks>
            <para>This property may only be set if not currently connected.</para>
            <para><example>The following example illustrates an SFTP client
            connecting to a server:</example>
            <code>
              ExFTPConnection ftp = new ExFTPConnection();
              ftp.Protocol = FileTransferProtocol.FTP;
              ftp.ServerAddress = "my-server-name";
              ftp.UserName = "my-username";
              ftp.Password = "my-password";
              ftp.Connect();
              ftp.Close();
            </code></para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.ServerPort">
            <summary>
            The port on the server to which to connect the control-channel. 
            </summary>
            <remarks>
            <para>This property may only be set if not currently connected.</para>
            <para><example>The following example illustrates an SFTP client
            connecting to a server:</example>
            <code>
              ExFTPConnection ftp = new ExFTPConnection();
              ftp.Protocol = FileTransferProtocol.FTP;
              ftp.ServerAddress = "my-server-name";
              ftp.ServerPort = 21;
              ftp.UserName = "my-username";
              ftp.Password = "my-password";
              ftp.Connect();
              ftp.Close();
            </code></para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.DeleteOnFailure">
            <summary>
            Controls whether or not a file is deleted when a failure occurs.
            </summary>
            <remarks>
            <para>
            If <c>true</c>, a partially downloaded file is deleted if there
            is a failure during the download.  For example, the connection
            to the FTP server might have failed. If <c>false</c>, the partially
            downloaded file remains on the FTP client machine - and the download
            may be resumed, if it is a binary transfer.
            </para>
            <para>
            By default this flag is set to <c>true</c>.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.UserName">
            <summary>User-name of account on the server.</summary>
            <value>The user-name of the account the server that will be logged into upon connection.</value>
            <remarks>
            <para>This property must be set before a connection with the server is made.</para>
            <para><example>The following example illustrates an FTP client
            connecting to a server:</example>
            <code>
              ExFTPConnection ftp = new SecureFTPConnection();
              ftp.Protocol = FileTransferProtocol.SFTP;
              ftp.ServerAddress = "my-server-name";
              ftp.UserName = "my-username";
              ftp.Password = "my-password";
              ftp.Connect();
              ftp.Close();
            </code></para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.Password">
            <summary>Password of account on the server.</summary>
            <value>The password of the account the FTP server that will be logged into upon connection.</value>
            <remarks>
            <para>This property must be set before a connection with the server is made.</para>
            <para><example>The following example illustrates an FTP client
            connecting to a server:</example>
            <code>
            ExFTPConnection ftp = new ExFTPConnection();
            ftp.ServerAddress = "my-server-name";
            ftp.UserName = "my-username";
            ftp.Password = "my-password";
            ftp.Connect();
            ftp.Close();
            </code></para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.IsTransferring">
            <summary>
            Indicates whether or not a synchronous or asynchronous transfer is currently under way.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.CommandEncoding">
            <summary>
            The character-encoding to use when dealing with file- and directory-paths.
            </summary>
            <remarks>
            The default is <c>ASCII</c>, but should be changed when communicating with FTP servers
            that have file-names containing non-ASCII characters
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.MultiTransferSleepEnabled">
            <summary>
            Determines whether or not "sleeping" is enabled during multiple
            FTP/FTPS data transfers.
            </summary>
            <remarks>
            <para>FTP/FTPS uses a separate TCP connection for each data transfer (i.e. 
            upload, download, or directory listing).  TCP ports go into a TIME_WAIT 
            state for a number of seconds after each connection, making it unusable 
            for this period.  This means that it is possible to run out of TCP ports 
            when multiple files are transferred in a short period of time.</para>
            <para>Periodic sleeping can reduce this problem.  When enabled through
            the <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.MultiTransferSleepEnabled"/> property, the
            connection will wait for <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.MultiTransferSleepTime"/> seconds
            each time <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.MultiTransferCountBeforeSleep"/> files have been
            transferred via multiple-transfer operations.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.MultiTransferCountBeforeSleep">
            <summary>
            Number of transfers before "sleeping" during multiple
            FTP/FTPS data transfers.
            </summary>
            <remarks>
            <para>FTP/FTPS uses a separate TCP connection for each data transfer (i.e. 
            upload, download, or directory listing).  TCP ports go into a TIME_WAIT 
            state for a number of seconds after each connection, making it unusable 
            for this period.  This means that it is possible to run out of TCP ports 
            when multiple files are transferred in a short period of time.</para>
            <para>Periodic sleeping can reduce this problem.  When enabled through
            the <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.MultiTransferSleepEnabled"/> property, the
            connection will wait for <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.MultiTransferSleepTime"/> seconds
            each time <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.MultiTransferCountBeforeSleep"/> files have been
            transferred via multiple-transfer operations.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.MultiTransferSleepTime">
            <summary>
            Number of seconds spent "sleeping" during multiple
            FTP/FTPS data transfers.
            </summary>
            <remarks>
            <para>FTP/FTPS uses a separate TCP connection for each data transfer (i.e. 
            upload, download, or directory listing).  TCP ports go into a TIME_WAIT 
            state for a number of seconds after each connection, making it unusable 
            for this period.  This means that it is possible to run out of TCP ports 
            when multiple files are transferred in a short period of time.</para>
            <para>Periodic sleeping can reduce this problem.  When enabled through
            the <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.MultiTransferSleepEnabled"/> property, the
            connection will wait for <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.MultiTransferSleepTime"/> seconds
            each time <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.MultiTransferCountBeforeSleep"/> files have been
            transferred via multiple-transfer operations.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.DetectTransferMode">
            <summary>
            Determines whether the transfer mode in operations involving multiple files is 
            automatically changed between ASCII and binary as appropriate.
            </summary>
            <remarks>
            See <see cref="M:EnterpriseDT.Net.Ftp.FileTypes.RegisterExtension(System.String)"/> for instructions on 
            how to register a file extension as ASCII, and
            <see cref="T:EnterpriseDT.Net.Ftp.FileTypes"/> for how to obtain the 
            current registered extensions.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.SocksProxySettings">
            <summary>
            Settings for SOCKS proxy.
            </summary>
            <remarks>
            <para>
            SOCKS may be used for FTPing through firewalls.  For this to be possible
            a SOCKS proxy must be available, and a user account must be set up on that proxy.
            <c>ExFTPConnection</c> supports all the popular versions of SOCKS - 4, 4A, and 5.
            </para>
            <para><c>SocksProxySettings</c> is easiest to edit using the specialized
             editor available through the Property View.</para>
            <para>
            The SOCKS features are controlled entirely through the <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.SocksProxySettings"/>
            property.  If it is <c>null</c> (the default) then SOCKS is not used.  To use SOCKS,
            the property must be set to an instance of <see cref="T:EnterpriseDT.Util.Socks.Socks4Context"/> or 
            <see cref="T:EnterpriseDT.Util.Socks.Socks5Context"/>.
            For example, for SOCKS4:
            </para>
            <code>
                   myFTPClient.SocksContext = new Socks4Context("192.168.0.2", 1080, "marvin23");
            </code>
            and for SOCKS5:
            <code>
                   Socks5Context socksContext = new Socks5Context("192.168.0.2", 1080);
                   socksContext.AuthMethods.Add(new Socks5NoAuthMethod());
                   socksContext.AuthMethods.Add(new Socks5UserNamePasswordAuthMethod("marvin23", "m31erk"));
                   myFTPClient.SocksProxySettings = socksContext;
            </code>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.ProxySettings">
            <summary>
            Settings for using proxies.
            </summary>
            <remarks>
            <para>
            Proxies may be used for FTPing through firewalls.  HTTP and SOCKS (4,4A and 4) are
            supported.  
            </para>
            <para>
             SOCKS supports both passive (PASV) and active (PORT) mode transfers. 
             Note that only passive mode transfers are possible via an HTTP proxy. There
             is no facility for HTTP proxies to listen for incoming connections, and hence active
             mode transfers cannot be done via an HTTP proxy. An exception will be thrown
             if they are attempted.
            </para>
            <para>
             Often a username and password will be required to authenticate with the proxy.
             These can be set in <c>ProxySettings</c>. 
            </para>
            <para><c>ProxySettings</c> is easiest to edit via the Property View.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.KeepAliveTransfer">
            <summary>
            Flag to enable the use of keep alive messages during data transfers.
            </summary>
            <remarks>
            During very large transfers some servers timeout, meaning
            that the transfer is not correctly completed. Most servers can't
            cope with keep alives being sent during a transfer, so only set this property if
            you are having timeout problems with very large transfers, and you can't
            increase the timeout on the server. Use with
            caution - this may cause messages to arrive out of order. 
            Note that the <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.KeepAlivePeriodSecs"/> property is used to
            set the interval between keep alives.
            </remarks> 
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.KeepAliveIdle">
            <summary>
            Flag to enable the use of keep alive messages, which are sent to keep the
            connection alive when no activity is occurring. 
            </summary>
            <remarks>
            The client only contacts the server during periods of inactivity.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.KeepAlivePeriodSecs">
            <summary>
            Period (in seconds) at which the client contacts the server so that the connection doesn't time out.
            </summary>
            <remarks>
            The client only contacts the server during periods of inactivity (<see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.KeepAliveIdle"/>), or during transfers if
            <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.KeepAliveTransfer"/> is set.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.DefaultSyncRules">
            <summary>
            Rules that are used during synchronization operations when no other rules are specified.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.RetryCount">
            <summary>
            Number of times to retry a failing file-transfer before giving up.
            </summary>
            <remarks>
            <para>If this value is greater than zero then file-transfer operations will be 
            retried if the given number of times.  If the operation has been retried 
            <c>RetryCount</c> times without success then an exception will be thrown.</para>
            <para>A delay of <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.RetryDelay"/> milliseconds will separate
            consecutive retries.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.RetryDelay">
            <summary>
            Milliseconds to wait for before retrying a failing file-transfer (if RetryCount>0).
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.MaxTransferRate">
            <summary>
            The maximum transfer rate in bytes per sec. Set to -1 or 0
            to indicate no limiting should be applied.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.LicenseOwner">
            <summary>
            The license owner string.
            </summary>
            <remarks>
            The license owner must be set for the software to function correctly past the trial period.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.LicenseKey">
            <summary>
            The license key string.
            </summary>
            <remarks>
            The license key must be set for the software to function correctly past the trial period.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.IsControlChannelSecure">
            <summary>
            Returns <c>true</c> if the FTP control channel is currently encrypted.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.ExActiveClient">
            <summary>
            Reference to the currently active <see cref="T:EnterpriseDT.Net.Ftp.IExFileTransferClient"/>.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.CurrentTask">
            <summary>
            Returns the current asynchronous operation (<c>null</c> if none)
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.TaskProcessor">
            <summary>
            Gets a reference to the connection's task processor.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.RecursiveOperations">
            <summary>
            Reference to the <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.RecursiveOperations"/> belonging to the connection.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.ConcurrentTransferSettings">
            <summary>
            Settings for concurrent transfers.  Off by default.
            </summary>
            <remarks>
            <para>The <i>concurrent transfer feature</i> of <c>ExFTPConnection</c> and <see cref="T:EnterpriseDT.Net.Ftp.SecureFTPConnection"/>
            can greatly speed up transfers.  This performance is achieved by making several connections to the 
            server at the same time, and using them such that more than one file may be transferred at the same
            time.  For example, if a maximum of 4 connections (see <see cref="!:ConcurrentTransferSettings.MaxConnections"/>
            is set then up to 4 files may be transferred simultaneously.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.CacheListings">
            <summary>
            Cache directory listings.
            </summary>
            <remarks>
            If this property <c>true</c> then directory listings will be cached between accesses.
            This can greatly speed up calls to <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.GetFiles"/> and <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.GetFileInfos"/>.
            The directory cache may be cleared at any time by calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.ClearDirectoryCache"/>.
            </remarks>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.ExFTPConnection.Error">
            <summary>
            Occurs when an exception is thrown during an asynchronous operation.
            </summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.ExFTPConnection.Synchronizing">
            <summary>
            Triggered before synchronization actions are begun.
            </summary>
            <remarks>
            This event is triggered after all <see cref="E:EnterpriseDT.Net.Ftp.ExFTPConnection.SynchronizingFile"/> events have been triggered.
            </remarks>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.ExFTPConnection.Synchronized">
            <summary>
            Triggered when synchronization actions have been completed.
            </summary>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.ExFTPConnection.SynchronizingFile">
            <summary>
            Triggered when a decision is being made on how to synchronize a particular 
            file (i.e. transfer, delete or skip).
            </summary>
            <remarks>
            This event may be used to set the action that is to be taken
            during the synchronization operation.  The event arguments
            (<see cref="T:EnterpriseDT.Net.Ftp.FTPSyncFileEventHandler"/>) gives access to information
            about each file, including name, path, date and size.  These may be
            used to decide what sort of action should be taken, which is done
            by setting the <see cref="P:EnterpriseDT.Net.Ftp.FTPSyncFileEventArgs.Action"/> property.
            </remarks>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.ExFTPConnection.PropertiesLoaded">
            <summary>
            Occurs when properties are loaded from a file.
            </summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.ExFTPConnection.PropertiesCleared">
            <summary>
            Occurs when properties are cleared via <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.ClearProperties"/>.
            </summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.ExFTPConnection.PropertiesSaved">
            <summary>
            Occurs when properties are saved to a file.
            </summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.ExFTPConnection.TaskQueued">
            <summary>
            Occurs when an asynchronous task is queued.
            </summary> 
            <remarks>
            Note that this event will never be invoked on the GUI thread, so no 
            Windows Forms operations should be performed directly within handlers.
            </remarks>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.ExFTPConnection.TaskRunning">
            <summary>
            Occurs just before an asynchronous task is about to run.
            </summary> 
            <remarks>
            Note that this event will never be invoked on the GUI thread, so no 
            Windows Forms operations should be performed directly within handlers.
            </remarks>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.ExFTPConnection.TaskCompleted">
            <summary>
            Occurs after an asynchronous task has completed.
            </summary> 
            <remarks>
            Note that this event will never be invoked on the GUI thread, so no 
            Windows Forms operations should be performed directly within handlers.
            </remarks>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.ExFTPConnection.TaskCancelled">
            <summary>
            Occurs after an asynchronous task has been cancelled.
            </summary> 
            <remarks>
            Note that this event will never be invoked on the GUI thread, so no 
            Windows Forms operations should be performed directly within handlers.
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPLoadSaveEventArgs">
            <summary>
            Provides data for the <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Load(System.String)"/> 
            and <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Save(System.String)"/> events.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPEventArgs">
            <summary>
            Base for all event argument classes.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPEventArgs.taskID">
            <summary>
            Task identifier.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPEventArgs.connectionInstance">
            <summary>
            Instance number of connection on which task is running.  
            Only applies to connections in the connection-pool.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPEventArgs.guiThread">
            <summary>
            Indicates whether or not the event-handler has been invoked on the GUI thread.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPEventArgs.TaskID">
            <summary>
            Identifies the asynchronous operation within which the event was triggered
            (applies to asynchronous methods only).
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPEventArgs.ConnectionInstanceNumber">
            <summary>
            Identifies the pooled connection on which the task is running.
            </summary>
            <remarks>
            This property applies only to event that are generated from tasks that are
            run on connections in the connection-pool.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPEventArgs.IsGuiThread">
            <summary>
            Indicates whether or not the event-handler has been invoked on the GUI thread.
            </summary>
            <remarks>
            If this property is true, then it's safe to manipulate Windows Forms controls
            from within the event-handler, otherwise <see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)"/>
            must be used.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPLoadSaveEventArgs.Type">
            <summary>
            Type of operation - load or save.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPLoadSaveEventArgs.FileName">
            <summary>
            Name of file.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPLoadSaveEventArgs.LoadSaveType">
            <summary>
            Type of file operation.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPLoadSaveEventArgs.LoadSaveType.Load">
            <summary>
            Loading settings from a file.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPLoadSaveEventArgs.LoadSaveType.Save">
            <summary>
            Save settings to a file.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPLoadSaveEventArgs.LoadSaveType.Clear">
            <summary>
            Properties have been cleared (i.e. set to their default values).
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPLoadSaveEventHandler">
            <summary>
            Delegate for error events.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Forms.FTPMessageView">
            <summary>
            Base class for controls which need to display a list of messages.
            </summary>
            <remarks>
            <c>FTPMessageView</c> is a base-class for <see cref="T:EnterpriseDT.Net.Ftp.Forms.FTPCommandView"/> and
            <see cref="T:EnterpriseDT.Net.Ftp.Forms.FTPLogView"/>.  It displays a single list-box, with a right-click 
            context menu that allows clearing, copying to clipboad, and freezing
            (i.e. ignoring new messages).
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EnterpriseDT.Net.Ftp.Forms.FTPMessageView"/> class. 
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.Clear">
            <summary>
            Clears all messages from the list.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.Copy">
            <summary>
            Copies all messages (or the currently selected messages) to the clipboard.
            </summary>
            <remarks>
            If no messages are selected then all messages will be copied, otherwise only the
            selected messages will be copied.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.SetSelection(System.Int32,System.Boolean)">
            <summary>
            Selects/unselects the message with the given index.
            </summary>
            <param name="index"></param>
            <param name="select"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.SelectAll">
            <summary>
            Selects all messages in the view.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.ClearSelection">
            <summary>
            Clears the current selection.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.Freeze">
            <summary>
            Prevents new messages from being displayed.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.Unfreeze">
            <summary>
            Enables the display of new messages.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.PrintMessage(System.String)">
            <summary>
            Adds the given message to the view.
            </summary>
            <remarks>
            The control ensures that no more than <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.MaxMessages"/> are displayed by 
            deleting the oldest message(s).
            </remarks>
            <param name="message"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.LinkComponent(EnterpriseDT.Net.Ftp.IFTPComponent)">
            <summary>
            Called by the given FTP component when it is added to a container.
            </summary>
            <remarks>
            This method allows FTP components to interlink themselves automatically.
            </remarks>
            <param name="component">FTP component just added to the container.</param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.AllowContextMenu">
            <summary>
            Determines whether or not to allow the context menu on right-click.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.Connection">
            <summary>
            The <see cref="T:EnterpriseDT.Net.Ftp.ExFTPConnection"/> or <see cref="T:EnterpriseDT.Net.Ftp.SecureFTPConnection"/> whose messages
            are to be displayed.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.ClearOnReconnect">
            <summary>
            Controls whether or not messages are cleared when an FTP connection is opened.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.MaxMessages">
            <summary>
            Maximum number of messages what will be displayed.
            </summary>
            <remarks>
            Once <c>MaxMessages</c> are displayed, the oldest message will be discarded each time
            a new message is added.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.AutoScroll">
            <summary>
            Determines whether or not the control will keep the latest line visible.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.Messages">
            <summary>
            All the messages currently being displayed.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.SelectedMessages">
            <summary>
            All the messages that are currently selected.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.SelectedIndices">
            <summary>
            The indices of the currently selected messages.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.SelectedIndex">
            <summary>
            The index of the current selection, or <c>-1</c> if no message is selected.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.SelectedMessage">
            <summary>
            The currently selected message, or <c>null</c> if no message is selected.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.HorizontalScrollbar">
            <summary>
            Gets or sets a value indicating whether a horizontal scroll bar is displayed in the control. 
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.ItemHeight">
            <summary>
            Gets or sets the height of an item in the view. 
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.SelectionMode">
            <summary>
            Determines how list box items are selected. 
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.Text">
            <summary>
            The currently selected message, or <c>null</c> if no message is selected.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.TopIndex">
            <summary>
            Index of the first visible item in the list box control
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.Menu">
            <summary>
            Get the context menu shown on right-click.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.MenuItemUpload">
            <summary>
            Get the menu-item representing clear.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.MenuItemDownload">
            <summary>
            Get the menu-item representing copy.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.MenuItemFreeze">
            <summary>
            Get the menu-item representing "freeze" (which halts messages).
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.MenuItemSelectAll">
            <summary>
            Get the menu-item representing "select all".
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.MenuItemClearSelection">
            <summary>
            Get the menu-item representing "clear selection".
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.ExFTPClient">
            <summary>
            Provides low-level access to extended FTP operations.  <see cref="T:EnterpriseDT.Net.Ftp.ExFTPConnection"/>
            provides a superior interface and is recommended for general use.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPClient">
            <summary>  
            Provides low-level access to FTP operations.  <see cref="T:EnterpriseDT.Net.Ftp.FTPConnection"/>
            provides a superior interface and is recommended for general use.
            </summary>
            <author>Bruce Blackshaw</author>
            <version>$Revision: 1.143 $</version>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.DEFAULT_MONITOR_INTERVAL">
            <summary> Default byte interval for transfer monitor</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.DEFAULT_BUFFER_SIZE">
            <summary> Default transfer buffer size</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.DEFAULT_TIME_FORMAT">
            <summary>
            Default time format.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.majorVersion">
            <summary> Major version (substituted by ant)</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.middleVersion">
            <summary> Middle version (substituted by ant)</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.minorVersion">
            <summary> Middle version (substituted by ant)</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.version">
            <summary> Full version</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.buildTimestamp">
            <summary> Timestamp of build</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.BINARY_CHAR">
            <summary>  
            The char sent to the server to set BINARY
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.ASCII_CHAR">
            <summary>  
            The char sent to the server to set ASCII
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.SHORT_TIMEOUT">
            <summary>
            Short value for a timeout
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.dirEmptyStrings">
            <summary>
            Matcher for directory empty
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.transferCompleteStrings">
            <summary>
            Matcher for transfer complete
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.fileNotFoundStrings">
            <summary>
            Matcher for file not found
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.modtimeFormats">
            <summary>
            Four formats are provided because the fractional digits are optional.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.log">
            <summary> Logging object</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.logTag">
            <summary> Logging tag</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.control">
            <summary>  Socket responsible for controlling
            the connection
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.data">
            <summary>  Socket responsible for transferring
            the data
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.timeout">
            <summary>  Socket timeout for both data and control. In
            milliseconds
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.noOperationInterval">
            <summary>
            Interval for NOOP calls during large transfers in seconds
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.strictReturnCodes">
            <summary> Use strict return codes if true</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.cancelTransfer">
            <summary>  Can be used to cancel a transfer</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.transferNotifyListings">
            <summary>  Should BytesTransferred event be triggered in directory listings?</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.resume">
            <summary> If true, a file transfer is being resumed</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.deleteOnFailure">
            <summary>If a download to a file fails, delete the partial file</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.mdtmSupported">
            <summary>
            MDTM supported flag
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.sizeSupported">
            <summary>
            SIZE supported flag
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.resumeMarker">
            <summary> Resume byte marker point</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.showHiddenFiles">
            <summary>
            Include hidden files in operations
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.monitorInterval">
            <summary> Bytes transferred in between monitor callbacks</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.transferBufferSize">
            <summary> Size of transfer buffers</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.parserCulture">
            <summary>Culture used for parsing file details</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.fileFactory">
            <summary> Parses LIST output</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.transferType">
            <summary>  Record of the transfer type - make the default ASCII</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.connectMode">
            <summary>  Record of the connect mode - make the default PASV (as this was
            the original mode supported)
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.synchronizePassiveConnections">
            <summary>
            Synchronize PASV socket connections if true (false by default)
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.activePortRange">
            <summary>
            Port range for active mode
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.activeIPAddress">
            <summary>
            IP address to send with active mode
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.welcomeMessage">
            <summary>
            Server welcome message.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.lastValidReply">
            <summary>
            Holds the last valid reply from the server on the control socket
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.lastBytesTransferred">
            <summary>
            Holds the number of bytes transferred in that most recent transfer.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.lastFileTransferred">
            <summary>
            Name of the last file transferred.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.controlPort">
            <summary>
            Port on which we connect to the FTP server and messages are passed
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.remoteHost">
            <summary>
            Remote host we are connecting to
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.autoPassiveIPSubstitution">
            <summary>
            If true, uses the original host IP if an internal IP address
            is returned by the server in PASV mode.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.closeStreamsAfterTransfer">
            <summary>
            If <c>true</c> then streams are closed after a transfer has completed.
            </summary>
            <remarks>
            The default is <c>true</c>.
            </remarks>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.controlEncoding">
            <summary>
            The encoding to use when dealing with file and directory paths.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.dataEncoding">
            <summary>
            The encoding to use for ASCII transfers.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.throttler">
            <summary>
            Threshold for throttling
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.#ctor(System.String)">
            <summary>Constructs an <c>FTPClient</c> instance and connects to the FTP server.</summary>
            <param name="remoteHost">The domain-name or IP address of the FTP server.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.#ctor(System.String,System.Int32)">
            <summary>Constructs an <c>FTPClient</c> instance and connects to the FTP server.</summary>
            <param name="remoteHost">The domain-name or IP address of the FTP server.</param>
            <param name="controlPort">The port for control stream (-1 for default port).</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.#ctor(System.String,System.Int32,System.Int32)">
            <summary>Constructs an <c>FTPClient</c> instance and connects to the FTP server.</summary>
            <param name="remoteHost">The domain-name or IP address of the FTP server.</param>
            <param name="controlPort">The port for control stream (-1 for default port).</param>
            <param name="timeout">The length of the timeout in milliseconds (pass in 0 for no timeout)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.#ctor(System.Net.IPAddress)">
            <summary>Constructs an <c>FTPClient</c> instance and connects to the FTP server.</summary>
            <param name="remoteAddr">The address of the FTP server.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>Constructs an <c>FTPClient</c> instance and connects to the FTP server.</summary>
            <param name="remoteAddr">The address of the FTP server.</param>
            <param name="controlPort">The port for control stream (-1 for default port).</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.#ctor(System.Net.IPAddress,System.Int32,System.Int32)">
            <summary>Constructs an <c>FTPClient</c> instance and connects to the FTP server.</summary>
            <param name="remoteAddr">The address of the FTP server.</param>
            <param name="controlPort">The port for control stream (-1 for default port).</param>
            <param name="timeout">The length of the timeout in milliseconds (pass in 0 for no timeout)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.#ctor">
            <summary>Constructs an <c>FTPClient</c>.</summary>
            <remarks>
            The <c>FTPClient</c> will not connect to the FTP server until <see cref="M:EnterpriseDT.Net.Ftp.FTPClient.Connect"/> is called.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.InitBlock">
            <summary>  
            Instance initializer. Sets formatter to GMT.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Connect">
            <summary>Connect to the FTP server.</summary>
            <remarks>
            <para>
            The <see cref="P:EnterpriseDT.Net.Ftp.FTPClient.RemoteHost"/> property must be set prior to calling this method.
            This method must be called before <see cref="M:EnterpriseDT.Net.Ftp.FTPClient.Login(System.String,System.String)"/> or <see cref="M:EnterpriseDT.Net.Ftp.FTPClient.User(System.String)"/>
            is called.
            </para>
            <para>
            This method will throw an <c>FTPException</c> if the client is already connected to the server.
            </para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.InitializeControlSocket">
            <summary>Set the control socket explicitly.</summary>
            <param name="control">Control socket reference.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.CheckConnection(System.Boolean)">
            <summary> 
            Checks if the client has connected to the server and throws an exception if it hasn't.
            This is only intended to be used by subclasses
            </summary>
            <throws>FTPException Thrown if the client has not connected to the server. </throws>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.DebugResponses(System.Boolean)">
            <summary>Switch debug of responses on or off</summary>
            <param name="on"><c>true</c> if you wish to have responses to
            the log stream, <c>false</c> otherwise.</param>
            <deprecated>
            Use the <see cref="T:EnterpriseDT.Util.Debug.Logger"/> class to 
            switch debugging on and off.
            </deprecated>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.CancelTransfer">
            <summary>Cancels the current transfer.</summary>
            <remarks>This method is generally called from a separate
            thread. Note that this may leave partially written files on the
            server or on local disk, and should not be used unless absolutely
            necessary. The server is not notified.</remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Login(System.String,System.String)">
            <summary>Login into an account on the FTP server using the user-name and password provided.</summary>
            <remarks>This
            call completes the entire login process. Note that
            <see cref="M:EnterpriseDT.Net.Ftp.FTPClient.Connect"/> must be called first.</remarks>
            <param name="user">User-name.</param>
            <param name="password">Password.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.User(System.String)">
            <summary>
            Supply the user-name to log into an account on the FTP server. 
            Must be followed by the <see cref="M:EnterpriseDT.Net.Ftp.FTPClient.Password(System.String)"/> method.
            Note that <see cref="M:EnterpriseDT.Net.Ftp.FTPClient.Connect"/> must be called first. 
            </summary>
            <param name="user">User-name.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Password(System.String)">
            <summary>
            Supplies the password for a previously supplied
            user-name to log into the FTP server. Must be
            preceeded by the <see cref="M:EnterpriseDT.Net.Ftp.FTPClient.User(System.String)"/> method
            </summary>
            <param name="password">Password.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Account(System.String)">
            <summary>
            Supply account information string to the server. 
            </summary>
            <remarks>
            This can be used for a variety of purposes - for example, the server could
            indicate that a password has expired (by sending 332 in reply to
            PASS) and a new password automatically supplied via ACCT. It
            is up to the server how it uses this string.
            </remarks>
            <param name="accountInfo">account information</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Quote(System.String,System.String[])">
            <summary>Issue arbitrary ftp commands to the FTP server.</summary>
            <param name="command">FTP command to be sent to server.</param>
            <param name="validCodes">Valid return codes for this command.</param>
            <returns>The text returned by the FTP server.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.GetPASVAddress(System.String)">
            <summary>
            Get the PASV address string (including port numbers)
            </summary>
            <param name="pasvReply">PASV reply sent by server</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.SendCommand(System.String)">
            <summary>
            Send a command to the server and get the reply
            </summary>
            <param name="command">command</param>
            <returns>reply object</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.ValidateReply(EnterpriseDT.Net.Ftp.FTPReply,System.String)">
            <summary>
            Validate an FTPReply 
            </summary>
            <param name="reply">reply object</param>
            <param name="expectedReplyCode">expected code</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.ValidateReply(EnterpriseDT.Net.Ftp.FTPReply,System.String[])">
            <summary>
            Validate an FTPReply 
            </summary>
            <param name="reply">reply object</param>
            <param name="expectedReplyCodes">expected codes</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Size(System.String)">
            <summary>
            Get the size of a remote file. 
            </summary>
            <remarks>
            This is not a standard FTP command, it is defined in "Extensions to FTP", a draft RFC 
            (draft-ietf-ftpext-mlst-16.txt).
            </remarks>
            <param name="remoteFile">Name or path of remote file in current directory.</param>
            <returns>Size of file in bytes.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Resume">
            <summary>Make the next file transfer (put or get) resume.</summary>
            <remarks>
            <para>
            For puts, the
            bytes already transferred are skipped over, while for gets, if 
            writing to a file, it is opened in append mode, and only the bytes
            required are transferred.
            </para>
            <para>
            Currently resume is only supported for BINARY transfers (which is
            generally what it is most useful for). 
            </para>
            </remarks>
            <throws>FTPException</throws>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.ResumeDownload(System.Int64)">
            <summary>Make the next download resume at a specific point.</summary>
            <remarks>
            <para>
            This resume method allows the resume offset to be set explicitly for downloads. 
            Offset bytes are skipped before downloading the file.
            </para>
            <para>
            Currently resume is only supported for BINARY transfers (which is
            generally what it is most useful for). 
            </para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.CancelResume">
            <summary> 
            Cancel the resume. Use this method if something goes wrong
            and the server is left in an inconsistent state
            </summary>
            <throws>  SystemException </throws>
            <throws>  FTPException </throws>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Restart(System.Int64)">
            <summary>Set the REST marker so that the next transfer doesn't start at the beginning of the remote file</summary>
            <remarks>
            Issue the RESTart command to the remote server. This indicates the byte
            position that REST is performed at. For put, bytes start at this point, while
            for get, bytes are fetched from this point.
            </remarks>
            <param name="size">the REST param, the mark at which the restart is performed on the remote file. 
            For STOR, this is retrieved by SIZE</param>
            <throws>SystemException </throws>
            <throws>FTPException </throws>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Put(System.String,System.String)">
            <summary>
            Put a local file onto the FTP server in the current directory.
            </summary>
            <param name="localPath">Path of the local file.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Put(System.IO.Stream,System.String)">
            <summary>
            Put a stream of data onto the FTP server in the current directory.
            </summary>
            <remarks>
            The stream is closed after the transfer is complete if
            <see cref="P:EnterpriseDT.Net.Ftp.FTPClient.CloseStreamsAfterTransfer"/> is <c>true</c> (the default) and are left
            open otherwise.
            </remarks>
            <param name="srcStream">Input stream of data to put.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
            <returns>Number of bytes transferred.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Put(System.String,System.String,System.Boolean)">
            <summary>
            Put a local file onto the FTP server in the current directory. Allows appending
            if current file exists.
            </summary>
            <param name="localPath">Path of the local file.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
            <param name="append"><c>true</c> if appending, <c>false</c> otherwise</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Put(System.IO.Stream,System.String,System.Boolean)">
            <summary>
            Put a stream of data onto the FTP server in the current directory.  Allows appending
            if current file exists
            </summary>
            <remarks>
            The stream is closed after the transfer is complete if
            <see cref="P:EnterpriseDT.Net.Ftp.FTPClient.CloseStreamsAfterTransfer"/> is <c>true</c> (the default) and are left
            open otherwise.
            </remarks>
            <param name="srcStream">Input stream of data to put.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
            <param name="append"><c>true</c> if appending, <c>false</c> otherwise.</param>
            <returns>Number of bytes transferred.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.ValidateTransfer">
            <summary>Validate that the Put() or get() was successful.</summary>
            <remarks>This method is not for general use. If it is called explicitly after
            a transfer, the connection will hang.</remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.ValidateTransferOnError">
            <summary>
            Validate a transfer when an error has occurred on the data channel.
            Set a very short transfer in case things have hung. Set it back
            at the end.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.CloseDataSocket">
            <summary>Close the data socket</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.SendServerWakeup(System.DateTime)">
            <summary>
            If required, send a server wakeup message
            </summary>
            <remarks>A NOOP message is sent to the server</remarks>
            <param name="start">time the interval started</param>
            <returns>if a wakeup was sent, a new interval start time, 
            otherwise the one passed in</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.InitPut(System.String,System.Boolean)">
            <summary>Request the server to set up the put.</summary>
            <param name="remoteFile">Name of remote file in current directory.</param>
            <param name="append"><c>true</c> if appending, <c>false</c> otherwise.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.PutASCII(System.String,System.String,System.Boolean)">
            <summary>
            Put as ASCII, i.e. read a line at a time and write
            inserting the correct FTP separator.
            </summary>
            <param name="localPath">Path of the local file.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
            <param name="append"><c>true</c> if appending, <c>false</c> otherwise</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.PutASCII(System.IO.Stream,System.String,System.Boolean,System.Boolean)">
            <summary>
            Put as ASCII, i.e. read a line at a time and write
            inserting the correct FTP separator.
            </summary>
            <remarks>
            The stream is closed after the transfer is complete if
            <see cref="P:EnterpriseDT.Net.Ftp.FTPClient.CloseStreamsAfterTransfer"/> is <c>true</c> (the default) and are left
            open otherwise.
            </remarks>
            <param name="srcStream">Unput stream of data to put.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
            <param name="append"><c>true</c> if appending, <c>false</c> otherwise</param>
            <param name="alwaysCloseStreams"><c>true if a local file is being put</c></param>
            <returns>Number of bytes transferred.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.PutBinary(System.String,System.String,System.Boolean)">
            <summary>Put as binary, i.e. read and write raw bytes.</summary>
            <param name="localPath">Path of the local file.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
            <param name="append"><c>true</c> if appending, <c>false</c> otherwise</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.PutBinary(System.IO.Stream,System.String,System.Boolean,System.Boolean)">
            <summary>Put as binary, i.e. read and write raw bytes.</summary>
            <remarks>
            The stream is closed after the transfer is complete if
            <see cref="P:EnterpriseDT.Net.Ftp.FTPClient.CloseStreamsAfterTransfer"/> is <c>true</c> (the default) and are left
            open otherwise.
            </remarks>
            <param name="srcStream">Input stream of data to put.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
            <param name="append"><c>true</c> if appending, <c>false</c> otherwise</param>
            <param name="alwaysCloseStreams"><c>true if a local file is being put</c></param>
            <returns>Number of bytes transferred.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Put(System.Byte[],System.String)">
            <summary>
            Put data onto the FTP server in the current directory.
            </summary>
            <param name="bytes">Array of bytes to put.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Put(System.Byte[],System.String,System.Boolean)">
            <summary>
            Put data onto the FTP server in the current directory. Allows
            appending if current file exists.
            </summary>
            <param name="bytes">Array of bytes to put.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
            <param name="append"><c>true</c> if appending, <c>false</c> otherwise.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Get(System.String,System.String)">
            <summary>
            Get data from the FTP server using the currently
            set transfer mode.
            </summary>
            <param name="localPath">Local file to put data in.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Get(System.IO.Stream,System.String)">
            <summary>
            Get data from the FTP server, using the currently
            set transfer mode.
            </summary>
            <remarks>
            The stream is closed after the transfer is complete if
            <see cref="P:EnterpriseDT.Net.Ftp.FTPClient.CloseStreamsAfterTransfer"/> is <c>true</c> (the default) and are left
            open otherwise.
            </remarks>
            <param name="destStream">Data stream to write data to.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.InitGet(System.String)">
            <summary>Request to the server that the get is set up.</summary>
            <param name="remoteFile">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.GetASCII(System.String,System.String)">
            <summary>
            Get as ASCII, i.e. read a line at a time and write
            using the correct newline separator for the OS.
            </summary>
            <param name="localPath">Local file to put data in.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.GetASCII(System.IO.Stream,System.String)">
            <summary>
            Get as ASCII, i.e. read a line at a time and write
            using the correct newline separator for the OS.
            </summary>
            <remarks>
            The stream is closed after the transfer is complete if
            <see cref="P:EnterpriseDT.Net.Ftp.FTPClient.CloseStreamsAfterTransfer"/> is <c>true</c> (the default) and are left
            open otherwise.
            </remarks>
            <param name="destStream">Data stream to write data to.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.GetBinary(System.String,System.String)">
            <summary>Get as binary file, i.e. straight transfer of data.</summary>
            <param name="localPath">Local file to put data in.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.GetBinary(System.IO.Stream,System.String)">
            <summary>Get as binary file, i.e. straight transfer of data.</summary>
            <remarks>
            The stream is closed after the transfer is complete if
            <see cref="P:EnterpriseDT.Net.Ftp.FTPClient.CloseStreamsAfterTransfer"/> is <c>true</c> (the default) and are left
            open otherwise.
            </remarks>
            <param name="destStream">Stream to write to.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Get(System.String)">
            <summary>Get data from the FTP server.</summary>
            <remarks>
            Transfers in whatever mode we are in. Retrieve as a byte array. Note
            that we may experience memory limitations as the
            entire file must be held in memory at one time.
            </remarks>
            <param name="remoteFile">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Site(System.String)">
            <summary>Run a site-specific command on the server.</summary>
            <remarks>
            Support for commands is dependent on the server.
            </remarks>
            <param name="command">The site command to run</param>
            <returns><c>true</c> if command ok, <c>false</c> if command not implemented.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.DirDetails">
            <summary>
            List the current directory's contents as an array of FTPFile objects.
            </summary>
            <remarks>
            This works for Windows and most Unix FTP servers.  Please inform EDT
            about unusual formats (support@enterprisedt.com).
            </remarks>
            <returns>An array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.DirDetails(System.String)">
            <summary>
            List a directory's contents as an array of FTPFile objects.
            </summary>
            <remarks>
            This works for Windows and most Unix FTP servers.  Please inform EDT
            about unusual formats (support@enterprisedt.com). Note that for some
            servers, this will not work from the parent directory of dirname. You
            need to ChDir() into dirname and use DirDetails() (with no arguments).
            </remarks>
            <param name="dirname">Name of directory OR filemask (if supported by the server).</param>
            <returns>An array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.DirDetails(System.String,EnterpriseDT.Net.Ftp.FTPFileCallback)">
            <summary>
            List a directory's contents as an array of FTPFile objects.
            </summary>
            <remarks>
            This works for Windows and most Unix FTP servers.  Please inform EDT
            about unusual formats (support@enterprisedt.com). Note that for some
            servers, this will not work from the parent directory of dirname. You
            need to ChDir() into dirname and use DirDetails() (with no arguments).
            </remarks>
            <param name="dirname">Name of directory OR filemask (if supported by the server).</param>
            <returns>An array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Dir">
            <summary>
            List current directory's contents as an array of strings of
            filenames.
            </summary>
            <returns>An array of current directory listing strings.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Dir(System.String)">
            <summary>
            List a directory's contents as an array of strings of filenames.
            </summary>
            <param name="dirname">Name of directory OR filemask.</param>
            <returns>An array of directory listing strings.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Dir(System.String,System.Boolean)">
            <summary>
            List a directory's contents as an array of strings.
            </summary>
            <remarks>
            If <c>full</c> is <c>true</c> then a detailed
            listing if returned (if available), otherwise just filenames are provided.
            The detailed listing varies in details depending on OS and
            FTP server. Note that a full listing can be used on a file
            name to obtain information about a file. The <c>ShowHiddenFiles</c> flag
            can be used to request that hidden files be returned in the listing. Servers may
            or may not support this.
            </remarks> 
            <param name="dirname">Name of directory OR filemask.</param>
            <param name="full"><c>true</c> if detailed listing required, <c>false</c> otherwise.</param>
            <returns>An array of directory listing strings.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.ReadListingData(System.String,System.Text.Encoding,EnterpriseDT.Net.Ftp.FTPClient.LineCallback,System.Object)">
            <summary>
            Reads the listing data for a particular encoding
            </summary>
            <param name="enc">encoding</param>
            <returns>array of listing lines</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.ReadASCIIListingData(System.String,EnterpriseDT.Net.Ftp.FTPClient.LineCallback,System.Object)">
            <summary>
            Reads the listing data for ASCII encoding.
            </summary>
            <remarks>Skips non-ASCII chars found in the stream</remarks>
            <returns>array of listing lines</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.ReadChunk(System.IO.Stream,System.Byte[],System.Int32)">
            <summary>
            Attempts to read a specified number of bytes from the given 
            <code>BufferedStream</code> and place it in the given byte-array.
            </summary>
            <remarks>
            The purpose of this method is to permit subclasses to execute
            any additional code necessary when performing this operation. 
            </remarks>
            <param name="input">The <code>Stream</code> to read from.</param>
            <param name="chunk">The byte-array to place read bytes in.</param>
            <param name="chunksize">Number of bytes to read.</param>
            <returns>Number of bytes actually read.</returns>
            <throws>SystemException Thrown if there was an error while reading. </throws>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.ReadChar(System.IO.StreamReader)">
            <summary>Attempts to read a single character from the given <code>StreamReader</code>.</summary>
            <remarks>
            The purpose of this method is to permit subclasses to execute
            any additional code necessary when performing this operation. 
            </remarks>
            <param name="input">The <code>StreamReader</code> to read from.</param>
            <returns>The character read.</returns>
            <throws>SystemException Thrown if there was an error while reading. </throws>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.ReadLine(System.IO.StreamReader)">
            <summary>
            Attempts to read a single line from the given <code>StreamReader</code>. 
            </summary>
            <remarks>
            The purpose of this method is to permit subclasses to execute
            any additional code necessary when performing this operation. 
            </remarks>
            <param name="input">The <code>StreamReader</code> to read from.</param>
            <returns>The string read.</returns>
            <throws>SystemException Thrown if there was an error while reading. </throws>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Delete(System.String)">
            <summary>Delete the specified remote file.</summary>
            <param name="remoteFile">Name of remote file to delete.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Rename(System.String,System.String)">
            <summary>Rename a file or directory.</summary>
            <param name="from">Name of file or directory to rename.</param>
            <param name="to">Intended name.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.RmDir(System.String)">
            <summary>Delete the specified remote working directory.</summary>
            <param name="dir">Name of remote directory to delete.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.MkDir(System.String)">
            <summary>Create the specified remote working directory.</summary>
            <param name="dir">Name of remote directory to create.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.ChDir(System.String)">
            <summary>Change the remote working directory to that supplied.</summary>
            <param name="dir">Name of remote directory to change to.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.CdUp">
            <summary>Change the remote working directory to the parent directory.</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Exists(System.String)">
            <summary>
            Checks for the existence of a file on the server.
            </summary>
            <param name="remoteFile">Path of file.</param>
            <returns><c>true</c> if the file exists and <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.ModTime(System.String)">
            <summary>Get modification time for a remote file.</summary>
            <param name="remoteFile">Name of remote file.</param>
            <returns>Modification time of file as a <c>DateTime</c>.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.SetModTime(System.String,System.DateTime)">
            <summary>Sets the modification time of a remote file.</summary>
            <remarks>
            Although times are passed to the server with second precision, some
            servers may ignore seconds and only provide minute precision.  
            May not be supported by some FTP servers.
            </remarks>
            <param name="remoteFile">Name of remote file.</param>
            <param name="modTime">Desired modification-time to set in local time.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Pwd">
            <summary>Get the current remote working directory.</summary>
            <returns>The current working directory.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Features">
            <summary>Get the server supplied features.</summary>
            <returns>
            <c>string</c>-array containing server features, or <c>null</c> if no features or not supported.
            </returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.GetSystem">
            <summary>Get the type of the OS at the server.</summary>
            <returns>The type of server OS.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.NoOperation">
            <summary>  
            Send a "no operation" message that does nothing, which can
            be called periodically to prevent the connection timing out.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Help(System.String)">
            <summary>  Get the help text for the specified command
            
            </summary>
            <param name="command"> name of the command to get help on
            </param>
            <returns> help text from the server for the supplied command
            </returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Abort">
            <summary>Abort the current action.</summary>
            <remarks>
            This does not close the FTP session.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.TestConnection">
            <summary>
            Tests the connection
            </summary>
            <returns>true if connection ok</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Quit">
            <summary>Quit the FTP session by sending a <c>QUIT</c> command before closing the socket.</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.QuitImmediately">
            <summary>
            Quit the FTP session immediately by closing the control socket
            without sending the <c>QUIT</c> command.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.#cctor">
            <summary>Work out the version array.</summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.Version">
            <summary>The version of edtFTPj.</summary>
            <value>An <c>int</c> array of <c>{major,middle,minor}</c> version numbers.</value>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.BuildTimestamp">
            <summary>The edtFTPj build timestamp.</summary>
            <value>
            Timestamp of when edtFTPj was build in the format <c>d-MMM-yyyy HH:mm:ss z</c>.
            </value>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.StrictReturnCodes">
            <summary>Controls whether or not checking of return codes is strict.</summary>
            <remarks>
            <para>
            Some servers return non-standard reply-codes.  Setting this property to <c>false</c>
            only the first digit of the reply-code is checked, thus decreasing the sensitivity
            of edtFTPj to non-standard reply-codes.  The default is <c>true</c> meaning that
            reply-codes must match exactly.
            </para>
            </remarks>
            <value>  
            <c>true</c> if strict return code checking, <c>false</c> if non-strict.
            </value>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.Timeout">
            <summary> 
            TCP timeout on the underlying sockets, in milliseconds.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.Connected">
            <summary>  
            Is the client currently connected?
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.ConnectMode">
            <summary>
            The connection-mode (passive or active) of data-channels.
            </summary>
            <remarks>
            <para>
            When the connection-mode is active, the server will initiate connections
            to the client, meaning that the client must open a socket and wait for the
            server to connect to it.  This often causes problems if the client is behind
            a firewall.
            </para>
            <para>
            When the connection-mode is passive, the client will initiates connections
            to the server, meaning that the client will connect to a particular socket
            on the server.  This is generally used if the client is behind a firewall.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.IsConnected">
            <summary>
            Indicates whether the client is currently connected with the server.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.SynchronizePassiveConnections">
            <summary> 
            For cases where your FTP server does not properly manage PASV connections,
            it may be necessary to synchronize the creation of passive data sockets.
            It has been reported that some FTP servers (such as those at Akamai) 
            appear to get confused when multiple FTP clients from the same IP address
            attempt to connect at the same time.  For more details, please read
            the forum post http://www.enterprisedt.com/forums/viewtopic.php?t=2559
            The default value for SynchronizePassiveConnections is false.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.ShowHiddenFiles">
            <summary>
            Include hidden files in operations that involve listing of directories,
            and if supported by the server.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.TransferNotifyInterval">
            <summary>
            The number of bytes transferred between each notification of the
            <see cref="E:EnterpriseDT.Net.Ftp.FTPClient.BytesTransferred"/> event.
            </summary>
            <remarks>
            Reduce this value to receive more frequent notifications of transfer progress.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.TransferBufferSize">
            <summary>
            The size of the buffers (in bytes) used in writing to and reading from the data-sockets.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.RemoteHost">
            <summary>
            The domain-name or IP address of the FTP server.
            </summary>
            <remarks>
            <para>This property may only be set if not currently connected.</para>.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.DeleteOnFailure">
            <summary>
            Controls whether or not a file is deleted when a failure occurs.
            </summary>
            <remarks>
            <para>
            If <c>true</c>, a partially downloaded file is deleted if there
            is a failure during the download.  For example, the connection
            to the FTP server might have failed. If <c>false</c>, the partially
            downloaded file remains on the client machine - and the download
            may be resumed, if it is a binary transfer.
            </para>
            <para>
            By default this flag is set to <c>true</c>.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.ControlPort">
            <summary>
            The port on the server to which to connect the control-channel. 
            </summary>
            <remarks>
            <para>Most FTP servers use port 21 (the default)</para>
            <para>This property may only be set if not currently connected.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.ParsingCulture">
            <summary>The culture for parsing file listings.</summary>
            <remarks>
            The <see cref="M:EnterpriseDT.Net.Ftp.FTPClient.DirDetails(System.String)"/> method parses the file listings returned.  The names of the file
            can contain a wide variety of characters, so it is sometimes necessary to set this
            property to match the character-set used on the server.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.ControlEncoding">
            <summary>
            The encoding to use when dealing with file and directory paths.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.DataEncoding">
            <summary>
            The encoding to use for data when transferring in ASCII mode.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.FTPFileFactory">
            <summary>
            Override the chosen file factory with a user created one - meaning
            that a specific parser has been selected.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.TimeDifference">
            <summary>
            Time difference between server and client (relative to client).
            </summary>
            <remarks>
            The time-difference is relative to the server such that, for example, if the server is
            in New York and the client is in London then the difference would be -5 hours 
            (ignoring daylight savings differences).  This property only applies to FTP and FTPS.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.TimeIncludesSeconds">
            <summary>
            Indicates whether seconds were included in the most recent directoy listing.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.WelcomeMessage">
            <summary>
            Server welcome message.
            </summary>
            <remarks>Only valid after connection.  May be accessed prior to login.</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.LastValidReply">
            <summary>The latest valid reply from the server.</summary>
            <value>
            Reply object encapsulating last valid server response.
            </value>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.LastBytesTransferred">
            <summary>
            The number of bytes transferred in the last transfer operation.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.LastFileTransferred">
            <summary>
            The remote name/path of the last file transferred.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.TransferType">
            <summary>The current file transfer type (BINARY or ASCII).</summary>
            <remarks>When the transfer-type is set to <c>BINARY</c> then files
            are transferred byte-for-byte such that the transferred file will
            be identical to the original.
            When the transfer-type is set to <c>BINARY</c> then end-of-line
            characters will be translated where necessary between Windows and
            UNIX formats.</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.ActivePortRange">
            <summary>
            Port range for active mode, used only if it is
            necessary to limit the ports to a narrow range specified
            in a firewall
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.ActiveIPAddress">
            <summary>
            Force the PORT command to send a fixed IP address, used only for
            certain firewalls
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.AutoPassiveIPSubstitution">
            <summary>
            Use <c>AutoPassiveIPSubstitution</c> to ensure that 
            data-socket connections are made to the same IP address
            that the control socket is connected to.
            </summary>
            <remarks>
            <para>
            <c>AutoPassiveIPSubstitution</c> is useful in passive mode when the 
            FTP server is supplying an incorrect IP address to the client for 
            use in creating data connections (directory listings and file 
            transfers), e.g. an internal IP address that is not accessible from 
            the client. Instead, the client will use the IP address obtained 
            from the FTP server's hostname.
            </para>
            <para>
            This usually happens when an FTP server is behind
            a NAT router and has not been configured to reflect the fact that
            its internal (LAN) IP address is different from the address that
            external (Internet) machines connect to.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.CloseStreamsAfterTransfer">
            <summary>
            If <c>true</c> then streams are closed after a transfer has completed.
            </summary>
            <remarks>The default is <c>true</c>.</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.ServerWakeupInterval">
            <summary>
            The interval in seconds that the server is sent a wakeup message during
            large transfers.
            </summary>
            <remarks>During very large transfers some servers timeout, meaning
            that the transfer is not correctly completed. If this value is
            set to 0, no wakeup messages are sent. Note that many servers can't
            cope with a NOOP sent during a transfer, so only set this property if
            you are having timeout problems with very large transfers. It can result
            in receiving replies to NOOP with subsequent commands, so use with
            caution and check your log files.</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.TransferNotifyListings">
            <summary>
            By default the BytesTransferred event is not triggered during directory 
            listings - this property can be used to enable this behaviour.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.DirectoryEmptyMessages">
            <summary>
            Holds fragments of server messages that indicate a directory
            is empty
            </summary>
            <remarks>
            The fragments are used when it is necessary to examine the message
            returned by a server to see if it is saying a directory is empty, which
            is normally used by DirDetails. If an FTP server is returning a different
            message that still clearly indicates a directory is empty, use this
            property to add a new server fragment to the repository via the Add method.
            It would be helpful to email support at enterprisedt dot com to inform 
            us of the message so it can be added to the next build.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.FileNotFoundMessages">
            <summary>
            Holds fragments of server messages that indicate a file was not found
            </summary>
            <remarks>
            The fragments are used when it is necessary to examine the message
            returned by a server to see if it is saying a file was not found. 
            If an FTP server is returning a different message that still clearly 
            indicates a file was not found, use this property to add a new server 
            fragment to the repository via the Add method. It would be helpful to
            email support at enterprisedt dot com to inform us of the message so
            it can be added to the next build.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.TransferCompleteMessages">
            <summary>
            Holds fragments of server messages that indicate a transfer completed.
            </summary>
            <remarks>
            The fragments are used when it is necessary to examine the message
            returned by a server to see if it is saying a transfer completed.
            If an FTP server is returning a different message that still clearly 
            indicates the transfer complete, use this property to add a new server 
            fragment to the repository via the Add method. It would be helpful to
            email support at enterprisedt dot com to inform us of the message so
            it can be added to the next build.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.IsResuming">
            <summary>
            Returns <c>true</c> if the next transfer is to be resumed (i.e. <see cref="M:EnterpriseDT.Net.Ftp.FTPClient.Resume"/> has been called).
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.LogTag">
            <summary>Log tag</summary>
            <remarks>Must be set immediately after construction</remarks>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPClient.TransferStarted">
            <summary>
            Notifies of the start of a transfer.
            </summary>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPClient.TransferStartedEx">
            <summary>
            Notifies of the start of a transfer, and supplies more details than <see cref="E:EnterpriseDT.Net.Ftp.FTPClient.TransferStarted"/>
            </summary>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPClient.TransferComplete">
            <summary>
            Notifies of the completion of a transfer.
            </summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPClient.TransferCompleteEx">
            <summary>
            Notifies of the completion of a transfer, and supplies more details than <see cref="E:EnterpriseDT.Net.Ftp.FTPClient.TransferComplete"/>
            </summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPClient.BytesTransferred">
            <summary>
            Event triggered every time <see cref="P:EnterpriseDT.Net.Ftp.FTPClient.TransferNotifyInterval"/> bytes transferred.
            </summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPClient.CommandSent">
            <summary>
            Triggered every time a command is sent to the server.
            </summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPClient.ReplyReceived">
            <summary>
            Triggered every time a reply is received from the server.
            </summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPClient.CommandError">
            <summary>
            Occurs when there is an error while a command was being sent or
            a reply was being received.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPClient.log">
            <summary>
            Logger
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPClient.socks">
            <summary>
            SOCKS settings
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPClient.proxySettings">
            <summary>
            Proxy settings
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPClient.rops">
            <summary>  
            Helper class for performing recursive ops
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPClient.detectTransferMode">
            <summary>  
            Do we detect transfer mode when transferring files?
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPClient.forceConnectModeExtensions">
            <summary>
            Force use of EPRT and EPSV?
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPClient.isModeZ">
            <summary>
            Is this connection in MODE Z?
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPClient.key">
            <summary>
            License key
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPClient.owner">
            <summary>
            License owner
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPClient.Connect">
            <summary>
            Connects to the FTP server.
            </summary>
            <remarks>
            <para>
            The <see cref="P:EnterpriseDT.Net.Ftp.FTPClient.RemoteHost"/> property must be set before this method is called.
            </para>
            <para>Note that for explicit FTP <b>communications will not be secure</b> until the 
            <c>Auth()</c> method is called.
            </para>
            <para>
            Implicit FTPS communications are secure from the outset, usually requiring no 
            extra action by the client.  Some servers, however may require <c>Auth()</c>
            (no arguments) to be called.
            </para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPClient.GetLocalCRC(System.String)">
            <summary>
            Get the CRC-32 checksum for the named local file
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPClient.GetRemoteCRC(System.String)">
            <summary>
            Get the CRC-32 checksum for the named remote file
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPClient.EnableModeZCompression">
            <summary>
            Set MODE Z so that all subsequent transfers are compressed. Not 
            supported by some servers
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPClient.DirDetails(System.String,System.Boolean)">
            <summary>
            Returns the given directory's contents and optionally that of its subdirectories 
            as an array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.
            </summary>
            <remarks>
            <para>If <c>includeSubdirectories</c> is set to <c>true</c> then the <see cref="P:EnterpriseDT.Net.Ftp.FTPFile.Children"/> property 
            of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects corresponding to subdirectories will contain the content of
            that subdirectory.</para>
            <para>This method works for Windows and most Unix FTP servers.  Please inform EDT
            about unusual formats (<a href="support@enterprisedt.com">support@enterprisedt.com</a>).</para>
            </remarks>
            <param name="directory">Name of directory AND/OR filemask.</param>
            <param name="includeSubdirectories">Use <c>true</c> if subdirectories are required.</param>
            <returns>An array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPClient.MultipleDelete(System.String)">
            <summary>
            Delete multiple files in the current remote directory
            </summary>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <remarks>Wildcard characters supported are '?' and '*'</remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPClient.MultipleDelete(EnterpriseDT.Net.Ftp.FileFilter)">
            <summary>
            Delete multiple files in the current remote directory
            </summary>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPClient.MultipleDelete(System.String,System.String,System.Boolean)">
            <summary>
            Delete multiple files in the current remote directory and its subdirectories.
            </summary>
            <param name="remoteDir">remote directory to delete</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="recurse">if true, recurse down into subdirectories</param>
            <remarks>Wildcard characters supported are '?' and '*'. Subdirectories are not deleted</remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPClient.MultipleDelete(System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary>
            Delete multiple files in the current remote directory and its subdirectories.
            </summary>
            <param name="remoteDir">remote directory to delete</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="recurse">if true, recurse down into subdirectories</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPClient.MultipleDeleteDirectories(System.String)">
            <summary>
            Remove a remote directory, and all its files and its subdirectories
            </summary>
            <param name="remoteDir">the remote directory's name</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPClient.MultiplePut(System.String,System.String)">
            <summary>
            Put multiple files from the specified local directory into the current remote directory
            </summary>
            <param name="localDir">local directory to get files from</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPClient.MultiplePut(System.String,EnterpriseDT.Net.Ftp.FileFilter)">
            <summary>
            Put multiple files from the specified local directory into the current remote directory
            </summary>
            <param name="localDir">local directory to get files from</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPClient.MultiplePut(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Put multiple files from the specified local directory into the specified remote directory
            </summary>
            <remarks>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories
            </remarks>
            <param name="localDir">local directory name</param>
            <param name="remoteDir">remote directory name</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="recurse">if true, subdirectories are put</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPClient.MultiplePut(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary>
            Put multiple files from the specified local directory into the specified remote directory
            </summary>
            <remarks>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories
            </remarks>
            <param name="localDir">local directory name</param>
            <param name="remoteDir">remote directory name</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="recurse">if true, subdirectories are put</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPClient.MultipleGet(System.String,System.String)">
            <summary>
            Get multiple files into the specified local directory from the current remote directory
            </summary>
            <param name="localDir">local directory to get files into</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPClient.MultipleGet(System.String,EnterpriseDT.Net.Ftp.FileFilter)">
            <summary>
            Get multiple files into the specified local directory from the current remote directory
            </summary>
            <param name="localDir">local directory to get files into</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPClient.MultipleGet(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Get multiple files from the specified remote directory into the specified local directory
            </summary>
            <remarks>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories
            </remarks>
            <param name="localDir">local directory name</param>
            <param name="remoteDir">remote directory name</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="recurse">if true, subdirectories are put</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPClient.MultipleGet(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary>
            Get multiple files from the specified remote directory into the specified local directory
            </summary>
            <remarks>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories
            </remarks>
            <param name="localDir">local directory name</param>
            <param name="remoteDir">remote directory name</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="recurse">if true, subdirectories are put</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPClient.Unlock(System.String,System.String)">
            <summary>
            Unlock the software for use. This method should be used when
            a configuration file isn't available
            </summary>
            <param name="owner">owner string</param>
            <param name="key">license key</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPClient.CheckLicense">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPClient.MaxTransferRate">
            <summary>
            The maximum transfer rate in bytes per sec
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPClient.CountBeforeSleep">
            <summary>
            Number of transfers before going to sleep
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPClient.SleepEnabled">
            <summary>
            Enabling or not of sleeping after a certain number of transfers
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPClient.SleepTime">
            <summary>
            Number of seconds spent asleep
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPClient.DetectTransferMode">
            <summary>
            If set to true, the transfer mode in operations involving multiple files is 
            automatically changed between ASCII and binary as appropriate.
            </summary>
            <remarks>
            <see cref="M:EnterpriseDT.Net.Ftp.FileTypes.RegisterExtension(System.String)"/> for how to register a file extension as ASCII, and
            <see cref="T:EnterpriseDT.Net.Ftp.FileTypes"/> for how to obtain the current registered extensions
            </remarks> 
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPClient.ForceConnectModeExtensions">
            <summary>
            Force the use of EPRT and EPSV extensions even for IPv4
            </summary>
            <remarks>
            <para>
            The IPv6 EPRT and EPSV commands are supported, but by default only used
            for IPv6. They can, however be used for IPv4, and will be if this flag
            is set to true.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPClient.SocksContext">
            <summary>
            Controls SOCKS integration.
            </summary>
            <remarks>
            <para>
            SOCKS may be used for FTPing through firewalls.  For this to be possible
            a SOCKS proxy must be available, and a user account must be set up on that proxy.
            <c>SSLFTPClient</c> supports all the popular versions of SOCKS - 4, 4A, and 5.
            </para>
            <para>
            The SOCKS features are controlled entirely through the <see cref="P:EnterpriseDT.Net.Ftp.ExFTPClient.SocksContext"/>
            property.  If it is <c>null</c> (the default) then SOCKS is not used.  To use SOCKS,
            the property must be set to an instance of <c>Socks4Context</c> or <c>Socks5Context</c>.
            For example, for SOCKS4:
            </para>
            <code>
            	myFTPClient.SocksContext = new Socks4Context("192.168.0.2", 1080, "marvin23");
            </code>
            and for SOCKS5:
            <code>
            	Socks5Context socks = new Socks5Context("192.168.0.2", 1080);
            	socks.AuthMethods.Add(new Socks5NoAuthMethod());
            	socks.AuthMethods.Add(new Socks5UserNamePasswordAuthMethod("marvin23", "m31erk"));
            	myFTPClient.SocksContext = socks;
            </code>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPClient.ProxySettings">
            <summary>
            Settings for using proxies.
            </summary>
            <remarks>
            <para>
            Proxies may be used for FTPing through firewalls.  HTTP and SOCKS (4,4A and 4) are
            supported.  
            </para>
            <para>
             SOCKS supports both passive (PASV) and active (PORT) mode transfers. 
             Note that only passive mode transfers are possible via an HTTP proxy. There
             is no facility for HTTP proxies to listen for incoming connections, and hence active
             mode transfers cannot be done via an HTTP proxy. An exception will be thrown
             if they are attempted.
            </para>
            <para>
             Often a username and password will be required to authenticate with the proxy.
             These can be set in <c>ProxySettings</c>. 
            </para>
            <para><c>ProxySettings</c> is easiest to edit via the Property View.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPClient.LicenseOwner">
            <summary>
            The license owner string.
            </summary>
            <remarks>
            The license owner must be set for the software to function correctly past the trial period.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPClient.LicenseKey">
            <summary>
            The license key string.
            </summary>
            <remarks>
            The license key must be set for the software to function correctly past the trial period.
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.PoolMode">
            <summary>
            Determines whether or not the main connection will be included in the pool of connections
            that is used for concurrent transfers.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.PoolMode.UseMainConnection">
            <summary>
            The main connection will be included in the pool.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.PoolMode.ReserveMainConnection">
            <summary>
            The main connection will be excluded from the pool.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.PoolMode.Automatic">
            <summary>
            The component will automatically determine the most appropriate mode.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.ConcurrentTransferSettings">
            <summary>
            Settings for controlling concurrent transfers.
            </summary>
            <remarks>
            <para>When concurrent transfers are <see cref="P:EnterpriseDT.Net.Ftp.ConcurrentTransferSettings.Enabled"/> <see cref="T:EnterpriseDT.Net.Ftp.ExFTPConnection"/> 
            (and <see cref="T:EnterpriseDT.Net.Ftp.SecureFTPConnection"/>) will maintain a pool of up to 
            <c>MaxConnections-1</c> 'slave' connections in addition to its own 'main' connection.
            Many servers limit the number of connections
            a single client may make to the server, so the number of active connections may
            be less than <see cref="P:EnterpriseDT.Net.Ftp.ConcurrentTransferSettings.MaxConnections"/>.</para>
            <para>Interactive applications, such as traditional FTP client apps, can benefit from
            reserving one connection for user-actions, such as fetching directory listings.
            Thus when <see cref="P:EnterpriseDT.Net.Ftp.ConcurrentTransferSettings.PoolMode"/> is set to <see cref="!:PoolMode.ReserveMainConnection"/>
            the main connection will not usually be used for transfers.  This is not an issue in 
            non-interactive applications in which case the <c>PoolMode</c> may be set to
            <see cref="!:PoolMode.UseMainConnection"/>.  The default value of <c>PoolMode</c> is
            <see cref="!:PoolMode.Automatic"/> where the main connection will used if
            <see cref="P:System.Windows.Forms.Form.ActiveForm"/> is not <c>null</c>.</para>
            <para>Although it's generally desirable to reserve the main connection for
            user interactivity in FTP client-type applications, this cannot be done if
            the server only permits one connection to the server.  If 
            <see cref="P:EnterpriseDT.Net.Ftp.ConcurrentTransferSettings.FallBackToMainConnection"/> is set to <c>true</c> (the default)
            then the main connection will be used for transfers if it is the only possible 
            connection to the server.</para>
            <para>If <c>AutoRequeue</c> is enabled then a task that has been given a failed connection will
            automatically be requeued if at least one connection is still operational.</para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ConcurrentTransferSettings.OnPropertyChanged(System.String)">
            <summary>
            Called when a property has been changed.
            </summary>
            <param name="propertyName">Name of property.</param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ConcurrentTransferSettings.Enabled">
            <summary>
            Determines whether or not concurrent transfers enabled.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ConcurrentTransferSettings.PoolMode">
            <summary>
            Controls whether or not the main connection is included in the pool.  
            </summary>
            <remarks>
            Concurrent transfers are executed on a set of connections called a "pool".  This set of connections
            is maintained alongside the main <see cref="T:EnterpriseDT.Net.Ftp.ExFTPConnection"/> (or <see cref="T:EnterpriseDT.Net.Ftp.SecureFTPConnection"/>)
            object.  If <c>PoolMode</c> is <see cref="!:PoolMode.UseMainConnection"/> then the main connection will 
            be included in the pool and therefore made available for concurrent transfers.  This is often not 
            desirable in GUI applications where it's desirable to keep a connection available for servicing 
            user-actions, such as listing directories; in these cases <c>PoolMode</c> should be set
            to <see cref="!:PoolMode.ReserveMainConnection"/>.  If the <c>PoolMode</c> is set to
            to <see cref="!:PoolMode.Automatic"/> (the default) then the component will automatically try to determine
            the most appropriate mode.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ConcurrentTransferSettings.MaxConnections">
            <summary>
            Maximum number of connections to the server.
            </summary>
            <remarks>
            <para>When concurrent transfers are <see cref="P:EnterpriseDT.Net.Ftp.ConcurrentTransferSettings.Enabled"/> <see cref="T:EnterpriseDT.Net.Ftp.ExFTPConnection"/> 
            (and <see cref="T:EnterpriseDT.Net.Ftp.SecureFTPConnection"/>) will maintain a pool of up to 
            <c>MaxConnections-1</c> 'slave' connections in addition to its own 'main' connection.
            Many servers limit the number of connections
            a single client may make to the server, so the number of active connections may
            be less than <c>MaxConnections</c>.</para>
            <para>Interactive applications, such as classic FTP client apps, can benefit from
            reserving one connection for user-actions, such as fetching directory listings.
            Thus when <see cref="P:EnterpriseDT.Net.Ftp.ConcurrentTransferSettings.PoolMode"/> is set to <see cref="!:PoolMode.ReserveMainConnection"/>
            the main connection will not usually be used for transfers.  This is not an issue in 
            non-interactive applications in which case the <c>PoolMode</c> may be set to
            <see cref="!:PoolMode.UseMainConnection"/>.  The default value of <c>PoolMode</c> is
            <see cref="!:PoolMode.Automatic"/> where the main connection will used if
            <see cref="P:System.Windows.Forms.Form.ActiveForm"/> is not <c>null</c>.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ConcurrentTransferSettings.AutoRequeue">
            <summary>
            Automatically requeue tasks on connection-failure.
            </summary>
            <remarks>
            If <c>AutoRequeue</c> is enabled then a task that has been given a failed connection will
            automatically be requeued if at least one connection is still operational.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ConcurrentTransferSettings.FallBackToMainConnection">
            <summary>
            Should the main connection be used if all connections in the pool fail?
            </summary>
            <remarks>
            Some servers allow only one connection per user.  In these cases concurrent transfers are
            not possible.  If, however, concurrent transfers have been enabled and the main connection
            is not included in the pool (i.e. <see cref="P:EnterpriseDT.Net.Ftp.ConcurrentTransferSettings.PoolMode"/> is <see cref="!:PoolMode.ReserveMainConnection"/>), 
            then transfers will fail because no additional connections could be made.  In these cases,
            the main connection may be used as a fallback by having <c>FallBackToMainConnection</c> set
            to <c>true</c> (the default).  This has the potentially undesirable effect
            of tying up the main connection while files are being transferred, thus making it unavailable 
            for other operations, such as listing directories.  In GUI applications, this will result
            in a less responsive interface. 
            </remarks>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.ConcurrentTransferSettings.PropertyChanged">
            <summary>Occurs when a property is changed.</summary> 
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPTask">
            <summary>
            Describes an asynchronous method-call launched by one of <see cref="T:EnterpriseDT.Net.Ftp.ExFTPConnection"/>'s
            <c>Begin__()</c> methods.
            </summary>
            <remarks>
            <see cref="P:EnterpriseDT.Net.Ftp.FTPTask.TaskID"/> is a unique identifier for the asynchronous method-call.  It may be 
            passed to <see cref="!:ExFTPConnection.CancelTask()"/> to cancel the task.  The properties,
            <see cref="P:EnterpriseDT.Net.Ftp.FTPTask.Method"/>, <see cref="!:MethodName"/> and <see cref="P:EnterpriseDT.Net.Ftp.FTPTask.Arguments"/> provide information
            about the synchronous method being called (asynchronously).
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPTask.Cancel">
            <summary>
            Cancels this task (see <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.CancelTask(System.IAsyncResult)"/>.
            </summary>
            <returns><c>true</c> if the task was cancelled successfully.</returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPTask.Connection">
            <summary>
            Connection on which task was executed.
            </summary>
            <remarks>
            This property is <c>null</c> until the task has been completed.  It may be used
            in the callback.  The connection may be a pool connection or the main connection.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPTask.TaskID">
            <summary>
            ID of task.
            </summary>
            <remarks>Each <c>FTPTask</c> object returned by an asynchronous method will have a unique identifier.</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPTask.UsePool">
            <summary>
            Indicates whether or not the task is being executing using the connection pool.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPTask.Method">
            <summary>
            <see cref="T:System.Reflection.MethodInfo"/> object identifying the synchronous method being called (asynchronously).
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPTask.Arguments">
            <summary>
            Arguments being used.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPTask.Status">
            <summary>
            Current status of the task.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPTask.MethodIdentifier">
            <summary>
            Name of synchronous method being called (asynchronously).
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPTask.TaskStatus">
            <summary>
            Status of task.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPTask.TaskStatus.Queued">
            <summary>Task is in a queue waiting to run.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPTask.TaskStatus.Running">
            <summary>Task is currently running.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPTask.TaskStatus.Completed">
            <summary>Task has completed.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPTask.TaskStatus.Cancelled">
            <summary>Task has been cancelled.</summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPTaskState">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPTaskState.task">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPTaskState.connection">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPTaskState.#ctor(EnterpriseDT.Net.Ftp.FTPTask,EnterpriseDT.Net.Ftp.ExFTPConnection)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="task"></param>
            <param name="connection"></param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPTaskState.Task">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPTaskState.Connection">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPTaskEventArgs">
            <summary>
            Arguments for task-related events.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPTaskEventArgs.MethodIdentifier">
            <summary>
            Identified which method is called.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPTaskEventArgs.MethodsArguments">
            <summary>
            Arguments for the method.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPTaskEventArgs.Exception">
            <summary>
            Exception if one was thrown.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPTaskEventHandler">
            <summary>
            Delegate for task-related events.
            </summary>
            <param name="sender"><see cref="T:EnterpriseDT.Net.Ftp.ExFTPConnection"/> (or <see cref="T:EnterpriseDT.Net.Ftp.SecureFTPConnection"/>) 
            which threw the event.</param>
            <param name="e">Arguments of the event.</param>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPTaskCancelledException">
            <summary>
            Thrown when a task is cancelled before it has started running.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPTaskCancelledException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message.</param>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.MediaSource">
            <summary>
            placeholder for a media object to be uploaded
            the base class only defines some primitives like content type
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.MediaSource.#ctor(System.String)">
            <summary>
            constructs a media source based on a contenttype
            </summary>
            <param name="contenttype">the contenttype of the file</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.MediaSource.#ctor(System.String,System.String)">
            <summary>
            constructs a media source based on a contenttype and a name
            </summary>
            <param name="name">the name of the content</param>
            <param name="contenttype">the contenttype of the file</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.MediaSource.GetDataStream">
            <summary>
            returns a stream of the actual content that is base64 encoded
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.MediaSource.ContentLength">
            <summary>
            returns the length of the content of the media source
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.MediaSource.Name">
            <summary>
            the name value of the content influence directly the slug
            header send
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.MediaSource.ContentType">
            <summary>
            returns the contenttype of the media source, like img/jpg
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.MediaSource.Data">
            <summary>
            returns a stream of the actual content that is base64 encoded
            </summary>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.MediaFileSource">
            <summary>
            a file based implementation. Takes a filename as it's base working mode
            </summary>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.MediaFileSource.#ctor(System.String,System.String)">
            <summary>
            constructor. note that you can override the slug header without influencing the filename
            </summary>
            <param name="fileName">the file to be used, this will be the default slug header</param>
            <param name="contentType">the content type to be used</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.MediaFileSource.#ctor(System.IO.Stream,System.String,System.String)">
            <summary>
            constructor. note that you can override the slug header without influencing the filename
            </summary>
            <param name="data">The stream for the file. If this constructor is used, the filename is only 
            used for descriptive purposes, the data will be read from the passed stream</param>
            <param name="fileName">the file to be used, this will be the default slug header</param>
            <param name="contentType">the content type to be used</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.MediaFileSource.GetContentTypeForFileName(System.String)">
            <summary>
            tries to get a contenttype for a filename by using the classesRoot
            in the registry. Will FAIL if that filetype is not registered with a
            contenttype
            </summary>
            <param name="fileName"></param>
            <returns>NULL or the registered contenttype</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.MediaFileSource.GetDataStream">
            <summary>
            returns the stream for the file. The file will be opened in readonly mode
            note, the caller has to release the resource
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.MediaFileSource.ContentLength">
            <summary>
            returns the content lenght of the file
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.MediaFileSource.Data">
            <summary>
            returns the stream for the file. The file will be opened in readonly mode
            note, the caller has to release the resource
            </summary>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Design.EncodingConverter">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.EncodingConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.EncodingConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.EncodingConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="context"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.EncodingConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Util.PathUtil">
            <summary>
            Provides methods for dealing with FTP paths.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.Fix(System.String)">
            <summary>
            Cleans up a path such that, for example, "/A/B/../C" becomes "/A/C".
            </summary>
            <param name="path">Path to clean up.</param>
            <returns>Cleaned up path.</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.Fix(System.String[])">
            <summary>
            Cleans up a path such that, for example, "/A/B/../C" becomes "/A/C".
            </summary>
            <param name="path">Path to clean up as an array of strings where each string is a single directory.</param>
            <returns>Cleaned up path.</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.IsAbsolute(System.String)">
            <summary>
            Indicates whether or not a path is absolute (i.e. starts with '/').
            </summary>
            <param name="path">Path to check</param>
            <returns><c>true</c> if path is absolute</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.IsRelative(System.String)">
            <summary>
            Indicates whether or not a path is relative (i.e. does not start with '/').
            </summary>
            <param name="path">Path to check</param>
            <returns><c>true</c> if path is relative.</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.GetAbsolutePath(System.String,System.String)">
            <summary>
            Return the fixed absolute path for the given directory based on the given base directory.
            </summary>
            <param name="baseDirectory"></param>
            <param name="directory"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.GetFileName(System.String)">
            <summary>
            Gets the file-name without its path.
            </summary>
            <param name="path">Absolute or relative path</param>
            <returns>File-name</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.GetFileNameWithoutExtension(System.String)">
            <summary>
            Returns the filename of the specified path without the extension.
            </summary>
            <param name="path">Absolute or relative path</param>
            <returns>Filename of the specified path without the extension.</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.GetExtension(System.String)">
            <summary>
            Gets the extension of the filename.
            </summary>
            <param name="path">Absolute or relative path</param>
            <returns>Extension</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.GetFolderPath(System.String)">
            <summary>
            Gets the folder-path without the file-name
            </summary>
            <param name="path">Absolute or relative path</param>
            <returns>Folder path</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.Combine(System.String,System.String)">
            <summary>
            Combines two paths.
            </summary>
            <param name="pathLeft">Left part of path.</param>
            <param name="pathRight">Right part of path.</param>
            <returns>Combined path.</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.Combine(System.String,System.String,System.String[])">
            <summary>
            Combines an arbitrary number of paths.
            </summary>
            <param name="path1">Left part of path.</param>
            <param name="path2">Second-from-left part of path.</param>
            <param name="pathN">Rest of path.</param>
            <returns>Combined path.</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.Explode(System.String)">
            <summary>
            Splits the path into parts.
            </summary>
            <param name="path">Full path</param>
            <returns>Parts of the path.</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.Implode(System.String[],System.Int32,System.Int32)">
            <summary>
            Combines parts into a single path.
            </summary>
            <param name="parts">Parts</param>
            <param name="start">Start at part</param>
            <param name="length">Number of parts to combine</param>
            <returns>Single path</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.Implode(System.String[],System.Int32)">
            <summary>
            Combines parts into a single path.
            </summary>
            <param name="parts">Parts</param>
            <param name="start">Start at part</param>
            <returns>Single path</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.Implode(System.String[])">
            <summary>
            Combines parts into a single path.
            </summary>
            <param name="parts">Parts</param>
            <returns>Single path</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.EnsureTrailingSeparator(System.String)">
            <summary>
            Ensures that the last character is a separator character
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.Fix(System.Char,System.String)">
            <summary>
            Cleans up a path such that, for example, "/A/B/../C" becomes "/A/C".
            </summary>
            <param name="path">Path to clean up.</param>
            <returns>Cleaned up path.</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.Fix(System.Char,System.String[])">
            <summary>
            Cleans up a path such that, for example, "/A/B/../C" becomes "/A/C".
            </summary>
            <param name="path">Path to clean up as an array of strings where each string is a single directory.</param>
            <returns>Cleaned up path.</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.IsAbsolute(System.Char,System.String)">
            <summary>
            Indicates whether or not a path is absolute (i.e. starts with '/').
            </summary>
            <param name="path">Path to check</param>
            <returns><c>true</c> if path is absolute</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.IsRelative(System.Char,System.String)">
            <summary>
            Indicates whether or not a path is relative (i.e. does not start with '/').
            </summary>
            <param name="path">Path to check</param>
            <returns><c>true</c> if path is relative.</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.GetAbsolutePath(System.Char,System.String,System.String)">
            <summary>
            Return the fixed absolute path for the given directory based on the given base directory.
            </summary>
            <param name="baseDirectory"></param>
            <param name="directory"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.GetFileName(System.Char,System.String)">
            <summary>
            Gets the file-name without its path.
            </summary>
            <param name="path">Absolute or relative path</param>
            <returns>File-name</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.GetFileNameWithoutExtension(System.Char,System.String)">
            <summary>
            Returns the filename of the specified path without the extension.
            </summary>
            <param name="path">Absolute or relative path</param>
            <returns>Filename of the specified path without the extension.</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.GetExtension(System.Char,System.String)">
            <summary>
            Gets the extension of the filename.
            </summary>
            <param name="path">Absolute or relative path</param>
            <returns>Extension</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.GetFolderPath(System.Char,System.String)">
            <summary>
            Gets the folder-path without the file-name. If there are no 
            separators in the path, return the path as is
            </summary>
            <param name="path">Absolute or relative path</param>
            <returns>Folder path</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.Combine(System.Char,System.String,System.String)">
            <summary>
            Combines two paths.
            </summary>
            <param name="pathLeft">Left part of path.</param>
            <param name="pathRight">Right part of path.</param>
            <returns>Combined path.</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.Combine(System.Char,System.String,System.String,System.String[])">
            <summary>
            Combines an arbitrary number of paths.
            </summary>
            <param name="path1">Left part of path.</param>
            <param name="path2">Second-from-left part of path.</param>
            <param name="pathN">Rest of path.</param>
            <returns>Combined path.</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.Explode(System.Char,System.String)">
            <summary>
            Splits the path into parts.
            </summary>
            <param name="path">Full path</param>
            <returns>Parts of the path.</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.EnsureTrailingSeparator(System.Char,System.String)">
            <summary>
            Ensures that the last character is a separator character.
            </summary>
            <param name="separatorChar"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Util.PathUtil.DefaultSeparatorChar">
            <summary>
            Separator character (i.e. '/').
            </summary>
        </member>
        <member name="P:EnterpriseDT.Util.PathUtil.DefaultSeparator">
            <summary>
            Separator character as a string (i.e. "/").
            </summary>
        </member>
        <member name="P:EnterpriseDT.Util.PathUtil.WindowsSeparatorChar">
            <summary>
            Separator character (i.e. '\\').
            </summary>
        </member>
        <member name="P:EnterpriseDT.Util.PathUtil.WindowsSeparator">
            <summary>
            Separator character as a string (i.e. "\\").
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.BandwidthThrottler">
            <summary>  
            Helps throttle bandwidth for transfers
            </summary>
            <author>       
            Bruce Blackshaw
            </author>
            <version>      
            $Revision: 1.2 $
            </version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpAttrs">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpAttrs.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Forms.FTPLogView">
            <summary>
            <c>FTPLogView</c> displays logging messages in real-time.
            </summary>
            <remarks>
            <para>Logging messages provide detailed information about the internal operations of
            the FTP client components.  The level of detail can be controlled by means of
            the <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPLogView.LogLevel"/> property with <see cref="!:LogLevel.Off"/> being the lowest and
            <see cref="!:LogLevel.All"/> being the highest.</para>
            <para>A context-menu is displayed if the user right-clicks on the control.  The context menu
            has options for clearing all messages; selecting all messages; clearing the current selection;
            copying messages to the clipboard; and freezing the display.  Freezing the display means
            that no new messages are displayed.</para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPLogView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EnterpriseDT.Net.Ftp.Forms.FTPLogView"/> class. 
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPLogView.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the Control. 
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPLogView.LogLevel">
            <summary>
            Logging level - all messages at or below this level will be displayed.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPLogView.MaxLineLength">
            <summary>
            Maximum length of lines (-1 means no maximum).
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.MGetCommand">
            <summary>  Implements the mput command (mput [filter]
            
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.2 $
            
            </version>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHCV2.SSH2Connection.MAX_SEQUENCE_NUM">
            <summary>
            Maximum sequence number
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHCV2.SSH2Connection.log">
            <summary> Logging object</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.PortForwardingCheckResult.allowed">
            if you allow this request, set 'allowed' to true.
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.PortForwardingCheckResult.channel">
            if you allow this request, you must set 'channel' for this request. otherwise, 'channel' is ignored
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.PortForwardingCheckResult.reason_code">
            		 * if you disallow this request, you can set 'reason_code'.
            			The following reason codes are defined:
            
            			#define SSH_OPEN_ADMINISTRATIVELY_PROHIBITED    1
            			#define SSH_OPEN_CONNECT_FAILED                 2
            			#define SSH_OPEN_UNKNOWN_CHANNEL_TYPE           3
            			#define SSH_OPEN_RESOURCE_SHORTAGE              4
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.PortForwardingCheckResult.reason_message">
            if you disallow this request, you can set 'reason_message'. this message can contain only ASCII characters.
        </member>
        <member name="T:EnterpriseDT.Net.Proxy.ProxyConnector">
            <summary>
            Base class for all proxy connectors
            </summary>
        </member>
        <member name="T:EnterpriseDT.Util.Socks.SocksContext">
            <summary>
            <c>SockContext</c> and its subclasses hold information about how SOCKS
            connections are made.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Util.Socks.SocksContext.DEFAULT_PROXY_PORT">
            <summary>
            Default proxy port.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.Socks.SocksContext.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.Socks.SocksContext.#ctor(System.String)">
            <summary>
            Constructs a <c>SocksContext</c> setting the proxy-address.
            </summary>
            <param name="proxyAddress">Address to be used to connect to the proxy.</param>
        </member>
        <member name="M:EnterpriseDT.Util.Socks.SocksContext.#ctor(System.String,System.Int32)">
            <summary>
            Constructs a <c>SocksContext</c> setting the proxy-address and the proxy-port.
            </summary>
            <param name="proxyAddress">Address to be used to connect to the proxy.</param>
            <param name="proxyPort">Port on the proxy to connect to.</param>
        </member>
        <member name="M:EnterpriseDT.Util.Socks.SocksContext.#ctor(System.Net.IPAddress)">
            <summary>
            Constructs a <c>SocksContext</c> setting the proxy-address.
            </summary>
            <param name="proxyAddress">Address to be used to connect to the proxy.</param>
        </member>
        <member name="M:EnterpriseDT.Util.Socks.SocksContext.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Constructs a <c>SocksContext</c> setting the proxy-address and the proxy-port.
            </summary>
            <param name="proxyAddress">Address to be used to connect to the proxy.</param>
            <param name="proxyPort">Port on the proxy to connect to.</param>
        </member>
        <member name="P:EnterpriseDT.Util.Socks.SocksContext.ProxyAddress">
            <summary>
            Address to be used to connect to the proxy.
            </summary>
            <remarks>
            Proxies often have more than one address.  This address should be the one
            that the client must use to connect to it.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Util.Socks.SocksContext.ProxyPort">
            <summary>
            Port to be used to connect to the proxy.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Util.Socks.SocksContext.PublicProxyAddress">
            <summary>
            Address that the proxy server presents to the "outside" network.
            </summary>
            <remarks>
            <para>
            This is the address that systems that are being connected to through the proxy
            will see.
            </para>
            <para>
            SOCKS servers usually provide this address to the client as SOCKS connections
            to be made, so it's usually unnecessary to set this property.  In some instances 
            however, when the server does not provide this address it may be necessary to 
            set this property.
            </para>
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Util.Socks.SocksException">
            <summary>
            Indicates that a SOCKS communication error has occurred.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Spreadsheets.SpreadsheetQuery">
            <summary>
            A subclass of DocumentQuery, to create a Spreadsheets spreadsheet query URI.
            Provides public properties that describe the different
            aspects of the URI, as well as a composite URI.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.SpreadsheetQuery.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.SpreadsheetQuery.#ctor(System.String)">
            <summary>
            Constructor - Sets the base URI
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.EnumConstruct">
            <summary>
            Extensible enum type used in many places.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.EnumConstruct.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="xmlElement">the XmlElement that is used</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.EnumConstruct.#ctor(System.String,System.String)">
            <summary>
            Creates a new EnumConstruct instance with a specific type and value.
            When this constructor is used the instance has a constant value and
            may not be modified by the setValue() API.
            </summary>
            <param name="xmlElement">the XmlElement that is used</param>
            <param name="initialValue">the initial value of the type</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.EnumConstruct.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new EnumConstruct instance with a specific type and namespace
            </summary>
            <param name="xmlElement">the XmlElement that is used</param>
            <param name="prefix">the prefix to use</param>
            <param name="nameSpace">the namespace to use</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.EnumConstruct.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new EnumConstruct instance with a specific type, namespace and value.
            When this constructor is used the instance has a constant value and
            may not be modified by the setValue() API.
            </summary>
            <param name="xmlElement">the XmlElement that is used</param>
            <param name="prefix">the prefix to use</param>
            <param name="nameSpace">the namespace to use</param>
            <param name="initialValue">the initial value</param>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.EnumConstruct.readOnly">
            <summary>
            Construct value cannot be changed
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.EnumConstruct.Equals(System.Object)">
            <summary>
             Equal operator overload
            </summary>
            <param name="obj">the object to compare to</param>
            <returns>bool</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.EnumConstruct.GetHashCode">
            <summary>
             GetHashCode overload
            </summary>
            <returns>a hash based on the string value</returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.EnumConstruct.Type">
            <summary>
             Accessor Method for the enumType
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.EnumConstruct.Value">
            <summary>
             Accessor Method for the value
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.AppControl.AppControl">
            <summary>
            app:control schema extension
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.AppControl.AppControl.#ctor">
            <summary>
            default constructor for app:control
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.AppControl.AppControl.#ctor(System.String)">
            <summary>
            app:control constructor with namespace as parameter
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.AppControl.AppControl.VersionInfoChanged">
            <summary>
            need so setup the namespace based on the version information     
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.AppControl.AppControl.Draft">
            <summary>
            returns the app:draft element
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.AppControl.AppDraft">
            <summary>
            app:draft schema extension describing that an entry is in draft mode
            it's a child of app:control
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.AppControl.AppDraft.#ctor">
            <summary>
            default constructor for app:draft
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.AppControl.AppDraft.#ctor(System.Boolean)">
            <summary>
            default constructor for app:draft
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.AppControl.AppDraft.VersionInfoChanged">
            <summary>
            need so setup the namespace based on the version information
            changes
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.AppControl.AppDraft.BooleanValue">
            <summary>
             Accessor Method for the value as integer
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.AppControl.AppEdited">
            <summary>
            The "app:edited" element is a Date construct (as defined by
            [RFC4287]), whose content indicates the last time an Entry was
            edited.  If the entry has not been edited yet, the content indicates
            the time it was created.  Atom Entry elements in Collection Documents
            SHOULD contain one app:edited element, and MUST NOT contain more than
            one.
            The server SHOULD change the value of this element every time an
            Entry Resource or an associated Media Resource has been edited
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.AppControl.AppEdited.#ctor">
            <summary>
            creates a default app:edited element
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.AppControl.AppEdited.#ctor(System.DateTime)">
            <summary>
            creates a default app:edited element with the given datetime value
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.AppControl.AppEdited.#ctor(System.String)">
            <summary>
            creates an app:edited element with the string as it's
            default value. The string has to conform to RFC4287
            </summary>
            <param name="dateInUtc"></param>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.AppControl.AppEdited.DateValue">
            <summary>
             Accessor Method for the value as a DateTime
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.RecordCommand">
            <summary>  Record commands to file
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.2 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.AtomLink">
            <summary>AtomLink represents an atom:link element
            atomLink = element atom:link {
               atomCommonAttributes,
               attribute href { atomUri },
               attribute rel { atomNCName | atomUri }?,
               attribute type { atomMediaType }?,
               attribute hreflang { atomLanguageTag }?,
               attribute title { text }?,
               attribute length { text }?,
               empty
            </summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomLink.HTML_TYPE">
            <summary>HTML Link Type</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomLink.ATOM_TYPE">
            <summary>ATOM Link Type</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomLink.href">
            <summary>property holder exposed over get/set</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomLink.rel">
            <summary>property holder exposed over get/set</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomLink.type">
            <summary>property holder exposed over get/set</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomLink.hreflang">
            <summary>property holder exposed over get/set</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomLink.title">
            <summary>property holder exposed over get/set</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomLink.length">
            <summary>property holder exposed over get/set</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomLink.#ctor">
            <summary>default empty constructor</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomLink.#ctor(System.String)">
            <summary>public AtomLink(string uri)</summary> 
            <param name="link">the uri for the link </param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomLink.#ctor(System.String,System.String)">
            <summary>
            constructor used in atomfeed to create new links
            </summary>
            <param name="type">the type of link to create</param>
            <param name="rel">the rel value</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomLink.SaveXmlAttributes(System.Xml.XmlWriter)">
            <summary>overridden to save attributes for this(XmlWriter writer)</summary> 
            <param name="writer">the xmlwriter to save into </param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomLink.ShouldBePersisted">
            <summary>figures out if this object should be persisted</summary> 
            <returns> true, if it's worth saving</returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomLink.HRef">
            <summary>accessor method public Uri HRef</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomLink.AbsoluteUri">
            <summary>public string AbsoluteUri</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomLink.Rel">
            <summary>accessor method public string Rel</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomLink.Type">
            <summary>accessor method public string Type</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomLink.HRefLang">
            <summary>accessor method public string HrefLang</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomLink.Length">
            <summary>accessor method public int Lenght</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomLink.Title">
            <summary>accessor method public string Title</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomLink.XmlName">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Location.GeoRssExtensions">
            <summary>
            helper to instantiate all factories defined in here and attach 
            them to a base object
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Location.GeoRssExtensions.AddExtension(EnterpriseDT.Google.GData.Client.AtomBase)">
            <summary>
            helper to add all MediaRss extensions to a base object
            </summary>
            <param name="baseObject"></param>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Location.GeoNametable">
            <summary>
            short table for constants related to mediaRss declarations
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Location.GeoNametable.NSGeoRss">
            <summary>static string to specify the georss namespace
            </summary>
            <summary>static string to specify the GeoRSS namespace supported</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Location.GeoNametable.geoRssPrefix">
            <summary>static string to specify the GeoRSS prefix used</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Location.GeoNametable.NSGeoKml">
            <summary>static string to specify the KML namespapce supported</summary>    
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Location.GeoNametable.geoKmlPrefix">
            <summary>static string to specify the KML prefix used</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Location.GeoNametable.GeoRssWhereElement">
            <summary>static string to specify the the where element</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Location.GeoNametable.GeoKmlPointElement">
            <summary>static string to specify the the point element</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Location.GeoNametable.GeoKmlPositionElement">
            <summary>static string to specify the the pos element</summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Location.GeoRssWhere">
            <summary>
            GEORSS schema extension describing a location. You are only supposed to deal with that one,
            not it's subelements.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Location.GeoRssWhere.#ctor">
            <summary>
            default constructor for a GeoRSS where element
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Location.GeoRssWhere.#ctor(System.Double,System.Double)">
            <summary>
            Constructor for a GeoRSS where element with an
            initial lat and long
            </summary>
            <param name="latitude">The latitude of the point</param>
            <param name="longitude">The longitude of the point</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Location.GeoRssWhere.GetPosition(System.Boolean)">
            <summary>
            finds our position element, if we don't have one
            creates a new one depending on the fCreate parameter
            </summary>
            <param name="create">creates the subelements on true</param> 
            <returns>GeoKmlPosition</returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Location.GeoRssWhere.Latitude">
            <summary>
             accessor for the Latitude part 
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Location.GeoRssWhere.Longitude">
            <summary>
            accessor for the Longitude part
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Location.GeoKmlPoint">
            <summary>
            KmlPoint. Specifies a particular location, by means of a gml position
            element, appears as a child of a georss where element
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Location.GeoKmlPoint.#ctor">
            <summary>
            default constructor ofr a Kml:point element
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Location.GeoKmlPosition">
            <summary>
            KmlPos Specifies a latitude/longitude, seperated by a space
            appears as a child of a geokmlpoint element
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Location.GeoKmlPosition.#ctor">
            <summary>
            default constructor, creates a position element
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Location.GeoKmlPosition.#ctor(System.String)">
            <summary>
            default constructor, takes an initial value
            </summary>
            <param name="initValue"></param>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Location.GeoKmlPosition.Latitude">
            <summary>
            accessor for Latitude. Works by dynamically parsing
            the string that is stored in Value. Will THROW if
            that string is incorrectly formated
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Location.GeoKmlPosition.Longitude">
            <summary>
            accessor for Longitude. Works by dynamically parsing
            the string that is stored in Value. Will THROW if
            that string is incorrectly formated
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ssh.Routrek.SSHC.StringResources">
            <summary>
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpReadlink">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <remarks>
            byte   SSH_FXP_READLINK
            uint32 request-id
            string path  [UTF-8]
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpReadlink.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient">
             <summary>
             Provides low-level access to SFTP functionality.
             </summary>
             <remarks>
             <para>
             <c>SSHFTPClient</c> supports SOCKS (4, 4A, and 5) and SFTP.
             </para>
             <para>
             SSHFTPClient supports SFTP, which stands for SSH File Transfer Protocol. 
             Essentially, it is file transfer over an SSH connection, hence it has the
             security of SSH. SFTP is only superficially related to FTP and FTPS. It 
             achieves the same goals of file transfer and related operations, but the
             underlying protocol is entirely different.
             </para>
             <para>
             <example>This example shows a simple SFTP session.
             <code>
               // create an SFTP client
               SSHFTPClient ftp = new SSHFTPClient();
               ftp.RemoteHost = "192.168.10.123";
               
               // Turn off server validation (ONLY do this when testing)
               ftp.ServerValidation = SecureFTPServerValidationType.None;
               
               // set up the credentials for password authentication (the default)
               ftp.UserName = "myuser";
               ftp.Password = "mypassword";
             
               // connect to the server
               ftp.Connect();                        
            
               // get a file
               ftp.Get("file.txt", "file.txt");
            
               // close the connection
               ftp.Quit();
             </code>
             </example>
             </para>
             <para>
             This example uses password authentication and does not attempt to verify
             the server (which should always be done in production systems).
             </para>
             <para>  
             <b>Server Validation:</b>
             The examples above used no server validation.  This is only normally 
             acceptable only when testing.  To be secure applications should always 
             validate the server that they're communicating with.  If the 
             <see cref="!:ServerValidation"/> property is set to <c>SecureFTPServerValidationType.Automatic</c>
             or <c>SecureFTPServerValidationType.AutomaticIgnoreHostName</c> then 
             <c>SSHFTPClient</c> will attempt to validate the server's public key upon connection.  
             </para>
             <para>
             Public keys are managed by the <see cref="T:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager"/>, available in the 
             <see cref="!:KnownHosts"/> property. There are two ways that the client can load 
             server public keys - via the known_hosts file or by explicitly loading a public 
             key from a file.
             <list type="number">
             <item>
             <term>Known_hosts</term>
             <description>Many SSH implementations use a file called known_hosts which is 
             loaded by clients to validate servers. Typically, this file is generated when the 
             client first connects to a server - a prompt asks if the server should be added to 
             the list of known hosts. The known_hosts file contains a list of approved servers and 
             their public keys. The <see cref="T:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager"/> has a property called 
             <see cref="P:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.KnownHostsFile"/>. 
             The path of the known_hosts file should be assigned to this property to load the known 
             hosts in that file.
             </description>
             </item>
             <item>
             <term>Public key files</term>
             <description>Server public keys can also be maintained in their own key file and be 
             used for server validation without adding them to the known_hosts file. The 
             <see cref="T:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager"/> supports explicitly adding server public keys via
             the <see cref="M:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.AddKnownHost(System.String,System.String)"/> method. This requires the hostname and the public key file.
             SSH public key files have two standard formats - OpenSSH and SECSH.  Both these public key 
             formats are supported. 
             </description>
             </item>
             </list>
             </para>
             <para>  
             <b>Client Validation:</b>
             Client authentication can be either by password, by public/private keys, or by 
             keyboard- interactive authentication. The default is password authentication.
             The current authentication method can be found (and set) from the 
             <see cref="!:AuthenticationMethod"/> property. 
             <list type="number">
             <item>
             <term>Password authentication</term>
             <description>
             In password authentication, the <see cref="!:UserName"/> and <see cref="!:Password"/> 
             properties must be set, along with the ServerAddress. The user name and password should be that of the SSH 
             user that the client is logging in as. Note that some SFTP servers are set up to 
             disallow password authentication, in which case the connection attempt will fail 
             unless password authentication is enabled in the server configuration file.
             </description>
             </item>
             <item>
             <term>Public key authentication</term>
             <description>In public key authentication, SSH clients and servers authenticate 
             each other via public/private key pairs. Each must have access to their own private 
             key, and they must have access to each other's public key. The client's public key 
             must be registered with the SSH server, typically by copying it into the server's 
             <i>authorized_keys</i> file. The client's private key is loaded via the 
             <see cref="!:ClientPrivateKeyFile"/> property. Both DSA and RSA keypairs can be used. 
             The <see cref="!:UserName"/> and <see cref="!:Password"/> properties must be set, along 
             with the <see cref="!:RemoteHost"/>. Here the password is the passphrase of the private 
             key file. The <see cref="!:AuthenticationMethod"/> property must also be set to 
             <see cref="F:EnterpriseDT.Net.Ssh.AuthenticationType.PublicKey"/>. There are no formal standards for SSH 
             private key files, however two main formats are in common use - ssh.com and OpenSSH. 
             Both are supported.
             </description>
             </item>
             <item>
             <term>Keyboard-interactive authentication</term>
             <description>Keyboard-interactive (KBI) authentication is the most recently introduced 
             form of authentication for SSH. It involves the server sending prompts to the client, 
             which the client must respond to correctly to be authenticated. Its purpose is permit 
             the client to support a variety of authentication mechanisms without knowing anything 
             about them. This implementation of KBI authentication relies on the programmer knowing 
             the prompts in advance. The prompts are easily determined by connecting to the server
             via a command-line ssh client, using KBI. when the server sends its list of prompts that 
             require responses, the client searches the list of loaded <see cref="T:EnterpriseDT.Net.Ftp.Ssh.SSHAuthPrompt"/>s for each prompt. 
             It then sends the set responses back to the server. If the expected responses are supplied, 
             the authentication succeeds. If the prompt is for a user's password, it will typically 
             be something like "Password:". The <see cref="T:EnterpriseDT.Net.Ftp.Ssh.SSHPasswordPrompt"/> class is supplied to make 
             it easier to set up a password prompt. To set up the prompts, an array of SSHAuthPrompts
             is assigned to the <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.KBIPrompts"/> property. Note that to use KBI, the 
             <see cref="!:AuthenticationMethod"/> property must also be set to 
             <see cref="F:EnterpriseDT.Net.Ssh.AuthenticationType.KeyboardInteractive"/>. 
             </description>
             </item>
             </list>    
             </para>
             <para><b>Server Compatibility:</b>
             Generally, this class should work with most SFTP servers. Some servers return 
             an error saying the file does not exist after creating it. By
             default, the client does a permission change after creating the file, which 
             is done to ensure the file permissions are correct. If this error is encountered, try setting
             the <see cref="!:ServerCompatibility"/> property to <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPCompatibilityFlags.SSHDisableChmodAfterPut"/> 
             to try to eliminate the problem.
             </para>
             <para>
             <b>Public key algorithms:</b> 
             Either DSA or RSA or both can be set for the preferred public key algorithms for 
             server authentication. If, for example, RSA is set, the server will present 
             an RSA public key to the client (if the server supports RSA keys of 
             course - some servers do not). The <see cref="!:PreferredHostKeyAlgorithms"/> property is a 
             bitwise flag and can be set to combinations of the <see cref="T:EnterpriseDT.Net.Ssh.SSHPublicKeyAlgorithm"/> 
             enum values by OR'ing them together. The default is all algorithms enabled.
             </para>
             <para>
             <b>Cipher algorithms:</b> 
             The cipher algorithms are the symmetric algorithms used to perform the encryption 
             of the SFTP data and commands. The <see cref="!:PreferredCipherAlgorithms"/> property is a 
             bitwise flag and can be set to combinations of the <see cref="T:EnterpriseDT.Net.Ssh.SSHCipherAlgorithm"/> enum 
             values by OR'ing them together. The default is all algorithms enabled.
             </para>
             <para>
             <b>SOCKS:</b> SOCKS may be used for FTPing through firewalls.  For this to be possible
             a SOCKS proxy must be available, and a user account must be set up on that proxy.
             <c>SSLFTPClient</c> supports all the popular versions of SOCKS - 4, 4A, and 5.
             </para>
             <para>
             The SOCKS features are controlled entirely through the <see cref="T:EnterpriseDT.Util.Socks.SocksContext"/>
             property.  If it is <c>null</c> (the default) then SOCKS is not used.  To use SOCKS,
             the property must be set to an instance of <c>Socks4Context</c> or <c>Socks5Context</c>.
             For example, for SOCKS4:
             </para>
             <code>
            		myFTPClient.SocksContext = new Socks4Context("192.168.0.2", 1080, "marvin23");
             </code>
             and for SOCKS5:
             <code>
            		Socks5Context socksContext = new Socks5Context("192.168.0.2", 1080);
            		socksContext.AuthMethods.Add(new Socks5NoAuthMethod());
            		socksContext.AuthMethods.Add(new Socks5UserNamePasswordAuthMethod("marvin23", "m31erk"));
            		myFTPClient.SocksContext = socksContext;
             </code>
             </remarks>
             <author>Bruce Blackshaw</author>
             <version>$Revision$</version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient">
             <summary>
             Provides low-level access to SCP functionality.
             </summary>
             <remarks>
             <para>
             <c>SSHSCPClient</c> supports SOCKS (4, 4A, and 5) and SFTP.
             </para>
             <para>
             SSHSCPClient supports SFTP, which stands for SSH File Transfer Protocol. 
             Essentially, it is file transfer over an SSH connection, hence it has the
             security of SSH. SFTP is only superficially related to FTP and FTPS. It 
             achieves the same goals of file transfer and related operations, but the
             underlying protocol is entirely different.
             </para>
             <para>
             <example>This example shows a simple SFTP session.
             <code>
               // create an SCP client
               SSHSCPClient ftp = new SSHSCPClient();
               ftp.RemoteHost = "192.168.10.123";
               
               // Turn off server validation (ONLY do this when testing)
               ftp.ServerValidation = SecureFTPServerValidationType.None;
               
               // set up the credentials for password authentication (the default)
               ftp.UserName = "myuser";
               ftp.Password = "mypassword";
             
               // connect to the server
               ftp.Connect();                        
            
               // get a file
               ftp.Get("file.txt", "file.txt");
            
               // close the connection
               ftp.Quit();
             </code>
             </example>
             </para>
             <para>
             This example uses password authentication and does not attempt to verify
             the server (which should always be done in production systems).
             </para>
             <para>  
             <b>Server Validation:</b>
             The examples above used no server validation.  This is only normally 
             acceptable only when testing.  To be secure applications should always 
             validate the server that they're communicating with.  If the 
             <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.ServerValidation"/> property is set to <c>SecureFTPServerValidationType.Automatic</c>
             or <c>SecureFTPServerValidationType.AutomaticIgnoreHostName</c> then 
             <c>SSHSCPClient</c> will attempt to validate the server's public key upon connection.  
             </para>
             <para>
             Public keys are managed by the <see cref="T:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager"/>, available in the 
             <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.KnownHosts"/> property. There are two ways that the client can load 
             server public keys - via the known_hosts file or by explicitly loading a public 
             key from a file.
             <list type="number">
             <item>
             <term>Known_hosts</term>
             <description>Many SSH implementations use a file called known_hosts which is 
             loaded by clients to validate servers. Typically, this file is generated when the 
             client first connects to a server - a prompt asks if the server should be added to 
             the list of known hosts. The known_hosts file contains a list of approved servers and 
             their public keys. The <see cref="T:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager"/> has a property called 
             <see cref="P:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.KnownHostsFile"/>. 
             The path of the known_hosts file should be assigned to this property to load the known 
             hosts in that file.
             </description>
             </item>
             <item>
             <term>Public key files</term>
             <description>Server public keys can also be maintained in their own key file and be 
             used for server validation without adding them to the known_hosts file. The 
             <see cref="T:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager"/> supports explicitly adding server public keys via
             the <see cref="M:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.AddKnownHost(System.String,System.String)"/> method. This requires the hostname and the public key file.
             SSH public key files have two standard formats - OpenSSH and SECSH.  Both these public key 
             formats are supported. 
             </description>
             </item>
             </list>
             </para>
             <para>  
             <b>Client Validation:</b>
             Client authentication can be either by password, by public/private keys, or by 
             keyboard- interactive authentication. The default is password authentication.
             The current authentication method can be found (and set) from the 
             <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.AuthenticationMethod"/> property. 
             <list type="number">
             <item>
             <term>Password authentication</term>
             <description>
             In password authentication, the <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.UserName"/> and <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Password"/> 
             properties must be set, along with the ServerAddress. The user name and password should be that of the SSH 
             user that the client is logging in as. Note that some SFTP servers are set up to 
             disallow password authentication, in which case the connection attempt will fail 
             unless password authentication is enabled in the server configuration file.
             </description>
             </item>
             <item>
             <term>Public key authentication</term>
             <description>In public key authentication, SSH clients and servers authenticate 
             each other via public/private key pairs. Each must have access to their own private 
             key, and they must have access to each other's public key. The client's public key 
             must be registered with the SSH server, typically by copying it into the server's 
             <i>authorized_keys</i> file. The client's private key is loaded via the 
             <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.ClientPrivateKeyFile"/> property. Both DSA and RSA keypairs can be used. 
             The <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.UserName"/> and <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Password"/> properties must be set, along 
             with the <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.RemoteHost"/>. Here the password is the passphrase of the private 
             key file. The <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.AuthenticationMethod"/> property must also be set to 
             <see cref="F:EnterpriseDT.Net.Ssh.AuthenticationType.PublicKey"/>. There are no formal standards for SSH 
             private key files, however two main formats are in common use - ssh.com and OpenSSH. 
             Both are supported.
             </description>
             </item>
             <item>
             <term>Keyboard-interactive authentication</term>
             <description>Keyboard-interactive (KBI) authentication is the most recently introduced 
             form of authentication for SSH. It involves the server sending prompts to the client, 
             which the client must respond to correctly to be authenticated. Its purpose is permit 
             the client to support a variety of authentication mechanisms without knowing anything 
             about them. This implementation of KBI authentication relies on the programmer knowing 
             the prompts in advance. The prompts are easily determined by connecting to the server
             via a command-line ssh client, using KBI. when the server sends its list of prompts that 
             require responses, the client searches the list of loaded <see cref="T:EnterpriseDT.Net.Ftp.Ssh.SSHAuthPrompt"/>s for each prompt. 
             It then sends the set responses back to the server. If the expected responses are supplied, 
             the authentication succeeds. If the prompt is for a user's password, it will typically 
             be something like "Password:". The <see cref="T:EnterpriseDT.Net.Ftp.Ssh.SSHPasswordPrompt"/> class is supplied to make 
             it easier to set up a password prompt. To set up the prompts, an array of SSHAuthPrompts
             is assigned to the <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.KBIPrompts"/> property. Note that to use KBI, the 
             <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.AuthenticationMethod"/> property must also be set to 
             <see cref="F:EnterpriseDT.Net.Ssh.AuthenticationType.KeyboardInteractive"/>. 
             </description>
             </item>
             </list>    
             </para>
             <para><b>Server Compatibility:</b>
             Generally, this class should work with most SCP servers. Some servers return 
             an error saying the file does not exist after creating it. By
             default, the client does a permission change after creating the file, which 
             is done to ensure the file permissions are correct. If this error is encountered, try setting
             the <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.ServerCompatibility"/> property to <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPCompatibilityFlags.SSHDisableChmodAfterPut"/> 
             to try to eliminate the problem.
             </para>
             <para>
             <b>Public key algorithms:</b> 
             Either DSA or RSA or both can be set for the preferred public key algorithms for 
             server authentication. If, for example, RSA is set, the server will present 
             an RSA public key to the client (if the server supports RSA keys of 
             course - some servers do not). The <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.PreferredHostKeyAlgorithms"/> property is a 
             bitwise flag and can be set to combinations of the <see cref="T:EnterpriseDT.Net.Ssh.SSHPublicKeyAlgorithm"/> 
             enum values by OR'ing them together. The default is all algorithms enabled.
             </para>
             <para>
             <b>Cipher algorithms:</b> 
             The cipher algorithms are the symmetric algorithms used to perform the encryption 
             of the SFTP data and commands. The <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.PreferredCipherAlgorithms"/> property is a 
             bitwise flag and can be set to combinations of the <see cref="T:EnterpriseDT.Net.Ssh.SSHCipherAlgorithm"/> enum 
             values by OR'ing them together. The default is all algorithms enabled.
             </para>
             <para>
             <b>SOCKS:</b> SOCKS may be used for FTPing through firewalls.  For this to be possible
             a SOCKS proxy must be available, and a user account must be set up on that proxy.
             <c>SSLFTPClient</c> supports all the popular versions of SOCKS - 4, 4A, and 5.
             </para>
             <para>
             The SOCKS features are controlled entirely through the <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.SocksContext"/>
             property.  If it is <c>null</c> (the default) then SOCKS is not used.  To use SOCKS,
             the property must be set to an instance of <c>Socks4Context</c> or <c>Socks5Context</c>.
             For example, for SOCKS4:
             </para>
             <code>
            		mySCPClient.SocksContext = new Socks4Context("192.168.0.2", 1080, "marvin23");
             </code>
             and for SOCKS5:
             <code>
            		Socks5Context socksContext = new Socks5Context("192.168.0.2", 1080);
            		socksContext.AuthMethods.Add(new Socks5NoAuthMethod());
            		socksContext.AuthMethods.Add(new Socks5UserNamePasswordAuthMethod("marvin23", "m31erk"));
            		mySCPClient.SocksContext = socksContext;
             </code>
             </remarks>
             <author>Bruce Blackshaw</author>
             <version>$Revision: 1.7 $</version>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.DEFAULT_MONITOR_INTERVAL">
            <summary> Default byte interval for transfer monitor</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.DEFAULT_TIMEOUT">
            <summary>
            Default timeout for waiting for a server reply
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.BLOCKSIZE">
            <summary>
            Transfer buffer size
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.log">
            <summary> Logging object</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.logTag">
            <summary> Logging tag</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.compatFlags">
            <summary>
            Configuration flags for non-compliant servers
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.conn">
            <summary>
            The SSH connection
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.conParams">
            <summary>
            The connection parameters
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.receiver">
            <summary>
            Event receiver
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.prompts">
            <summary>
            List of authorization prompts
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.timeout">
            <summary>Timeout in milliseconds
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.DEFAULT_PORT">
            <summary>
            Default SSH port
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.controlPort" -->
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.remoteHost">
            <summary>
            Remote host we are connecting to
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.remoteIPAddress">
            <summary>
            IP address of remote host in string form
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.cwd">
            <summary>
            Current remote working directory
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.cancelTransfer">
            <summary>  Can be used to cancel a transfer</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.resume">
            <summary> If true, a file transfer is being resumed</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.deleteOnFailure">
            <summary>If a download to a file fails, delete the partial file</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.monitorInterval">
            <summary> Bytes transferred in between monitor callbacks</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.transferNotifyListings">
            <summary>  Should BytesTransferred event be triggered in directory listings?</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.transferType">
            <summary>  Record of the transfer type - make the default BINARY</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.compressionAlg">
            <summary>
            Compression algorithms
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.transferBufferSize">
            <summary> Size of transfer buffers</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.serverValidation">
            <summary>Determines how the remote host is validated</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.knownHostsManager">
            <summary>Manages the list of known hosts</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.closeStreamsAfterTransfer">
            <summary>
            If <c>true</c> then streams are closed after a transfer has completed.
            </summary>
            <remarks>
            The default is <c>true</c>.
            </remarks>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.socks">
            <summary>
            SOCKS settings
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient._proxySettings">
            <summary>
            Proxy settings
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.detectTransferMode">
            <summary>  
            Do we detect transfer mode when transferring files?
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.throttler">
            <summary>
            Threshold for throttling
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.lastBytesTransferred">
            <summary>
            Holds the number of bytes transferred in that most recent transfer.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.lastFileTransferred">
            <summary>
            Name of the last file transferred.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.licenseProps">
            <summary>
            License module
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.key">
            <summary>
            License key
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.owner">
            <summary>
            License owner
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.TestConnection">
            <summary>
            Tests the connection
            </summary>
            <returns>true if connection ok</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Init">
            <summary>
            Initialise client
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Connect">
            <summary>
            Establish a connection to the SFTP server
            </summary>
            <remarks>
            At a minimum, the RemoteHost, User and Password properties must be set
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.ServerError(System.Object,EnterpriseDT.Net.Ftp.FTPMessageEventArgs)">
            <summary>
            Send server errors on as replies received
            </summary>
            <param name="client"></param>
            <param name="message"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.CheckParams(EnterpriseDT.Net.Ssh.Routrek.SSHC.SSHConnectionParameter)">
            <summary>
            Check the supplied params for any missing fields
            </summary>
            <param name="sshParams">params reference</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.ConnectSocket(EnterpriseDT.Net.StandardSocket,System.String,System.Int32,EnterpriseDT.Net.Proxy.ProxyConnector)">
            <summary>   
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Quit">
            <summary>
            Quit the session
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.QuitImmediately">
            <summary>
            Quit the session immediately. Just close the socket. Don't send
            any messages to the server.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Get(System.String,System.String)">
            <summary>
            Get data from the SFTP server using the currently
            set transfer mode.
            </summary>
            <param name="local">Local file to put data in.</param>
            <param name="remote">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Get(System.IO.Stream,System.String)">
            <summary>
            Get data from the server
            </summary>
            <remarks>
            The stream is closed after the transfer is complete if
            <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.CloseStreamsAfterTransfer"/> is <c>true</c> (the default) and are left
            open otherwise.
            </remarks>
            <param name="local">Data stream to write data to.</param>
            <param name="remote">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Get(System.String)">
            <summary>Get data from the SFTP server.</summary>
            <remarks>
            Transfers in whatever mode we are in. Retrieve as a byte array. Note
            that we may experience memory limitations as the
            entire file must be held in memory at one time.
            </remarks>
            <param name="remoteFile">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Get(System.IO.Stream,System.String,System.String)">
            <summary>
            The master Get() method that all other Gets() delegate to
            </summary>
            <param name="local"></param>
            <param name="localFile"></param>
            <param name="remote"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Put(System.String,System.String)">
            <summary>
            Put a local file onto the SFTP server in the current directory.
            </summary>
            <param name="localPath">Path of the local file.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Put(System.String,System.String,System.Boolean)">
            <summary>
            Upload a local file to the server
            </summary>
            <param name="local">name or path of local file</param>
            <param name="remote">name of remote file</param>
            <param name="append">true if appending to existing remote file</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Put(System.IO.Stream,System.String)">
            <summary>
            Put a stream of data onto the FTP server in the current directory.
            </summary>
            <remarks>
            The stream is closed after the transfer is complete if
            <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.CloseStreamsAfterTransfer"/> is <c>true</c> (the default) and are left
            open otherwise.
            </remarks>
            <param name="input">Input stream of data to put.</param>
            <param name="remote">Name of remote file in current directory.</param>
            <returns>Number of bytes transferred.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Put(System.IO.Stream,System.String,System.Boolean)">
            <summary>
            Put a stream of data onto the FTP server in the current directory.  Allows appending
            if current file exists
            </summary>
            <remarks>
            The stream is closed after the transfer is complete if
            <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.CloseStreamsAfterTransfer"/> is <c>true</c> (the default) and are left
            open otherwise.
            </remarks>
            <param name="input">Input stream of data to put.</param>
            <param name="remote">Name of remote file in current directory.</param>
            <param name="append"><c>true</c> if appending, <c>false</c> otherwise.</param>
            <returns>Number of bytes transferred.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Put(System.Byte[],System.String)">
            <summary>
            Put data onto the server
            </summary>
            <param name="bytes">Array of bytes to put.</param>
            <param name="remote">Name of remote file or path.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Put(System.Byte[],System.String,System.Boolean)">
            <summary>
            Put data onto the SFTP server in the current directory. Allows
            appending if current file exists.
            </summary>
            <param name="bytes">Array of bytes to put.</param>
            <param name="remote">Name of remote file in current directory.</param>
            <param name="append"><c>true</c> if appending, <c>false</c> otherwise.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Put(System.IO.Stream,System.String,System.Int64,System.String)">
            <summary>
            The master Put() method that all other Puts() delegate to
            </summary>
            <param name="input"></param>
            <param name="local"></param>
            <param name="remote"></param>
            <param name="append"></param>
            <returns>Number of bytes transferred.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.CdUp">
            <summary>
            Change the remote working directory to parent
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.ChDir(System.String)">
            <summary>
            Change the remote working directory
            </summary>
            <param name="dir">directory to change to</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Dir">
            <summary>
            List current directory's contents as an array of strings of
            filenames.
            </summary>
            <returns>An array of current directory listing strings.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Dir(System.String,System.Boolean)">
            <summary>
            List a directory's contents as an array of strings.
            </summary>
            <remarks>
            If <c>full</c> is <c>true</c> then a detailed
            listing if returned (if available), otherwise just filenames are provided.
            The detailed listing varies in details depending on OS and
            SFTP server. Note that a full listing can be used on a file
            name to obtain information about a file
            </remarks> 
            <param name="dirname">Name of directory</param>
            <param name="full"><c>true</c> if detailed listing required, <c>false</c> otherwise.</param>
            <returns>An array of directory listing strings.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Dir(System.String)">
            <summary>
            List a directory's contents as an array of strings of filenames.
            </summary>
            <param name="dirname">Name of directory OR filemask.</param>
            <returns>An array of directory listing strings.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.DirDetails(System.String)">
            <summary>
            List a directory's contents as an array of FTPFile objects.
            </summary>
            <param name="dirname">Name of directory </param>
            <returns>An array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.DirDetails">
            <summary>
            List the current directory's contents as an array of FTPFile objects.
            </summary>
            <returns>An array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.MkDir(System.String)">
            <summary>Create the specified remote working directory.</summary>
            <param name="dir">Name or path of remote directory to create.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Pwd">
            <summary>
            Get the current remote working directory
            </summary>
            <returns>current remote working directory</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.RmDir(System.String)">
            <summary>
            Remove a directory
            </summary>
            <param name="path">directory to remove</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.GetLocalCRC(System.String)">
            <summary>
            Get the CRC-32 checksum for the named local file
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.GetRemoteCRC(System.String)">
            <summary>
            Get the CRC-32 checksum for the named remote file. Not supported in SFTP.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Delete(System.String)">
            <summary>Delete the specified remote file.</summary>
            <param name="path">Name or path of remote file to delete.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.ModTime(System.String)">
            <summary>Get modification time for a remote file.</summary>
            <param name="path">Name or path of remote file.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.SetModTime(System.String,System.DateTime)">
            <summary>Set modification time for a remote file.</summary>
            <param name="path">Name or path of remote file.</param>
            <param name="modTime">Modification-time to set in local time.</param>
            <returns>Modification time of file as a <c>DateTime</c>.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Rename(System.String,System.String)">
            <summary>
            Rename a remote file
            </summary>
            <param name="from">old name</param>
            <param name="to">new name</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Exists(System.String)">
            <summary>
            Checks for the existence of a file on the server.
            </summary>
            <param name="remoteFile"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Size(System.String)">
            <summary>
            Get the size of a remote file. 
            </summary>
            <param name="path">Name or path of remote file in current directory.</param>
            <returns>Size of file in bytes.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.CancelResume">
            <summary> 
            Cancel the resume. Use this method if something goes wrong
            and the server is left in an inconsistent state. Not used in
            SCP as resume is not supported
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.CancelTransfer">
            <summary>Cancels the current transfer.</summary>
            <remarks>This method is generally called from a separate
            thread. Note that this may leave partially written files on the
            server or on local disk, and should not be used unless absolutely
            necessary. The server is not notified.</remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Resume">
            <summary>Make the next file transfer (put or get) resume.</summary>
            <remarks>
            <para>
            For puts, the
            bytes already transferred are skipped over, while for gets, if 
            writing to a file, it is opened in append mode, and only the bytes
            required are transferred.
            </para>
            <para>
            Currently resume is only supported for BINARY transfers (which is
            generally what it is most useful for). 
            </para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.ResumeDownload(System.Int64)">
            <summary>Make the next download resume at a specific point.</summary>
            <remarks>
            <para>
            This resume method allows the resume offset to be set explicitly for downloads. 
            Offset bytes are skipped before downloading the file.
            </para>
            <para>
            Currently resume is only supported for BINARY transfers (which is
            generally what it is most useful for). 
            </para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.DirDetails(System.String,System.Boolean)">
            <summary>
            Returns the given directory's contents and optionally that of its subdirectories 
            as an array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.
            </summary>
            <remarks>
            <para>If <c>includeSubdirectories</c> is set to <c>true</c> then the <see cref="P:EnterpriseDT.Net.Ftp.FTPFile.Children"/> property 
            of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects corresponding to subdirectories will contain the content of
            that subdirectory.</para>
            <para>This method works for Windows and most Unix FTP servers.  Please inform EDT
            about unusual formats (<a href="support@enterprisedt.com">support@enterprisedt.com</a>).</para>
            </remarks>
            <param name="directory">Name of directory AND/OR filemask.</param>
            <param name="includeSubdirectories">Use <c>true</c> if subdirectories are required.</param>
            <returns>An array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.MultipleDelete(System.String)">
            <summary>
            Delete multiple files in the current remote directory
            </summary>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <remarks>Wildcard characters supported are '?' and '*'</remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.MultipleDelete(EnterpriseDT.Net.Ftp.FileFilter)">
            <summary>
            Delete multiple files in the current remote directory
            </summary>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.MultipleDelete(System.String,System.String,System.Boolean)">
            <summary>
            Delete multiple files in the current remote directory and its subdirectories.
            </summary>
            <param name="remoteDir">remote directory to delete</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="recurse">if true, recurse down into subdirectories</param>
            <remarks>Wildcard characters supported are '?' and '*'. Subdirectories are not deleted</remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.MultipleDelete(System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary>
            Delete multiple files in the current remote directory and its subdirectories.
            </summary>
            <param name="remoteDir">remote directory to delete</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="recurse">if true, recurse down into subdirectories</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.MultipleDeleteDirectories(System.String)">
            <summary>
            Remove a remote directory, and all its files and its subdirectories
            </summary>
            <param name="remoteDir">the remote directory's name</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.MultiplePut(System.String,System.String)">
            <summary>
            Put multiple files from the specified local directory into the current remote directory
            </summary>
            <param name="localDir">local directory to get files from</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.MultiplePut(System.String,EnterpriseDT.Net.Ftp.FileFilter)">
            <summary>
            Put multiple files from the specified local directory into the current remote directory
            </summary>
            <param name="localDir">local directory to get files from</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.MultiplePut(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Put multiple files from the specified local directory into the specified remote directory
            </summary>
            <remarks>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories
            </remarks>
            <param name="localDir">local directory name</param>
            <param name="remoteDir">remote directory name</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="recurse">if true, subdirectories are put</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.MultiplePut(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary>
            Put multiple files from the specified local directory into the specified remote directory
            </summary>
            <remarks>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories
            </remarks>
            <param name="localDir">local directory name</param>
            <param name="remoteDir">remote directory name</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="recurse">if true, subdirectories are put</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.MultipleGet(System.String,System.String)">
            <summary>
            Get multiple files into the specified local directory from the current remote directory
            </summary>
            <param name="localDir">local directory to get files into</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.MultipleGet(System.String,EnterpriseDT.Net.Ftp.FileFilter)">
            <summary>
            Get multiple files into the specified local directory from the current remote directory
            </summary>
            <param name="localDir">local directory to get files into</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.MultipleGet(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Get multiple files from the specified remote directory into the specified local directory
            </summary>
            <remarks>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories
            </remarks>
            <param name="localDir">local directory name</param>
            <param name="remoteDir">remote directory name</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="recurse">if true, subdirectories are put</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.MultipleGet(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary>
            Get multiple files from the specified remote directory into the specified local directory
            </summary>
            <remarks>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories
            </remarks>
            <param name="localDir">local directory name</param>
            <param name="remoteDir">remote directory name</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="recurse">if true, subdirectories are put</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.CheckConnection(System.Boolean)">
            <summary> 
            Checks if the client has connected to the server and throws an exception if it hasn't.
            This is only intended to be used by subclasses
            </summary>
            <throws>SFTPException Thrown if the client has not connected to the server. </throws>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.CheckTimeout(System.DateTime,System.String)">
            <summary>
            Check to see if the timeout has expired
            </summary>
            <param name="start">start time</param>
            <param name="msg">error message if expired</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.HostKeyChecker(EnterpriseDT.Net.Ssh.Routrek.SSHC.SSHConnectionInfo)">
            <summary>
            Callback that is called to validate the remote host's public key
            against our known hosts
            </summary>
            <param name="connectionInfo">holds details about the connection including the hostkey</param>
            <returns>true if check is ok, false otherwise</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Unlock(System.String,System.String)">
            <summary>
            Unlock the software for use. This method should be used when
            a configuration file isn't available
            </summary>
            <param name="owner">owner string</param>
            <param name="key">license key</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.CheckLicense">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.ValidatingServer">
            <summary>
            Notifies that the server must be validated
            </summary>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.TransferStartedEx">
            <summary>
            Notifies of the start of a transfer
            </summary>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.TransferCompleteEx">
            <summary>
            Notifies of the completion of a transfer
            </summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.TransferCancelled">
            <summary>
            Notifies of the cancellation of a transfer
            </summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.BytesTransferred">
            <summary>
            Event triggered every time <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.TransferNotifyInterval"/> bytes transferred.
            </summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.CommandSent">
            <summary>
            Triggered every time a command is sent to the server.
            </summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.ReplyReceived">
            <summary>
            Triggered every time a logical reply is received from the server. In SFTP this will NOT
            be triggered for every packet that arrives.
            </summary> 
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.DeleteOnFailure">
            <summary>
            Controls whether or not a file is deleted when a failure occurs.
            </summary>
            <remarks>
            <para>
            If <c>true</c>, a partially downloaded file is deleted if there
            is a failure during the download.  For example, the connection
            to the SFTP server might have failed. If <c>false</c>, the partially
            downloaded file remains on the SFTP client machine - and the download
            may be resumed, if it is a binary transfer.
            </para>
            <para>
            By default this flag is set to <c>true</c>.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.CloseStreamsAfterTransfer">
            <summary>
            If <c>true</c> then streams are closed after a transfer has completed.
            </summary>
            <remarks>This only applies to streams passed in to Get or Put methods - local files
            are always closed</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Timeout">
            <summary> 
            Overall timeout in milliseconds for waiting for messages and underlying
            timeouts on sockets.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.ShowHiddenFiles">
            <summary>
            Include hidden files in operations that involve listing of directories,
            and if supported by the server. Not supported in SFTP.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.WelcomeMessage">
            <summary>
            Server's banner.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.LastBytesTransferred">
            <summary>
            The number of bytes transferred in the last transfer operation.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.LastFileTransferred">
            <summary>
            The remote name/path of the last file transferred.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.IsConnected">
            <summary>
            Indicates whether the client is currently connected with the server.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.TransferType">
            <summary>The current file transfer type (BINARY or ASCII).</summary>
            <value>Transfer-type to be used for uploads and downloads.</value>
            <remarks>When the transfer-type is set to <c>BINARY</c> then files
            are transferred byte-for-byte such that the transferred file will
            be identical to the original.
            When the transfer-type is set to <c>ASCII</c> then end-of-line
            characters will be translated where necessary between Windows and
            UNIX formats.</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.TransferBufferSize">
            <summary>
            The size of the buffers (in bytes) used in writing to and reading from the data-sockets.
            </summary>
            <remarks>Think very carefully before changing this property - it is unlikely you will ever need to</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.TransferNotifyInterval">
            <summary>
            The number of bytes transferred between each notification of the
            <see cref="E:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.BytesTransferred"/> event.
            </summary>
            <remarks>
            Reduce this value to receive more frequent notifications of transfer progress.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.TransferNotifyListings">
            <summary>
            By default the BytesTransferred event is not triggered during directory 
            listings - this property can be used to enable this behaviour.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.MaxTransferRate">
            <summary>
            The maximum transfer rate in bytes per sec
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.SocksContext">
            <summary>
            Controls SOCKS integration.
            </summary>
            <remarks>
            <para>
            SOCKS may be used for FTPing through firewalls.  For this to be possible
            a SOCKS proxy must be available, and a user account must be set up on that proxy.
            <c>SSLFTPClient</c> supports all the popular versions of SOCKS - 4, 4A, and 5.
            </para>
            <para>
            The SOCKS features are controlled entirely through the <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.SocksContext"/>
            property.  If it is <c>null</c> (the default) then SOCKS is not used.  To use SOCKS,
            the property must be set to an instance of <c>Socks4Context</c> or <c>Socks5Context</c>.
            For example, for SOCKS4:
            </para>
            <code>
            	mySCPClient.SocksContext = new Socks4Context("192.168.0.2", 1080, "marvin23");
            </code>
            and for SOCKS5:
            <code>
            	Socks5Context socks = new Socks5Context("192.168.0.2", 1080);
            	socks.AuthMethods.Add(new Socks5NoAuthMethod());
            	socks.AuthMethods.Add(new Socks5UserNamePasswordAuthMethod("marvin23", "m31erk"));
            	mySCPClient.SocksContext = socks;
            </code>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.ProxySettings">
            <summary>
            Settings for using proxies.
            </summary>
            <remarks>
            <para>
            Proxies may be used for FTPing through firewalls.  HTTP and SOCKS (4,4A and 4) are
            supported.  
            </para>
            <para>
             SOCKS supports both passive (PASV) and active (PORT) mode transfers. 
             Note that only passive mode transfers are possible via an HTTP proxy. There
             is no facility for HTTP proxies to listen for incoming connections, and hence active
             mode transfers cannot be done via an HTTP proxy. An exception will be thrown
             if they are attempted.
            </para>
            <para>
             Often a username and password will be required to authenticate with the proxy.
             These can be set in <c>ProxySettings</c>. 
            </para>
            <para><c>ProxySettings</c> is easiest to edit via the Property View.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.ServerCompatibility">
            <summary>
            Controls various server compatibility features.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.AuthenticationMethod">
            <summary>
            Get or set the current authentication method being used. 
            </summary>
            <remarks>Note that the different authentication types also have 
            various required properties associated with them that are required
            to be set.</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.KBIPrompts">
            <summary>
            Array of prompts used for keyboard interactive (KBI) authentication. 
            </summary>
            <remarks>Setting this property sets up keyboard interactive authentication. 
            The prompts that the server will send to the client must be known. For each prompt, an
            <see cref="T:EnterpriseDT.Net.Ftp.Ssh.SSHAuthPrompt"/> must be created with the matching prompt string and the
            response to be sent back to the server. Often, a single password prompt is all that is 
            required, and a <see cref="T:EnterpriseDT.Net.Ftp.Ssh.SSHPasswordPrompt"/> is supplied for this purpose. 
            For this property to be used, <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.AuthenticationMethod"/> must be set to
            <see cref="F:EnterpriseDT.Net.Ssh.AuthenticationType.KeyboardInteractive"/>.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.PreferredHostKeyAlgorithms">
            <summary>Preferred algorithm(s) to use for server authentication via public key</summary>
            <remarks>The default is generally appropriate in most situations.</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.PreferredCompressionAlgorithms">
            <summary>Preferred algorithm(s) to use for data compression</summary>
            <remarks>The default is generally appropriate in most situations.</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.PreferredMACAlgorithms">
            <summary>Preferred MAC algorithm(s)</summary>
            <remarks>The default is generally appropriate in most situations.</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.PreferredCipherAlgorithms">
            <summary>Preferred algorithm(s) to use for encryption.</summary>
            <remarks>The default is generally appropriate in most situations.</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.PreferredKeyExchangeMethods">
            <summary>Preferred methods to use for key exchange.</summary>
            <remarks>The default is generally appropriate in most situations.</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.ClientPrivateKeyFile">
            <summary>Path of the private key file used to authenticate the client</summary>
            <value>Path of the private key file used to authenticate the client.</value>
            <remarks>This property must be set before a connection with the server is made. 
            The SFTP server must have been set up with the corresponding public key before this 
            authentication method is used. For this property to be used, 
            <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.AuthenticationMethod"/> must be set to
            <see cref="F:EnterpriseDT.Net.Ssh.AuthenticationType.KeyboardInteractive"/>.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.ClientPrivateKeyBytes" -->
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.ServerValidation">
            <summary>
            Controls the way in which remote servers are validated.
            </summary>
            <remarks>
            It is unwise to have host validation disabled except in testing. For
            <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPServerValidationType.Automatic"/> or 
            <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPServerValidationType.AutomaticNoNameCheck"/> to succeed,
            the known hosts file must be loaded or at least one host key must have been 
            added via the <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.KnownHosts"/> manager. 
            The default is <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPServerValidationType.Automatic"/>, which checks
            both the hostname and public key. <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPServerValidationType.AutomaticNoNameCheck"/>
            only checks that the public key supplied by the server has a matching public key 
            in the client host key store irrespective of hostname.
            For 
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.KnownHosts">
            <summary>Manager of the list of known hosts used to authenticate the server.</summary>
            <value>Manager of the list of known hosts used to authenticate the server.</value>
            <remarks>This manager is used to set the known_hosts file containing a list of
            known hosts and their public keys. It is also used to add public keys explicitly</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.UserName">
            <summary>User-name of account on the server.</summary>
            <value>The user-name of the account the SFTP server that will be logged into upon connection.</value>
            <remarks>This property must be set before a connection with the server is made.</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Password">
            <summary>Password of account on the server or the passphrase of the private key file.</summary>
            <value>The password of the account on the server.</value>
            <remarks>This property must be set before a connection with the server is made. For
            backwards compatability, if the <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.ClientPrivateKeyFile"/>
            property is set and <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.ClientPrivateKeyPassphrase"/> is not set, then this password is also set to
            the passphrase of the private key to be supplied.</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.ClientPrivateKeyPassphrase">
            <summary>Passphrase of the private key file.</summary>
            <value>The passphrase of the private key file.</value>
            <remarks>This property must be set before a connection with the server is made. </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.RemoteHost">
            <summary>
            The domain-name or IP address of the SFTP server.
            </summary>
            <remarks>
            <para>This property may only be set if not currently connected.</para>.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.ControlPort">
            <summary>
            The port on the server to which to connect the control-channel. 
            </summary>
            <remarks>
            <para>Most SSH servers use port 22 (the default)</para>
            <para>This property may only be set if not currently connected.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.WindowSize">
            <summary>
            The SSH window size. 
            </summary>
            <remarks>
            <para>This should normally be left alone unless familiar with SSH.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.MaxPacketSize">
            <summary>
            The SSH maximum packet size. 
            </summary>
            <remarks>
            <para>This should normally be left alone unless familiar with SSH.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.SendInitialWindowAdjust">
            <summary>
            Determines whether a SSH_MSG_CHANNEL_WINDOW_ADJUST message should be
            sent initially (true by default). 
            </summary>
            <remarks>
            <para>Occasionally some servers don't seem to like getting this initial message, and in this
            case set this property to false. This should normally be left alone unless familiar with SSH.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.IsResuming">
            <summary>
            Returns <c>true</c> if the next transfer is to be resumed (i.e. <see cref="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Resume"/> has been called).
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.LicenseOwner">
            <summary>
            The license owner string.
            </summary>
            <remarks>
            The license owner must be set for the software to function correctly past the trial period.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.LicenseKey">
            <summary>
            The license key string.
            </summary>
            <remarks>
            The license key must be set for the software to function correctly past the trial period.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.LogTag">
            <summary>Log tag</summary>
            <remarks>Must be set immediately after construction</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.DetectTransferMode">
            <summary>
            If set to true, the transfer mode in operations involving multiple files is 
            automatically changed between ASCII and binary as appropriate.
            </summary>
            <remarks>
            <see cref="M:EnterpriseDT.Net.Ftp.FileTypes.RegisterExtension(System.String)"/> for how to register a file extension as ASCII, and
            <see cref="T:EnterpriseDT.Net.Ftp.FileTypes"/> for how to obtain the current registered extensions
            </remarks> 
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.CARRIAGE_RETURN">
            <summary>
            Used for ASCII translation
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.LINE_FEED">
            <summary>
            Used for ASCII translation
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.DEFAULT_UMASK">
            <summary>
            Default value of umask.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.DEFAULT_PERMISSIONS">
            <summary>
            Default value of umask.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.log">
            <summary> Logging object</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.LINE_SEPARATOR">
            <summary>
            Assume we are on Windows
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.remoteEOL">
            <summary>
            The type of remote EOL that has been deduced
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.umask">
            <summary>
            Default permissions are determined by defaultPermissions ^ umask
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.defaultPermissions">
            <summary>
            Default permissions for new files
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.sftpReceiver">
            <summary>
            Event receiver
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.sftp">
            <summary>
            Reference to the SFTP SSH subsystem
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.messages">
            <summary>
            Message store for SFTP messages
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.resumeMarker">
            <summary> Resume byte marker point</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.rops">
            <summary>  
            Helper class for performing recursive ops
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.filenameEncoding">
            <summary>
            Encoding for filenames for version 3 and below
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.parallelMode">
            <summary>
            
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.Init">
            <summary>
            Initialise client
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.Connect">
            <summary>
            Establish a connection to the SFTP server
            </summary>
            <remarks>
            At a minimum, the RemoteHost, User and Password properties must be set
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.Quit">
            <summary>
            Quit the session
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.QuitImmediately">
            <summary>
            Quit the session immediately. Just close the socket. Don't send
            any messages to the server.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.Get(System.String,System.String)">
            <summary>
            Get data from the SFTP server using the currently
            set transfer mode.
            </summary>
            <param name="local">Local file to put data in.</param>
            <param name="remote">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.Get(System.IO.Stream,System.String,System.String)">
            <summary>
            The master Get() method that all other Gets() delegate to
            </summary>
            <param name="local"></param>
            <param name="localFile"></param>
            <param name="remote"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.Put(System.String,System.String)">
            <summary>
            Put a local file onto the SFTP server in the current directory.
            </summary>
            <param name="localPath">Path of the local file.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.Put(System.String,System.String,System.Boolean)">
            <summary>
            Upload a local file to the server
            </summary>
            <param name="local">name or path of local file</param>
            <param name="remote">name of remote file</param>
            <param name="append">true if appending to existing remote file</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.Put(System.IO.Stream,System.String)">
            <summary>
            Put a stream of data onto the FTP server in the current directory.
            </summary>
            <remarks>
            The stream is closed after the transfer is complete if
            <see cref="!:CloseStreamsAfterTransfer"/> is <c>true</c> (the default) and are left
            open otherwise.
            </remarks>
            <param name="input">Input stream of data to put.</param>
            <param name="remote">Name of remote file in current directory.</param>
            <returns>Number of bytes transferred.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.Put(System.IO.Stream,System.String,System.Boolean)">
            <summary>
            Put a stream of data onto the FTP server in the current directory.  Allows appending
            if current file exists
            </summary>
            <remarks>
            The stream is closed after the transfer is complete if
            <see cref="!:CloseStreamsAfterTransfer"/> is <c>true</c> (the default) and are left
            open otherwise.
            </remarks>
            <param name="input">Input stream of data to put.</param>
            <param name="remote">Name of remote file in current directory.</param>
            <param name="append"><c>true</c> if appending, <c>false</c> otherwise.</param>
            <returns>Number of bytes transferred.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.Put(System.Byte[],System.String)">
            <summary>
            Put data onto the SFTP server in the current directory.
            </summary>
            <param name="bytes">Array of bytes to put.</param>
            <param name="remote">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.Put(System.Byte[],System.String,System.Boolean)">
            <summary>
            Put data onto the SFTP server in the current directory. Allows
            appending if current file exists.
            </summary>
            <param name="bytes">Array of bytes to put.</param>
            <param name="remote">Name of remote file in current directory.</param>
            <param name="append"><c>true</c> if appending, <c>false</c> otherwise.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.Put(System.IO.Stream,System.String,System.String,System.Boolean)">
            <summary>
            The master Put() method that all other Puts() delegate to
            </summary>
            <param name="input"></param>
            <param name="local"></param>
            <param name="remote"></param>
            <param name="append"></param>
            <returns>Number of bytes transferred.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.CdUp">
            <summary>
            Change the remote working directory to parent
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.ChDir(System.String)">
            <summary>
            Change the remote working directory
            </summary>
            <param name="dir">directory to change to</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.Dir">
            <summary>
            List current directory's contents as an array of strings of
            filenames.
            </summary>
            <returns>An array of current directory listing strings.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.Dir(System.String,System.Boolean)">
            <summary>
            List a directory's contents as an array of strings.
            </summary>
            <remarks>
            If <c>full</c> is <c>true</c> then a detailed
            listing if returned (if available), otherwise just filenames are provided.
            The detailed listing varies in details depending on OS and
            SFTP server. Note that a full listing can be used on a file
            name to obtain information about a file
            </remarks> 
            <param name="dirname">Name of directory</param>
            <param name="full"><c>true</c> if detailed listing required, <c>false</c> otherwise.</param>
            <returns>An array of directory listing strings.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.Dir(System.String)">
            <summary>
            List a directory's contents as an array of strings of filenames.
            </summary>
            <param name="dirname">Name of directory OR filemask.</param>
            <returns>An array of directory listing strings.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.DirDetails(System.String)">
            <summary>
            List a directory's contents as an array of FTPFile objects.
            </summary>
            <param name="dirname">Name of directory </param>
            <returns>An array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.DirDetails">
            <summary>
            List the current directory's contents as an array of FTPFile objects.
            </summary>
            <returns>An array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.GetFileListing(System.String,EnterpriseDT.Net.Ftp.FTPFileCallback)">
            <summary>
            Get a list of SftpFile objects for the specified directory or filename
            </summary>
            <param name="dirname">can be a directory name or filename or wildcard</param>
            <returns>list of file objects</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.HasWildcards(System.String)">
            <summary>
            Does this name contain wildcard characters?
            </summary>
            <param name="name">name to test for wildcards</param>
            <returns>true if name contains wildcard characters, false otherwise</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.GetSFTPFile(System.String)">
            <summary>
            Get an SFTP object for the supplied path
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.ListChildren(System.String,EnterpriseDT.Net.Ftp.FTPFileCallback)">
            <summary>
            Lists all the children of a directory
            </summary>
            <param name="dir">directory to list</param>
            <returns>ArrayList of its children</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.ListChildren(EnterpriseDT.Net.Ftp.Ssh.SFTPFile,EnterpriseDT.Net.Ftp.FTPFileCallback)">
            <summary>
            Lists all the children of a directory
            </summary>
            <param name="dir">directory to list</param>
            <returns>ArrayList of its children</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.MkDir(System.String)">
            <summary>Create the specified remote working directory.</summary>
            <param name="dir">Name or path of remote directory to create.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.Pwd">
            <summary>
            Get the current remote working directory
            </summary>
            <returns>current remote working directory</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.RmDir(System.String)">
            <summary>
            Remove a directory
            </summary>
            <param name="path">directory to remove</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.ChMod(System.Int32,System.String)">
            <summary>
            Changes the access permissions or modes of the specified 
            file or directory.
            </summary>
            <param name="permissions">the absolute mode of the file/directory. This 
            must be the base 10 representation of the octal permissions</param>
            <param name="path">the path to the file/directory on the remote server</param>
            <remarks>
            <para>
            Modes determine who can read, change or execute a file.
            </para>
            <blockquote><pre>Absolute modes are octal numbers specifying the complete list of
            attributes for the files; you specify attributes by OR'ing together
            these bits.
            
            0400       Individual read
            0200       Individual write
            0100       Individual execute (or list directory)
            0040       Group read
            0020       Group write
            0010       Group execute
            0004       Other read
            0002       Other write </pre></blockquote>
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.ChangeOwner(System.Int32,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.ChangeGroup(System.Int32,System.String)" -->
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.CreateSymbolicLink(System.String,System.String)">
            <summary>
            Create a symbolic link on the server
            </summary>
            <param name="path">path to create link to</param>
            <param name="link">name of link</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.Delete(System.String)">
            <summary>Delete the specified remote file.</summary>
            <param name="path">Name or path of remote file to delete.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.Site(System.String)">
            <summary>INTERNAL USE ONLY</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.ModTime(System.String)">
            <summary>Get modification time for a remote file.</summary>
            <param name="path">Name or path of remote file.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.SetModTime(System.String,System.DateTime)">
            <summary>Set modification time for a remote file.</summary>
            <param name="path">Name or path of remote file.</param>
            <param name="modTime">Modification-time to set in local time.</param>
            <returns>Modification time of file as a <c>DateTime</c>.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.Rename(System.String,System.String)">
            <summary>
            Rename a remote file
            </summary>
            <param name="from">old name</param>
            <param name="to">new name</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.Exists(System.String)">
            <summary>
            Checks for the existence of a file on the server.
            </summary>
            <param name="remoteFile"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.Size(System.String)">
            <summary>
            Get the size of a remote file. 
            </summary>
            <param name="path">Name or path of remote file in current directory.</param>
            <returns>Size of file in bytes.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.Resume">
            <summary>Make the next file transfer (put or get) resume.</summary>
            <remarks>
            <para>
            For puts, the
            bytes already transferred are skipped over, while for gets, if 
            writing to a file, it is opened in append mode, and only the bytes
            required are transferred.
            </para>
            <para>
            Currently resume is only supported for BINARY transfers (which is
            generally what it is most useful for). 
            </para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.ResumeDownload(System.Int64)">
            <summary>Make the next download resume at a specific point.</summary>
            <remarks>
            <para>
            This resume method allows the resume offset to be set explicitly for downloads. 
            Offset bytes are skipped before downloading the file.
            </para>
            <para>
            Currently resume is only supported for BINARY transfers (which is
            generally what it is most useful for). 
            </para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.DirDetails(System.String,System.Boolean)">
            <summary>
            Returns the given directory's contents and optionally that of its subdirectories 
            as an array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.
            </summary>
            <remarks>
            <para>If <c>includeSubdirectories</c> is set to <c>true</c> then the <see cref="P:EnterpriseDT.Net.Ftp.FTPFile.Children"/> property 
            of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects corresponding to subdirectories will contain the content of
            that subdirectory.</para>
            <para>This method works for Windows and most Unix FTP servers.  Please inform EDT
            about unusual formats (<a href="support@enterprisedt.com">support@enterprisedt.com</a>).</para>
            </remarks>
            <param name="directory">Name of directory AND/OR filemask.</param>
            <param name="includeSubdirectories">Use <c>true</c> if subdirectories are required.</param>
            <returns>An array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.MultipleDelete(System.String)">
            <summary>
            Delete multiple files in the current remote directory
            </summary>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <remarks>Wildcard characters supported are '?' and '*'</remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.MultipleDelete(EnterpriseDT.Net.Ftp.FileFilter)">
            <summary>
            Delete multiple files in the current remote directory
            </summary>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.MultipleDelete(System.String,System.String,System.Boolean)">
            <summary>
            Delete multiple files in the current remote directory and its subdirectories.
            </summary>
            <param name="remoteDir">remote directory to delete</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="recurse">if true, recurse down into subdirectories</param>
            <remarks>Wildcard characters supported are '?' and '*'. Subdirectories are not deleted</remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.MultipleDelete(System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary>
            Delete multiple files in the current remote directory and its subdirectories.
            </summary>
            <param name="remoteDir">remote directory to delete</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="recurse">if true, recurse down into subdirectories</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.MultipleDeleteDirectories(System.String)">
            <summary>
            Remove a remote directory, and all its files and its subdirectories
            </summary>
            <param name="remoteDir">the remote directory's name</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.MultiplePut(System.String,System.String)">
            <summary>
            Put multiple files from the specified local directory into the current remote directory
            </summary>
            <param name="localDir">local directory to get files from</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.MultiplePut(System.String,EnterpriseDT.Net.Ftp.FileFilter)">
            <summary>
            Put multiple files from the specified local directory into the current remote directory
            </summary>
            <param name="localDir">local directory to get files from</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.MultiplePut(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Put multiple files from the specified local directory into the specified remote directory
            </summary>
            <remarks>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories
            </remarks>
            <param name="localDir">local directory name</param>
            <param name="remoteDir">remote directory name</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="recurse">if true, subdirectories are put</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.MultiplePut(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary>
            Put multiple files from the specified local directory into the specified remote directory
            </summary>
            <remarks>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories
            </remarks>
            <param name="localDir">local directory name</param>
            <param name="remoteDir">remote directory name</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="recurse">if true, subdirectories are put</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.MultipleGet(System.String,System.String)">
            <summary>
            Get multiple files into the specified local directory from the current remote directory
            </summary>
            <param name="localDir">local directory to get files into</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.MultipleGet(System.String,EnterpriseDT.Net.Ftp.FileFilter)">
            <summary>
            Get multiple files into the specified local directory from the current remote directory
            </summary>
            <param name="localDir">local directory to get files into</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.MultipleGet(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Get multiple files from the specified remote directory into the specified local directory
            </summary>
            <remarks>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories
            </remarks>
            <param name="localDir">local directory name</param>
            <param name="remoteDir">remote directory name</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="recurse">if true, subdirectories are put</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.MultipleGet(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary>
            Get multiple files from the specified remote directory into the specified local directory
            </summary>
            <remarks>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories
            </remarks>
            <param name="localDir">local directory name</param>
            <param name="remoteDir">remote directory name</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="recurse">if true, subdirectories are put</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.TestConnection">
            <summary>
            Tests the connection
            </summary>
            <returns>true if connection ok</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.TransferBinaryFile(System.IO.Stream,System.IO.Stream,EnterpriseDT.Net.Ftp.TransferDirection,System.String,System.Int64)">
            <summary>
            Binary transfer code, for both Put and Get
            </summary>
            <param name="input">source stream</param>
            <param name="output">destination stream</param>
            <param name="direction">direction of transfer</param>
            <param name="remoteFile">remote file name</param>
            <param name="resumePoint">position at which to resume</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.TransferASCIIFile(System.IO.Stream,System.IO.Stream,System.Byte[],System.Byte[],EnterpriseDT.Net.Ftp.TransferDirection,System.String)">
            <summary>
            Get a file in ASCII format, i.e. translate \n to platform equivalent
            </summary>
            <param name="input">input stream</param>
            <param name="output">output stream</param>
            <param name="inputSep">input NL separator</param>
            <param name="outputSep">output NL separator</param>
            <param name="direction">direction of transfer</param>
            <param name="remoteFile"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.Stat(System.String)">
            <summary>
            Returns the attributes of the file from the remote computer
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.ResolveRemotePath(System.String)">
            <summary>
            Resolve the supplied path into a full path
            </summary>
            <param name="path">path to resolve</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.OctalPermissionsToString(System.Int32)">
            <summary>
            Convert octal permissions such as umask to a standard string
            representation
            </summary>
            <param name="perm">octal permissions</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.CheckLicense">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.FilenameEncoding">
            <summary>
            The character-encoding to use for file and directory names.
            </summary>
            <remarks>
            <para>
            The default is <c>UTF-8</c>, but may need to be changed for SFTP servers
            that do not support UTF-8 (typically SFTP version 3 or below).
            </para>
            <para>
            Note that this value is NOT used for SFTP servers with a version number
            greater than 3 - UTF-8 is always used in these cases as per the standard.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.Timeout">
            <summary> 
            Overall timeout in milliseconds for waiting for messages and underlying
            timeouts on sockets.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.IsConnected">
            <summary>
            Indicates whether the client is currently connected with the server.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.TransferType">
            <summary>The current file transfer type (BINARY or ASCII).</summary>
            <value>Transfer-type to be used for uploads and downloads.</value>
            <remarks>When the transfer-type is set to <c>BINARY</c> then files
            are transferred byte-for-byte such that the transferred file will
            be identical to the original.
            When the transfer-type is set to <c>ASCII</c> then end-of-line
            characters will be translated where necessary between Windows and
            UNIX formats.</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.ParallelTransferMode">
            <summary>
            Uploads are by default in parallel mode, which is faster than
            serial mode. This mode can be switched off if servers are unable
            to deal with parallel mode.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.UMask">
            <summary>
            Set and get the umask, the file creation mode mask that
            is applied to the default permissions to create the final permission
            set.
            </summary>
            <remarks>
            <para>The umask and the <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.DefaultPermissions"/> are specified in
            octal. The permission set of a new file is specified by taking the default
            permissions in octal, and subtracting the umask.
            </para>
            <para>
            For example, if the <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.DefaultPermissions"/> are 777 and the umask is
            set to 022, the final create permissions will be 755 (777-022).
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.DefaultPermissions">
            <summary>
            Set and get the default file creation mode permissions (in octal).
            </summary>
            <remarks>
            <para>
            Permission strings consist of three fields - permissions for owner, group and
            other users. A typical executable file might have permissions of read,write and
            executable permissions set for the owner, and read and execute permissions for 
            everyone else. This is typically displayed as rwxr-xr-x, in the order of 
            owner|group|other.
            </para>
            <para>
            Permission strings can also be presented in octal, which has certain advantages.
            An octal number corresponds to each type of permission: 4=read, 2=write and
            1=execute. These are combined to form a group of permissions, i.e. a permissions
            field. For example, to specify that a file has read, write and execute permissions,
            it is assigned 4+2+1 = 7. So for the previous example of rwxr-wr-w, this can be 
            represented in octal as 755, where the 5 comes from 4(read)+1(execute).
            </para>
            <para>
            The default permissions are combined with the <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.UMask"/> to form the
            final permission set for a new file.
            </para>
            <para>
            For more details on permissions and umasks, see a Unix text or look up umask and chmod's 
            man pages.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.KBIPrompts">
            <summary>
            Array of prompts used for keyboard interactive (KBI) authentication. 
            </summary>
            <remarks>Setting this property sets up keyboard interactive authentication. 
            The prompts that the server will send to the client must be known. For each prompt, an
            <see cref="T:EnterpriseDT.Net.Ftp.Ssh.SSHAuthPrompt"/> must be created with the matching prompt string and the
            response to be sent back to the server. Often, a single password prompt is all that is 
            required, and a <see cref="T:EnterpriseDT.Net.Ftp.Ssh.SSHPasswordPrompt"/> is supplied for this purpose. 
            For this property to be used, <see cref="!:AuthenticationMethod"/> must be set to
            <see cref="F:EnterpriseDT.Net.Ssh.AuthenticationType.KeyboardInteractive"/>.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.CountBeforeSleep">
            <summary>
            Number of transfers before going to sleep
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.SleepEnabled">
            <summary>
            Enabling or not of sleeping after a certain number of transfers
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.SleepTime">
            <summary>
            Number of seconds spent asleep
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.DetectTransferMode">
            <summary>
            If set to true, the transfer mode in operations involving multiple files is 
            automatically changed between ASCII and binary as appropriate.
            </summary>
            <remarks>
            <see cref="M:EnterpriseDT.Net.Ftp.FileTypes.RegisterExtension(System.String)"/> for how to register a file extension as ASCII, and
            <see cref="T:EnterpriseDT.Net.Ftp.FileTypes"/> for how to obtain the current registered extensions
            </remarks> 
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.PrivateKeyFactory">
            <summary>
            Reads generic private key data and returns the decrypted key blob
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.PrivateKeyFactory.log">
            <summary> Logging object</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.PrivateKeyFactory.GetKeyPair(System.Byte[],System.String)">
            <summary>
            Get the key pair from the raw key bytes
            </summary>
            <param name="formattedKey">raw bytes from keyfile</param>
            <param name="passphrase">passphrase for key</param>
            <returns>the key pair</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.PrivateKeyFactory.GetKeyPair(System.String,System.String)">
            <summary>
            Get the key pair from the private key file
            </summary>
            <param name="privateKeyFile">keyfile name</param>
            <param name="passphrase">passphrase for key</param>
            <returns>the key pair</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.PrivateKeyFactory.SelectFormatter(System.Byte[])">
            <summary>
            Select the correct formatter for this key
            </summary>
            <param name="formattedKey">raw key data</param>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Where">
            <summary>
            A place (such as an event location) associated with the containing entity. The type of 
            the association is determined by the rel attribute; the details of the location are 
            contained in an embedded or linked-to Contact entry.
            A gd:where element is more general than a gd:geoPt element. The former identifies a place
             using a text description and/or a Contact entry, while the latter identifies a place 
            using a specific geographic location.
                Properties
               Property 	    Type 	    Description
                @label? 	    xs:string 	Specifies a user-readable label to distinguish this location from other locations.
                @rel? 	        xs:string 	Specifies the relationship between the containing entity and the contained location. Possible values
                (see below) are defined by other elements. For example, gd:when defines http://schemas.google.com/g/2005#event.
                @valueString? 	xs:string 	A simple string value that can be used as a representation of this location.
                gd:entryLink? 	entryLink 	Entry representing location details. This entry should implement the Contact kind.
                rel values
                Value 	                                                    Description
               http://schemas.google.com/g/2005#event or not specified 	 Place where the enclosing event takes place.
               http://schemas.google.com/g/2005#event.alternate 	          A secondary location. For example, a remote 
                                                                             site with a videoconference link to the main site.
               http://schemas.google.com/g/2005#event.parking 	              A nearby parking lot.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Where.#ctor">
            <summary>
            Constructs an empty Where instance
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Where.#ctor(System.String,System.String,System.String)">
            <summary>
            default constructor, takes 3 parameters
            </summary>
            <param name="value">the valueString property value</param>
            <param name="label">label property value</param>
            <param name="rel">default for the Rel property value</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Where.CreateInstance(System.Xml.XmlNode,EnterpriseDT.Google.GData.Client.AtomFeedParser)">
            <summary>Parses an xml node to create a Where  object.</summary> 
            <param name="node">the node to parse node</param>
            <param name="parser">the xml parser to use if we need to dive deeper</param>
            <returns>the created Where  object</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Where.Save(System.Xml.XmlWriter)">
            <summary>
            Persistence method for the Where object
            </summary>
            <param name="writer">the xmlwriter to write into</param>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Where.Rel">
            <summary>
            Rel property accessor
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Where.Label">
            <summary>
            User-readable label that identifies this location.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Where.ValueString">
            <summary>
            String description of the event places.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Where.EntryLink">
            <summary>
             Nested entry (optional).
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Where.XmlName">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Where.XmlNameSpace">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Where.XmlPrefix">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Where.RelType">
            <summary>
            Relation type. Describes the meaning of this location.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Where.RelType.EVENT">
            <summary>
            The standard relationship EVENT_ALTERNATE
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Where.RelType.EVENT_ALTERNATE">
            <summary>
            the alternate EVENT location
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Where.RelType.EVENT_PARKING">
            <summary>
             the parking location
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SFTPException">
            <summary>
            Represents exceptions related to SFTP, generally produced
            by the SFTP subsystem
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPException.#ctor(System.String)">
            <summary>
            Basic exception
            </summary>
            <param name="msg">error message</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPException.#ctor(System.String,System.Int32)">
            <summary>
            Exception allowing an error code to be set
            </summary>
            <param name="msg">error message</param>
            <param name="code">error code</param>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SFTPConnectException">
            <summary>
            Thrown when an SFTP connection couldn't be made.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPConnectException.#ctor(System.String,System.String)">
            <summary>
            Basic exception
            </summary>
            <param name="msg">error message</param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SFTPConnectException.ServerReply">
            <summary>
            Message sent by the server before failure.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SFTPAuthenticationException">
            <summary>
            Represents authentication exceptions related to SFTP, generally produced
            by the SFTP subsystem
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPAuthenticationException.#ctor(System.String)">
            <summary>
            Basic exception
            </summary>
            <param name="msg">error message</param>
        </member>
        <member name="T:EnterpriseDT.Net.Proxy.Http.HttpHeader">
            
            
             @author $author$
             @version $Revision: 1.6 $
        </member>
        <member name="F:EnterpriseDT.Net.Proxy.Http.HttpHeader.begin">
             
        </member>
        <member name="M:EnterpriseDT.Net.Proxy.Http.HttpHeader.#ctor">
            Creates a new HttpHeader object.
        </member>
        <member name="M:EnterpriseDT.Net.Proxy.Http.HttpHeader.ReadLine(System.IO.Stream)">
            
            
             @param in
            
             @return
            
             @throws IOException
        </member>
        <member name="M:EnterpriseDT.Net.Proxy.Http.HttpHeader.GetStartLine">
            
            
             @return
        </member>
        <member name="M:EnterpriseDT.Net.Proxy.Http.HttpHeader.GetHeaderFields">
            
            
             @return
        </member>
        <member name="M:EnterpriseDT.Net.Proxy.Http.HttpHeader.GetHeaderFieldNames">
            
            
             @return
        </member>
        <member name="M:EnterpriseDT.Net.Proxy.Http.HttpHeader.GetHeaderField(System.String)">
            
            
             @param headerName
            
             @return
        </member>
        <member name="M:EnterpriseDT.Net.Proxy.Http.HttpHeader.SetHeaderField(System.String,System.String)">
            
            
             @param headerName
             @param value
        </member>
        <member name="M:EnterpriseDT.Net.Proxy.Http.HttpHeader.ToString">
            
            
             @return
        </member>
        <member name="M:EnterpriseDT.Net.Proxy.Http.HttpHeader.ProcessHeaderFields(System.IO.Stream)">
            
            
             @param in
            
             @throws IOException
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.VMSFileParser">
            <summary>  
            Represents a remote OpenVMS file parser
            </summary>
            <author>Bruce Blackshaw
            </author>
            <version>$Revision: 1.12 $</version>
            <remarks>Hacked and modified from some helpful source provided by Jason Schultz</remarks>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.VMSFileParser.DEFAULT_BLOCKSIZE">
            <summary> Number of expected fields</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.VMSFileParser.DIR">
            <summary>Directory field</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.VMSFileParser.HDR">
            <summary>Directory field</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.VMSFileParser.TOTAL">
            <summary>Total field</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.VMSFileParser.log">
            <summary> Logging object</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.VMSFileParser.MIN_EXPECTED_FIELD_COUNT">
            <summary> Number of expected fields</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.VMSFileParser.IsMultiLine">
            <summary>
            Does this parser parse multiple lines to get one listing?
            </summary>
            <returns>true or false</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.VMSFileParser.IsValidFormat(System.String[])">
            <summary>
            Test for valid format for this parser
            </summary>
            <param name="listing">listing to test</param>
            <returns>true if valid</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.VMSFileParser.Parse(System.String)">
            <summary> Parse server supplied string</summary>
            <param name="raw">raw string to parse</param>
            <returns>FTPFile object representing the raw string</returns>
            <remarks>Listing look like the below:
             OUTPUT: 
               
               Directory dirname
                
               filename
                       used/allocated    dd-MMM-yyyy HH:mm:ss [group,owner]        (PERMS)
               filename
                       used/allocated    dd-MMM-yyyy HH:mm:ss [group,owner]        (PERMS)
               ...
               
               Total of n files, n/m blocks
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.VMSFileParser.TweakDateString(System.String[])">
            <summary> Tweak the date string to make the month camel case</summary>
            <param name="fields">array of fields</param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.VMSFileParser.TimeIncludesSeconds">
            <summary>
            Get flag indicating whether or not the most recent parse returned seconds.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.VMSFileParser.VersionInName">
            <summary>
            Is the version number returned as part of the filename?
            </summary>
            <remarks>
            Some VMS FTP servers do not permit a file to be deleted unless
            the filename includes the version number. Note that directories are
            never returned with the version number.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.VMSFileParser.BlockSize">
            <summary>
            Get and set the blocksize used to calculate the file
            size.
            </summary>
            <remarks>
            The blocksize is multiplied by the reported size to obtain
            the actual size.
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.ExecChannel">
            <summary>
            A channel for exec'ing a command
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.ExecChannel.log">
            <summary> Logging object</summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpRealPath">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <remarks>
            SSH_FXP_REALPATH message consists of:
            
                uint32 length
                byte   SSH_FXP_REALPATH
                uint32 request-id
                string original-path [UTF-8]
                byte   control-byte [optional] - not used here
                string compose-path[0..n] [optional] - not used here
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpRealPath.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.ResourceId">
            <summary>
            The resource ID is an identifier for a resource that an entry might 
            be refering to
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.ResourceId.#ctor">
            <summary>
            default constructor for gd:resourceid 
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.LastViewed">
            <summary>
            Identifies when an entry was last viewed
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.LastViewed.#ctor">
            <summary>
            default constructor for gd:resourceid 
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.LastModifiedBy">
            <summary>
            identifies the person who last modified an entry
            </summary>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.LastModifiedBy.#ctor">
            <summary>
            default constructor for media:group
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.LastModifiedBy.Name">
            <summary>
            the name portion of the element
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.LastModifiedBy.EMail">
            <summary>
            the email portion of the element
            </summary>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.LastModifiedByName">
            <summary>
            simple subclass to hold the name subportion for the lastmodifed container
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.LastModifiedByName.#ctor">
            <summary>
            default constructor for a name subobject
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.LastModifiedByEMail">
            <summary>
            simple sublcass to hold the email subportion of the lastmodified container
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.LastModifiedByEMail.#ctor">
            <summary>
            default constructor for a email subobject
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.QuotaBytesUsed">
            <summary>
            The amount of quota consumed by the entry. 
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.QuotaBytesUsed.#ctor">
            <summary>
            default constructor for gd:resourceid 
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpFStat">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpFStat.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Tools.X509CertificateGenerator">
            <summary>
            Generates self-signed X509 certificates.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Tools.X509CertificateGenerator.Create(System.Security.Cryptography.RSACryptoServiceProvider,System.String)">
            <summary>
            Creates and returns a self-signed X509 certificate.
            </summary>
            <param name="key">The key of the certificate.</param>
            <param name="issuerName">The encoded common name of the issuer.</param>
            <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> instance.</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurs while creating the self-signed certificate.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Tools.X509CertificateGenerator.Create(System.Int32,System.String,EnterpriseDT.Mentalis.Security.Tools.CertificateSettings)">
            <summary>
            Creates and returns a self-signed X509 certificate.
            </summary>
            <param name="key">The key of the certificate.</param>
            <param name="issuerName">The encoded common name of the issuer.</param>
            <param name="settings">The settings of the X509 certificate.</param>
            <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> instance.</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurs while creating the self-signed certificate.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Tools.X509CertificateGenerator.Create(System.Security.Cryptography.RSACryptoServiceProvider,System.String,EnterpriseDT.Mentalis.Security.Tools.CertificateSettings)">
            <summary>
            Creates and returns a self-signed X509 certificate.
            </summary>
            <param name="key">The key of the certificate.</param>
            <param name="issuerName">The encoded common name of the issuer.</param>
            <param name="settings">The settings of the X509 certificate.</param>
            <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> instance.</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurs while creating the self-signed certificate.</exception>
        </member>
        <member name="T:EnterpriseDT.Google.GData.AccessControl.AclRole">
            <summary>
            GData schema extension describing an account role
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.AccessControl.AclRole.ROLE_NONE">
            <summary>string constant for the none role</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.AccessControl.AclRole.CALENDAR_ROLE_READ">
            <summary>string constant for the read only role</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.AccessControl.AclRole.CALENDAR_ROLE_FREEBUSY">
            <summary>string constant for the free/busy role</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.AccessControl.AclRole.CALENDAR_ROLE_EDITOR">
            <summary>string constant for the editor role</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.AccessControl.AclRole.CALENDAR_ROLE_OWNER">
            <summary>string constant for the owner role</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.AccessControl.AclRole.CALENDAR_ROLE_ROOT">
            <summary>string constant for the root role</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.AccessControl.AclRole.ACL_NONE">
            <summary>object constant for the none role</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.AccessControl.AclRole.ACL_CALENDAR_READ">
            <summary>object constant for the read role</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.AccessControl.AclRole.ACL_CALENDAR_FREEBUSY">
            <summary>object constant for the freebusy role</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.AccessControl.AclRole.ACL_CALENDAR_EDITOR">
            <summary>object constant for the editor role</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.AccessControl.AclRole.ACL_CALENDAR_OWNER">
            <summary>object constant for the owner role</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.AccessControl.AclRole.ACL_CALENDAR_ROOT">
            <summary>object constant for the root role</summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.AccessControl.AclRole.#ctor">
            <summary>
             default constructor
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.AccessControl.AclRole.#ctor(System.String)">
            <summary>
             constructor with a default string value
            </summary>
            <param name="value">transparency value</param>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Spreadsheets.WorksheetEntry">
            <summary>
            Entry API customization class for defining entries in a Worksheets feed.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Spreadsheets.WorksheetEntry.WORKSHEET_CATEGORY">
            <summary>
            Category used to label entries that contain Cell extension data.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.WorksheetEntry.#ctor">
            <summary>
            Constructs a new WorksheetEntry instance with the appropriate category
            to indicate that it is a worksheet.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.WorksheetEntry.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Constructs a new WorksheetEntry instance with the given number of
            rows and columns.
            </summary>
            <param name="rows">The number of rows.</param>
            <param name="cols">The number of columns.</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.WorksheetEntry.#ctor(System.UInt32,System.UInt32,System.String)">
            <summary>
            Constructs a new WorksheetEntry instance with a given number of
            rows and columns and with a set title.
            </summary>
            <param name="rows">The number of rows.</param>
            <param name="cols">The number of columns.</param>
            <param name="title">The title of the worksheet.</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.WorksheetEntry.QueryCellFeed">
            <summary>
            Retrieves the cell-based metafeed of the cells within the worksheet.
            </summary>
            <returns>The CellsFeed of the cells in this worksheet.</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.WorksheetEntry.QueryCellFeed(EnterpriseDT.Google.GData.Spreadsheets.ReturnEmptyCells)">
            <summary>
            Retrieves the cell-based metafeed of the cells within the worksheet.
            </summary>
            <param name="returnEmpty">indicates if a full sheet should be returned</param> 
            <returns>The CellsFeed of the cells in this worksheet.</returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Spreadsheets.WorksheetEntry.ColCount">
            <summary>
            The colCount element in this worksheet entry
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Spreadsheets.WorksheetEntry.Cols">
            <summary>
            Sets the number of columns for this worksheet entry
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Spreadsheets.WorksheetEntry.RowCount">
            <summary>
            The rowCount element in this cell entry
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Spreadsheets.WorksheetEntry.Rows">
            <summary>
            Sets the number of rows for this worksheet entry
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Spreadsheets.WorksheetEntry.CellFeedLink">
            <summary>
            Retrieves the URI for the cells feed of the worksheet.
            </summary>
            <returns>The URI of the cells feed for this worksheet.</returns>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Ssl.Shared.TransferBuffer">
            <summary>
            Creates a stream whose backing store is memory.
            </summary>
            <remarks>This class is created by Kevin Knoop.</remarks>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPErrorEventArgs">
            <summary>
            Provides data for error events.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPErrorEventArgs.ShowMessageBox">
            <summary>
            Shows a <see cref="T:System.Windows.Forms.MessageBox"/> containing the
            message of the exception.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPErrorEventArgs.ShowMessageBox(System.Windows.Forms.IWin32Window)">
            <summary>
            Shows a <see cref="T:System.Windows.Forms.MessageBox"/> containing the
            message of the exception.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPErrorEventArgs.ShowMessageBox(System.Boolean)">
            <summary>
            Shows a <see cref="T:System.Windows.Forms.MessageBox"/> containing the
            type of the exception as well as its message and stack-trace.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPErrorEventArgs.ShowMessageBox(System.Windows.Forms.IWin32Window,System.Boolean)">
            <summary>
            Shows a <see cref="T:System.Windows.Forms.MessageBox"/> containing the
            type of the exception as well as its message and stack-trace.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPErrorEventArgs.Exception">
            <summary>
            Exception that was thrown.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPErrorEventArgs.SyncMethodName">
            <summary>
            Name of the method that was being executed when the exception was thrown.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPErrorEventArgs.Arguments">
            <summary>
            Arguments to the method that was being executed when the exception was thrown.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPErrorEventHandler">
            <summary>
            Delegate for error events.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPCancelableEventArgs">
            <summary>
            Base-class for EventArgs classes associated with cancelable events.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPCancelableEventArgs.#ctor(System.Boolean,System.Boolean,System.Exception)">
            <summary>
            Constructs an instance of <c>FTPCancelableEventArgs</c>, setting
            the default value of <see cref="P:EnterpriseDT.Net.Ftp.FTPCancelableEventArgs.Cancel"/> as specified.
            </summary>
            <param name="defaultCancelValue">Default value of <see cref="P:EnterpriseDT.Net.Ftp.FTPCancelableEventArgs.Cancel"/>.</param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPCancelableEventArgs.Cancel">
            <summary>
            Determines whether or not the operation should be cancelled.
            </summary>
            <remarks>
            If <c>Cancel</c> is <c>true</c> then the operation will be cancelled,
            otherwise it will proceed.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPCancelableEventArgs.Succeeded">
            <summary>
            Indicates whether or not the transfer succeeded.
            </summary>
            <remarks>
            This property maybe used in event-handlers for <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Downloaded"/> 
            and <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Uploaded"/> to determine whether or not the transfer
            succeeded.  The <see cref="P:EnterpriseDT.Net.Ftp.FTPCancelableEventArgs.Exception"/> property may be used to determine the
            nature of the error if this property indicates that the transfer failed.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPCancelableEventArgs.Exception">
            <summary>
            The exception thrown if a transfer failed.
            </summary>
            <remarks>
            This property maybe used in event-handlers for <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Downloaded"/> 
            and <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Uploaded"/> to determine the error that occurred in
            cases of failure.  The property, <see cref="P:EnterpriseDT.Net.Ftp.FTPCancelableEventArgs.Succeeded"/>, returns <c>true</c> if this
            property is <c>null</c>.
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPDirectoryEventArgs">
            <summary>
            Provides data for the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.DirectoryChanging"/> and
            <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.DirectoryChanged"/> events.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPDirectoryEventArgs.OldDirectory">
            <summary>
            Path of working directory after change.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPDirectoryEventArgs.OldDirectoryName">
            <summary>
            Name of working directory after change.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPDirectoryEventArgs.OldDirectoryPath">
            <summary>
            Path of working directory after change.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPDirectoryEventArgs.NewDirectory">
            <summary>
            Path of working directory after change.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPDirectoryEventArgs.NewDirectoryName">
            <summary>
            Name of working directory after change.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPDirectoryEventArgs.NewDirectoryPath">
            <summary>
            Path of working directory after change.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPDirectoryEventArgs.CreationTime">
            <summary>
            Creation time of the directory.
            </summary>
            <remarks><c>CreationTime</c> only has a valid value for the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.CreatedDirectory"/> event.</remarks>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPDirectoryEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.DirectoryChanging"/>
            and <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.DirectoryChanged"/> events.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPDirectoryListEventArgs">
            <summary>
            Provides data for the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.DirectoryListing"/> and
            <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.DirectoryListed"/> events.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPDirectoryListEventArgs.FileInfos">
            <summary>
            Details of files in the directory.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPDirectoryListEventArgs.Directory">
            <summary>
            Path of directory on server being listed.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPDirectoryListEventArgs.DirectoryName">
            <summary>
            Name of directory on server being listed.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPDirectoryListEventArgs.DirectoryPath">
            <summary>
            Path of directory on server being listed.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPDirectoryListEventArgs.Succeeded">
            <summary>
            Indicates whether or not the transfer succeeded.
            </summary>
            <remarks>
            This property maybe used in event-handlers for <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.DirectoryListed"/> 
            to determine whether or not the directory-listing
            succeeded.  The <see cref="P:EnterpriseDT.Net.Ftp.FTPDirectoryListEventArgs.Exception"/> property may be used to determine the
            nature of the error if this property indicates that the transfer failed.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPDirectoryListEventArgs.Exception">
            <summary>
            The exception thrown if a transfer failed.
            </summary>
            <remarks>
            This property maybe used in event-handlers for <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.DirectoryListed"/> 
            to determine the error that occurred in
            cases of failure.  The property, <see cref="P:EnterpriseDT.Net.Ftp.FTPDirectoryListEventArgs.Succeeded"/>, returns <c>true</c> if this
            property is <c>null</c>.
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPDirectoryListEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.DirectoryListing"/>
            and <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.DirectoryListed"/> events.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs">
            <summary>
            Provides data for the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Uploading"/>, <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Uploaded"/>,
            <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Downloading"/>, and <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Downloaded"/> events.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.LocalDataType">
            <summary>
            Type of local data source/destination.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.LocalPath">
            <summary>
            Path of local file if <see cref="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.LocalDataType"/> is <c>File</c>.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.LocalFile">
            <summary>
            Name of the local file (without path).
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.LocalDirectory">
            <summary>
            Name of the local directory (not including file-name).
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.Stream">
            <summary>
            Reference to <see cref="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.Stream"/> if <see cref="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.LocalDataType"/> is <c>Stream</c>.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.Bytes">
            <summary>
            Reference to byte-array if <see cref="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.LocalDataType"/> is <c>ByteArray</c>.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.Appended">
            <summary>
            Indicates whether or not data was appended to the remote file.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.WriteMode">
            <summary>
            Write-mode of the transfer (i.e. overwrite, append or resume)
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.Append">
            <summary>
            Indicates whether or not data was appended to the remote file.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.Resume">
            <summary>
            Indicates whether or not this tranfer should be resumed.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.RemoteFile">
            <summary>
            Name of remote file as passed into the method that initiated the transfer.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.RemoteFileName">
            <summary>
            Name of remote file without the path.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.RemotePath">
            <summary>
            Full path of remote file.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.RemoteDirectory">
            <summary>
            Full path of remote directory.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.FileSize">
            <summary>
            Size of remote file (see remarks)
            </summary>
            <remarks>
            <para>This property has been supercede by <see cref="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.LocalFileSize"/> and <see cref="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.RemoteFileSize"/>, to 
            reflect the fact that the local and remote file-sizes may be different when transferring in ASCII mode.</para>
            <para>Some servers do not support the command required to get the size of a particular
            file.  In this case, or in case of an error, the <c>FileSize</c> property will
            be -1.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.LocalFileSize">
            <summary>
            Size of local file (see remarks).
            </summary>
            <remarks>
            For binary transfers this is the same as the size of the remove file <see cref="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.RemoteFileSize"/>, but for
            ASCII transfers it may differ.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.RemoteFileSize">
            <summary>
            Size of remote file (see remarks)
            </summary>
            <remarks>
            <para>For the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Downloading"/> and <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Uploading"/>
            events, the value of this property will be the size of the local file, since it is not yet known
            what size ASCII files will be once uploaded to the server.</para>
            <para>Some servers do not support the command required to get the size of a particular
            file.  In this case, or in case of an error, the <c>FileSize</c> property will
            be -1.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.BytesTransferred">
            <summary>
            Number of bytes transferred.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.LastWriteTime">
            <summary>
            Last write-time of the file.
            </summary>
            <remarks>
            For all events, except the <see cref="!:ExFTPConnection.Uploading"/> event, this property
            returns the timestamp of the remote file.  For <see cref="!:ExFTPConnection.Uploading"/>
            the timestamp of the local file is provided.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.Cancel">
            <summary>
            Cancel transfer.
            </summary>
            <remarks>
            <para>
            For <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Uploading"/> and <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Downloading"/>
            this flag may be set to <c>false</c> if the operation is to be aborted.
            For <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Uploaded"/> and <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Downloaded"/>
            this flag indicates if the operation was aborted.
            </para>
            <para>
            Note that multiple file transfers cannot be cancelled.
            </para>
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.DataType">
            <summary>
            Type of data source or destination.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.DataType.File">
            <summary>File data source/destination.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.DataType.Stream">
            <summary>Stream data source/destination.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.DataType.ByteArray">
            <summary>Byte-array data source/destination.</summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPFileTransferEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Uploading"/>, 
            <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Uploaded"/>, <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Downloading"/>, 
            and <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Downloaded"/> events.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPFileRenameEventArgs">
            <summary>
            Provides data for the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.RenamingFile"/>
            and <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.RenamedFile"/> events.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileRenameEventArgs.OldFileName">
            <summary>
            Name of file before the renaming takes place.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileRenameEventArgs.OldFilePath">
            <summary>
            Path of file before the renaming takes place.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileRenameEventArgs.OldDirectory">
            <summary>
            Directory of file before the renaming takes place.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileRenameEventArgs.NewFileName">
            <summary>
            Name of file after the renaming takes place.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileRenameEventArgs.NewFilePath">
            <summary>
            Path of file after the renaming takes place.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileRenameEventArgs.NewDirectory">
            <summary>
            Directory of file after the renaming takes place.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileRenameEventArgs.RenameCompleted">
            <summary>
            Indicates whether or not the renaming operation has been completed successfully.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPFileRenameEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.RenamingFile"/>
            and <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.RenamedFile"/> events.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPLogInEventArgs">
            <summary>
            Provides data for the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.LoggingIn"/>
            and <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.LoggedIn"/> events.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPLogInEventArgs.UserName">
            <summary>
            User-name of account on server.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPLogInEventArgs.Password">
            <summary>
            Password of account on server.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPLogInEventArgs.HasLoggedIn">
            <summary>
            Indicates whether or not the client has logged in.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPLogInEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.LoggingIn"/>
            and <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.LoggedIn"/> events.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPConnectionEventArgs">
            <summary>
            Provides data for the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Connecting"/>
            and <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Connected"/> events.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnectionEventArgs.ServerAddress">
            <summary>
            Address of server.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnectionEventArgs.ServerPort">
            <summary>
            FTP port on server.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnectionEventArgs.IsConnected">
            <summary>
            Indicates whether or not the client is now connected to the server.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnectionEventArgs.Exception">
            <summary>
            The exception thrown if Connect or Close failed.
            </summary>
            <remarks>
            If this property is non-null during a <see cref="!:Closing"/> event then it means that
            the connection was closed due to an error.  In this case, if the exception is an
            <see cref="T:System.IO.IOException"/> then it usually means that the connection failed.
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPConnectionEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Connecting"/>
            and <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Connected"/> events.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpExtendedReply">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpExtendedAdminReply">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.PwdCommand">
            <summary>  Print working directory
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.2 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.TandemFileParser">
            <summary>  
            Represents a remote Tandem file parser.
            </summary>
            <remarks>
            It can be explicitly set in FTPConnection by:
            <![CDATA[
            ftp.FileInfoParser.FileParser = new TandemFileParser();
            ]]>
            </remarks>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.1 $
            </version>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.TandemFileParser.MIN_EXPECTED_FIELD_COUNT">
            <summary> Number of expected fields</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.TandemFileParser.log">
            <summary> Logging object</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.TandemFileParser.format1">
            <summary>Date format</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.TandemFileParser.formats">
            <summary>array of formats</summary> 
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.TandemFileParser.trimChars">
            <summary>Trim array for permissions string</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.TandemFileParser.#ctor">
            <summary> Default constructor</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.TandemFileParser.IsValidFormat(System.String[])">
            <summary>
            Test for valid format for this parser
            </summary>
            <param name="listing">listing to test</param>
            <returns>true if valid</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.TandemFileParser.Parse(System.String)">
            <summary> Parse server supplied string. Should be in
            form 
            <![CDATA[
            File         Code             EOF  Last Modification    Owner  RWEP
            IARPTS        101            16354 18-Mar-08 15:09:12 244, 10 "nnnn"
            JENNYCB2      101            16384 10-Jul-08 11:44:56 244, 10 "nnnn"
            ]]>
            </summary>
            <param name="raw">  
            raw string to parse
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.TandemFileParser.TimeIncludesSeconds">
            <summary>
            Get flag indicating whether or not the most recent parse returned seconds.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Forms.FTPController">
            <summary>
            Non-visual Windows Forms component attach user-defined buttons or menu-items
            to various operations of an <see cref="T:EnterpriseDT.Net.Ftp.ExFTPConnection"/> or
            <see cref="T:EnterpriseDT.Net.Ftp.SecureFTPConnection"/>.
            </summary>
            <remarks>
            <para><c>FTPController</c> allows the developer to attach any <see cref="T:System.ComponentModel.Component"/>
            with a <c>Click</c>-event to particular FTP operations.  Such components are
            termed <i>Click Event-Sources</i>.</para>
            
            <para>It is important to note that the FTPController is an optional component 
            whose presence it not required for the other FTP controls to be able to operate 
            and interact.  Its only function is to link buttons, hyperlinks or menu-items 
            to particular FTP actions; if desired, this may be done by explicitly calling 
            methods on the FTP connection object.</para>
            
            <para><c>FTPController</c> supports the following
            Click event-sources:
            <list type="table">
            <listheader><term>Click Event-Source</term><description>FTP Operation</description></listheader>
            <item><term>LoadEventSource</term>
            <description>Prompts the user for a file-name and tries to load the FTP connection properties 
            from that file using the <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Load(System.String)"/> method.</description></item>
            <item><term>SaveEventSource</term>
            <description>Prompts the user for a file-name and tries to save the properties of
            the associated <see cref="T:EnterpriseDT.Net.Ftp.ExFTPConnection"/> or <see cref="T:EnterpriseDT.Net.Ftp.SecureFTPConnection"/>
            to that file using the <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Save(System.String)"/> method.</description></item>
            <item><term>ConnectEventSource</term>
            <description>Causes the associated FTP connection to attempt to connect to an FTP server
            as defined by its properties (see <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Connect"/>).</description></item>
            <item><term>CloseEventSource</term>
            <description>Causes the associated FTP connection to close (see 
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.Close"/>).</description></item>
            <item><term>RefreshEventSource</term>
            <description>Causes the associated FTP connection to get the content of the current directory (see 
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.GetFileInfos"/>).</description></item>
            <item><term>StopEventSource</term>
            <description>Causes the associated FTP connection to cancel the current transfer (see 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.CancelTransfer"/>).</description></item>
            </list></para>
            
            <para>Event-sources are enabled and disabled as appropriate.  For example, initially
            only the Load, Save and Connect event-sources are enabled, and once the client has
            connected to the server only the Close and Refresh event-source will be enabled.</para>
            <para>The dialog-boxes that are used to prompt the user for files may be manipulated
            using the <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPController.LoadDialog"/> and <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPController.SaveDialog"/> properties.</para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPController.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Creates an instance of <see cref="T:EnterpriseDT.Net.Ftp.Forms.FTPController"/> within the given container.
            </summary>
            <param name="container">Container to place the new instance in.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPController.#ctor">
            <summary>
            Creates an instance of <see cref="T:EnterpriseDT.Net.Ftp.Forms.FTPController"/>.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPController.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPController.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPController.Connect">
            <summary>
            Connect to the server.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPController.Close">
            <summary>
            Close the connection to the server.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPController.Refresh">
            <summary>
            Refresh any directory listings.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPController.Stop">
            <summary>
            Stop the current transfer (if any).
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPController.Load">
            <summary>
            Load connection settings from a file.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPController.Reload">
            <summary>
            Reloads the <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPController.MostRecentFile"/> (if any).
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPController.Save">
            <summary>
            Save connection settings to a file.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPController.Save(System.String,System.String)">
            <summary>
            Save connection settings to a file.
            </summary>
            <param name="initialDirectory">Initial directory for dialog.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPController.LinkComponent(EnterpriseDT.Net.Ftp.IFTPComponent)">
            <summary>
            Called by the given FTP component when it is added to a container.
            </summary>
            <remarks>
            This method allows FTP components to interlink themselves automatically.
            </remarks>
            <param name="component">FTP component just added to the container.</param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPController.Site">
            <summary>
            Gets or sets the <see cref="T:System.ComponentModel.ISite"/> associated with this component.
            </summary>
            <remarks>
            Sites bind a component to a container and enable communication between them.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPController.ParentForm">
            <summary>
            Get or set the parent form of this component.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPController.ConnectEventSource">
            <summary>
            Control (or other component) whose Click event will initiate an FTP connection.
            </summary>
            <remarks>
            Causes the associated FTP connection to attempt to connect to an FTP server
            as defined by its properties (see <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Connect"/>).
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPController.CloseEventSource">
            <summary>
            Control (or other component) whose Click event will close an FTP connection.
            </summary>
            <remarks>
            Causes the associated FTP connection to close (see 
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.Close"/>).
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPController.RefreshEventSource">
            <summary>
            Control (or other component) whose Click event will cause a refresh.
            </summary>
            <remarks>
            Causes the associated FTP connection to get the content of the current 
            directory (see <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.GetFileInfos"/>).
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPController.StopEventSource">
            <summary>
            Control (or other component) whose Click event will stop a file-transfer.
            </summary>
            <remarks>
            Causes the associated FTP connection to cancel the current transfer (see 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.CancelTransfer"/>).
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPController.LoadEventSource">
            <summary>
            Control (or other component) whose Click event will open a dialog-box
            to select a file from which connection properties will be loaded.
            </summary>
            <remarks>
            Prompts the user for a file-name and tries to load the FTP connection properties
            from that file using the <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Load(System.String)"/> method.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPController.SaveEventSource">
            <summary>
            Control (or other component) whose Click event will open a dialog-box
            to select a file to which connection properties will be saved.
            </summary>
            <remarks>
            Prompts the user for a file-name and tries to save the properties of
            the associated <see cref="T:EnterpriseDT.Net.Ftp.ExFTPConnection"/> or <see cref="T:EnterpriseDT.Net.Ftp.SecureFTPConnection"/>
            to that file using the <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Save(System.String)"/> method.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPController.Connection">
            <summary>
            Get or set the FTP connection being controlled.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPController.ShowErrors">
            <summary>
            Get or set the flag that determines whether FTP errors will be shown in a message-box.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPController.LoadDialog">
            <summary>
            Get the dialog that is displayed when the LoadEventSource is clicked.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPController.SaveDialog">
            <summary>
            Get the dialog that is displayed when the SaveEventSource is clicked.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPController.MostRecentFile">
            <summary>
            Most recently loaded or save file.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.ByteArrayUtils.AreEqual(System.Byte[],System.Byte[])">
            <summary>
            Tests if two byte arrays are equal.
            </summary>
            <remarks>
            If both arrays are null, returns true
            </remarks>
            <param name="array1"></param>
            <param name="array2"></param>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpStat">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <remarks>
            byte   SSH_FXP_STAT
            uint32 request-id
            string path  [UTF-8]
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpStat.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Ssl.VerifyEventArgs">
            <summary>
            Provides data for the Verify event.
            </summary>
            <remarks>
            When the CertVerifyEventHandler delegate is called, one of its parameters is an instance of this class. If the certificate should not be accepted and the connection should be closed, simply set the Valid property to <b>false</b> and return from the callback.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VerifyEventArgs.#ctor">
            <summary>
            Initializes a new VerifyEventArgs instance.
            </summary>
            <remarks>The initial value of the <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.VerifyEventArgs.Valid"/> property will be <b>true</b>.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VerifyEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new VerifyEventArgs instance.
            </summary>
            <param name="valid">The initial value of the <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.VerifyEventArgs.Valid"/> property.</param>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.VerifyEventArgs.m_Valid">
            <summary>
            Holds the value of the <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.VerifyEventArgs.Valid"/> property.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.VerifyEventArgs.Valid">
            <summary>
            Gets or sets whether the certificate should be accepted as a valid certficate or not.
            </summary>
            <value><b>true</b> if the certificate is valid, otherwise <b>false</b>.</value>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.QuoteCommand">
            <summary>  Run the supplied command on the server
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.2 $
            
            </version>
        </member>
        <member name="M:EnterpriseDT.Util.Glob.Match(System.String,System.String)">
            <summary>
            Determine if a string matches the supplied glob
            </summary>
            <remarks>
            Supports '*' (0 or more chars), '?' (one char), [...] (set of
            or range of chars), and {pattern1,pattern2,...} for a collection of subpatterns. 
            The char following '\' is not special.
            </remarks>
            <param name="glob">Unix glob</param>
            <param name="stringToMatch">string to match</param>
            <returns>true if match, false otherwise</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Design.CertificatePropertyEditor">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.CertificatePropertyEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.CertificatePropertyEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.CertificatePropertyEditor.PromptForCertificate(System.Windows.Forms.Form,System.Boolean)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="parent"></param>
            <param name="promptForPrivateKey"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.CertificatePropertyEditor.PromptForCertificate(System.Windows.Forms.Form,System.String,System.Boolean)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="parent"></param>
            <param name="promptForPrivateKey"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.CertificatePropertyEditor.PromptForCertificate(System.Windows.Forms.Form,System.String,System.Boolean,System.Boolean)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="parent"></param>
            <param name="promptForPrivateKey"></param>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Recurrence">
            <summary>
            GData schema extension describing an RFC 2445 recurrence rule.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Recurrence.CreateInstance(System.Xml.XmlNode,EnterpriseDT.Google.GData.Client.AtomFeedParser)">
            <summary>Parses an xml node to create a Reminder object.</summary> 
            <param name="node">the node to parse node</param>
            <param name="parser">the xml parser to use if we need to dive deeper</param>
            <returns>the created Reminder object</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Recurrence.Save(System.Xml.XmlWriter)">
            <summary>
            Persistence method for the Recurrence object
            </summary>
            <param name="writer">the xmlwriter to write into</param>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Recurrence.Value">
            <summary>
             Value property accessor
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Recurrence.XmlName">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Recurrence.XmlNameSpace">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Recurrence.XmlPrefix">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Design.ExFTPCxnVerbs.component">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Design.ExFTPCxnVerbs.guidTestConnection">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Design.ExFTPCxnVerbs.cmdTestConnection">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Design.ExFTPCxnVerbs.guidLoad">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Design.ExFTPCxnVerbs.cmdLoad">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Design.ExFTPCxnVerbs.guidSave">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Design.ExFTPCxnVerbs.cmdSave">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Design.ExFTPCxnVerbs.verbs">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPCxnVerbs.OnShowConnectionDesigner(System.Object,System.EventArgs)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPCxnVerbs.OnLoad(System.Object,System.EventArgs)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPCxnVerbs.OnSave(System.Object,System.EventArgs)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPCxnVerbs.NewDesignerForm(EnterpriseDT.Net.Ftp.ExFTPConnection)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="cxn"></param>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Design.ExFTPCxnVerbs.Verbs">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Design.SecureFTPCxnVerbs.guidCertificateManager">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Design.SecureFTPCxnVerbs.cmdCertificateManager">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.SecureFTPCxnVerbs.NewDesignerForm(EnterpriseDT.Net.Ftp.ExFTPConnection)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="cxn"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPConnectionActionList.GetSortedActionItems">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPConnectionActionList.TestConnection">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Design.ExFTPConnectionActionList.ServerAddress">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Design.ExFTPConnectionActionList.ServerPort">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Design.ExFTPConnectionActionList.UserName">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Design.ExFTPConnectionActionList.Password">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Design.SecureFTPConnectionActionList.Protocol">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Design.SecureFTPConnectionDesigner">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Design.ExFTPConnectionDesigner">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPConnectionDesigner.Initialize(System.ComponentModel.IComponent)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPConnectionDesigner.NewVerbs(System.ComponentModel.IComponent)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPConnectionDesigner.DoDefaultAction">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Design.ExFTPConnectionDesigner.Verbs">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.SecureFTPConnectionDesigner.Initialize(System.ComponentModel.IComponent)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.SecureFTPConnectionDesigner.NewVerbs(System.ComponentModel.IComponent)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPCxnMenuCmdSvc.NewVerbs(System.ComponentModel.IComponent)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPCxnMenuCmdSvc.AddCommand(System.ComponentModel.Design.MenuCommand)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPCxnMenuCmdSvc.RemoveVerb(System.ComponentModel.Design.DesignerVerb)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="verb"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPCxnMenuCmdSvc.RemoveCommand(System.ComponentModel.Design.MenuCommand)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPCxnMenuCmdSvc.FindCommand(System.ComponentModel.Design.CommandID)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="commandID"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPCxnMenuCmdSvc.GlobalInvoke(System.ComponentModel.Design.CommandID)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="commandID"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPCxnMenuCmdSvc.ShowContextMenu(System.ComponentModel.Design.CommandID,System.Int32,System.Int32)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="menuID"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPCxnMenuCmdSvc.AddVerb(System.ComponentModel.Design.DesignerVerb)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="verb"></param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Design.ExFTPCxnMenuCmdSvc.Verbs">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.SecureFTPCxnMenuCmdSvc.NewVerbs(System.ComponentModel.IComponent)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Design.SecureFTPCxnSite">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Design.ExFTPCxnSite">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPCxnSite.#ctor(System.ComponentModel.IComponent,System.ComponentModel.IContainer)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="component"></param>
            <param name="container"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPCxnSite.NewMenuCommandService(System.ComponentModel.IComponent)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPCxnSite.GetService(System.Type)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="serviceType"></param>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Design.ExFTPCxnSite.Component">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Design.ExFTPCxnSite.Container">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Design.ExFTPCxnSite.DesignMode">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Design.ExFTPCxnSite.Name">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPCxnSite.ExtenderListService.GetExtenderProviders">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.SecureFTPCxnSite.#ctor(System.ComponentModel.IComponent,System.ComponentModel.IContainer)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="component"></param>
            <param name="container"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.SecureFTPCxnSite.NewMenuCommandService(System.ComponentModel.IComponent)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpVersion">
            <summary>
            Message supplying server version
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SshFxpVersion.version">
            <summary>
            Server version
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SshFxpVersion.extensions">
            <summary>
            Extension name-value pairs
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpVersion.#ctor(EnterpriseDT.Net.Ssh.Routrek.SSHC.SSHDataReader,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="reader"></param>
            <param name="length"></param>
            <remarks>
                uint32  version
                extension-pair extensions[0..n]
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpVersion.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SshFxpVersion.Version">
            <summary>
            Server version
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SshFxpVersion.Extensions">
            <summary>
            Extension name-value pairs
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpName">
            <summary>
            Message supplying filenames and attributes
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpName.#ctor(EnterpriseDT.Net.Ssh.Routrek.SSHC.SSHDataReader,System.Int32,System.Text.Encoding)">
            <summary>
            Constructor
            </summary>
            <param name="reader"></param>
            <param name="length"></param>
            <remarks>
            Remaining fields are: 
                uint32 request-id
                uint32 count
                repeats count times:
                    string     filename [UTF-8]
                    ATTRS      attrs
                bool end-of-list [optional]
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpName.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.CommandResult">
            <summary>  Result from a script command
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.1 $
            
            </version>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.CommandResult.#ctor">
            <summary> Default constructor
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.CommandResult.#ctor(System.String,System.String)">
            <summary> Constructor 
            
            </summary>
            <param name="">debug
            </param>
            <param name="">shellOutput
            
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.CommandResult.#ctor(System.Boolean,System.String,System.String)">
            <summary> Constructor 
            
            </summary>
            <param name="">debug
            </param>
            <param name="">shellOutput
            
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.CommandResult.Debug">
            <summary> Get the debug string. This is debug feedback 
            from the command, which may or may not be displayed
            depending whether debug is switched on
            
            </summary>
            <returns> string
            
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.CommandResult.ShellOutput">
            <summary> Get the output string appropriate for a shell
            
            </summary>
            <returns> string
            
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.CommandResult.ForceScriptExit">
            <summary> Should force script to exit 
            </summary>
            <returns>
            
            </returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpOpen">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpOpen.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.FeedLink">
            <summary>
            GData schema extension describing a nested feed link.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.FeedLink.href">
            <summary>holds the href property</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.FeedLink.readOnly">
            <summary>holds the readOnly property</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.FeedLink.feed">
            <summary>holds the feed property</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.FeedLink.rel">
            <summary>holds the rel attribute of the EntyrLink element</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.FeedLink.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.FeedLink.ParseFeedLink(System.Xml.XmlNode)">
            <summary>Parses an xml node to create an FeedLink object.</summary> 
            <param name="node">feedLink node</param>
            <returns> the created FeedLink object</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.FeedLink.CreateInstance(System.Xml.XmlNode,EnterpriseDT.Google.GData.Client.AtomFeedParser)">
            <summary>Parses an xml node to create a Where  object.</summary> 
            <param name="node">the node to parse node</param>
            <param name="parser">the xml parser to use if we need to dive deeper</param>
            <returns>the created Where  object</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.FeedLink.Save(System.Xml.XmlWriter)">
            <summary>
            Persistence method for the FeedLink object
            </summary>
            <param name="writer">the xmlwriter to write into</param>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.FeedLink.Href">
            <summary>
            Entry  URI
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.FeedLink.ReadOnly">
            <summary>
            Read only flag.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.FeedLink.CountHint">
            <summary>
            Count hint.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.FeedLink.Feed">
            <summary>
             Nested entry (optional).
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.FeedLink.Rel">
            <summary>accessor method public string Rel</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.FeedLink.XmlName">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.FeedLink.XmlNameSpace">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.FeedLink.XmlPrefix">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpFSetStat">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <remarks>
            byte   SSH_FXP_FSETSTAT
            uint32 request-id
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpFSetStat.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160Managed">
            <summary>
            Computes the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160"/> hash for the input data.
            </summary>
            <remarks>Based on the papers located at <a href="http://www.esat.kuleuven.ac.be/~cosicart/ps/AB-9601/">the RIPEMD homepage</a>.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160Managed.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160Managed"/> class. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160Managed.Initialize">
            <summary>
            Initializes an instance of <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160Managed"/>.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The RIPEMD160Managed instance has been disposed.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160Managed.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Routes data written to the object into the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160"/> hash algorithm for computing the hash.
            </summary>
            <param name="array">The array of data bytes.</param>
            <param name="ibStart">The offset into the byte array from which to begin using data.</param>
            <param name="cbSize">The number of bytes in the array to use as data.</param>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160Managed"/> instance has been disposed.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160Managed.HashFinal">
            <summary>
            Returns the computed <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160"/> hash as an array of bytes after all data has been written to the object.
            </summary>
            <returns>The computed hash value.</returns>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160Managed"/> instance has been disposed.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160Managed.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.MD2CryptoServiceProvider"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160Managed.Finalize">
            <summary>
            Finalizes the MD2CryptoServiceProvider.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160Managed.m_ExtraData">
            <summary>
            A buffer that holds the extra data.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160Managed.m_X">
            <summary>
            The X vectors.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160Managed.m_HashValue">
            <summary>
            The current value of the hash.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160Managed.m_Length">
            <summary>
            The nubver of bytes hashed.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160Managed.m_Disposed">
            <summary>
            A boolean that indicates whether the object has been disposed or not.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160Managed.InputBlockSize">
            <summary>
            When overridden in a derived class, gets the input block size.
            </summary>
            <value>The input block size.</value>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.TransferParameters">
            <summary>
            Transfer parameters used for a transfer
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.TransferParameters.HttpParameters">
            <summary>
            Holds the HTTP parameters to be used for the
            this operation. 
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.TransferParameters.HttpMethod">
            <summary>
            HTTP method to use - GET is the default
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions">
            <summary>
            Represents the security options that should be used when connecting to a secure server, or when accepting secure connections.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.#ctor(EnterpriseDT.Mentalis.Security.Ssl.SecureProtocol,EnterpriseDT.Mentalis.Security.Certificates.Certificate,EnterpriseDT.Mentalis.Security.Ssl.ConnectionEnd,EnterpriseDT.Mentalis.Security.Ssl.CredentialVerification,EnterpriseDT.Mentalis.Security.Ssl.CertVerifyEventHandler,System.String,EnterpriseDT.Mentalis.Security.Ssl.SecurityFlags,EnterpriseDT.Mentalis.Security.Ssl.SslAlgorithms,EnterpriseDT.Mentalis.Security.Ssl.CertRequestEventHandler,System.Boolean)">
            <summary>
            Initializes a new instance of the SecurityOptions class.
            </summary>
            <param name="protocol">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureProtocol"/> values.</param>
            <param name="cert">A <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.Certificate"/> instance.</param>
            <param name="entity">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.ConnectionEnd"/> values.</param>
            <param name="verifyType">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.CredentialVerification"/> values.</param>
            <param name="verifier">The <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.CertVerifyEventHandler"/> delegate.</param>
            <param name="commonName">The common name of the remote computer. This is usually a domain name.</param>
            <param name="flags">A bitwise combination of the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecurityFlags"/> values.</param>
            <param name="allowed">A bitwise combination of the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SslAlgorithms"/> values.</param>
            <param name="requestHandler">The <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.CertRequestEventHandler"/> delegate.</param>
            <param name="synchronousHandshake">Flag indicating whether handshakes should be synchronous or asynchronous.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.#ctor(EnterpriseDT.Mentalis.Security.Ssl.SecureProtocol,EnterpriseDT.Mentalis.Security.Certificates.Certificate,EnterpriseDT.Mentalis.Security.Ssl.ConnectionEnd)">
            <summary>
            Initializes a new instance of the SecurityOptions class.
            </summary>
            <param name="protocol">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureProtocol"/> values.</param>
            <param name="cert">A <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.Certificate"/> instance.</param>
            <param name="entity">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.ConnectionEnd"/> values.</param>
            <remarks>
            All other members of the structure will be instantiated with default values.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.#ctor(EnterpriseDT.Mentalis.Security.Ssl.SecureProtocol)">
            <summary>
            Initializes a new instance of the SecurityOptions structure.
            </summary>
            <param name="protocol">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureProtocol"/> values.</param>
            <remarks>
            All other members of the structure will be instantiated with default values.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.Clone">
            <summary>
            Creates a shallow copy of this <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions"/> object.
            </summary>
            <returns>A shallow copy of this object.</returns>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.m_Protocol">
            <summary>One of the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureProtocol"/> values.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.m_Certificate">
            <summary>A <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.Certificate"/> instance.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.m_ValidationCertificate">
            <summary>If set use this for validation.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.m_Entity">
            <summary>One of the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.ConnectionEnd"/> values.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.m_VerificationType">
            <summary>One of the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.CredentialVerification"/> values.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.m_Verifier">
            <summary>The <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.CertVerifyEventHandler"/> delegate.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.m_RequestHandler">
            <summary>The <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.CertRequestEventHandler"/> delegate.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.m_CommonName">
            <summary>The common name of the remote computer. This is usually a domain name.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.m_Flags">
            <summary>A bitwise combination of the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecurityFlags"/> values.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.m_AllowedAlgorithms">
            <summary>A bitwise combination of the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SslAlgorithms"/> values.</summary>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.Protocol">
            <summary>
            Gets or sets the secure protocol that the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/> should use.
            </summary>
            <value>A bitwise combination of the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureProtocol"/> values.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.Certificate">
            <summary>
            Gets or sets the <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.Certificate"/> that the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/> should use.
            </summary>
            <value>An instance of the Certificate class.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.ValidationCertificate">
            <summary>
            Gets or sets the <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.Certificate"/> used for server validation.
            </summary>
            <value>An instance of the Certificate class.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.Entity">
            <summary>
            Gets or sets a value that indicates whether the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/> is a server or a client socket.
            </summary>
            <value>One of the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.ConnectionEnd"/> values.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.VerificationType">
            <summary>
            Gets or sets a value that indicates how the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/> will try to verify the peer <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.Certificate"/>.
            </summary>
            <value>One of the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.CredentialVerification"/> values.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.Verifier">
            <summary>
            Gets or sets a delegate that will be called when the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/> receives the peer certificate.
            </summary>
            <value>A <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.CertVerifyEventHandler"/> delegate.</value>
            <remarks>This member will only be used if the <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.VerificationType"/> is set to Manual.</remarks>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.RequestHandler">
            <summary>
            Gets or sets a delegate that will be called when the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/> receives a request for a client certificate.
            </summary>
            <value>A <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.CertRequestEventHandler"/> delegate.</value>
            <remarks>This member will only be used if no <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.Certificate"/> is specified in the Certificate property of this class.</remarks>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.CommonName">
            <summary>
            Gets or sets the common name of the peer.
            </summary>
            <value>A <see cref="T:System.String"/> that holds the common name of the peer. This is usually a domain name.</value>
            <remarks>Servers that do not use client authentication should set this member to a null reference (<b>Nothing</b> in Visual Basic).</remarks>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.Flags">
            <summary>
            Gets or sets the security flags associated with the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/>.
            </summary>
            <value>A bitwise combination of the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecurityFlags"/> values.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.AllowedAlgorithms">
            <summary>
            Gets or sets the list of algorithms that can be used to encrypt and compress data.
            </summary>
            <value>A bitwise combination of the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SslAlgorithms"/> values.</value>
            <remarks>
            This member should always contain at least one encryption algorithm and one compression algorithm.
            Currently, the only defined compression algorithm is SslAlgorithms.NULL_COMPRESSION.
            The default setting for this member is SslAlgorithms.ALL.
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Design.SocksPropertyEditor">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.SocksPropertyEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="Context"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.SocksPropertyEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="Context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Design.ConnectionPropertyEditor">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ConnectionPropertyEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="Context"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ConnectionPropertyEditor.List_SelectedValueChanged(System.Object,System.EventArgs)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ConnectionPropertyEditor.GetConnections(System.Object)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ConnectionPropertyEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Design.EncodingPropertyEditor">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.EncodingPropertyEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="Context"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.EncodingPropertyEditor.List_SelectedValueChanged(System.Object,System.EventArgs)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.EncodingPropertyEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Design.FTPPropertyPropertyEditor">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.FTPPropertyPropertyEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="Context"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.FTPPropertyPropertyEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="Context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Design.ClickableEditor">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ClickableEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="Context"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ClickableEditor.tree_AfterSelect(System.Object,System.Windows.Forms.TreeViewEventArgs)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ClickableEditor.GetClickableControls(System.Object)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ClickableEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Design.PasswordEditor">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.PasswordEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="Context"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.PasswordEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.WildcardFilter">
            <summary>  
            Wildcard file filter that matches against <c>?</c> for single characters and <c>*</c> 
            for multiple characters. Case is ignored.
            </summary>
            <author>
            Bruce Blackshaw       
            </author>
            <version>      
            $Revision: 1.9 $
            </version>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.WildcardFilter.ignoreCase">
            <summary>
            On Windows we ignore case
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.WildcardFilter.directoriesAlwaysMatch">
            <summary>
            Do directories always match?
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.WildcardFilter.wildcard">
            <summary>
            The wildcard used
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.WildcardFilter.wildcardFields">
            <summary>
            A split up wildcard
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.WildcardFilter.#ctor">
            <summary>
            Constructor. All files match
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.WildcardFilter.#ctor(System.String)">
            <summary>
            Wildcards are a combination of '*' and '?'.
            </summary>
            <remarks>
            It is meaningless to have them adjacent to each other, and so this is not permitted.
            </remarks>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.WildcardFilter.Init(System.String)">
            <summary>
            Called by all constructors
            </summary>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.WildcardFilter.Accept(EnterpriseDT.Net.Ftp.FTPFile)">
            <summary>
            Matching method accepting an <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> object.
            </summary>
            <param name="file">File to match</param>
            <returns><c>true</c> if file is to be included.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.WildcardFilter.Accept(System.String)">
            <summary>
            Matching method.
            </summary>
            <remarks>
            Case is ignored.
            </remarks>
            <param name="name">name to test</param>
            <returns>true if name matches wildcard</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.WildcardFilter.Split(System.String)">
            <summary>
            Splits string consisting of fields separated by
            </summary>
            <param name="str">string to split</param>
            <returns>array of fields</returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.WildcardFilter.Wildcard">
            <summary>
            Get the wildcard string
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.WildcardFilter.IgnoreCase">
            <summary>
            Is case ignored in the wildcard match?
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Spreadsheets.WorksheetFeed">
            <summary>
            Feed API customzation class for defining Worksheets feed.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.WorksheetFeed.#ctor(System.Uri,EnterpriseDT.Google.GData.Client.IService)">
            <summary>
            Constructor
            </summary>
            <param name="uriBase">The uri for the worksheets feed.</param>
            <param name="iService">The Spreadsheets service.</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.WorksheetFeed.CreateFeedEntry">
            <summary>
            returns a new entry for this feed
            </summary>
            <returns>AtomEntry</returns>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.AtomTextConstructElementType">
            <summary>enum to define the AtomTextConstructs Type...</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomTextConstructElementType.Rights">
            <summary>this is a Right element</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomTextConstructElementType.Title">
            <summary>this is a title element</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomTextConstructElementType.Subtitle">
            <summary>this is a subtitle element</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomTextConstructElementType.Summary">
            <summary>this is a summary element</summary> 
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.AtomTextConstructType">
            <summary>enum to define the AtomTextConstructs Type...</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomTextConstructType.text">
            <summary>defines standard text</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomTextConstructType.html">
            <summary>defines html text</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomTextConstructType.xhtml">
            <summary>defines xhtml text</summary> 
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.AtomTextConstructConverter">
            <summary>TypeConverter, so that AtomTextConstruct shows up in the property pages
            </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomTextConstructConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>Standard type converter method</summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomTextConstructConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>Standard type converter method</summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.AtomTextConstruct">
            <summary>AtomTextConstruct object representation
            A Text construct contains human-readable text, usually in small quantities. 
            The content of Text constructs is Language-Sensitive.
            </summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomTextConstruct.type">
            <summary>holds the type of the text</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomTextConstruct.text">
            <summary>holds the text as string</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomTextConstruct.elementType">
            <summary>holds the element type</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomTextConstruct.#ctor">
            <summary>the public constructor only exists for the pleasure of property pages</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomTextConstruct.#ctor(EnterpriseDT.Google.GData.Client.AtomTextConstructElementType)">
            <summary>constructor indicating the elementtype</summary> 
            <param name="elementType">holds the xml elementype</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomTextConstruct.#ctor(EnterpriseDT.Google.GData.Client.AtomTextConstructElementType,System.String)">
            <summary>constructor indicating the elementtype</summary> 
            <param name="elementType">holds the xml elementype</param>
            <param name="text">holds the text string</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomTextConstruct.SaveXmlAttributes(System.Xml.XmlWriter)">
            <summary>overridden to save attributes for this(XmlWriter writer)</summary> 
            <param name="writer">the xmlwriter to save into </param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomTextConstruct.SaveInnerXml(System.Xml.XmlWriter)">
            <summary>saves the inner state of the element</summary> 
            <param name="writer">the xmlWriter to save into </param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomTextConstruct.ShouldBePersisted">
            <summary>figures out if this object should be persisted</summary> 
            <returns> true, if it's worth saving</returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomTextConstruct.Type">
            <summary>accessor method public AtomTextConstructType Type</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomTextConstruct.Text">
            <summary>accessor method public string Text</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomTextConstruct.XmlName">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.OpenCommand">
            <summary>  Open the connection
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.8 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPComponentLinker">
            <summary>
            Utility class which assists FTP components to interlink.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPComponentLinker.Link(System.ComponentModel.ISite,EnterpriseDT.Net.Ftp.IFTPComponent)">
            <summary>
            Calls <see cref="M:EnterpriseDT.Net.Ftp.IFTPComponent.LinkComponent(EnterpriseDT.Net.Ftp.IFTPComponent)"/> on all other 
            FTP components in the container of the given site.
            </summary>
            <param name="site">Site in the container whose FTP components are to be linked.</param>
            <param name="component">New components added to the containiner.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPComponentLinker.Find(System.ComponentModel.ISite,System.Type)">
            <summary>
            Searches the given site's container for a component of the given type.
            </summary>
            <param name="site">Site whose container is to be searched.</param>
            <param name="componentType">Type to search for.</param>
            <returns>Returns the first component found.</returns>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">
            <summary>
            The exception that is thrown when a certificate error is detected.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateException.#ctor">
            <summary>
            Initializes a new instance of the CertificateException class with default properties.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CertificateException class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the CertificateException class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception. If the inner parameter is not a null reference (<b>Nothing</b> in Visual Basic), the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the CertificateException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.MDeleteCommand">
            <summary>  Implements the mdelete command (mdelete [filter])
            
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.2 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Spreadsheets.ReturnEmptyCells">
            <summary>Enum to describe the different return empty parameters
            </summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Spreadsheets.ReturnEmptyCells.serverDefault">
            <summary> do not create the parameter, do whatever the server does</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Spreadsheets.ReturnEmptyCells.yes">
            <summary>return empty cells</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Spreadsheets.ReturnEmptyCells.no">
            <summary>do not return empty cells</summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Spreadsheets.CellQuery">
            <summary>
            A subclass of FeedQuery, to create a Spreadsheets cell query URI.
            Provides public properties that describe the different
            aspects of the URI, as well as a composite URI.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.CellQuery.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor 
            </summary>
            <param name="key">The spreadsheet key</param>
            <param name="worksheetId">The unique identifier or position of the worksheet</param>
            <param name="visibility">public or private</param>
            <param name="projection">full, values, or basic</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.CellQuery.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor - Sets the base URI
            </summary>
            <param name="baseUri">The feed base</param>
            <param name="key">The spreadsheet key</param>
            <param name="worksheetId">The unique identifier or position of the worksheet</param>
            <param name="visibility">public or private</param>
            <param name="projection">full, values, or basic</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.CellQuery.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="baseUri">The feed base with the key, worksheetId, visibility and 
            projections are appended and delimited by "/"</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.CellQuery.ParseUri(System.Uri)">
            <summary>
            Parses an incoming URI string and sets the instance variables
            of this object.
            </summary>
            <param name="targetUri">Takes an incoming Uri string and parses all the properties of it</param>
            <returns>Throws a query exception when it finds something wrong with the input, otherwise returns a baseuri.</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.CellQuery.Reset">
            <summary>
            Resets object state to default, as if newly created.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.CellQuery.CalculateQuery(System.String)">
            <summary>
            Creates the partial URI query string based on all set properties.
            </summary>
            <returns> string => the query part of the URI </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Spreadsheets.CellQuery.MinimumRow">
            <summary>
            The minimum index for a row allowed in the response
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Spreadsheets.CellQuery.MaximumRow">
            <summary>
            The maximum index for a row allowed in the response
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Spreadsheets.CellQuery.MinimumColumn">
            <summary>
            The minimum index for a column allowed in the response
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Spreadsheets.CellQuery.MaximumColumn">
            <summary>
            The maximum index for a column allowed in a response
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Spreadsheets.CellQuery.Range">
            <summary>
            A range string in R1C1 or A1 notation.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Spreadsheets.CellQuery.ReturnEmpty">
            <summary>
            If true, then empty cells will be included in the feed.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SCPChannel">
            <summary>
            A channel for exec'ing a command
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SCPChannel.log">
            <summary> Logging object</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SCPChannel.Close">
            <summary>
            Override because for SCP we are maintaining the connection
            after the channel is closed
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Rating">
            <summary>
            The gd:rating tag specifies the rating that you are assigning to a resource (in a request to add a rating) 
            or the current average rating of the resource based on aggregated user ratings
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Rating.#ctor">
            <summary>
            default constructor for gd:rating. This will set min and max
            to 1 and 5 respectively
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Rating.Min">
            <summary>
            The min attribute specifies the minimum rating that can be assigned to a resource. This value must be 1.
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Rating.Max">
            <summary>
            The max attribute specifies the maximum rating that can be assigned to a resource. This value must be 5.
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Rating.NumRaters">
            <summary>
            The numRaters attribute indicates how many people have rated the resource. This attribute is not used 
            in a request to add a rating
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Rating.Average">
            <summary>
            The average attribute indicates the average rating given to the resource.
            This attribute is not used in a request to add a rating.
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Rating.Value">
            <summary>Accessor for "value" attribute.</summary> 
            <returns> </returns>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.GoogleAuthentication">
            <summary>constants for the authentication handler
            </summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GoogleAuthentication.AccountPrefix">
             <summary>account prefix path </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GoogleAuthentication.DefaultProtocol">
            <summary>protocol</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GoogleAuthentication.DefaultDomain">
            <summary>
            default authentication domain
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GoogleAuthentication.UriHandler">
            <summary>Google client authentication handler</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GoogleAuthentication.Email">
            <summary>Google client authentication email</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GoogleAuthentication.Password">
            <summary>Google client authentication password</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GoogleAuthentication.Source">
            <summary>Google client authentication source constant</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GoogleAuthentication.Service">
            <summary>Google client authentication default service constant</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GoogleAuthentication.Lsid">
            <summary>Google client authentication LSID</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GoogleAuthentication.Ssid">
            <summary>Google client authentication SSID</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GoogleAuthentication.AuthToken">
            <summary>Google client authentication Token</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GoogleAuthentication.AuthSubToken">
            <summary>Google authSub authentication Token</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GoogleAuthentication.Header">
            <summary>Google client header</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GoogleAuthentication.Override">
            <summary>Google method override header</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GoogleAuthentication.WebKey">
            <summary>Google webkey identifier</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GoogleAuthentication.YouTubeClientId">
            <summary>Google YouTube client identifier</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GoogleAuthentication.YouTubeDevKey">
            <summary>Google YouTube developer identifier</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GoogleAuthentication.AccountType">
            <summary>Google webkey identifier</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GoogleAuthentication.AccountTypeDefault">
            <summary>default value for the account type</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GoogleAuthentication.CaptchaAnswer">
            <summary>captcha url token</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GoogleAuthentication.CaptchaToken">
            <summary>default value for the account type</summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssl.SSLFTPSecureEventArgs">
            <summary>
            Provides data for the <see cref="E:EnterpriseDT.Net.Ftp.SecureFTPConnection.SecuringConnection"/>
            and <see cref="E:EnterpriseDT.Net.Ftp.SecureFTPConnection.SecuredConnection"/> events.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPSecureEventArgs.isSecure">
            <summary>Indicates if the control channel is secure.</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPSecureEventArgs.#ctor(System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="isSecure">Indicates if the control channel is secure.</param>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssl.SSLFTPSecureEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:EnterpriseDT.Net.Ftp.SecureFTPConnection.SecuringConnection"/>
            and <see cref="E:EnterpriseDT.Net.Ftp.SecureFTPConnection.SecuredConnection"/> events.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssl.SSLFTPDataProtectionType">
            <summary>
            Enumeration of available data-channel protections.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPDataProtectionType.Clear">
            <summary>No security.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPDataProtectionType.Private">
            <summary>Full security.</summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssl.SSLFTPSSLVersion">
            <summary>
            Specifies type and version of SSL/TLS to use.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPSSLVersion.SSL3">
            <summary>
            Version 3 of the SSL protocol.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPSSLVersion.TLS1">
            <summary>
            Version 1 of the TLS protocol (successor to the SSL protocol).
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPSSLVersion.DETECT">
            <summary>
            Detect if the server requests TLS1.0 or TLS 1.1. SSL3 is no longer supported for this setting
            and must be set explicitly
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPSSLVersion.TLS11">
            <summary>
            Version 1.1 of the TLS protocol (successor to the SSL protocol).
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssl.SSLFTPValidationStatus">
            <summary>
            Validation status of an SSL/TLS certificate.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPValidationStatus.ValidCertificate">
            <summary>
            The certificate is valid.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPValidationStatus.Expired">
            <summary>
            A required certificate is not within its validity period.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPValidationStatus.InvalidBasicConstraints">
            <summary>
            The certificate's basic constraints are invalid or missing.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPValidationStatus.InvalidChain">
            <summary>
            A chain of certificates was not correctly created.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPValidationStatus.InvalidNesting">
            <summary>
            The validity periods of the certification chain do not nest correctly.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPValidationStatus.InvalidPurpose">
            <summary>
            A certificate is being used for a non permitted purpose.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPValidationStatus.InvalidRole">
            <summary>
            A certificate that can only be used as an end-entity is being used as a CA or visa versa.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPValidationStatus.InvalidSignature">
            <summary>
            The signature of the certificate cannot be verified.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPValidationStatus.NoCNMatch">
            <summary>
            The certificate's CN name does not match the passed value.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPValidationStatus.ParentRevoked">
            <summary>
            A certificate in the chain has been explicitly revoked by its issuer.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPValidationStatus.RevocationFailure">
            <summary>
            The revocation process could not continue. The certificates could not be checked.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPValidationStatus.RevocationServerOffline">
            <summary>
            Since the revocation server was offline, the called function was not able to complete the revocation check.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPValidationStatus.Revoked">
            <summary>
            The certificate or signature has been revoked.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPValidationStatus.UntrustedRoot">
            <summary>
            A certification chain processed correctly but terminated in a root certificate not trusted by the trust provider.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPValidationStatus.UntrustedTestRoot">
            <summary>
            The root certificate is a testing certificate and policy settings disallow test certificates.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPValidationStatus.WrongUsage">
            <summary>
            The certificate is not valid for the requested usage.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPValidationStatus.OtherError">
            <summary>
            The certificate is invalid.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.ExecChannelReceiver">
            <summary>
            SSH messages received back from an exec are channelled via this class
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.ExecChannelReceiver.log">
            <summary> Logging object</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.ExecChannelReceiver.OnData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Called when SSH_MESSAGE_DATA is received
            </summary>
            <param name="data">array of data</param>
            <param name="offset">offset into array</param>
            <param name="length">length of data</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.ExecChannelReceiver.OnChannelReady">
            <summary>
            Called when the SSH channel is initialised
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.ExecChannelReceiver.CheckPortForwardingRequest(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Not used
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.ExecChannelReceiver.EstablishPortforwarding(EnterpriseDT.Net.Ssh.Routrek.SSHC.ISSHChannelEventReceiver,EnterpriseDT.Net.Ssh.Routrek.SSHC.SSHChannel)">
            <summary>
            Not used
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.ExecChannelReceiver.ChannelReady">
            <summary>
            True if the channel to be used by the SFTP subsystem is ready
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.ExecChannelReceiver.CommandComplete">
            <summary>
            True if the reply data is all sent
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.ExecChannelReceiver.CommandSuccess">
            <summary>
            True if successful
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ssh.Routrek.SSHC.CipherFactory">
            <summary>
            Creates a cipher from given parameters
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ssh.Routrek.SSHC.CipherFactory.GetKeySize(EnterpriseDT.Net.Ssh.Routrek.SSHC.CipherAlgorithm)">
            <summary>
            returns necessary key size from Algorithm in bytes
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ssh.Routrek.SSHC.CipherFactory.GetBlockSize(EnterpriseDT.Net.Ssh.Routrek.SSHC.CipherAlgorithm)">
            <summary>
            returns the block size from Algorithm in bytes
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ssh.Routrek.SSHC.CompressionFactory">
            <summary>
            Compression stuff
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FileTypes">
            <summary>  
            Attempts to classify files as ASCII (or not)
            </summary>
            <author>
            Bruce Blackshaw       
            </author>
            <version>      
            $Revision: 1.1 $
            </version>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FileTypes.ascii">
            <summary>Holds hash of ASCII extensions</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FileTypes.#cctor">
            <summary>Initialize the hash of types</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FileTypes.Extensions">
            <summary> 
            Get the list of registered ASCII extensions
            </summary>
            <returns> 
            array of file extensions
            </returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FileTypes.RegisterExtension(System.String)">
            <summary> 
            Register a new ASCII extension
            </summary>
            <param name="ext">new extension</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FileTypes.UnregisterExtension(System.String)">
            <summary> 
            Unregister an ASCII extension
            </summary>
            <param name="ext">filename extension (excluding ".") to unregister</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FileTypes.IsASCII(System.IO.FileInfo)">
            <summary> 
            Determines if a file is an ASCII file by seeing if it matches 
            registered extensions for ASCII files
            </summary>
            <param name="file">handle to file</param>
            <returns>true if ASCII, false otherwise</returns>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelUnmanagedTransform">
            <summary>
            Defines the basic operations of a unmanaged Rijndael cryptographic transformation.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelUnmanagedTransform.#ctor(EnterpriseDT.Mentalis.Security.Cryptography.CryptoAlgorithm,EnterpriseDT.Mentalis.Security.Cryptography.CryptoMethod,System.Byte[],System.Byte[],System.Security.Cryptography.CipherMode,System.Int32,System.Security.Cryptography.PaddingMode)">
            <summary>
            Initializes a new instance of the RijndaelUnmanagedTransform class.
            </summary>
            <param name="algorithm">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.CryptoAlgorithm"/> values.</param>
            <param name="method">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.CryptoMethod"/> values.</param>
            <param name="key">The key to use.</param>
            <param name="iv">The IV to use.</param>
            <param name="mode">One of the <see cref="T:System.Security.Cryptography.CipherMode"/> values.</param>
            <param name="feedback">The feedback size of the cryptographic operation in bits.</param>
            <param name="padding">One of the <see cref="T:System.Security.Cryptography.PaddingMode"/> values.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelUnmanagedTransform.Finalize">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelUnmanagedTransform.Dispose">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelUnmanagedTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Transforms the specified region of the input byte array and copies the resulting transform to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write the transform.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>The number of bytes written.</returns>
            <exception cref="T:System.ObjectDisposedException">The object has been disposed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="inputBuffer"/> or <paramref name="outputBuffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">One of the specified offsets or lengths is invalid.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurs while transforming the specified data.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelUnmanagedTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Transforms the specified region of the specified byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the byte array to use as data.</param>
            <returns>The computed transform.</returns>
            <exception cref="T:System.ObjectDisposedException">The object has been disposed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="inputBuffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The combination of offset and length is invalid.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurs while transforming the specified data.</exception>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelUnmanagedTransform.m_BlockSize">
            <summary>
            Holds the block size of the algorithm.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelUnmanagedTransform.m_Key">
            <summary>
            Holds the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey"/> used for the cryptographic transformations.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelUnmanagedTransform.m_Method">
            <summary>
            Holds the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.CryptoMethod"/> for this cryptographic operation.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelUnmanagedTransform.CanReuseTransform">
            <summary>
            Gets a value indicating whether the current transform can be reused.
            </summary>
            <value><b>true</b> if the current transform can be reused; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelUnmanagedTransform.CanTransformMultipleBlocks">
            <summary>
            Gets a value indicating whether multiple blocks can be transformed.
            </summary>
            <value><b>true</b> if multiple blocks can be transformed; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelUnmanagedTransform.InputBlockSize">
            <summary>
            Gets the input block size.
            </summary>
            <value>The size of the input data blocks in bytes.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelUnmanagedTransform.OutputBlockSize">
            <summary>
            Gets the output block size.
            </summary>
            <value>The size of the output data blocks in bytes.</value>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.ScriptVariable">
            <summary>  String variable for scripting/shell
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.1 $
            
            </version>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.ScriptVariable.#ctor(System.String,System.String)">
            <summary> Constructor
            
            </summary>
            <param name="name">    name of variable 
            </param>
            <param name="value">   value of variable
            
            </param>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Who">
            <summary>
            GData schema extension describing a person.
            It contains a gd:entryLink element containing the described person.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Who.rel">
            <summary>
             relationship description as a String
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Who.valueString">
            <summary>
            String description of the person.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Who.email">
            <summary>
            email adress of the person
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Who.attendeeType">
            <summary>
             Type of event attendee.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Who.attendeeStatus">
            <summary>
             Status of event attendee.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Who.entryLink">
            <summary>
            Nested person entry.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Who.CreateInstance(System.Xml.XmlNode,EnterpriseDT.Google.GData.Client.AtomFeedParser)">
            <summary>Parses an xml node to create a Where  object.</summary> 
            <param name="node">the node to parse node</param>
            <param name="parser">the xml parser to use if we need to dive deeper</param>
            <returns>the created Where  object</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Who.Save(System.Xml.XmlWriter)">
            <summary>
            Persistence method for the Who object
            </summary>
            <param name="writer">the xmlwriter to write into</param>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Who.Rel">
            <summary>accessor method public string Rel</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Who.ValueString">
            <summary>accessor method public string ValueString</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Who.Email">
            <summary>accessor method for the email property</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Who.Attendee_Type">
            <summary>
             Attendee_Type accessor
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Who.Attendee_Status">
            <summary>
             Attendee_Status accessor
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Who.EntryLink">
            <summary>
             EntryLink Accessor
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Who.XmlName">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Who.XmlNameSpace">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Who.XmlPrefix">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Who.RelType">
            <summary>
            Relation type. Describes the meaning of this association.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Who.RelType.EVENT_ATTENDEE">
            <summary>Relationship value Attendee</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Who.RelType.EVENT_ORGANIZER">
            <summary>Relationship value Organizer</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Who.RelType.EVENT_SPEAKER">
            <summary>Relationship value Speaker</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Who.RelType.EVENT_PERFORMER">
            <summary>Relationship value Performer</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Who.RelType.TASK_ASSIGNED_TO">
            <summary>Relationship value Assigned To</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Who.RelType.MESSAGE_FROM">
            <summary>Relationship value Message From</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Who.RelType.MESSAGE_REPLY_TO">
            <summary>Relationship value message is a reply to</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Who.RelType.MESSAGE_TO">
            <summary>Relationship value message goes to</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Who.RelType.MESSAGE_CC">
            <summary>Relationship value message CC</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Who.RelType.MESSAGE_BCC">
            <summary>Relationship value message BCC</summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Who.AttendeeType">
            <summary>
            AttendeeType class
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Who.AttendeeType.EVENT_REQUIRED">
            <summary>this attendee is required</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Who.AttendeeType.EVENT_OPTIONAL">
            <summary>this attendee is optional</summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Who.AttendeeType.#ctor">
            <summary>
             default constructor
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Who.AttendeeType.parse(System.Xml.XmlNode)">
            <summary>
            the xml parsing method
            </summary>
            <param name="node">the xml node holding the attendeeStatus</param>
            <returns>AttendeeType</returns>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Who.AttendeeStatus">
            <summary>
            represents the status of the attendee
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Who.AttendeeStatus.EVENT_INVITED">
            <summary>attendee was invited</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Who.AttendeeStatus.EVENT_ACCEPTED">
            <summary> attendee has accepted</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Who.AttendeeStatus.EVENT_TENTATIVE">
            <summary>attendee might or might not...</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Who.AttendeeStatus.EVENT_DECLINED">
            <summary>this attendee declined politely</summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Who.AttendeeStatus.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Who.AttendeeStatus.parse(System.Xml.XmlNode)">
            <summary>
            the xml parsing method
            </summary>
            <param name="node">the xml node holding the attendeeStatus</param>
            <returns>AttendeeStatus</returns>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.Tracing">
            <summary>Tracing helper class. Uses conditional compilation to 
             exclude tracing code in release builds</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Tracing.#ctor">
            <summary>default constructor does nothing</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Tracing.InitTracing">
            <summary>default initializer, does nothing right now</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Tracing.ExitTracing">
            <summary>Default deinitializer, closes the listener streams</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Tracing.TraceCall(System.String,System.Diagnostics.StackFrame,System.Int32)">
            <summary>Method to trace the current call with an additional message</summary> 
            <param name="msg"> msg string to display</param>
            <param name="startFrame">the startFrame to uses</param>
            <param name="indent"> intendation</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Tracing.TraceCall(System.String)">
            <summary>Method to trace the current call with an additional message</summary> 
            <param name="msg"> msg string to display</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Tracing.TraceCall">
            <summary>Method to trace the current call with an additional message</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Tracing.TraceInfo(System.String)">
            <summary>Method to trace the current call with an additional message</summary> 
            <param name="msg"> msg string to display</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Tracing.TraceMsg(System.String)">
            <summary>Method to trace a message</summary> 
            <param name="msg"> msg string to display</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Tracing.Assert(System.Boolean,System.String)">
            <summary>Method to assert + trace a message</summary> 
            <param name="condition"> if false, raises assert</param>
            <param name="msg"> msg string to display</param>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpReadDir">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpReadDir.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Cryptography.RC4">
            <summary>
            Represents the base class from which all implementations of the RC4 symmetric stream cipher must inherit.
            </summary>
            <remarks>
            RC4 is a trademark of RSA Data Security Inc.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RC4.#ctor">
            <summary>
            Initializes a new instance of the RC4 class.
            </summary>
            <remarks>
            The default keysize is 128 bits.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RC4.GenerateIV">
            <summary>
            This is a stub method.
            </summary>
            <remarks>Since the RC4 cipher doesn't use an Initialization Vector, this method will not do anything.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RC4.GenerateKey">
            <summary>
            Generates a random Key to be used for the algorithm.
            </summary>
            <remarks>Use this method to generate a random key when none is specified.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RC4.Create">
            <summary>
            Creates an instance of the default cryptographic object used to perform the RC4 transformation.
            </summary>
            <returns>The instance of a cryptographic object used to perform the RC4 transformation.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RC4.Create(System.String)">
            <summary>
            Creates an instance of the specified cryptographic object used to perform the RC4 transformation.
            </summary>
            <param name="AlgName">The name of the specific implementation of <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.RC4"/> to create.</param>
            <returns>A cryptographic object.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RC4.GetRNGCSP">
            <summary>
            Returns an <see cref="T:System.Security.Cryptography.RNGCryptoServiceProvider"/> instance.
            </summary>
            <returns>An RNGCryptoServiceProvider instance.</returns>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.RC4.m_RNG">
            <summary>
            Holds the RNGCryptoServiceProvider object.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RC4.BlockSize">
            <summary>
            Gets or sets the block size of the cryptographic operation in bits.
            </summary>
            <value>The block size of RC4 is always 8 bits.</value>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The block size is invalid.</exception>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RC4.FeedbackSize">
            <summary>
            Gets or sets the feedback size of the cryptographic operation in bits.
            </summary>
            <value>This property always throws a <see cref="T:System.Security.Cryptography.CryptographicException"/>.</value>
            <exception cref="T:System.Security.Cryptography.CryptographicException">This exception is always thrown.</exception>
            <remarks>RC4 doesn't use the FeedbackSize property.</remarks>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RC4.IV">
            <summary>
            Gets or sets the initialization vector (IV) for the symmetric algorithm.
            </summary>
            <value>This property always returns a byte array of length one. The value of the byte in the array is always set to zero.</value>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An attempt is made to set the IV to an invalid instance.</exception>
            <remarks>RC4 doesn't use the IV property, however the property accepts IV's of up to one byte (RC4's <see cref="P:EnterpriseDT.Mentalis.Security.Cryptography.RC4.BlockSize"/>) in order to interoperate with software that has been written with the use of block ciphers in mind.</remarks>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RC4.LegalBlockSizes">
            <summary>
            Gets the block sizes that are supported by the symmetric algorithm.
            </summary>
            <value>An array containing the block sizes supported by the algorithm.</value>
            <remarks>Only a block size of one byte is supported by the RC4 algorithm.</remarks>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RC4.LegalKeySizes">
            <summary>
            Gets the key sizes that are supported by the symmetric algorithm.
            </summary>
            <value>An array containing the key sizes supported by the algorithm.</value>
            <remarks>Only key sizes that match an entry in this array are supported by the symmetric algorithm.</remarks>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RC4.Mode">
            <summary>
            Gets or sets the mode for operation of the symmetric algorithm.
            </summary>
            <value>The mode for operation of the symmetric algorithm.</value>
            <remarks>RC4 only supports the OFB cipher mode. See <see cref="T:System.Security.Cryptography.CipherMode"/> for a description of this mode.</remarks>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cipher mode is not OFB.</exception>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RC4.Padding">
            <summary>
            Gets or sets the padding mode used in the symmetric algorithm.
            </summary>
            <value>The padding mode used in the symmetric algorithm. This property always returns PaddingMode.None.</value>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The padding mode is set to a padding mode other than PaddingMode.None.</exception>
        </member>
        <member name="T:EnterpriseDT.Net.Proxy.ProxyConnectorFactory">
            <summary>
            Base class for all proxy connectors
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Pro.ProFTPAnimation">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPAnimation.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPAnimation.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPAnimation.Connection">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Util.License.EDTLicenseException">
            <summary>  
            Indicates invalid license key or owner
            </summary>
            <author>       
            Bruce Blackshaw
            </author>
            <version>      
            $Revision: 1.2 $
            </version> 
        </member>
        <member name="F:EnterpriseDT.Util.License.EDTLicenseException.reason">
            <summary>
            Reason for exception
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.License.EDTLicenseException.#ctor(System.String)">
            <summary>   
            Constructor. Delegates to super.
            </summary>
            <param name="msg">  Message that the user will be
            able to retrieve
            </param>
        </member>
        <member name="M:EnterpriseDT.Util.License.EDTLicenseException.#ctor(System.String,System.Int32)">
            <summary>   
            Constructor. Delegates to super.
            </summary>
            <param name="msg">  Message that the user will be
            able to retrieve
            </param>
        </member>
        <member name="P:EnterpriseDT.Util.License.EDTLicenseException.Reason">
            <summary>
            Reason for exception
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpWrite">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpWrite.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Design.ServerCertificatePropertyEditor">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ServerCertificatePropertyEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ServerCertificatePropertyEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ServerCertificatePropertyEditor.PromptForCertificate(System.Windows.Forms.Form,System.Boolean)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="parent"></param>
            <param name="promptForPrivateKey"></param>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Design.KnownHostsPropertyEditor">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.KnownHostsPropertyEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.KnownHostsPropertyEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.KnownHostsPropertyEditor.PromptForKnownHostFile(System.Windows.Forms.Form,System.String)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="parent"></param>
            <param name="origPath"></param>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Design.PrivateKeyPropertyEditor">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.PrivateKeyPropertyEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.PrivateKeyPropertyEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.PrivateKeyPropertyEditor.PromptForPrivateKeyFile(System.Windows.Forms.Form,EnterpriseDT.Net.Ftp.SecureFTPConnection)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="parent"></param>
            <param name="origPath"></param>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Design.PassphraseEditor">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.PassphraseEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="Context"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.PassphraseEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Pro.Design.CertForm">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.Design.CertForm.#ctor">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.Design.CertForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.Design.CertForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Pro.Design.ListBoxItem">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.UnixFileParser2">
            <summary>  
            Custom file parser for an unusual Unix FTP server that returns LIST listings 
            in the form of -r-------- GMETECHNOLOGY 1 TSI         8 Nov 06 11:00:25 ,GMETECHNOLOGY,file02.csv,U,20071106A00001105190.txt
            </summary>
            <author>       
            Bruce Blackshaw
            </author>
            <version>      
            $Revision: 1.2 $
            </version>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser2.SYMLINK_ARROW">
            <summary> Symbolic link symbol</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser2.SYMLINK_CHAR">
            <summary> Indicates symbolic link</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser2.ORDINARY_FILE_CHAR">
            <summary> Indicates ordinary file</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser2.DIRECTORY_CHAR">
            <summary> Indicates directory</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser2.format1a">
            <summary>Date format 1</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser2.format1b">
            <summary>Date format 1</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser2.format2a">
            <summary>Date format 2</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser2.format2b">
            <summary>Date format 2</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser2.format2c">
            <summary>Date format 2</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser2.format2d">
            <summary>Date format 2</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser2.MIN_FIELD_COUNT">
            <summary> Minimum number of expected fields</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser2.format1">
            <summary>array of format 1 formats</summary> 
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser2.format2">
            <summary>array of format 2 formats</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser2.log">
            <summary> Logging object</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.UnixFileParser2.#ctor">
            <summary> Default constructor</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.UnixFileParser2.Parse(System.String)">
            <summary> 
            Parse server supplied string, e.g.:
            
            -r-------- GMETECHNOLOGY 1 TSI         8 Nov 06 11:00:25 ,GMETECHNOLOGY,file02.csv,U,20071106A00001105190.txt
            
            </summary>
            <param name="raw">  raw string to parse
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.UnixFileParser2.TimeIncludesSeconds">
            <summary>
            Get flag indicating whether or not the most recent parse returned seconds.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPIntegrityCheckException">
            <summary>
            Thrown when a transfer fails the integrity check
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPIntegrityCheckException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Proxy.Http.HttpProxyConnector.Connect(EnterpriseDT.Net.BaseSocket,System.Net.IPAddress,System.Int32)">
            <summary>
            Connect to the remote host using HTTP proxy
            </summary>
            <param name="socket"></param>
            <param name="address"></param>
            <param name="port"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Proxy.Http.HttpProxyConnector.Connect(EnterpriseDT.Net.BaseSocket,System.String,System.Int32)">
            <summary>
            Connect to the remote host using HTTP proxy
            </summary>
            <param name="socket"></param>
            <param name="address"></param>
            <param name="port"></param>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.OAuthUtil">
            <summary>
            Provides a means to generate an OAuth signature suitable for use
            with Google OAuth requests.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.OAuthUtil.GenerateHeader(System.Uri,System.String,System.String,System.String)">
            <summary>
            Generates an OAuth header.
            </summary>
            <param name="uri">The URI of the request</param>
            <param name="consumerKey">The consumer key</param>
            <param name="consumerSecret">The consumer secret</param>
            <param name="httpMethod">The http method</param>
            <returns>The OAuth authorization header</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.OAuthUtil.GenerateHeader(System.Uri,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Generates an OAuth header.
            </summary>
            <param name="uri">The URI of the request</param>
            <param name="consumerKey">The consumer key</param>
            <param name="consumerSecret">The consumer secret</param>
            <param name="token">The OAuth token</param>
            <param name="tokenSecret">The OAuth token secret</param>
            <param name="httpMethod">The http method</param>
            <returns>The OAuth authorization header</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.OAuthUtil.GenerateHeader(System.Uri,System.String,EnterpriseDT.Google.GData.Client.OAuthParameters)">
            <summary>
            Generates an OAuth header.
            </summary>
            <param name="uri">The URI of the request</param>
            <param name="httpMethod">The http method</param>
            <param name="parameters">The OAuth parameters</param>
            <returns>The OAuth authorization header</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.OAuthUtil.GetUnauthorizedRequestToken(EnterpriseDT.Google.GData.Client.OAuthParameters)">
            <summary>
            Contacts Google for a request token, first step of the OAuth authentication process.
            When successful, updates the OAuthParameter instance passed as parameter by setting
            Token and TokenSecret.
            </summary>
            <param name="parameters">The OAuth parameters</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.OAuthUtil.CreateUserAuthorizationUrl(EnterpriseDT.Google.GData.Client.OAuthParameters)">
            <summary>
            Generates the url which the user should visit in order to authenticate and
            authorize with the Service Provider.
            When successful, updates the OAuthParameter instance passed as parameter by setting
            Token and TokenSecret.
            </summary>
            <param name="parameters">The OAuth parameters</param>
            <returns>The full authorization url the user should visit</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.OAuthUtil.UpdateOAuthParametersFromCallback(System.String,EnterpriseDT.Google.GData.Client.OAuthParameters)">
            <summary>
            Helper method which parses a querystring for the OAuth related parameters.
            It updates the OAuthParameter instance passed as parameter by setting
            Token, TokenSecret and Verifier (if present).
            </summary>
            <param name="parameters">The OAuth parameters</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.OAuthUtil.GetAccessToken(EnterpriseDT.Google.GData.Client.OAuthParameters)">
            <summary>
            Exchanges the user-authorized request token for an access token.
            When successful, updates the OAuthParameter instance passed as parameter by setting
            Token and TokenSecret.
            </summary>
            <param name="parameters">The OAuth parameters</param>
        </member>
        <member name="T:EnterpriseDT.Net.Ssh.SSHKeyExchangeMethod">
            <summary>
            Available key exchange methods
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHKeyExchangeMethod.DiffieHellmanGroup1Sha1">
            <summary>Diffie-Hellman group 1 sha-1</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHKeyExchangeMethod.DiffieHellmanGroup14Sha1">
            <summary>Diffie-Hellman group 14 sha-1</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHKeyExchangeMethod.DiffieHellmanGroupExchangeSha1">
            <summary>Diffie-Hellman group exchange sha-1</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHKeyExchangeMethod.DiffieHellmanGroupExchangeSha256">
            <summary>Diffie-Hellman group exchange sha-1</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHKeyExchangeMethod.All">
            <summary>All key exchange methods enabled</summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ssh.SSHPublicKeyAlgorithm">
            <summary>
            Available public key algorithms for authentication
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHPublicKeyAlgorithm.DSA">
            <summary>DSA public key algorithm</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHPublicKeyAlgorithm.RSA">
            <summary>RSA public key algorithm</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHPublicKeyAlgorithm.ALL">
            <summary>All public key algorithms enabled</summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ssh.SSHCipherAlgorithm">
            <summary>
            Available cipher algorithms for packet encryption
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHCipherAlgorithm.TripleDES">
            <summary>Triple DES encryption</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHCipherAlgorithm.Blowfish">
            <summary>Blowfish encryption</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHCipherAlgorithm.AES128">
            <summary>AES 128 bit CBC mode encryption</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHCipherAlgorithm.AES192">
            <summary>AES 192 bit CBC mode encryption</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHCipherAlgorithm.AES256">
            <summary>AES 256 bit CBC mode encryption</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHCipherAlgorithm.AES_CTR_128">
            <summary>AES 128 bit CTR mode encryption</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHCipherAlgorithm.AES_CTR_192">
            <summary>AES 192 bit CTR mode encryption</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHCipherAlgorithm.AES_CTR_256">
            <summary>AES 256 bit CTR mode encryption</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHCipherAlgorithm.All">
            <summary>All cipher algorithms enabled</summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ssh.SSHCompressionAlgorithm">
            <summary>
            Available compression algorithms
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHCompressionAlgorithm.None">
            <summary>No compression</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHCompressionAlgorithm.Zlib">
            <summary>Zlib compression</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHCompressionAlgorithm.All">
            <summary>All compression algorithms enabled (but prefer no compression)</summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ssh.SSHMACAlgorithm">
            <summary>
            Available MAC algorithms
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHMACAlgorithm.HMACSHA1">
            <summary>hmac-sha1</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHMACAlgorithm.HMACMD5">
            <summary>hmac-md5</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHMACAlgorithm.HMAC_SHA1_96">
            <summary>hmac-sha1-96</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHMACAlgorithm.HMAC_MD5_96">
            <summary>hmac-md5-96</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHMACAlgorithm.HMAC_SHA2_256">
            <summary>hmac-sha2-256</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHMACAlgorithm.HMAC_SHA2_512">
            <summary>hmac-sha2-512</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHMACAlgorithm.All">
            <summary>All HMAC algorithms enabled</summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ssh.SSHAuthenticationType">
            <summary>
            Available authentication types for the server
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ssh.AuthenticationType">
            <summary>
            Available types of client authentication
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.AuthenticationType.PublicKey">
            <summary>Public key authentication</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.AuthenticationType.Password">
            <summary>Password authentication</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.AuthenticationType.KeyboardInteractive">
            <summary>Keyboard-interactive authentication</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.AuthenticationType.PublicKeyAndPassword">
            <summary>Public key followed by password</summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ssh.KeyExchangeMethodConverter">
            <summary>
            Convert between the internal and public key exchange methods
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ssh.PublicKeyAlgorithmConverter">
            <summary>
            Convert between the internal and public public key enums
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ssh.CompressionAlgorithmConverter">
            <summary>
            Convert between the internal and public compression enums
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ssh.MACAlgorithmConverter">
            <summary>
            Convert between the internal and public MAC enums
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ssh.CipherAlgorithmConverter">
            <summary>
            Convert between the internal and public cipher enums
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.GDataBatchOperationType">
            <summary>enum to define the GDataBatchOperationType...</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GDataBatchOperationType.insert">
            <summary>this is an insert operatoin</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GDataBatchOperationType.update">
            <summary>this is an update operation</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GDataBatchOperationType.delete">
            <summary>this is a delete operation</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GDataBatchOperationType.query">
            <summary>this is a query operation</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GDataBatchOperationType.Default">
            <summary>the default (a no-op)</summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.GDataBatchStatus">
            <summary>
            holds the batch status information
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GDataBatchStatus.CodeDefault">
            <summary>default value for the status code</summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataBatchStatus.#ctor">
            <summary>
            set's the defaults for code
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataBatchStatus.Save(System.Xml.XmlWriter)">
            <summary>
            Persistence method for the GDataBatchStatus object
            </summary>
            <param name="writer">the xmlwriter to write into</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataBatchStatus.ParseBatchStatus(System.Xml.XmlReader,EnterpriseDT.Google.GData.Client.AtomFeedParser)">
            <summary>
            reads the current positioned reader and creates a batchstatus element
            </summary>
            <param name="reader">XmlReader positioned at the start of the status element</param>
            <param name="parser">The Feedparser to be used</param>
            <returns>GDataBatchStatus</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataBatchStatus.CreateInstance(System.Xml.XmlNode,EnterpriseDT.Google.GData.Client.AtomFeedParser)">
            <summary>
            creates a new batchstatus element
            </summary>
            <param name="node"></param>
            <param name="parser"></param>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataBatchStatus.Code">
            <summary>returns the status code of the operation</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataBatchStatus.Reason">
            <summary>accessor method public string Reason</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataBatchStatus.ContentType">
            <summary>accessor method public string ContentType</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataBatchStatus.Errors">
            <summary>the error list</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataBatchStatus.XmlName">
            <summary>
            the xmlname of the element
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataBatchStatus.XmlNameSpace">
            <summary>
             the xmlnamespace for a batchstatus
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataBatchStatus.XmlPrefix">
            <summary>
            the prefered xmlprefix to use
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.GDataBatchError">
            <summary>
             represents the Error element in the GDataBatch response
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataBatchError.Save(System.Xml.XmlWriter)">
            <summary>
            Persistence method for the GDataBatchError object
            </summary>
            <param name="writer">the xmlwriter to write into</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataBatchError.ParseBatchErrors(System.Xml.XmlReader,EnterpriseDT.Google.GData.Client.AtomFeedParser,EnterpriseDT.Google.GData.Client.GDataBatchStatus)">
            <summary>
             parses a list of errors
            </summary>
            <param name="reader">XmlReader positioned at the start of the status element</param>
            <param name="status">the batch status element to add the errors tohe</param>
            <param name="parser">the feedparser to be used</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataBatchError.ParseBatchError(System.Xml.XmlReader,EnterpriseDT.Google.GData.Client.AtomFeedParser)">
            <summary>
            parses a single error element
            </summary>
            <param name="reader">XmlReader positioned at the start of the status element</param>
            <param name="parser">the feedparser to be used</param>
            <returns>GDataBatchError</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataBatchError.CreateInstance(System.Xml.XmlNode,EnterpriseDT.Google.GData.Client.AtomFeedParser)">
            <summary>
            creates a GDataBatchError element 
            </summary>
            <param name="node"></param>
            <param name="parser"></param>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataBatchError.Type">
            <summary>accessor method Type</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataBatchError.Field">
            <summary>accessor method public string Field</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataBatchError.Reason">
            <summary>accessor method public string Reason</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataBatchError.XmlName">
            <summary>
             the name to use
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataBatchError.XmlNameSpace">
            <summary>
            the namespace to use
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataBatchError.XmlPrefix">
            <summary>
            the prefered prefix
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.GDataBatchInterrupt">
            <summary>
            holds the batch status information
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataBatchInterrupt.Save(System.Xml.XmlWriter)">
            <summary>
            Persistence method for the GDataBatchInterrupt object
            </summary>
            <param name="writer">the xmlwriter to write into</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataBatchInterrupt.ParseBatchInterrupt(System.Xml.XmlReader,EnterpriseDT.Google.GData.Client.AtomFeedParser)">
            <summary>
            parses a batchinterrupt element from a correctly positioned reader
            </summary>
            <param name="reader">XmlReader at the start of the element</param>
            <param name="parser">the feedparser to be used</param>
            <returns>GDataBatchInterrupt</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataBatchInterrupt.CreateInstance(System.Xml.XmlNode,EnterpriseDT.Google.GData.Client.AtomFeedParser)">
            <summary>
            factory method to create an instance of a batchinterrupt during parsing
            </summary>
            <param name="node">the xmlnode that is going to be parsed</param>
            <param name="parser">the feedparser that is used right now</param>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataBatchInterrupt.Reason">
            <summary>accessor method public string Reason</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataBatchInterrupt.Successes">
            <summary>accessor method public int Successes</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataBatchInterrupt.Failures">
            <summary>accessor method public int Failures</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataBatchInterrupt.Unprocessed">
            <summary>accessor method public int Unprocessed</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataBatchInterrupt.Parsed">
            <summary>accessor method public int Parsed</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataBatchInterrupt.XmlName">
            <summary>
            returns the xmlname to sue
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataBatchInterrupt.XmlNameSpace">
            <summary>
            returns the xmlnamespace
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataBatchInterrupt.XmlPrefix">
            <summary>
            the xmlprefix
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.GDataBatchFeedData">
            <summary>The GDataFeedBatch object holds batch related information
            for the AtomFeed
            </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataBatchFeedData.#ctor">
            <summary>
            constructor, set's the default for the operation type
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataBatchFeedData.Save(System.Xml.XmlWriter)">
            <summary>
            Persistence method for the GDataBatch object
            </summary>
            <param name="writer">the xmlwriter to write into</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataBatchFeedData.CreateInstance(System.Xml.XmlNode,EnterpriseDT.Google.GData.Client.AtomFeedParser)">
            <summary>
            factory method to create an instance of a batchinterrupt during parsing
            </summary>
            <param name="node">the xmlnode that is going to be parsed</param>
            <param name="parser">the feedparser that is used right now</param>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataBatchFeedData.Type">
            <summary>accessor method public GDataBatchOperationType Type</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataBatchFeedData.XmlName">
            <summary>
            the xmlname to use
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataBatchFeedData.XmlNameSpace">
            <summary>
            the xml namespace to use
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataBatchFeedData.XmlPrefix">
            <summary>
            the xmlprefix to use
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.GDataBatchEntryData">
            <summary>The GDataEntryBatch object holds batch related information\
            for an AtomEntry
            </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataBatchEntryData.#ctor">
            <summary>
            constructor, sets the default for the operation type
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataBatchEntryData.#ctor(EnterpriseDT.Google.GData.Client.GDataBatchOperationType)">
            <summary>
            Constructor for the batch data
            </summary>
            <param name="type">The batch operation to be performed</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataBatchEntryData.#ctor(System.String,EnterpriseDT.Google.GData.Client.GDataBatchOperationType)">
            <summary>
            Constructor for batch data
            </summary>
            <param name="id">The batch ID of this entry</param>
            <param name="type">The batch operation to be performed</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataBatchEntryData.Save(System.Xml.XmlWriter)">
            <summary>
            Persistence method for the GDataEntryBatch object
            </summary>
            <param name="writer">the xmlwriter to write into</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataBatchEntryData.CreateInstance(System.Xml.XmlNode,EnterpriseDT.Google.GData.Client.AtomFeedParser)">
            <summary>
            creates a new GDataBatchEntryData
            </summary>
            <param name="node"></param>
            <param name="parser"></param>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataBatchEntryData.Type">
            <summary>accessor method public GDataBatchOperationType Type</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataBatchEntryData.Id">
            <summary>accessor method public string Id</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataBatchEntryData.Interrupt">
            <summary>accessor for the GDataBatchInterrrupt element</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataBatchEntryData.Status">
            <summary>accessor method public GDataBatchStatus Status</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataBatchEntryData.XmlName">
            <summary>
            xml local name to use
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataBatchEntryData.XmlNameSpace">
            <summary>
            xml namespace to use
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataBatchEntryData.XmlPrefix">
            <summary>
            xml prefix to use
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Exif.ExifExtensions">
            <summary>
            helper to instantiate all factories defined in here and attach 
            them to a base object
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Exif.ExifExtensions.AddExtension(EnterpriseDT.Google.GData.Client.AtomBase)">
            <summary>
            adds all ExifExtensions to the passed in baseObject
            </summary>
            <param name="baseObject"></param>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Exif.ExifNameTable">
            <summary>
            short table for constants related to exif xml declarations
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Exif.ExifNameTable.NSExif">
            <summary>static string to specify the exif namespace
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Exif.ExifNameTable.ExifPrefix">
            <summary>static string to specify the used exif prefix</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Exif.ExifNameTable.ExifTags">
            <summary>
            represents the tags container element
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Exif.ExifNameTable.ExifDistance">
            <summary>
            represents the distance element
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Exif.ExifNameTable.ExifExposure">
            <summary>
            represents the exposure element
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Exif.ExifNameTable.ExifFlash">
            <summary>
            represents the flash element
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Exif.ExifNameTable.ExifFocalLength">
            <summary>
            represents the focallength element
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Exif.ExifNameTable.ExifFStop">
            <summary>
            represents the fstop element
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Exif.ExifNameTable.ExifImageUniqueID">
            <summary>
            represents the unique ID element
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Exif.ExifNameTable.ExifISO">
            <summary>
            represents the ISO element
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Exif.ExifNameTable.ExifMake">
            <summary>
            represents the Make element
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Exif.ExifNameTable.ExifModel">
            <summary>
            represents the Model element
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Exif.ExifNameTable.ExifTime">
            <summary>
            represents the Time element
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Exif.ExifTags">
            <summary>
            Tags container element for the Exif namespace
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Exif.ExifTags.#ctor">
            <summary>
            base constructor, creates an exif:tags representation
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Exif.ExifTags.Distance">
            <summary>
            returns the media:credit element
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Exif.ExifTags.Exposure">
            <summary>
            returns the ExifExposure element
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Exif.ExifTags.Flash">
            <summary>
            returns the ExifFlash element
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Exif.ExifTags.FocalLength">
            <summary>
            returns the ExifFocalLength element
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Exif.ExifTags.FStop">
            <summary>
            returns the ExifFStop element
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Exif.ExifTags.ImageUniqueID">
            <summary>
            returns the ExifImageUniqueID element
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Exif.ExifTags.ISO">
            <summary>
            returns the ExifISO element
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Exif.ExifTags.Make">
            <summary>
            returns the ExifMake element
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Exif.ExifTags.Model">
            <summary>
            returns the ExifModel element
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Exif.ExifTags.Time">
            <summary>
            returns the ExifTime element
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Exif.ExifDistance">
            <summary>
            ExifDistance schema extension describing an distance
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Exif.ExifDistance.#ctor">
            <summary>
            basse constructor for exif:distance
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Exif.ExifDistance.#ctor(System.String)">
            <summary>
            base constructor taking an initial value
            </summary>
            <param name="initValue"></param>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Exif.ExifExposure">
            <summary>
            ExifExposure schema extension describing an exposure
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Exif.ExifExposure.#ctor">
            <summary>
            basse constructor for exif:exposure
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Exif.ExifExposure.#ctor(System.String)">
            <summary>
            base constructor taking an initial value
            </summary>
            <param name="initValue"></param>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Exif.ExifFlash">
            <summary>
            ExifFlash schema extension describing an flash
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Exif.ExifFlash.#ctor">
            <summary>
            basse constructor for exif:flash
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Exif.ExifFlash.#ctor(System.String)">
            <summary>
            base constructor taking an initial value
            </summary>
            <param name="initValue"></param>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Exif.ExifFocalLength">
            <summary>
            ExifFocalLength schema extension describing an focallength
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Exif.ExifFocalLength.#ctor">
            <summary>
            basse constructor for exif:focallength
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Exif.ExifFocalLength.#ctor(System.String)">
            <summary>
            base constructor taking an initial value
            </summary>
            <param name="initValue"></param>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Exif.ExifFStop">
            <summary>
            ExifFStop schema extension describing an fstop
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Exif.ExifFStop.#ctor">
            <summary>
            basse constructor for exif:fstop
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Exif.ExifFStop.#ctor(System.String)">
            <summary>
            base constructor taking an initial value
            </summary>
            <param name="initValue"></param>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Exif.ExifImageUniqueID">
            <summary>
            ExifImageUniqueID schema extension describing an imageUniqueID
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Exif.ExifImageUniqueID.#ctor">
            <summary>
            basse constructor for exif:imageUniqueID
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Exif.ExifImageUniqueID.#ctor(System.String)">
            <summary>
            base constructor taking an initial value
            </summary>
            <param name="initValue"></param>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Exif.ExifISO">
            <summary>
            ExifISO schema extension describing an iso
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Exif.ExifISO.#ctor">
            <summary>
            basse constructor for exif:iso
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Exif.ExifISO.#ctor(System.String)">
            <summary>
            base constructor taking an initial value
            </summary>
            <param name="initValue"></param>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Exif.ExifMake">
            <summary>
            ExifMake schema extension describing an make
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Exif.ExifMake.#ctor">
            <summary>
            basse constructor for exif:make
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Exif.ExifMake.#ctor(System.String)">
            <summary>
            base constructor taking an initial value
            </summary>
            <param name="initValue"></param>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Exif.ExifModel">
            <summary>
            ExifModel schema extension describing an model
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Exif.ExifModel.#ctor">
            <summary>
            basse constructor for exif:model
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Exif.ExifModel.#ctor(System.String)">
            <summary>
            base constructor taking an initial value
            </summary>
            <param name="initValue"></param>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Exif.ExifTime">
            <summary>
            ExifTime schema extension describing an time
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Exif.ExifTime.#ctor">
            <summary>
            basse constructor for exif:time
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Exif.ExifTime.#ctor(System.String)">
            <summary>
            base constructor taking an initial value
            </summary>
            <param name="initValue"></param>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.PuTTYPrivateKeyFormat">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.PuTTYPrivateKeyFormat.log">
            <summary> Logging object</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.PuTTYPrivateKeyFormat.IsFormatted(System.Byte[])">
            <summary>
            Are the supplied raw key bytes in this key format?
            </summary>
            <param name="formattedKey">raw bytes from keyfile</param>
            <returns>true if in this format, false otherwise</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.PuTTYPrivateKeyFormat.GetKeyPair(System.Byte[],System.String)">
            <summary>
            Read the key pair from the blobs. This code is translated
            from edtFTPj/PRO code, which in turn was written by using the
            PuTTY C source code.
            </summary>
            <param name="formattedKey"></param>
            <param name="passphrase"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.PuTTYPrivateKeyFormat.GetKeyBlobs(System.Byte[])">
            <summary>
            Reads the basic format
            </summary>
            <param name="formattedKey"></param>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.MPutCommand">
            <summary>  Implements the mput command (mput [filter]
            
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.2 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.AtomFeedParser">
            <summary>AtomFeedParser.
            </summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomFeedParser.nameTable">
            <summary>holds the nametable used for parsing, based on XMLNameTable</summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomFeedParser.#ctor">
            <summary>standard empty constructor</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomFeedParser.#ctor(EnterpriseDT.Google.GData.Client.IVersionAware)">
            <summary>standard empty constructor</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomFeedParser.Parse(System.IO.Stream,EnterpriseDT.Google.GData.Client.AtomFeed)">
            <summary>starts the parsing process</summary> 
            <param name="streamInput">input stream to parse </param>
            <param name="feed">the basefeed object that should be set</param> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomFeedParser.ParseCategories(System.Xml.XmlReader,EnterpriseDT.Google.GData.Client.AtomBase)">
            <summary>tries to parse a category collection document</summary> 
            <param name="reader"> xmlReader positioned at the start element</param>
            <param name="owner">the base object that the collection belongs to</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomFeedParser.ParseFeed(System.Xml.XmlReader,EnterpriseDT.Google.GData.Client.AtomFeed)">
            <summary>reads in the feed properties, updates the feed object, then starts
            working on the entries...</summary> 
            <param name="reader"> xmlReader positioned at the Feed element</param>
            <param name="feed">the basefeed object that should be set</param>
            <returns> notifies user using event mechanism</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomFeedParser.ParseSource(System.Xml.XmlReader,EnterpriseDT.Google.GData.Client.AtomSource)">
            <summary>parses xml to fill a precreated AtomSource object (might be a feed)</summary> 
            <param name="reader">correctly positioned reader</param>
            <param name="source">created source object to be filled</param>
            <returns> </returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomFeedParser.IsCurrentNameSpace(System.Xml.XmlReader,System.String)">
            <summary>checks to see if the passed in namespace is the current one</summary> 
            <param name="reader">correctly positioned xmlreader</param>
            <param name="namespaceToCompare">the namespace to test for</param> 
            <returns> true if this is the one</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomFeedParser.ParseBaseAttributes(System.Xml.XmlReader,EnterpriseDT.Google.GData.Client.AtomBase)">
            <summary>Parses the base attributes and puts the rest in extensions.
            This needs to happen AFTER known attributes are parsed.</summary> 
            <param name="reader">correctly positioned xmlreader</param>
            <param name="baseObject">the base object to set the property on</param>
            <returns> true if an unknown attribute was found</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomFeedParser.ParseExtensionElements(System.Xml.XmlReader,EnterpriseDT.Google.GData.Client.AtomBase)">
            <summary>parses extension elements, needs to happen when known attributes are done</summary>
            <param name="reader">correctly positioned xmlreader</param>
            <param name="baseObject">the base object to set the property on</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomFeedParser.ParseBasicAttributes(System.Xml.XmlReader,EnterpriseDT.Google.GData.Client.AtomBase)">
            <summary>nifty loop to check for base attributes for an object</summary> 
            <param name="reader">correctly positioned xmlreader</param>
            <param name="baseObject">the base object to set the property on</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomFeedParser.ParseBaseLink(System.Xml.XmlReader,EnterpriseDT.Google.GData.Client.AtomBaseLink)">
            <summary>parses a baselink object, like AtomId, AtomLogo, or AtomIcon</summary> 
            <param name="reader"> correctly positioned xmlreader</param>
            <param name="baseLink">the base object to set the property on</param> 
            <returns> </returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomFeedParser.ParsePerson(System.Xml.XmlReader,EnterpriseDT.Google.GData.Client.AtomBase)">
            <summary>parses an author/person object</summary> 
            <param name="reader"> an XmlReader positioned at the start of the author</param>
            <param name="owner">the object containing the person</param>
            <returns> the created author object</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomFeedParser.ParseCategory(System.Xml.XmlReader,EnterpriseDT.Google.GData.Client.AtomBase)">
            <summary>parses an xml stream to create an AtomCategory object</summary> 
            <param name="reader">correctly positioned xmlreader</param>
            <param name="owner">the object containing the person</param>
            <returns> the created AtomCategory object</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomFeedParser.ParseLink(System.Xml.XmlReader,EnterpriseDT.Google.GData.Client.AtomBase)">
            <summary>creates an atomlink object</summary> 
            <param name="reader">correctly positioned xmlreader</param>
            <param name="owner">the object containing the person</param>
            <returns> the created AtomLink object</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomFeedParser.ParseEntry(System.Xml.XmlReader)">
            <summary>reads one of the feed entries at a time</summary> 
            <param name="reader"> XmlReader positioned at the entry element</param>
            <returns> notifies user using event mechanism</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomFeedParser.ParseBatch(System.Xml.XmlReader,EnterpriseDT.Google.GData.Client.AtomEntry)">
            <summary>
            parses the current position in the xml reader and fills 
            the provided GDataEntryBatch property on the entry object 
            </summary>
            <param name="reader">the xmlreader positioned at a batch element</param>
            <param name="entry">the atomentry object to fill in</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomFeedParser.ParseOperationType(System.Xml.XmlReader)">
            <summary>
            reads the current positioned reader and creates a operationtype enum
            </summary>
            <param name="reader">XmlReader positioned at the start of the status element</param>
            <returns>GDataBatchOperationType</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomFeedParser.ParseBatch(System.Xml.XmlReader,EnterpriseDT.Google.GData.Client.AtomFeed)">
            <summary>
            parses the current position in the xml reader and fills 
            the provided GDataFeedBatch property on the feed object
            </summary>
            <param name="reader">the xmlreader positioned at a batch element</param>
            <param name="feed">the atomfeed object to fill in</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomFeedParser.ParseTextConstruct(System.Xml.XmlReader,EnterpriseDT.Google.GData.Client.AtomBase)">
            <summary>parses an AtomTextConstruct</summary> 
            <param name="reader">the xmlreader correctly positioned at the construct </param>
            <param name="owner">the container element</param>
            <returns>the new text construct </returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomFeedParser.ParseGenerator(System.Xml.XmlReader,EnterpriseDT.Google.GData.Client.AtomBase)">
            <summary>parses an AtomGenerator</summary> 
            <param name="reader">the xmlreader correctly positioned at the generator </param>
            <param name="owner">the container element</param>
            <returns> </returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomFeedParser.ParseContent(System.Xml.XmlReader,EnterpriseDT.Google.GData.Client.AtomBase)">
            <summary>creates an AtomContent object by parsing an xml stream</summary> 
            <param name="reader">a XMLReader positioned correctly </param>
            <param name="owner">the container element</param>
            <returns> null or an AtomContent object</returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomFeedParser.Nametable">
            <summary>
            nametable for the xmlparser that the atomfeedparser uses
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Comments">
            <summary>
            GData schema extension describing a comments feed.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Comments.feedLink">
            <summary>
             holds the feedLink property
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Comments.CreateInstance(System.Xml.XmlNode,EnterpriseDT.Google.GData.Client.AtomFeedParser)">
            <summary>Parses an xml node to create a Where  object.</summary> 
            <param name="node">the node to parse node</param>
            <param name="parser">the xml parser to use if we need to dive deeper</param>
            <returns>the created Where  object</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Comments.Save(System.Xml.XmlWriter)">
            <summary>
            Persistence method for the Comment  object
            </summary>
            <param name="writer">the xmlwriter to write into</param>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Comments.FeedLink">
            <summary>
            Comments feed link.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Comments.XmlName">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Comments.XmlNameSpace">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Comments.XmlPrefix">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager">
            <summary>
            Holds details of the known hosts and their public keys.
            </summary>
            <remarks>
            <para>
            The known_hosts file contains a list of approved servers and their public keys. 
            Setting <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.ServerValidation"/> to 
            <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPServerValidationType.Automatic"/> instructs 
            the client to use this list to validate the servers that it connects to. 
            Setting ServerValidation to 
            <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPServerValidationType.AutomaticNoNameCheck"/> is similar, 
            however the server name is ignored in the validation process.
            </para>
            <para>
            A single line in a known_hosts file looks like this:
            </para>
            <para>
            edtmobile,10.0.0.3 ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAIEAt60CtjBMxiOO
            qgqfFtKZHY3g99uZpuh5E143FTO4dw+EHWNKemoWq59FMFMIZfSLyUpWmsjVT3PP1bc
            zOXP1OSn967kxLB/w7Xr84B1ZrTLwuR/ilq73HpgO7A8pdEJN7ybprzhs5CBEgaLQo2
            pOxfqRYyc8TO2ADnZ1WwtjW48=
            </para>
            <para>
            The first field is the hostname, i.e. the SSH server. The IP address is also 
            listed - a number of comma separated hostnames and IP addresses can be listed.
            The second field is the applicable public key algorithm -"ssh-rsa" (for RSA key pairs) 
            or "ssh-dss" (for DSA key pairs). The third field is the public key encoded using base 64.
            </para>
            <para>
            The known_hosts file normally consists of multiple lines, one for each of the hosts 
            that the client may wish to connect to. It is quite typical for a host to have 
            entries in two lines, so that both RSA and DSA public keys can be listed.
            </para>
            <para>
            The path of the known_hosts file should be assigned to the 
            <see cref="P:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.KnownHostsFile"/> property to load the known hosts in that file into
            the manager. If another known_hosts file is subsequently assigned to this 
            property, its contents will be added to the current list of known hosts. Use
            <see cref="M:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.ClearKnownHosts"/> to clear the current list. 
            </para>
            <para>
            Server public keys can also be maintained in their own key file and be used for 
            server validation without adding them to the known_hosts file. 
            The KnownHostsManager supports explicitly adding server public keys in this manner, 
            via <see cref="M:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.AddKnownHost(System.String,System.String)"/>.
            </para>
            <para>
            Use <see cref="M:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.WriteKnownHosts(System.String)"/> to write the current contents of the known hosts 
            lists to a file. If hosts are loaded via the <see cref="P:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.KnownHostsFile"/> and also
            by <see cref="M:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.AddKnownHost(System.String,System.String)"/>, the combined list can be merged into one known_hosts
            file by using <see cref="M:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.WriteKnownHosts(System.String)"/>.
            </para>
            </remarks>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.log">
            <summary> Logging object</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.COMMA_SEP">
            <summary>
            Comma token array
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.knownHosts">
            <summary>
            Hash of [hostname/ip, publickey]
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.publicKeyFactory">
            <summary>
            Handles reading different public key formats
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.knownHostsFile">
            <summary>Full path of known hosts file if it is set</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.WriteKnownHosts(System.String)">
            <summary>
            Write the known hosts to file, together with their public keys, in the
            standard known_hosts format.
            </summary>
            <param name="filename">path of the file to write the known hosts list to</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.LoadKnownHosts(System.String)">
            <summary>
            Read the given known hosts file to obtain the host public keys.
            </summary>
            <remarks>
            Contents must be in the standard known_hosts file format. The hosts
            are added to the current list.
            </remarks>
            <param name="knownHostsFile">Path of known_hosts file</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.LoadKnownHosts(System.IO.Stream)">
            <summary>
            Read the known hosts file to obtain the host public keys.
            </summary>
            <remarks>
            Contents must be in the standard known_hosts file format. The hosts
            are added to the current list.
            </remarks>
            <param name="knownHostStream">Stream containing known hosts.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.ClearKnownHosts">
            <summary>
            Clear all loaded known hosts from the internal list.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.AddKnownHost(System.String,System.String)">
            <summary>
            Add a hostname/public key pair to the known hosts data.
            </summary>
            <remarks>
            Server public keys can also be maintained in their own key 
            file and be used for server validation without adding them 
            to the known_hosts file using this method. SSH public key files 
            have two standard formats - OpenSSH and SECSH.  Both these 
            public key formats are supported. Formats can be recognized 
            by their first line as shown below:
            <list type="number">
            <item>
            <term>OpenSSH (DSA)</term>
            <description>OpenSSH format as a DSA public key. 
            The first line begins with "ssh-dss AAAAB3NzaC1kc3MAA ...".
            </description>
            </item>
            <item>
            <term>OpenSSH (RSA)</term>
            <description>OpenSSH format as a DSA public key. 
            The first line begins with "ssh-rsa AAAAB3NzaC1yc2EAA ...".
            </description>
            </item>
            <item>
            <term>SECSH</term>
            <description>SECSH format. 
            The first line begins with "---- BEGIN SSH2 PUBLIC KEY ----"
            </description>
            </item>
            </list>
            You can convert between OpenSSH and SECSH formats using OpenSSH's 
            ssh-keygen utility (which by default generates OpenSSH keys). 
            </remarks>
            <param name="host">hostname</param>
            <param name="publicKeyFile">public key file for host</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.AddKnownHost(System.String,System.Byte[])">
            <summary>
            Add a hostname/public key pair to the known hosts data.
            </summary>
            <param name="host">hostname</param>
            <param name="publicKeyFile">byte array containing the public key for host</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.GetPublicKey(System.String,System.String)">
            <summary>
            Get the public key for this hostname/algorithm.
            </summary>
            <param name="host">hostname or ip address</param>
            <param name="algorithm">algorithm name</param>
            <returns>host's public key, or null if not registered</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.GetPublicKeys(System.String)">
            <summary>
            Get all the public keys loaded for the supplied algorithm
            </summary>
            <param name="algorithm">algorithm name</param>
            <returns>All loaded public keys of the supplied algorithm</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.ParseLine(System.String)">
            <summary>
            Parse a line of the known_hosts file
            </summary>
            <param name="line">input line to parse</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.Add(System.String,EnterpriseDT.Net.Ssh.Routrek.PKI.PublicKey)">
            <summary>
            Add the hostname along with its public key to the hashtable
            </summary>
            <remarks>
            The hostnames can be a single hostname, or a comma separated string
            of hostnames and ip addresses
            </remarks>
            <param name="hosts">comma separated list of hostnames</param>
            <param name="key">public key</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.IsKeyLoaded(System.String,EnterpriseDT.Net.Ssh.Routrek.PKI.PublicKey)">
            <summary>
            Determines if this key is loaded for this host
            </summary>
            <param name="host">name of host</param>
            <param name="key">public key</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.AddHostKey(System.String,EnterpriseDT.Net.Ssh.Routrek.PKI.PublicKey)">
            <summary>
            Add the key for this host
            </summary>
            <param name="host">host name</param>
            <param name="key">public key</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.ToString">
            <summary>
            Represent the instance as a string.
            </summary>
            <returns>Name of the current known_hosts file.</returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.KnownHostsFile">
            <summary>
            Name of file containing the list of known hosts and their public keys 
            that was most recently loaded.
            </summary>
            <remarks>
            Setting this property causes the contents of the file to be loaded. The
            file must in the standard known_hosts format. The hosts
            are added to the current list. Use <see cref="M:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.ClearKnownHosts"/> first to
            clear the internal list before loading.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.NumHosts">
            <summary>
            Number of known hosts names and IP addresses that have been loaded.
            </summary>
            <remarks>
            This count distinguishes between the various names or IP addresses that a host
            may have. If a host is represented by several names or IP addresses, it
            will be counted that many times in the overall count. So if a
            host has been loaded with the name "edtmobile" and also "192.168.19.64", it will be
            counted twice in the overall count.
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Spreadsheets.Application">
            <summary>the main object to access everything else with
            
            </summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Spreadsheets.Application.Name">
            <summary>
            the name of this application
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.Application.#ctor(System.String,System.String)">
            <summary>
            default constructor for client login. 
            </summary>
            <param name="user">the username to user</param>
            <param name="password">the users password</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.Application.#ctor(System.String)">
            <summary>
            constructor for webapplications. Obtain the token using the authsub
            helper methods
            </summary>
            <param name="token">Your authentication token</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.Application.Refresh">
            <summary>
            this will reload the list of spreadsheets from the server and reset the 
            currently active spreadsheet/worksheet
            </summary>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.Application.ParseRangeString(System.String)">
            
              Parse a range given as, e.g., A2:D4 into numerical
             coordinates. The letter indicates the column in use,
             the number the row
             
        </member>
        <member name="P:EnterpriseDT.Google.GData.Spreadsheets.Application.Spreadsheets">
            <summary>
             this returns a list of strings, with the names of each spreadsheet
            this will do a roundtrip to the google servers to retrieve the list 
            of spreadsheets if not done yet
            </summary>
            <returns>List of strings</returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Spreadsheets.Application.CurrentSpreadsheet">
            <summary>
            this will return the current spreadsheetname that is being worked on, or, if set
            see if there is a spreadsheet of that name, and if so, make this the current spreadsheet
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Spreadsheets.Application.WorkSheets">
            <summary>
            returns a list of Worksheet names for the currently set spreadsheet,
            or NULL if no spreadsheet was set
            </summary>
            <returns>NULL for no spreadsheet, an empty list for no worksheets in the 
            spreadsheet or a list of names of the worksheets in the current spreadsheet</returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Spreadsheets.Application.CurrentWorksheet">
            <summary>
            this will return the current worksheetname that is being worked on, or, if set
            see if there is a worksheet of that name, and if so, make this the current worksheet
            Note that this requires that a current spreadsheet is set
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Spreadsheets.Application.CompleteRange">
            <summary>
            get the whole spreadsheet as a range, one line is one row, one cell is  
            </summary>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPFileSyncPair">
            <summary>
            Matched pair of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/>s, where one is local and one is the matching remote file.
            </summary>
            <remarks>
            If either of the references to the two files is null then that indicates that there
            was no file with a matching name.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPFileSyncPair.#ctor(System.String,EnterpriseDT.Net.Ftp.FTPFile,EnterpriseDT.Net.Ftp.FTPFile)">
            <summary>
            Constructor.
            </summary>
            <param name="relativePath">relative path</param>
            <param name="localFile">local file reference</param>
            <param name="remoteFile">remote file reference</param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileSyncPair.LocalFile">
            <summary>
            Get and set the local file.
            </summary>
            <remarks>
            If this reference is <c>null</c> then there is no local file whose name matches
            that of the remote file.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileSyncPair.RemoteFile">
            <summary>
            Get and set the remote file.
            </summary>
            <remarks>
            If this reference is <c>null</c> then there is no remote file whose name matches
            that of the local file.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileSyncPair.Name">
            <summary>
            Gets the name of this pair (without its directory).
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileSyncPair.RelativePath">
            <summary>
            The path relative to the base-directory.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Pro.ProFTPCertificate">
            <summary>
            A <c>ProFTPCertificate</c> contains information regarding an X.509v3 certificate.
            </summary>
            <remarks>
            <p>
            Certificates are used in two basic ways within edtFTPnet/PRO: (1) to validate the
            server to the client, and (2) to validate the client to the server.  In the former
            case, the certificate is obtained from the server.  In the latter case, the 
            certificate must be loaded from a file.
            </p>
            <p>
            Certificates may be loaded from files using one of the following three methods:
            <list type="number">
            <item><term>CreateFromCER(...)</term>
            <description>Loads the certificate from a <i>CER</i> file</description></item>
            <item><term>CreateFromPEM(...)</term>
            <description>Loads the certificate from a <i>PEM</i> file</description></item>
            <item><term>CreateFromPFX(...)</term>
            <description>Loads the certificate from a <i>PFX</i> file</description></item>
            </list>
            </p>
            <p>
            Private keys may be loaded from a PVK file and associated with a certificate using the 
            <c>AssociatePrivateKey(string,string)</c> method.
            </p>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPCertificate.CreateFromCER_PVK(System.String,System.String,System.String)">
            <summary>
            Loads the certificate from a <i>CER</i> file, and the private
            key from a <i>PVK</i> file.
            </summary>
            <param name="cerFileName">Name of CER file.</param>
            <param name="pvkFileName">Name of PVK file</param>
            <param name="pvkPassword">Password used to access PVK file.</param>
            <returns>The certificate object (including the private key).</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPCertificate.CreateFromPEM_PVK(System.String,System.String,System.String)">
            <summary>
            Loads the certificate from a <i>PEM</i> file, and the private
            key from a <i>PVK</i> file.
            </summary>
            <param name="pemFileName">Name of CER file.</param>
            <param name="pvkFileName">Name of PVK file</param>
            <param name="pvkPassword">Password used to access PVK file.</param>
            <returns>The certificate object (including the private key).</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPCertificate.CreateFromPFX_PVK(System.String,System.String,System.String,System.String)">
            <summary>
            Loads the certificate from a <i>PFX</i> file, and the private
            key from a <i>PVK</i> file.
            </summary>
            <param name="pfxFileName">Name of PFX file.</param>
            <param name="pfxPassword">Password used to access PFX file.</param>
            <param name="pvkFileName">Name of PVK file</param>
            <param name="pvkPassword">Password used to access PVK file.</param>
            <returns>The certificate object (including the private key).</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPCertificate.CreateFromCER(System.String)">
            <summary>
            Loads the certificate from a <i>CER</i> file.
            </summary>
            <param name="cerFileName">Name of CER file.</param>
            <returns>The certificate object (not including the private key).</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPCertificate.CreateFromPEM(System.String)">
            <summary>
            Loads the certificate from a <i>PEM</i> file.
            </summary>
            <param name="pemFileName">Name of CER file.</param>
            <returns>The certificate object (not including the private key).</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPCertificate.CreateFromPFX(System.String,System.String)">
            <summary>
            Loads the certificate and private key from a <i>PFX</i> file.
            </summary>
            <remarks>
            This PFX file must contain the private key.
            </remarks>
            <param name="pfxFileName">Name of PFX file.</param>
            <param name="pfxPassword">Password used to access PFX file.</param>
            <returns>The certificate object (including the private key).</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPCertificate.AssociatePrivateKey(System.String,System.String)">
            <summary>
            Loads the private key from the given PVK file.
            </summary>
            <param name="pvkFileName">Name of PVK file.</param>
            <param name="password">Password used to access PVK file.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPCertificate.ShowCertificateManager">
            <summary>
            Displays the certificate manager either as a modal dialog or as a window.
            </summary>
            <remarks>
            The certificate manager allows the user to view, import and remove 
            certificates on the local machine.  It is useful for managing server-
            and Certificate Authority- certificates.
            </remarks>
            <returns>A reference to the form.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPCertificate.ShowCertificateManager(System.String)">
            <summary>
            Displays the certificate manager either as a modal dialog or as a window.
            </summary>
            <remarks>
            The certificate manager allows the user to view, import and remove 
            certificates on the local machine.  It is useful for managing server-
            and Certificate Authority- certificates.
            </remarks>
            <param name="title">The title of the form (may be null).</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPCertificate.ShowCertificateManager(System.String,System.Windows.Forms.IWin32Window)">
            <summary>
            Displays the certificate manager either as a modal dialog or as a window.
            </summary>
            <remarks>
            The certificate manager allows the user to view, import and remove 
            certificates on the local machine.  It is useful for managing server-
            and Certificate Authority- certificates.
            </remarks>
            <param name="title">The title of the form (may be null).</param>
            <param name="parent">Reference to parent window (may be null)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPCertificate.ShowCertificateManager(System.String,System.Windows.Forms.IWin32Window,System.Boolean)">
            <summary>
            Displays the certificate manager either as a modal dialog or as a window.
            </summary>
            <remarks>
            The certificate manager allows the user to view, import and remove 
            certificates on the local machine.  It is useful for managing server-
            and Certificate Authority- certificates.
            </remarks>
            <param name="title">The title of the form (may be null).</param>
            <param name="parent">Reference to parent window (may be null)</param>
            <param name="modal">Controls whether or not the form is shown as a modal dialog.</param>
            <returns>A reference to the form (useful only when invoking as non-modal window).</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPCertificate.PromptForCertificate(System.Boolean)">
            <summary>
            Prompts the user for a certificate file and a matching private key.
            </summary>
            <remarks>
            This method will first prompt for a certificate file of format CER, PEM or PFX.
            If the file is a PFX file it will then prompt for a password to access this file.
            If <c>promptForPrivateKey</c> is <c>true</c> then the user will be prompted
            for a private key file of the PVK format and a matching password.
            </remarks>
            <param name="promptForPrivateKey">Should the user also be prompted for a private key</param>
            <returns>An instance of ProFTPCertificate with the associated private key.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPCertificate.PromptForCertificate(System.Windows.Forms.Form,System.Boolean)">
            <summary>
            Prompts the user for a certificate file and a matching private key.
            </summary>
            <remarks>
            This method will first prompt for a certificate file of format CER, PEM or PFX.
            If the file is a PFX file it will then prompt for a password to access this file.
            If <c>promptForPrivateKey</c> is <c>true</c> then the user will be prompted
            for a private key file of the PVK format and a matching password.
            </remarks>
            <param name="parent">Parent form (may be null)</param>
            <param name="promptForPrivateKey">Should the user also be prompted for a private key</param>
            <returns>An instance of ProFTPCertificate with the associated private key.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPCertificate.ImportIntoStore(EnterpriseDT.Net.Ftp.Pro.ProFTPCertificate,EnterpriseDT.Net.Ftp.Pro.ProFTPStoreLocation,EnterpriseDT.Net.Ftp.Pro.ProFTPStoreName)">
            <summary>
            Imports a certificate into a particular certificate store.
            </summary>
            <param name="certificate">Certificate to install.</param>
            <param name="location">Location of store.</param>
            <param name="name">Name of store.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPCertificate.ImportCACertificate(EnterpriseDT.Net.Ftp.Pro.ProFTPCertificate)">
            <summary>
            Imports a certificate into the <i>TrustedRootCAs</i> store on the <i>LocalMachine</i>.
            </summary>
            <param name="certificate">Certificate to import.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPCertificate.GetCertificates(EnterpriseDT.Net.Ftp.Pro.ProFTPStoreLocation,EnterpriseDT.Net.Ftp.Pro.ProFTPStoreName)">
            <summary>
            Returns an array of all the certificates in a particular store.
            </summary>
            <param name="location">Location of store.</param>
            <param name="name">Name of store.</param>
            <returns>An array of all the certificates in a particular store.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPCertificate.GetCACertificates">
            <summary>
            Returns an array of all the certificates in the <i>TrustedRootCAs</i> store on the <i>LocalMachine</i>.
            </summary>
            <returns>An array of all the certificates in the <i>TrustedRootCAs</i> store on the <i>LocalMachine</i>.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPCertificate.RemoveFromStore(EnterpriseDT.Net.Ftp.Pro.ProFTPCertificate,EnterpriseDT.Net.Ftp.Pro.ProFTPStoreLocation,EnterpriseDT.Net.Ftp.Pro.ProFTPStoreName)">
            <summary>
            Removes a certificate from a specific certificate store.
            </summary>
            <param name="certificate">Certificate to remove.</param>
            <param name="location">Location of store.</param>
            <param name="name">Name of store.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPCertificate.RemoveCACertificate(EnterpriseDT.Net.Ftp.Pro.ProFTPCertificate)">
            <summary>
            Removes the given CA certificate from the <i>TrustedRootCAs</i> store on the <i>LocalMachine</i>. 
            </summary>
            <param name="certificate"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPCertificate.ToString">
            <summary>
            Returns a string representation of the certificate.
            </summary>
            <returns>A string representation of the certificate.</returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPCertificate.Name">
            <summary>
            Name of the entity to which the certificate was issued.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPCertificate.IssuerName">
            <summary>
            Name of the entity which issued the certificate.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPCertificate.SubjectName">
            <summary>
            Distinguished Name (DN) of the entity to which the certificate was issued.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPCertificate.SerialNumber">
            <summary>
            Serial number of certificate.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPCertificate.SerialNumberString">
            <summary>
            String representation of the serial number of the certificate.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPCertificate.EffectiveDate">
            <summary>
            Date from which the certificate became effective.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPCertificate.ExpirationDate">
            <summary>
            Date on which the certificate expires.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPCertificate.PublicKey">
            <summary>
            Public key associated with the certificate.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPCertificate.PrivateKey">
            <summary>
            Private key associated with the certificate.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPCertificate.KeyAlgorithm">
            <summary>
            Algorithm that was used to generate the public/private key pair.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPCertificate.KeyAlgorithmParameters">
            <summary>
            Parameters that were used to generate the public/private key pair.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPCertificate.KeyAlgorithmParametersString">
            <summary>
            String representation of the parameters that were used to generate 
            the public/private key pair.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPCertificate.Extensions">
            <summary>
            Certificate extensions.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPCertificate.Chain">
            <summary>
            Chain of certificates.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPCertificate.CertFile">
            <summary>
            Name of the certificate file from which this certificate was read.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPCertificate.CertFilePassword">
            <summary>
            Password for the certificate file.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPCertificate.KeyFile">
            <summary>
            Name of the private key file associated with this certificate.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPCertificate.KeyFilePassword">
            <summary>
            Password for the private key file.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Pro.DistinguishedName">
            <summary>
            Distinguished Name (DN) of a certificate.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.DistinguishedName.ToString">
            <summary>
            Returns the Common Name.
            </summary>
            <returns>Returns the Common Name.</returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.DistinguishedName.CommonName">
            <summary>
            CommonName (CN) component of the DN.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.DistinguishedName.OrganizationName">
            <summary>
            Organization (O) component of the DN.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.DistinguishedName.OrganizationalUnitName">
            <summary>
            OrganizationalUnit (OU) component of the DN.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.DistinguishedName.StreetAddress">
            <summary>
            StreetAddress (STREET) component of the DN.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.DistinguishedName.LocalityName">
            <summary>
            LocalityName (L) component of the DN.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.DistinguishedName.StateOrProvinceName">
            <summary>
            StateOrProvinceName (ST) component of the DN.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.DistinguishedName.CountryName">
            <summary>
            CountryName (C) component of the DN.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.DistinguishedName.Item(System.String)">
            <summary>
            Generic accessor for DN components.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Pro.Extension">
            <summary>
            Extension to the name.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.Extension.OID">
            <summary>
            Object ID of the extension.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.Extension.IsCritical">
            <summary>
            Indicates if the extension is critical.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.Extension.Value">
            <summary>
            The value of the extension as a byte-array.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Pro.ProFTPStoreLocation">
            <summary>
            Enumeration of certificate store locations.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPStoreLocation.LocalMachine">
            <summary>The certificate store for the local computer.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPStoreLocation.LocalMachineEnterprise">
            <summary>The certificate store for the local machine enterprise.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPStoreLocation.LocalMachineGroupPolicy">
            <summary>The certificate store for the local machine group policy.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPStoreLocation.Services">
            <summary>The certificate store for the service account.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPStoreLocation.Users">
            <summary>The certificate store for the users group of this computer.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPStoreLocation.CurrentUser">
            <summary>The certificate store for the currently logged-on user.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPStoreLocation.CurrentUserGroupPolicy">
            <summary>The certificate store for the currently logged-on group.</summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Pro.ProFTPStoreName">
            <summary>
            Enumeration of certificate store names.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPStoreName.TrustedRootCAs">
            <summary>Trusted root Certificate Autority</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPStoreName.IntermediateCAs">
            <summary>Intermediate Certificate Autority</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPStoreName.CurrentUser">
            <summary>Current User</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPStoreName.SoftwarePublishers">
            <summary>Software Publishers</summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Cryptography.DataProtectionCryptoServiceProvider">
            <summary>
            The DataProtectionCryptoServiceProvider is a class that performs encryption and decryption on data without explicitly requiring a password.
            <br>There are two different types of encryption. The first type will associate the encrypted data with the logon credentials of the current user. Hence only a user with matching logon credentials can decrypt the data.</br>
            <br>The second type will associate the encrypted data with the local machine. Any user of a specific machine will be able to decrypt encrypted data under this scheme.</br>
            <br>This class cannot be inherited.</br>
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.DataProtectionCryptoServiceProvider.#ctor">
            <summary>
            Initializes a new <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.DataProtectionCryptoServiceProvider"/> instance.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.DataProtectionCryptoServiceProvider.#ctor(System.Byte[])">
            <summary>
            Initializes a new <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.DataProtectionCryptoServiceProvider"/> instance.
            </summary>
            <param name="optionalEntropy">A buffer holding any additional entropy that can be used during encryption and decryption.</param>
            <remarks>The same entropy must be provided during the encryption and decryption process. Otherwise, the decryption will fail.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.DataProtectionCryptoServiceProvider.ProtectData(EnterpriseDT.Mentalis.Security.Cryptography.ProtectionType,System.Byte[])">
            <summary>
            Encrypts data according to a specified protection type.
            </summary>
            <param name="type">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.ProtectionType"/> values.</param>
            <param name="data">The data to encrypt.</param>
            <exception cref="T:System.ArgumentNullException"><i>data</i> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurs during the encryption process. Under some circumstances, Microsoft cryptographic service providers may not allow encryption when used in France. This may occur on down-level platforms such as Windows 98 and Windows NT 4.0, depending on the system's configuration and the version of the CSPs.</exception>
            <returns>An array of encrypted bytes.</returns>
            <remarks>
            The number of the returned bytes will be larger than the number of input bytes.
            The method will use the entropy from the <see cref="P:EnterpriseDT.Mentalis.Security.Cryptography.DataProtectionCryptoServiceProvider.Entropy"/> property.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.DataProtectionCryptoServiceProvider.ProtectData(EnterpriseDT.Mentalis.Security.Cryptography.ProtectionType,System.Byte[],System.Byte[])">
            <summary>
            Encrypts data according to a specified protection type.
            </summary>
            <param name="type">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.ProtectionType"/> values.</param>
            <param name="data">The data to encrypt.</param>
            <param name="entropy">Additional entropy to use during the encyption process. This parameter can be set to null.</param>
            <exception cref="T:System.ArgumentNullException"><i>data</i> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurs during the encryption process. Under some circumstances, Microsoft cryptographic service providers may not allow encryption when used in France. This may occur on down-level platforms such as Windows 98 and Windows NT 4.0, depending on the system's configuration and the version of the CSPs.</exception>
            <returns>An array of encrypted bytes.</returns>
            <remarks>The number of the returned bytes will be larger than the number of input bytes.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.DataProtectionCryptoServiceProvider.ProtectData(EnterpriseDT.Mentalis.Security.Cryptography.ProtectionType,System.Byte[],System.Int32,System.Int32,System.Byte[])">
            <summary>
            Encrypts data according to a specified protection type.
            </summary>
            <param name="type">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.ProtectionType"/> values.</param>
            <param name="data">The data to encrypt.</param>
            <param name="offset">The zero-based position in the <i>data</i> parameter at which to begin encrypting.</param>
            <param name="size">The number of bytes to encrypt.</param>
            <param name="entropy">Additional entropy to use during the encryption process. This parameter can be set to null.</param>
            <exception cref="T:System.ArgumentNullException"><i>data</i> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The specified <i>offset</i> or <i>size</i> exceeds the size of buffer.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurs during the encryption process. Under some circumstances, Microsoft cryptographic service providers may not allow encryption when used in France. This may occur on down-level platforms such as Windows 98 and Windows NT 4.0, depending on the system's configuration and the version of the CSPs.</exception>
            <returns>An array of encrypted bytes.</returns>
            <remarks>The number of the returned bytes will be larger than the number of input bytes.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.DataProtectionCryptoServiceProvider.UnprotectData(System.Byte[])">
            <summary>
            Decrypts data that has been encrypted with one of the <c>ProtectData</c> methods.
            </summary>
            <param name="data">The data to decrypt.</param>
            <exception cref="T:System.ArgumentNullException"><i>data</i> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The specified <i>offset</i> or <i>size</i> exceeds the size of buffer.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurs during the encryption process. Under some circumstances, Microsoft cryptographic service providers may not allow encryption when used in France. This may occur on down-level platforms such as Windows 98 and Windows NT 4.0, depending on the system's configuration and the version of the CSPs.</exception>
            <returns>The decrypted data.</returns>
            <remarks>
            The method will use the entropy from the <see cref="P:EnterpriseDT.Mentalis.Security.Cryptography.DataProtectionCryptoServiceProvider.Entropy"/> property.
            The entropy used during decryption must be the same as the entropy used during encryption.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.DataProtectionCryptoServiceProvider.UnprotectData(System.Byte[],System.Byte[])">
            <summary>
            Decrypts data that has been encrypted with one of the <c>ProtectData</c> methods.
            </summary>
            <param name="data">The data to decrypt.</param>
            <param name="entropy">Additional entropy to use during the encyption process. This parameter can be set to null.</param>
            <exception cref="T:System.ArgumentNullException"><i>data</i> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurs during the encryption process. Under some circumstances, Microsoft cryptographic service providers may not allow encryption when used in France. This may occur on down-level platforms such as Windows 98 and Windows NT 4.0, depending on the system's configuration and the version of the CSPs.</exception>
            <returns>The decrypted data.</returns>
            <remarks>The entropy used during decryption must be the same as the entropy used during encryption.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.DataProtectionCryptoServiceProvider.UnprotectData(System.Byte[],System.Int32,System.Int32,System.Byte[])">
            <summary>
            Decrypts data that has been encrypted with one of the <c>ProtectData</c> methods.
            </summary>
            <param name="data">The data to decrypt.</param>
            <param name="offset">The zero-based position in the <i>data</i> parameter at which to begin decrypting.</param>
            <param name="size">The number of bytes to decrypt.</param>
            <param name="entropy">Additional entropy to use during the decryption process. This parameter can be set to null.</param>
            <exception cref="T:System.ArgumentNullException"><i>data</i> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The specified <i>offset</i> or <i>size</i> exceeds the size of buffer.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurs during the encryption process. Under some circumstances, Microsoft cryptographic service providers may not allow encryption when used in France. This may occur on down-level platforms such as Windows 98 and Windows NT 4.0, depending on the system's configuration and the version of the CSPs.</exception>
            <returns>The decrypted data.</returns>
            <remarks>The entropy used during decryption must be the same as the entropy used during encryption.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.DataProtectionCryptoServiceProvider.Dispose">
            <summary>
            Releases the unmanaged and managed resources used by the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.DataProtectionCryptoServiceProvider"/> class.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.DataProtectionCryptoServiceProvider.Finalize">
            <summary>
            Finalizes the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.DataProtectionCryptoServiceProvider"/> class.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.DataProtectionCryptoServiceProvider.m_OptionalEntropy">
            <summary>
            Holds the entropy.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.DataProtectionCryptoServiceProvider.m_Disposed">
            <summary>
            Holds a value that indicates whether the class has been disposed of or not.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.DataProtectionCryptoServiceProvider.Entropy">
            <summary>
            Holds additional entropy that can be used during the encryption and decryption process.
            </summary>
            <value>An array en entropy bytes.</value>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPMessageEventArgs">
            <summary>
            Event args for ReplyReceived and CommandSent events
            </summary>    
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPMessageEventArgs.#ctor(System.String)">
            <summary>
            Constructor
            <param name="message"> 
            The message sent to or from the remote host
            </param>
            </summary>        
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPMessageEventArgs.Message">
            <summary>
            Gets the message 
            </summary>   
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPMessageHandler">
            <summary>
            Delegate used for ReplyReceived and CommandSent events
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.BytesTransferredEventArgs">
            <summary>
            Event args for BytesTransferred event
            </summary>    
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.BytesTransferredEventArgs.#ctor(System.String,System.Int64,System.Int64)">
            <summary>
            Constructor
            </summary>        
            <param name="remoteFile">The name of the file being transferred, or the name of the directory
            if it is a directory listing.</param>
            <param name="byteCount">The current count of bytes transferred.</param>
            <param name="resumeOffset">File position at which the transfer was resumed (0 of not resumed).</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.BytesTransferredEventArgs.#ctor(System.String,System.String,System.Int64,System.Int64)">
            <summary>
            Constructor
            </summary>        
            <param name="remoteDirectory">Remote directory.</param>
            <param name="remoteFile">The name of the file being transferred, or the name of the directory
            if it is a directory listing.</param>
            <param name="byteCount">The current count of bytes transferred.</param>
            <param name="resumeOffset">File position at which the transfer was resumed (0 of not resumed).</param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.BytesTransferredEventArgs.ByteCount">
            <summary>
            Gets the byte count.
            </summary>   
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.BytesTransferredEventArgs.ResumeOffset">
            <summary>
            If a transfer was resumed then this property will return the byte-offset from which
            the transfer starts.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.BytesTransferredEventArgs.RemoteFile">
            <summary>
            The name of the file being transferred, or the name of the directory
            if it is a directory listing.
            </summary>   
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.BytesTransferredEventArgs.RemoteDirectory">
            <summary>
            Remote directory of file being transferred, or directory being listed.
            </summary>   
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.BytesTransferredEventArgs.RemotePath">
            <summary>
            Remote path of file being transferred, or directory being listed.
            </summary>   
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.BytesTransferredHandler">
            <summary>
            Delegate used for the BytesTransferred event
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.TransferEventArgs">
            <summary>
            Event args for TransferStarted/Complete
            </summary>    
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.TransferEventArgs.#ctor(System.IO.Stream,System.String,EnterpriseDT.Net.Ftp.TransferDirection,EnterpriseDT.Net.Ftp.FTPTransferType)">
            <summary>
            Constructor
            </summary>        
            <param name="localStream"> 
            The stream being transferred to/from.
            </param>
            <param name="remoteFilename"> 
            The remote file name to be uploaded or downloaded
            </param>
            <param name="direction"> 
            Upload or download
            </param>
            <param name="transferType"> 
            ASCII or binary
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.TransferEventArgs.#ctor(System.Byte[],System.String,EnterpriseDT.Net.Ftp.TransferDirection,EnterpriseDT.Net.Ftp.FTPTransferType)">
            <summary>
            Constructor
            </summary>        
            <param name="localByteArray"> 
            The byte-array being transferred to/from.
            </param>
            <param name="remoteFilename"> 
            The remote file name to be uploaded or downloaded
            </param>
            <param name="direction"> 
            Upload or download
            </param>
            <param name="transferType"> 
            ASCII or binary
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.TransferEventArgs.#ctor(System.String,System.String,EnterpriseDT.Net.Ftp.TransferDirection,EnterpriseDT.Net.Ftp.FTPTransferType)">
            <summary>
            Constructor
            </summary>        
            <param name="localFilePath"> 
            Path of the local file to be uploaded or downloaded (<c>null</c> for <c>Stream</c> and <c>byte[]</c> transfers)
            </param>
            <param name="remoteFilename"> 
            The remote file name to be uploaded or downloaded
            </param>
            <param name="direction"> 
            Upload or download
            </param>
            <param name="transferType"> 
            ASCII or binary
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.TransferEventArgs.LocalFilePath">
            <summary>
            Gets the path of the local file.
            </summary>   
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.TransferEventArgs.LocalStream">
            <summary>
            Gets the stream being transferred to/from.
            </summary>   
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.TransferEventArgs.LocalByteArray">
            <summary>
            Gets the byte-array being transferred to/from.
            </summary>   
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.TransferEventArgs.RemoteFilename">
            <summary>
            Gets the remote filename 
            </summary>   
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.TransferEventArgs.Direction">
            <summary>
            Gets the transfer direction 
            </summary>   
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.TransferEventArgs.TransferType">
            <summary>
            Gets the transfer type 
            </summary>   
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.TransferHandler">
            <summary>
            Delegate used for TransferStarted and TransferComplete events
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.TransferDirection">
            <summary>
            Enumerates the possible transfer directions
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.TransferDirection.UPLOAD">
            <summary>   
            Represents uploading a file
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.TransferDirection.DOWNLOAD">
            <summary>   
            Represents downloading a file
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.WriteMode">
            <summary>
            Enumerates the possible write modes
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.WriteMode.Overwrite">
            <summary>   
            Overwrite the file
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.WriteMode.Append">
            <summary>   
            Append to the file
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.WriteMode.Resume">
            <summary>   
            Resume uploading the file
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPTransferType">
            <summary>  
            Enumerates the transfer types possible. We support only the two common types, 
            ASCII and Image (often called binary).
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPTransferType.ASCII">
            <summary>   
            Represents ASCII transfer type. As data is transferred, line terminator characters
            are translated into the local (client) platform's line terminator characters (CRLF for Windows
            platforms). For example, if transferring text files from a Unix server, line terminators will
            be converted from LF to CRLF.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPTransferType.BINARY">
            <summary>   
            Represents Image (or binary) transfer type. Files are transferred byte for byte
            without any conversion.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPFilterType">
            <summary>
            Specifies different types of filters.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFilterType.Wildcard">
            <summary>
            Wildcard strings use a DOS-like notation where <c>?</c> matches any single character and 
            <c>*</c> matches multiple characters.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFilterType.RegularExpression">
            <summary>
            Regular expressions are of the kind used in 
            <see cref="T:System.Text.RegularExpressions.Regex"/>.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFilterType.Callback">
            <summary>
            A <see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> callback will be called when a file is to be filtered.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.LineTerminatorType">
            <summary>
            Type of line terminator to use
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Cryptography.ARCFourManaged">
            <summary>
            Accesses the managed version of the ARCFour algorithm. This class cannot be inherited.
            ARCFour is fully compatible with the RC4<sup>TM</sup> algorithm.
            </summary>
            <remarks>
            RC4 is a trademark of RSA Data Security Inc.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.ARCFourManaged.#ctor">
            <summary>
            Initializes a new instance of the ARCFourManaged class.
            </summary>
            <remarks>
            The default keysize is 128 bits.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.ARCFourManaged.CreateDecryptor(System.Byte[],System.Byte[])">
            <summary>
            Creates a symmetric <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.RC4"/> decryptor object with the specified Key.
            </summary>
            <param name="rgbKey">The secret key to be used for the symmetric algorithm.</param>
            <param name="rgbIV">This parameter is not used an should be set to a null reference, or to an array with zero or one bytes.</param>
            <returns>A symmetric ARCFour decryptor object.</returns>
            <remarks>This method decrypts an encrypted message created using the <see cref="M:EnterpriseDT.Mentalis.Security.Cryptography.ARCFourManaged.CreateEncryptor(System.Byte[],System.Byte[])"/> overload with the same signature.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.ARCFourManaged.CreateEncryptor(System.Byte[],System.Byte[])">
            <summary>
            Creates a symmetric <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.RC4"/> encryptor object with the specified Key.
            </summary>
            <param name="rgbKey">The secret key to be used for the symmetric algorithm.</param>
            <param name="rgbIV">This parameter is not used an should be set to a null reference, or to an array with zero or one bytes.</param>
            <returns>A symmetric ARCFour encryptor object.</returns>
            <remarks>Use the <see cref="M:EnterpriseDT.Mentalis.Security.Cryptography.ARCFourManaged.CreateDecryptor(System.Byte[],System.Byte[])"/> overload with the same signature to decrypt the result of this method.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.ARCFourManaged.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.ARCFourManaged"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.ServiceEventArgs">
            <summary>
            EventArgument class for service level events during parsing
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.ServiceEventArgs.#ctor(System.Uri,EnterpriseDT.Google.GData.Client.IService)">
            <summary>
            constructor. Takes the URI and the service this event applies to
            </summary>
            <param name="uri">URI currently executed</param>
            <param name="service">service object doing the execution</param>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.ServiceEventArgs.Feed">
            <summary>the feed to be created. If this is NULL, a service 
            will create a DEFAULT atomfeed</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.ServiceEventArgs.Service">
            <summary>the service to be used for the feed to be created.</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.ServiceEventArgs.Uri">
            <summary>the Uri to be used</summary> 
            <returns> </returns>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.ServiceEventHandler">
            <summary>Delegate declaration for the feed creation in a service</summary> 
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.GDataReturnStream">
            <summary>
            used to cover a return stream and add some additional data to it. 
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataReturnStream.#ctor(EnterpriseDT.Google.GData.Client.IGDataRequest)">
            <summary>
            default constructor based on a gdatarequest object
            </summary>
            <param name="r"></param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataReturnStream.Close">
            <summary>
            default override, delegates to the real stream
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataReturnStream.Flush">
            <summary>
            default override, delegates to the real stream
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataReturnStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            default override, delegates to the real stream
            </summary>
            <param name="offset"></param>
            <param name="origin"></param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataReturnStream.SetLength(System.Int64)">
            <summary>
            default override, delegates to the real stream
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataReturnStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            default override, delegates to the real stream
            </summary>
            <param name="buffer"></param>
            <param name="count"/>
            <param name="offset"/>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GDataReturnStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            default override, delegates to the real stream
            </summary>
            <param name="buffer"/>
            <param name="count"/>
            <param name="offset"/>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataReturnStream.CanRead">
            <summary>
            default override, delegates to the real stream
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataReturnStream.CanSeek">
            <summary>
            default override, delegates to the real stream
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataReturnStream.CanTimeout">
            <summary>
            default override, delegates to the real stream
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataReturnStream.CanWrite">
            <summary>
            default override, delegates to the real stream
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataReturnStream.Length">
            <summary>
            default override, delegates to the real stream
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataReturnStream.Position">
            <summary>
            default override, delegates to the real stream
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.GDataReturnStream.Etag">
            <summary>
            implements the etag interface
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.CommandCollector">
            <summary>  
            Collects list of logging commands 
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.2 $
            
            </version>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Script.CommandCollector.logs">
            <summary> Log of messages
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.CommandCollector.LogCommand(System.Object,EnterpriseDT.Net.Ftp.FTPMessageEventArgs)">
            <summary> Log an FTP command being sent to the server
            
            </summary>
            <param name="cmd">  command string
            
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.CommandCollector.LogReply(System.Object,EnterpriseDT.Net.Ftp.FTPMessageEventArgs)">
            <summary> Log an FTP reply being sent back to the client
            
            </summary>
            <param name="reply">  reply string
            
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.CommandCollector.ClearLogs">
            <summary> Clear the log of all messages
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.CommandCollector.Logs">
            <summary> Get the log of messages
            
            </summary>
            <returns>  message log as a string
            
            </returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.RestartParsingException">
            <summary>  
            Signals to restart the parsing from first file
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Design.FTPConnectionEditorSerializer">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.FTPConnectionEditorSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="manager"></param>
            <param name="codeDomObject"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.FTPConnectionEditorSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="manager"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Design.ExFTPDesignerForm">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Design.ExFTPDesignerForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Design.ExFTPDesignerForm.tabControl">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Design.ExFTPDesignerForm.commandLogTab">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPDesignerForm.#ctor">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPDesignerForm.#ctor(EnterpriseDT.Net.Ftp.ExFTPConnection)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPDesignerForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPDesignerForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.AccessControl.AclQuery">
            <summary>
            A subclass of FeedQuery, to create an ACL query URI.
            currently only exists to allow a Service.Query overload that 
            creates an ACL feed
            </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.AccessControl.AclQuery.#ctor">
            <summary>default with no params</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.AccessControl.AclQuery.#ctor(System.String)">
            <summary>constructor taking a base URI constructor.</summary> 
        </member>
        <member name="T:EnterpriseDT.Google.GData.AccessControl.AclFeed">
            <summary>
            AccessControlFeed customization class
            the AccessControl feed does not expose anything in addition 
            to the base feed, so the only customization is the creation of
            AccessControlEntries
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.AccessControl.AclFeed.#ctor(System.Uri,EnterpriseDT.Google.GData.Client.IService)">
            <summary>
             default constructor
            </summary>
            <param name="uriBase">the base URI of the feed</param>
            <param name="service">the Service to use</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.AccessControl.AclFeed.CreateFeedEntry">
            <summary>
            returns a new entry for this feed
            </summary>
            <returns>AtomEntry</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.AccessControl.AclFeed.HandleExtensionElements(EnterpriseDT.Google.GData.Client.ExtensionElementEventArgs,EnterpriseDT.Google.GData.Client.AtomFeedParser)">
            <summary>
            get's called after we already handled the custom entry, to handle all 
            other potential parsing tasks
            </summary>
            <param name="e">the Event arguments</param>
            <param name="parser">the atom feed parser used</param>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpStatus">
            <summary>
            Message supplying status information
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SshFxpStatus.errorCode">
            <summary>
            Error code returned from the server
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SshFxpStatus.errorMessage">
            <summary>
            Error message returned from the server
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SshFxpStatus.language">
            <summary>
            Language of error message returned from the server
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SshFxpStatus.errorSpecificData">
            <summary>
            Error specific data
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpStatus.#ctor(EnterpriseDT.Net.Ssh.Routrek.SSHC.SSHDataReader,System.Int32,System.Text.Encoding)">
            <summary>
            Constructor
            </summary>
            <param name="reader"></param>
            <param name="length"></param>
            <remarks>
            Remaining fields are: 
                uint32 request-id
                uint32 error/status code
                string error message (ISO-10646 UTF-8 [RFC-2279])
                string language tag (as defined in [RFC-1766])
                    error-specific data
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpStatus.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SshFxpStatus.Success">
            <summary>
            True if status code indicates success
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SshFxpStatus.ErrorCode">
            <summary>
            The error code returned from the server
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SshFxpStatus.ErrorMessage">
            <summary>
            Error message returned from the server
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SshFxpStatus.ErrorMessageLanguage">
            <summary>
            The language of the error message returned from the server
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SshFxpStatus.ErrorSpecificData">
            <summary>
            Error specific data strings
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Ssl.SSLSessionCache">
            <summary>
            Represents the security options that should be used when connecting to a secure server, or when accepting secure connections.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.VersionDefaults">
            <summary>
            the default versions that are used. Currently, the default is still
            version 1 for most services implemented in this sdk.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.VersionDefaults.VersionOne">
            <summary>
            version One is 1
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.VersionDefaults.Major">
            <summary>
            the default major is VersionOne
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.VersionDefaults.Minor">
            <summary>
            the default Minor is 0
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.VersionDefaults.VersionTwo">
            <summary>
            and versionTwo is a 2
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.VersionDefaults.VersionThree">
            <summary>
            and versionThree is a 3
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.NullVersionAware">
            <summary>
            Class used as a null version aware seed for the collections
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.NullVersionAware.Instance">
            <summary>
            IVersionAware instance property
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.NullVersionAware.ProtocolMajor">
            <summary>
            returns the major version of the protocol used
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.NullVersionAware.ProtocolMinor">
            <summary>
            returns the minor version of the protocol used
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.VersionInformation.#ctor(EnterpriseDT.Google.GData.Client.IVersionAware)">
            <summary>
            construct a versioninformation object based
            on a versionaware object
            </summary>
            <param name="v">the versioned object to copy the data from</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.VersionInformation.#ctor(System.String)">
            <summary>
            construct a versioninformation object based 
            on the header string of the http request. The string
            has the form {major}.{minor}
            </summary>
            <param name="headerValue">if null creates default version</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.VersionInformation.ImprintVersion(EnterpriseDT.Google.GData.Client.IVersionAware)">
            <summary>
            takes an object and set's the version number to the 
            same as this instance
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.VersionInformation.ImprintVersion(EnterpriseDT.Google.GData.Client.ExtensionList)">
            <summary>
            takes an object and set's the version number to the 
            same as this instance
            </summary>
            <param name="arr">The array of objects the version should be applied to</param>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.VersionInformation.ProtocolMajor">
            <summary>
            returns the major protocol version number this element 
            is working against. 
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.VersionInformation.ProtocolMinor">
            <summary>
            returns the minor protocol version number this element 
            is working against. 
            </summary>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.AtomEntryCollection">
            <summary>standard typed collection based on 1.1 framework for FeedEntries
            </summary> 
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.AtomCollectionBase`1">
            <summary>
            Generic collection base class
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomCollectionBase`1.List">
            <summary>
            the internal list object that is used
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomCollectionBase`1.Add(`0)">
            <summary>standard typed accessor method </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomCollectionBase`1.RemoveAt(System.Int32)">
            <summary>
            default overload, see base class
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomCollectionBase`1.Clear">
            <summary>
            default overload, see base class
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomCollectionBase`1.CopyTo(`0[],System.Int32)">
            <summary>
            default overload, see base class
            </summary>
            <param name="arr"></param>
            <param name="index"></param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomCollectionBase`1.IndexOf(`0)">
            <summary>standard typed accessor method </summary> 
            <param name="value"></param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomCollectionBase`1.Insert(System.Int32,`0)">
            <summary>standard typed accessor method </summary> 
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomCollectionBase`1.Remove(`0)">
            <summary>standard typed accessor method </summary> 
            <param name="value"></param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomCollectionBase`1.Contains(`0)">
            <summary>standard typed accessor method </summary> 
            <param name="value"></param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomCollectionBase`1.GetEnumerator">
            <summary>
            default overload, see base class
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomCollectionBase`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            default overload, see base class
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomCollectionBase`1.Item(System.Int32)">
            <summary>standard typed accessor method </summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomCollectionBase`1.Count">
            <summary>
            default overload, see base class
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomCollectionBase`1.IsReadOnly">
            <summary>
            default overload, see base class
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomEntryCollection.feed">
            <summary>holds the owning feed</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomEntryCollection.#ctor">
            <summary>private default constructor</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomEntryCollection.#ctor(EnterpriseDT.Google.GData.Client.AtomFeed)">
            <summary>constructor</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomEntryCollection.FindById(EnterpriseDT.Google.GData.Client.AtomId)">
            <summary>Fins an atomEntry in the collection 
            based on it's ID. </summary> 
            <param name="value">The atomId to look for</param> 
            <returns>Null if not found, otherwise the entry</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomEntryCollection.Add(EnterpriseDT.Google.GData.Client.AtomEntry)">
            <summary>standard typed add method </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomEntryCollection.CopyOrMove(EnterpriseDT.Google.GData.Client.AtomEntry)">
            <summary>
            takes an existing atomentry object and either copies it into this feed collection,
            or moves it by creating a source element and copying it in here if the value is actually
            already part of a collection
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomEntryCollection.Item(System.Int32)">
            <summary>standard typed accessor method </summary> 
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.AtomLinkCollection">
            <summary>standard typed collection based on 1.1 framework for AtomLinks
            </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomLinkCollection.FindService(System.String,System.String)">
            <summary>public AtomLink FindService(string service,string type)
              Retrieves the first link with the supplied 'rel' and/or 'type' value.
              If either parameter is null, the corresponding match isn't needed.
            </summary> 
            <param name="service">the service entry to find</param>
            <param name="type">the link type to find</param>
            <returns>the found link or NULL </returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomLinkCollection.FindServiceList(System.String,System.String)">
            <summary>public AtomLink FindService(string service,string type)
              Retrieves the first link with the supplied 'rel' and/or 'type' value.
              If either parameter is null, the corresponding match isn't needed.
            </summary> 
            <param name="service">the service entry to find</param>
            <param name="type">the link type to find</param>
            <returns>the found link or NULL </returns>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.AtomCategoryCollection">
            <summary>standard typed collection based on 1.1 framework for AtomCategory
            </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomCategoryCollection.Add(EnterpriseDT.Google.GData.Client.AtomCategory)">
            <summary>standard typed accessor method </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomCategoryCollection.Find(System.String)">
            <summary>
            finds the first category with this term
            ignoring schemes
            </summary>
            <param name="term">the category term to search for</param>
            <returns>AtomCategory</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomCategoryCollection.Find(System.String,EnterpriseDT.Google.GData.Client.AtomUri)">
            <summary>
            finds a category with a given term and scheme
            </summary>
            <param name="term"></param>
            <param name="scheme"></param>
            <returns>AtomCategory or NULL</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomCategoryCollection.Contains(EnterpriseDT.Google.GData.Client.AtomCategory)">
            <summary>standard typed accessor method </summary> 
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.QueryCategoryCollection">
            <summary>standard typed collection based on 1.1 framework for AtomPerson
            </summary> 
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.AtomPersonCollection">
            <summary>standard typed collection based on 1.1 framework for AtomPerson
            </summary> 
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.ExtensionList">
            <summary>
             internal list to override the add and the constructor
            </summary>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.ExtensionList.NotVersionAware">
            <summary>
            Return a new collection that is not version aware.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.ExtensionList.#ctor(EnterpriseDT.Google.GData.Client.IVersionAware)">
            <summary>
            returns an extensionlist that belongs to a version aware
            container
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.ExtensionList.Add(EnterpriseDT.Google.GData.Client.IExtensionElementFactory)">
            <summary>
            adds value to the extensionlist.
            </summary>
            <param name="value"></param>
            <returns>returns the positin in the list after the add</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.ExtensionList.IndexOf(EnterpriseDT.Google.GData.Client.IExtensionElementFactory)">
            <summary>
            default overload, see base class
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.ExtensionList.Insert(System.Int32,EnterpriseDT.Google.GData.Client.IExtensionElementFactory)">
            <summary>
            default overload, see base class
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.ExtensionList.RemoveAt(System.Int32)">
            <summary>
            default overload, see base class
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.ExtensionList.System#Collections#Generic#ICollection{EnterpriseDT#Google#GData#Client#IExtensionElementFactory}#Add(EnterpriseDT.Google.GData.Client.IExtensionElementFactory)">
            <summary>
            default overload, see base class
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.ExtensionList.Clear">
            <summary>
            default overload, see base class
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.ExtensionList.Contains(EnterpriseDT.Google.GData.Client.IExtensionElementFactory)">
            <summary>
            default overload, see base class
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.ExtensionList.CopyTo(EnterpriseDT.Google.GData.Client.IExtensionElementFactory[],System.Int32)">
            <summary>
            default overload, see base class
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.ExtensionList.Remove(EnterpriseDT.Google.GData.Client.IExtensionElementFactory)">
            <summary>
            default overload, see base class
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.ExtensionList.Remove(System.String,System.String)">
            <summary>
            removes a factory defined by namespace and local name
            </summary>
            <param name="ns">namespace of the factory</param>
            <param name="name">local name of the factory</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.ExtensionList.GetEnumerator">
            <summary>
            default overload, see base class
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.ExtensionList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            default overload, see base class
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.ExtensionList.Item(System.Int32)">
            <summary>
            default overload, see base class
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.ExtensionList.Count">
            <summary>
            default overload, see base class
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.ExtensionList.IsReadOnly">
            <summary>
            default overload, see base class
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.ScriptEngine">
            <summary>  Scripting engine, used to load FTP scripts and execute them.
            Generally, the only methods used should be the constructor and
            the ExecuteScript() methods. 
            
            The setter methods should be used with caution. Typically, when
            the script is run these setter methods are called to set various
            properties. This means any properties manually set with these
            methods will be overwritten.
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.13 $
            
            </version>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Script.ScriptEngine.license">
            <summary> The license details
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.ScriptEngine.#ctor">
            <summary> Default constructor
            
            @throws IOException 
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.ScriptEngine.#ctor(System.String,System.String)">
            <summary> Constructor. Allows user name and password to be passed in
            
            </summary>
            <param name="user">         username
            </param>
            <param name="password">     user's password
            @throws IOException 
            
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.ScriptEngine.RunCommand(System.String)">
            <summary> Run a command and write the output
            </summary>
            <param name="command">  command string including arguments
            </param>
            <param name="out">      output stream for feedback
            </param>
            <returns>
            
            </returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.ScriptEngine.Quit">
            <summary> Quit the session
            
            </summary>
            <param name="out">  output stream for feedback
            
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.ScriptEngine.ExecuteScript(System.String)">
            <summary> Execute the script in the supplied file
            
            </summary>
            <param name="scriptPath">       full path of the script file
            </param>
            <returns>  ScriptResult
            @throws IOException
            @throws FTPException
            
            </returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.ScriptEngine.ExecuteScript(System.String,System.Boolean)">
            <summary> Execute the script in the supplied file
            
            </summary>
            <param name="scriptPath">       full path of the script file
            </param>
            <param name="exitAtEnd">        if true, close connection at end
            </param>
            <returns>  ScriptResult
            @throws IOException
            @throws FTPException
            
            </returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.ScriptEngine.ExecuteScript(System.IO.StreamReader)">
            <summary> Execute the script in the supplied stream
            
            </summary>
            <param name="scriptStream">  input stream containing the script file
            </param>
            <returns>  ScriptResult
            @throws IOException
            @throws FTPException
            
            </returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.ScriptEngine.ExecuteScript(System.IO.StreamReader,System.Boolean)">
            <summary> Execute the script in the supplied stream.
            
            </summary>
            <param name="scriptStream">  input stream containing the script file
            </param>
            <param name="exitAtEnd">     if true, close connection at end
            </param>
            <returns>  ScriptResult
            @throws IOException
            @throws FTPException
            
            </returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.ScriptEngine.GetVariable(System.String)">
            <summary> Get a variable that has been set
            
            </summary>
            <param name="name"> name of variable
            </param>
            <returns>  ScriptVariable
            
            </returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.ScriptEngine.SetVariable(System.String,System.String)">
            <summary> Set a variable 
            
            </summary>
            <param name="name">  variable name
            </param>
            <param name="value"> variable value
            
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.ScriptEngine.StartRecording(System.String)">
            <summary> Start recording commands to file
            
            </summary>
            <param name="recordFile">       file to write commands to
            @throws IOException
            
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.ScriptEngine.StopRecording">
            <summary> Stop recording commands 
            
            @throws IOException
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.ScriptEngine.WriteToRecordFile(System.String)">
            <summary> Write a line to the script record file
            
            </summary>
            <param name="msg">      script line
            @throws IOException
            
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.ScriptEngine.SetActivePortRange(System.Int32,System.Int32)">
            <summary> Set the active mode port range to be used
            
            </summary>
            <param name="low">      low port
            </param>
            <param name="high">     high port
            
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.ScriptEngine.CanConnect">
            <summary> Can we connect with the current state?
            
            </summary>
            <returns> true if can connect, false otherwise
            
            </returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.ScriptEngine.ReadCommands(System.IO.StreamReader)">
            <summary> Reads the script commands from a file
            
            </summary>
            <param name="scriptPath">    path of the 
            </param>
            <returns>
            @throws IOException
            
            </returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.ScriptEngine.ReadLicenseDetailsFromRegistry">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.CommandMap">
            <summary> Get the map of commands
            
            </summary>
            <returns>
            
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.VariablesMap">
            <summary> Get the map of variables
            
            </summary>
            <returns>
            
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.LicenseProperties">
            <summary> 
            Get and set license details
            </summary>
            <returns>
            
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.KnownHosts">
            <summary> Get the known hosts path
            
            </summary>
            <returns> string
            
            </returns>
            <summary> Set the known hosts path
            
            </summary>
            <param name="knownHosts"> path to known hosts file
            
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.ServerPublicKey">
            <summary> Get the server public key path
            
            </summary>
            <returns> path
            
            </returns>
            <summary> Set the server public key path
            
            </summary>
            <param name="serverPublicKey">path to public key
            
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.ClientPrivateKey">
            <summary> Get the client private key path
            
            </summary>
            <returns>  path
            
            </returns>
            <summary> Set the client private key path
            
            </summary>
            <param name="clientPrivateKey"> path to private key
            
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.ClientPrivateKeyPass">
            <summary> Get the passphrase for the client private key
            
            </summary>
            <returns> passphrase
            
            </returns>
            <summary> Set the passphrase for the client private key
            
            </summary>
            <param name="clientPrivateKeyPass"> passphrase
            
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.Recording">
            <summary> Is the engine currently recording commands?
            
            </summary>
            <returns> true if recording
            
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.RecordFile">
            <summary> Get path of file used to record script to
            
            </summary>
            <returns> string
            
            </returns>
            <summary> Set path of file to record script to 
            
            </summary>
            <param name="file"> file path
            
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.ConnectMode">
            <summary> Get the connect mode. PASV by default.
            
            </summary>
            <returns> connect mode
            
            </returns>
            <summary> Set the connect mode.
            
            </summary>
            <param name="mode"> mode to set.
            
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.LocalDir">
            <summary> Get the local working directory
            
            </summary>
            <returns> local working directory
            
            </returns>
            <summary> Set the local working directory
            
            </summary>
            <param name="localDir"> new local working directory
            
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.MessageCollector">
            <summary> Get the message listener
            
            </summary>
            <returns> message listener
            
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.Debug">
            <summary> Is debug turned on? Prints out each line before
            execution if on.
            
            </summary>
            <returns> true if debug enabled, false otherwise
            
            </returns>
            <summary> Set debug flag on or off
            
            </summary>
            <param name="debug">  enable or disable debug
            
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.Ftp">
            <summary> Get a reference to the client being used
            
            </summary>
            <returns> client reference
            
            </returns>
            <summary> Set the client reference
            
            </summary>
            <param name="ftp"> client reference
            
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.LogFile">
            <summary> Get the name (or full path) of the log file
            
            </summary>
            <returns> log file name
            
            </returns>
            <summary> Set the name or path of the log file
            
            </summary>
            <param name="logfile">   logfile path or name
            @throws IOException
            
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.LogLevel">
            <summary> Get the log level
            
            </summary>
            <returns>  log level
            
            </returns>
            <summary> Set the log level
            
            </summary>
            <param name="logLevel">new log level
            
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.Password">
            <summary> Get the user's password
            
            </summary>
            <returns>  password
            
            </returns>
            <summary> Set the password to use
            
            </summary>
            <param name="password"> user's password
            
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.ClientCertificate">
            <summary> Get the path of the client certificate for FTPS
            
            </summary>
            <returns> file path
            
            </returns>
            <summary> Set the path of the client certificate for FTPS
            
            </summary>
            <param name="clientCertificate"> file path
            
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.ClientPassphrase">
            <summary> Get the passphrase used for the client certificate
            
            </summary>
            <returns> string
            
            </returns>
            <summary> Set the passphrase used for the client certificate
            
            </summary>
            <param name="">clientPassphrase
            
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.ServerValidation">
            <summary> 
            If true, the server certificate must be validated against the
            root certificate in the Windows store
            </summary>
            <returns> 
            true if checking server certificate against store
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.CommonName">
            <summary> Get the set common name for the server. This is what is
            used to match against the server certificate if the hostname
            is not to be used.
            
            </summary>
            <returns> common name
            
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.IgnoreCommonName">
            <summary> Get the setting for ignoring the common name in server certificate
            validation. This is only used if a server certificate is set. If set
            to true, the common name in the server certificate is not matched with
            the hostname of the server (or any set common names). The default is false.
            
            </summary>
            <returns> true to skip common name matching in server validation
            
            </returns>
            <summary> Set whether the common name should be ignored in server certificate
            validation. This is only used if a server certificate is set. If set
            to true, the common name in the server certificate is not matched with
            the hostname of the server (or any set common names). The default is false.
            
            </summary>
            <param name="">ignoreCommonName
            
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.Port">
            <summary> Get the port number being used. The default is
            0, which means the port will be set internally
            depending on the protocol used.
            
            </summary>
            <returns> port number
            
            </returns>
            <summary> Set the port to connect to
            
            </summary>
            <param name="port"> port used
            
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.ActiveLowPort">
            <summary> Get the low port for active mode
            
            </summary>
            <returns> low port
            
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.ActiveHighPort">
            <summary> Get the high port for active mode
            
            </summary>
            <returns> high port
            
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.Protocol">
            <summary> Get the protocol to be used
            
            </summary>
            <returns>  protocol
            
            </returns>
            <summary> Set the protocol to be used
            
            </summary>
            <param name="protocol"> protocol to use
            
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.RemoteHost">
            <summary> Get the remote host name
            
            </summary>
            <returns> hostname
            
            </returns>
            <summary> Set the remote host to connect to
            
            </summary>
            <param name="remoteHost">   remote host name
            
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.Timeout">
            <summary> Get the timeout value in seconds. The default is 0, 
            which is an infinite timeout.
            
            </summary>
            <returns> timeout
            
            </returns>
            <summary> Set the timeout (in seconds).
            
            </summary>
            <param name="timeout">  timeout value in seconds
            
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.User">
            <summary> Get the user
            
            </summary>
            <returns> username
            
            </returns>
            <summary> Set the user
            
            </summary>
            <param name="user"> user name
            
            </param>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.ProtectCommand">
            <summary>  Protect command. Can only be called for a plain FTP connection.
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.4 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.QueryCategoryOperator">
            <summary>Enum to describe the different category boolean operations.
            </summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.QueryCategoryOperator.AND">
            <summary>A logical AND operation.</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.QueryCategoryOperator.OR">
            <summary>A logical OR operation.</summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.QueryCategory">
            <summary>Base class to hold an Atom category plus the boolean
            to create the query category.
            </summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.QueryCategory.category">
            <summary>AtomCategory holder.</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.QueryCategory.categoryOperator">
            <summary>Boolean operator (can be OR or AND).</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.QueryCategory.isExcluded">
            <summary>Boolean negator (can be true or false).</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.QueryCategory.#ctor(EnterpriseDT.Google.GData.Client.AtomCategory)">
            <summary>Constructor, given a category.</summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.QueryCategory.#ctor(System.String,EnterpriseDT.Google.GData.Client.QueryCategoryOperator)">
            <summary>Constructor, given a category as a string from the URI.</summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.QueryCategory.Category">
            <summary>Accessor method public AtomCategory Category</summary> 
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.QueryCategory.Operator">
            <summary>Accessor method public QueryCategoryOperator Operator</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.QueryCategory.Excluded">
            <summary>Accessor method public bool Excluded</summary> 
            <returns> </returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Pro.Design.ProFTPDesignerForm">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.Design.ProFTPDesignerForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.Design.ProFTPDesignerForm.#ctor">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.Design.ProFTPDesignerForm.#ctor(EnterpriseDT.Net.Ftp.Pro.ProFTPConnection)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.Design.ProFTPDesignerForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.Design.ProFTPDesignerForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssl.SSLFTPSocket">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPSocket.log">
            <summary> Logging object</summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPSocket.Connected">
            <summary>
            True if the control socket was connected at the last operation
            </summary>
        </member>
        <member name="T:EnterpriseDT.Util.Json.JsonArray">
            <summary>
            Represents the json array.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.Json.JsonArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EnterpriseDT.Util.Json.JsonArray"/> class. 
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.Json.JsonArray.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EnterpriseDT.Util.Json.JsonArray"/> class. 
            </summary>
            <param name="capacity">The capacity of the json array.</param>
        </member>
        <member name="M:EnterpriseDT.Util.Json.JsonArray.ToString">
            <summary>
            The json representation of the array.
            </summary>
            <returns>The json representation of the array.</returns>
        </member>
        <member name="T:EnterpriseDT.Util.Json.JsonObject">
            <summary>
            Represents the json object.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Util.Json.JsonObject._members">
            <summary>
            The internal member dictionary.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.Json.JsonObject.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:EnterpriseDT.Util.Json.JsonObject"/>.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.Json.JsonObject.#ctor(System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new instance of <see cref="T:EnterpriseDT.Util.Json.JsonObject"/>.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys, or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type of the key.</param>
        </member>
        <member name="M:EnterpriseDT.Util.Json.JsonObject.Add(System.String,System.Object)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:EnterpriseDT.Util.Json.JsonObject.ContainsKey(System.String)">
            <summary>
            Determines whether the specified key contains key.
            </summary>
            <param name="key">The key.</param>
            <returns>
                <c>true</c> if the specified key contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EnterpriseDT.Util.Json.JsonObject.Remove(System.String)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Util.Json.JsonObject.TryGetValue(System.String,System.Object@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Util.Json.JsonObject.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:EnterpriseDT.Util.Json.JsonObject.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.Json.JsonObject.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Determines whether [contains] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns>
            	<c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EnterpriseDT.Util.Json.JsonObject.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:EnterpriseDT.Util.Json.JsonObject.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Util.Json.JsonObject.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Util.Json.JsonObject.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:EnterpriseDT.Util.Json.JsonObject.ToString">
            <summary>
            Returns a json <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A json <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:EnterpriseDT.Util.Json.JsonObject.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Object"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:EnterpriseDT.Util.Json.JsonObject.Keys">
            <summary>
            Gets the keys.
            </summary>
            <value>The keys.</value>
        </member>
        <member name="P:EnterpriseDT.Util.Json.JsonObject.Values">
            <summary>
            Gets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="P:EnterpriseDT.Util.Json.JsonObject.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="P:EnterpriseDT.Util.Json.JsonObject.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:EnterpriseDT.Util.Json.JsonObject.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value>
            	<c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:EnterpriseDT.Util.Json.JsonSerializer">
            <summary>
            This class encodes and decodes JSON strings.
            Spec. details, see http://www.json.org/
            
            JSON uses Arrays and Objects. These correspond here to the datatypes JsonArray(IList&lt;object>) and JsonObject(IDictionary&lt;string,object>).
            All numbers are parsed to doubles.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.Json.JsonSerializer.DeserializeObject(System.String)">
            <summary>
            Parses the string json into a value
            </summary>
            <param name="json">A JSON string.</param>
            <returns>An IList&lt;object>, a IDictionary&lt;string,object>, a double, a string, null, true, or false</returns>
        </member>
        <member name="M:EnterpriseDT.Util.Json.JsonSerializer.TryDeserializeObject(System.String,System.Object@)">
            <summary>
            Try parsing the json string into a value.
            </summary>
            <param name="json">
            A JSON string.
            </param>
            <param name="obj">
            The object.
            </param>
            <returns>
            Returns true if successfull otherwise false.
            </returns>
        </member>
        <member name="M:EnterpriseDT.Util.Json.JsonSerializer.IsNumeric(System.Object)">
            <summary>
            Determines if a given object is numeric in any way
            (can be integer, double, null, etc).
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.CccCommand">
            <summary>  CCC command. Can only be called for an explicit SSL connection.
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.4 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Forms.FTPAnimation">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPAnimation.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPAnimation.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPAnimation.Connection">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Util.Debug.LogMessageEventArgs">
            <summary>
            An instance of this class is supplied to the LogMessageReceived event
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.LogMessageEventArgs.#ctor(System.String,EnterpriseDT.Util.Debug.Level,System.String,System.Object[])">
            <summary>
            Constructor
            </summary>
            <param name="loggerName">name of logger</param>
            <param name="level">log level of message</param>
            <param name="text">message text</param>
            <param name="args">any additional args supplied</param>
        </member>
        <member name="P:EnterpriseDT.Util.Debug.LogMessageEventArgs.LogLevel">
            <summary>
            Returns the level of this message
            </summary>
        </member>
        <member name="P:EnterpriseDT.Util.Debug.LogMessageEventArgs.LoggerName">
            <summary>
            Returns the name of the logger for this message
            </summary>
        </member>
        <member name="P:EnterpriseDT.Util.Debug.LogMessageEventArgs.Text">
            <summary>
            The message text.
            </summary>
            <remarks>Normally this is a log message, but if additional arguments
            are supplied, this will be a Format string so the extra arguments can
            be displayed correctly.</remarks>
        </member>
        <member name="P:EnterpriseDT.Util.Debug.LogMessageEventArgs.FormattedText">
            <summary>
            The formatted message text, constructed from the arguments and using
            the Text as a formatting string.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Util.Debug.LogMessageEventArgs.Exception">
            <summary>
            An exception if it exists (passed in as the first in the
            argument list).
            </summary>
        </member>
        <member name="P:EnterpriseDT.Util.Debug.LogMessageEventArgs.Arguments">
            <summary>
            The array of variable arguments.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Util.Debug.LogMessageHandler">
            <summary>
            Delegate used for LogMessageReceived event
            </summary>
        </member>
        <member name="T:EnterpriseDT.Util.Debug.Logger">
            <summary>  
            Logger class that mimics log4net Logger class
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.37 $
            </version>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.Logger.globalLevel">
            <summary> Level of all loggers</summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.Logger.format">
            <summary>Date format</summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.Logger.loggers">
            <summary> Hash of all loggers that exist</summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.Logger.appenders">
            <summary> Vector of all appenders</summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.Logger.ts">
            <summary> Timestamp</summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.Logger.clazz">
            <summary> Class name for this logger</summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.Logger.showClassNames">
            <summary>If true then class-names will be shown in log.</summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.Logger.showTimestamp">
            <summary>If true then timestamps will be shown in log.</summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.Logger.mainFileAppender">
            <summary>Main file appender</summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.Logger.mainConsoleAppender">
            <summary>Main file appender</summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.Logger.mainTraceAppender">
            <summary>Main file appender</summary>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Logger.#ctor(System.String)">
            <summary> 
            Constructor
            </summary>
            <param name="clazz">    
            class this logger is for
            </param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Logger.GetLogger(System.Type)">
            <summary> Get a logger for the supplied class
            
            </summary>
            <param name="clazz">   full class name
            </param>
            <returns>  logger for class
            </returns>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Logger.GetLogger(System.String)">
            <summary> 
            Get a logger for the supplied class
            </summary>
            <param name="clazz">   full class name
            </param>
            <returns>  logger for class
            </returns>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Logger.AddAppender(EnterpriseDT.Util.Debug.Appender)">
            <summary> 
            Add an appender to our list
            </summary>
            <param name="newAppender">
            new appender to add
            </param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Logger.RemoveAppender(EnterpriseDT.Util.Debug.Appender)">
            <summary> 
            Remove an appender from our list
            </summary>
            <param name="appender">appender to remove</param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Logger.Shutdown">
            <summary> Close and remove all appenders and loggers</summary>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Logger.ClearAppenders">
            <summary> Close and remove all appenders</summary>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Logger.Log(EnterpriseDT.Util.Debug.Level,System.String,System.Object[])">
            <summary>
            Log a message using the given level.
            </summary>
            <param name="level">Log level.</param>
            <param name="message">Message to log.</param>
            <param name="args">Either an Exception or arguments substituted into message.</param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Logger.OurLog(EnterpriseDT.Util.Debug.Level,System.String,System.Exception)">
            <summary> 
            Log a message to our logging system
            </summary>
            <param name="level">log level</param>
            <param name="message">message to log</param>
            <param name="t">throwable object</param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Logger.Info(System.String)">
            <summary> Log an info level message
            
            </summary>
            <param name="message">  message to log
            </param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Logger.Info(System.String,System.Exception)">
            <summary> Log an info level message
            
            </summary>
            <param name="message">  message to log
            </param>
            <param name="t">        throwable object
            </param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Logger.Info(System.String,System.Object[])">
            <summary> Log an info level message
            
            </summary>
            <param name="message">  message to log
            </param>
            <param name="args">arguments references in the message.
            </param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Logger.Warn(System.String)">
            <summary> Log a warning level message
            
            </summary>
            <param name="message">  message to log
            </param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Logger.Warn(System.String,System.Exception)">
            <summary> Log a warning level message
            
            </summary>
            <param name="message">  message to log
            </param>
            <param name="t">        throwable object
            </param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Logger.Warn(System.String,System.Exception,System.Object[])">
            <summary>Log an warning level message</summary>
            <param name="message">message to log</param>
            <param name="t">throwable object</param>
            <param name="args">arguments references in the message.</param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Logger.Error(System.String)">
            <summary> Log an error level message
            
            </summary>
            <param name="message">  message to log
            </param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Logger.Error(System.String,System.Exception)">
            <summary> Log an error level message
            
            </summary>
            <param name="message">  message to log
            </param>
            <param name="t">        throwable object
            </param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Logger.Error(System.String,System.Exception,System.Object[])">
            <summary>Log an error level message</summary>
            <param name="message">message to log</param>
            <param name="t">throwable object</param>
            <param name="args">arguments references in the message.</param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Logger.Error(System.Exception)">
            <summary> Log an error level message
            
            </summary>
            <param name="t">        throwable object
            </param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Logger.Fatal(System.String)">
            <summary> Log a fatal level message
            
            </summary>
            <param name="message">  message to log
            </param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Logger.Fatal(System.String,System.Exception)">
            <summary> Log a fatal level message
            
            </summary>
            <param name="message">  message to log
            </param>
            <param name="t">        throwable object
            </param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Logger.Debug(System.String)">
            <summary> Log a debug level message
            
            </summary>
            <param name="message">  message to log
            </param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Logger.Debug(System.String,System.Object[])">
            <summary>Log a debug level message</summary>
            <param name="message">message to log</param>
            <param name="args">arguments references in the message.</param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Logger.Debug(System.String,System.Exception)">
            <summary> Log a debug level message
            
            </summary>
            <param name="message">  message to log
            </param>
            <param name="t">        throwable object
            </param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Logger.IsEnabledFor(EnterpriseDT.Util.Debug.Level)">
            <summary> Is logging enabled for the supplied level?
            
            </summary>
            <param name="level">  level to test for
            </param>
            <returns> true   if enabled
            </returns>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Logger.#cctor">
            <summary> Determine the logging level</summary>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Logger.LogObject(EnterpriseDT.Util.Debug.Level,System.String,System.Object)">
            <summary>
            Logs the public properties of an object.
            </summary>
            <param name="level">Logging level to use.</param>
            <param name="prefix">Text to prepend to the properties.</param>
            <param name="obj">Object whose properties are to be logged.</param>
        </member>
        <member name="P:EnterpriseDT.Util.Debug.Logger.CurrentLevel">
            <summary> 
            Set all loggers to this level
            </summary>
        </member>
        <member name="P:EnterpriseDT.Util.Debug.Logger.ShowClassNames">
            <summary>If true then class-names will be shown in log.</summary>
        </member>
        <member name="P:EnterpriseDT.Util.Debug.Logger.ShowTimestamp">
            <summary>If true then timestamps will be shown in log.</summary>
        </member>
        <member name="P:EnterpriseDT.Util.Debug.Logger.ErrorEnabled">
            <summary> 
            Is error logging enabled?
            </summary>
            <returns> true if enabled
            </returns>
        </member>
        <member name="P:EnterpriseDT.Util.Debug.Logger.DebugEnabled">
            <summary> 
            Is debug logging enabled?
            </summary>
            <returns> true if enabled
            </returns>
        </member>
        <member name="P:EnterpriseDT.Util.Debug.Logger.InfoEnabled">
            <summary> Is info logging enabled for the supplied level?
            
            </summary>
            <returns> true if enabled
            </returns>
        </member>
        <member name="P:EnterpriseDT.Util.Debug.Logger.PrimaryLogFile">
            <summary>
            The primary log file is simply the first file appender
            that has been added to the logger.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Util.Debug.Logger.LogToConsole">
            <summary>
            If this property is <c>true</c> then logs will be written to the
            console.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Util.Debug.Logger.LogToTrace">
            <summary>
            If this property is <c>true</c> then logs will be written using
            <see cref="T:System.Diagnostics.Trace"/>.
            </summary>
        </member>
        <member name="E:EnterpriseDT.Util.Debug.Logger.LogMessageReceived">
            <summary>
            If this event is set then all logging events are directed to the
            event as well as the loggers.
            </summary>
            <remarks>If it is desired to only send logging to the log system subscribing
            to this event, the <see cref="P:EnterpriseDT.Util.Debug.Logger.CurrentLevel"/> should be set to <see cref="F:EnterpriseDT.Util.Debug.Level.OFF"/>.</remarks>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.AtomId">
            <summary>The "atom:id" element conveys a permanent, universally unique identifier for an entry or feed.
            </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomId.#ctor">
            <summary>empty constructor</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomId.#ctor(System.String)">
            <summary>public AtomId(string uri)</summary> 
            <param name="link">the URI for the ID</param>
            <returns> </returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomId.GetHashCode">
            <summary>
            as we do comparisons, we need to override this
            we return the hashcode of our string member
            </summary>
            <returns>int</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomId.CompareTo(System.Object)">
            <summary>
            overloaded IComparable interface method
            </summary>
            <param name="obj">the object to compare this instance with</param>
            <returns>int</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomId.Equals(System.Object)">
            <summary>
            overridden equal method
            </summary>
            <param name="obj"></param>
            <returns>bool</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomId.op_Equality(EnterpriseDT.Google.GData.Client.AtomId,EnterpriseDT.Google.GData.Client.AtomId)">
            <summary>
            overridden comparson operator
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>bool</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomId.op_Inequality(EnterpriseDT.Google.GData.Client.AtomId,EnterpriseDT.Google.GData.Client.AtomId)">
            <summary>
            overridden comparson operator
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>bool</returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomId.XmlName">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="T:EnterpriseDT.Google.GData.Documents.DocumentsListQuery">
            <summary>
            A subclass of FeedQuery, to create an Documents query URI.
            Provides public properties that describe the different
            aspects of the URI, as well as a composite URI.
            
            Documents List supports the following standard GData query parameters: 
                alt, author, q, start-index, max-results, updated-min, updated-max, /category
            For more information about the standard parameters, see the GData protocol reference document.
            In addition to the standard GData query parameters, the Documents List data API uses the following parameters.
            Parameter	Meaning	                                                
            title	    Specifies the search terms for the title of a document.	
                        This parameter used without title-exact will only submit partial queries, not exact queries.
            
            title-exact	Specifies whether the title query should be taken as an exact string.	
                        Meaningless without title. Possible values are true and false.
            
            The Documents List data API supports the following categories.
                Category: Document Type	
                        Scheme: http://schemas.google.com/g/2005#kind	
                        Term: http://schemas.google.com/docs/2007#type	
                        Label: type	    
                        All documents of the corresponding type in the requesting users document list. 
                        Type is currently one of (document|spreadsheet|presentation)
                Category: Starred Status
                    	Scheme: http://schemas.google.com/g/2005/labels	
                        Term: starred	                                    
                        Label: starred	    
                        All documents that have been starred by the requesting user
                Category: Containing Folders	
                        Scheme: http://schemas.google.com/docs/2007/folders/user-email	
                        Term: folder-id	
                        Label: folder-name	
                        All documents inside the given folder for the requesting user
             </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.DocumentsListQuery.documentsBaseUri">
            <summary>
            document feed base URI 
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.DocumentsListQuery.documentsAclUri">
            <summary>
            document feed base URI with ACLs
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.DocumentsListQuery.foldersUriTemplate">
            <summary>
            template to construct a folder URI for a folder ID
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.DocumentsListQuery.aclsUriTemplate">
            <summary>
            template to get the ACLs for a resourceID
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.DocumentsListQuery.mediaUriTemplate">
            <summary>
            template to get the media for a resourceID
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.DocumentsListQuery.allFoldersUri">
            <summary>
            uri to get you all folders
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.DocumentsListQuery.revisionsUriTemplate">
            <summary>
            template to get a revisison for a given resourceID and revisionID
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.DocumentsListQuery.DOCUMENTS">
            <summary>
            predefined query category for documents
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.DocumentsListQuery.SPREADSHEETS">
            <summary>
            predefined query category for spreadsheets
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.DocumentsListQuery.PRESENTATIONS">
            <summary>
            predefined query category for presentations
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.DocumentsListQuery.PDFS">
            <summary>
            predefined query category for PDFS
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.DocumentsListQuery.FORMS">
            <summary>
            predefined query category for Forms
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.DocumentsListQuery.STARRED">
            <summary>
            predefined query category for starred documents
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.DocumentsListQuery.VIEWED">
            <summary>
            predefined query category for starred documents
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.DocumentsListQuery.HIDDEN">
            <summary>
            predefined query category for hidden documents
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.DocumentsListQuery.TRASHED">
            <summary>
            predefined query category for trashed documents
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.DocumentsListQuery.MINE">
            <summary>
            predefined query category for user owned documents
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.DocumentsListQuery.PRIVATE">
            <summary>
            predefined query category for private documents
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.DocumentsListQuery.SHARED">
            <summary>
            predefined query category for shared documents
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Documents.DocumentsListQuery.#ctor">
            <summary>
            base constructor
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Documents.DocumentsListQuery.#ctor(System.String)">
            <summary>
            base constructor, with initial queryUri
            </summary>
            <param name="queryUri">the query to use</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Documents.DocumentsListQuery.ParseUri(System.Uri)">
            <summary>Parses custom properties out of the incoming URI</summary> 
            <param name="targetUri">A URI representing a query on a feed</param>
            <returns>returns the base uri</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Documents.DocumentsListQuery.CalculateQuery(System.String)">
            <summary>Creates the partial URI query string based on all
             set properties.</summary> 
            <returns> A string representing the query part of the URI.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "P:EnterpriseDT.Google.GData.Documents.DocumentsListQuery.StartIndex" -->
        <member name="P:EnterpriseDT.Google.GData.Documents.DocumentsListQuery.Starred">
            <summary>
            Restricts the results to only starred documents
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Documents.DocumentsListQuery.ShowFolders">
            <summary>
            shows folders if true in the result
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Documents.DocumentsListQuery.Title">
            <summary>
            Restricts the results to only documents with titles matching a string.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Documents.DocumentsListQuery.TitleExact">
            <summary>
            Restricts the results to only documents matching a string provided
            by the Title property exactly. (No partial matches.)
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Documents.DocumentsListQuery.Owner">
            <summary>
            Searches for documents with a specific owner. Use the email address of the owner
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Documents.DocumentsListQuery.Writer">
            <summary>
            Searches for documents which can be written to by specific users.
            Use a single email address or a comma separated list of email addresses.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Documents.DocumentsListQuery.Reader">
            <summary>
            Searches for documents which can be read by specific users.
            Use a single email address or a comma separated list of email addresses.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Documents.DocumentsListQuery.Ocr">
            <summary>
            Specifies whether to attempt OCR on a .jpg, .png, of .gif upload.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Documents.DocumentsListQuery.ShowDeleted">
            <summary>
            Specifies whether the query should return documents which are in the trash as well as other documents.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Documents.DocumentsListQuery.TargetLanguage">
            <summary>
            Specifies the language to translate a document into.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Documents.DocumentsListQuery.SourceLanguage">
            <summary>
            Specifies the source langugate to translate a document from.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Documents.DocumentsListQuery.EditedMin">
            <summary>
            Lower bound on the last time a document was edited by the current user.
            </summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Documents.DocumentsListQuery.EditedMax">
            <summary>Upper bound on the last time a document was edited by the current user.</summary> 
        </member>
        <member name="T:EnterpriseDT.Google.GData.Documents.TextDocumentQuery">
            <summary>
            a subclass setup to just retrieve all word processor documents
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Documents.TextDocumentQuery.#ctor">
            <summary>
            base constructor
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Documents.SpreadsheetQuery">
            <summary>
            a subclass setup to just retrieve all spreadsheets
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Documents.SpreadsheetQuery.#ctor">
            <summary>
            base constructor
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Documents.PresentationsQuery">
            <summary>
            a subclass setup to just retrieve all presentations
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Documents.PresentationsQuery.#ctor">
            <summary>
            base constructor
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Documents.PDFsQuery">
            <summary>
            a subclass setup to just retrieve all PDFs
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Documents.PDFsQuery.#ctor">
            <summary>
            base constructor
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Documents.FolderQuery">
            <summary>
            a subclass setup to just retrieve all Folders
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Documents.FolderQuery.#ctor(System.String)">
            <summary>
            base constructor
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.PublicKeyFactory">
            <summary>
            Reads generic key data and returns the key blob
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.PublicKeyFactory.log">
            <summary> Logging object</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.PublicKeyFactory.openSSHFormat">
            <summary>
            OpenSSH formatter
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.PublicKeyFactory.secshFormat">
            <summary>
            SECSH formatter
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.PublicKeyFactory.GeneratePublicKey(System.Byte[])">
            <summary>
            Generate a PublicKey from a byte array of the raw file contents
            </summary>
            <param name="formattedKey"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.PublicKeyFactory.GeneratePublicKey(System.String)">
            <summary>
            Generate a PublicKey from contents of a public key file
            </summary>
            <param name="publicKeyFile"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.PublicKeyFactory.GeneratePublicKey(System.Byte[],System.String)">
            <summary>
            Generate a public key object from the keyblob
            </summary>
            <param name="keyBlob">bytes of public key</param>
            <param name="algorithm">optional algorithm to do a check</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.PublicKeyFactory.GeneratePublicKeys(System.Byte[])">
            <summary>
            Generate an array of public key objects from the multi-key blob
            </summary>
            <param name="keyBlob">multi-key blob</param>
            <returns>Array of public key objects</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.PublicKeyFactory.GetKeyBlob(System.Byte[])">
            <summary>
            Get the key blob from the raw key bytes
            </summary>
            <param name="formattedKey">raw bytes from keyfile</param>
            <returns>the key blob</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.PublicKeyFactory.SelectFormatter(System.Byte[])">
            <summary>
            Select the correct formatter for this key
            </summary>
            <param name="formattedKey">raw key data</param>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.BinaryCommand">
            <summary>  Change to binary mode
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.2 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.Feed`1">
            <summary>a generic Feed class
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Feed`1.#ctor(EnterpriseDT.Google.GData.Client.AtomFeed)">
            <summary>
            default constructor that takes the underlying atomfeed
            </summary>
            <param name="af"></param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Feed`1.#ctor(EnterpriseDT.Google.GData.Client.Service,EnterpriseDT.Google.GData.Client.FeedQuery)">
            <summary>
            constructs a new feed object based on a service and a query
            </summary>
            <param name="service"></param>
            <param name="q"></param>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.Feed`1.AtomFeed">
            <summary>
            returns the used feed object
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.Feed`1.AutoPaging">
            <summary>
            if set to true will cause the feed to add more data when you iterate over it's entries
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.Feed`1.StartIndex">
            <summary>
            returns the position in the real feed of the first entry in this feed
            </summary>
            <returns>an int indicating the start in the feed</returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.Feed`1.PageSize">
            <summary>
            returns the setup paging size of this feed. If you set AutoPaging to true
            this is the size that is used to get more results
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.Feed`1.TotalResults">
            <summary>
            returns the number of entries the server believes the feed holds
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.Feed`1.Maximum">
            <summary>
            the maxium number of entries to be retrieved. This is normally
            setup using the RequestSettings when the feed is constructed.
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.Feed`1.Settings">
            <summary>
            accessor for the RequestSettings used to construct the feed. Needed to
            construct a query that takes auth into account
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.Feed`1.Entries">
                    <summary>
                     returns the initial list of entries.This page is the data
                     you got from the Requestobject and will remain constant.
                     Unless you set AutoPaging to true, in that case:
                     This will go back to the server and fetch data again if
                     needed. Example. If you pagesize is 30, you get an initial set of
                     30 entries. While enumerating, when reaching 30, the code will go
                     to the server and get the next 30 rows. It will continue to do so
                     until the server reports no more rows available.
                     Note that you should cache the entries returned in a list of your own
                     if you want to access them more than once, as this one does no caching on
                     it's own.
                     </summary>
                      <example>
                             The following code illustrates a possible use of
                             the <c>Entries</c> property:
                             <code>
                               YouTubeRequestSettings settings = new YouTubeRequestSettings("yourApp", "yourClient", "yourKey", "username", "pwd");
                               YouTubeRequest f = new YouTubeRequest(settings);
                               Feed&lt;Playlist&gt; feed = f.GetPlaylistsFeed(null);
                               foreach (Vidoe v in feed.Entries)
                             </code>
                         </example>
                     <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.Entry">
            <summary>
            the Entry class is the base class for all Feed of T type feeds
            it encapsulates the AtomEntry
            </summary>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Entry.#ctor">
            <summary>
             default public constructor, needed for generics.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Entry.ToString">
            <summary>override for ToString, returns the Entries Title</summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Entry.EnsureInnerObject">
            <summary>
            needs to be subclassed to ensure the creation of the corrent AtomEntry based
            object
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.Entry.AtomEntry">
            <summary>
             the original AtomEntry object that this object is standing in for
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.Entry.Id">
            <summary>
            returns the Id of an entry
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.Entry.Self">
            <summary>
            returns the value of the self uri as a string
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.Entry.Title">
            <summary>
            the title of the Entry.
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.Entry.AppControl">
            <summary>
            returns the appControl sublement
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.Entry.IsDraft">
            <summary>
            returns the appControl sublement
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.Entry.ReadOnly">
            <summary>
            returns true, if the entry has an edit link
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.Entry.Author">
            <summary>
             returns the first author name in the atom.entry.authors collection
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.Entry.Content">
            <summary>
            returns the string representation of the atom.content element
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.Entry.Summary">
            <summary>
            returns the string representation of the atom.Summary element
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.Entry.Updated">
            <summary>
            just a thin layer on top of the existing updated of the
            underlying atomentry
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.Entry.BatchData">
            <summary>
            this returns the batch data for the inner atom object
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.Entry.Categories">
            <summary>
            returns the categories for the entry
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.Entry.MediaSource">
            <summary>access the associated media element. Note, that setting this
            WILL cause subsequent updates to be done using MIME multipart posts
            </summary>
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.Entry.ETag">
            <summary>access the associated media element. Note, that setting this
            WILL cause subsequent updates to be done using MIME multipart posts
            </summary>
            <returns> </returns>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.RequestSettings">
            <summary>
            Base requestsettings class. Takes credentials, applicationsname
            and supports pagesizes and autopaging. This class is used to initialize a
            <seealso cref="T:EnterpriseDT.Google.GData.Client.FeedRequest`1"/> object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.RequestSettings.#ctor(System.String)">
            <summary>
            an unauthenticated use case
            </summary>
            <param name="applicationName"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.RequestSettings.#ctor(System.String,System.String,System.String)">
            <summary>
             a constructor for client login use cases
            </summary>
            <param name="applicationName">The name of the application</param>
            <param name="userName">the user name</param>
            <param name="passWord">the password</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.RequestSettings.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
             a constructor for OpenAuthentication login use cases
            </summary>
            <param name="applicationName">The name of the application</param>
            <param name="consumerKey">the consumerKey to use</param>
            <param name="consumerSecret">the consumerSecret to use</param>
            <param name="user">the username to use</param>
            <param name="domain">the domain to use</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.RequestSettings.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             a constructor for OpenAuthentication login use cases using 2 or 3 legged oAuth
            </summary>
            <param name="applicationName">The name of the application</param>
            <param name="consumerKey">the consumerKey to use</param>
            <param name="consumerSecret">the consumerSecret to use</param>
            <param name="token">The token to be used</param>
            <param name="tokenSecret">The tokenSecret to be used</param>
            <param name="user">the username to use</param>
            <param name="domain">the domain to use</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.RequestSettings.#ctor(System.String,EnterpriseDT.Google.GData.Client.GDataCredentials)">
            <summary>
             a constructor for client login use cases
            </summary>
            <param name="applicationName">The name of the application</param>
            <param name="credentials">the user credentials</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.RequestSettings.#ctor(System.String,System.String)">
            <summary>
            a constructor for a web application authentication scenario
            </summary>
            <param name="applicationName"></param>
            <param name="authSubToken"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.RequestSettings.#ctor(System.String,System.String,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            a constructor for a web application authentication scenario
            </summary>
            <param name="applicationName"></param>
            <param name="authSubToken"></param>
            <param name="privateKey"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.RequestSettings.CreateHttpWebRequest(System.String,System.String,System.Uri)">
             <summary>
             Creates a HttpWebRequest object that can be used against a given service.
             for a RequestSetting object that is using client login, this might call
             to get an authentication token from the service, if it is not already set.
            
             If this uses client login, and you need to use a proxy, set the application-wide
             proxy first using the GlobalProxySelection
             </summary>
             <param name="serviceName"></param>
             <param name="httpMethod"></param>
             <param name="targetUri"></param>
             <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.RequestSettings.Credentials">
            <summary>
            returns the Credentials in case of a client login scenario
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.RequestSettings.AuthSubToken">
            <summary>
            returns the authsub token to use for a webapplication scenario
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.RequestSettings.PrivateKey">
            <summary>
            returns the private key used for authsub authentication
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.RequestSettings.Application">
            <summary>
            returns the application name
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.RequestSettings.ConsumerKey">
            <summary>
            returns the ConsumerKey
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.RequestSettings.ConsumerSecret">
            <summary>
            returns the ConsumerSecret
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.RequestSettings.Token">
            <summary>
            returns the Token for oAuth
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.RequestSettings.TokenSecret">
            <summary>
            returns the TokenSecret for oAuth
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.RequestSettings.OAuthUser">
            <summary>
            returns the OAuth User
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.RequestSettings.OAuthDomain">
            <summary>
            returns the OAuth Domain
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.RequestSettings.PageSize">
            <summary>
            the pagesize specifies how many entries should be retrieved per call. If not set,
            the server default will be used. Set it either to -1 (for default) or any value &gt; 0
            to set the pagesize to something the server should honor. Note, that this set's the
            max-results parameter on the query, and the server is free to ignore that and give you less
            entries than you have requested.
            </summary>
             <example>
                    The following code illustrates a possible use of
                     the <c>PageSize</c> property:
                     <code>
                      YouTubeRequestSettings settings = new YouTubeRequestSettings("yourApp", "yourClient", "yourKey", "username", "pwd");
                       settings.PageSize = 50;
             </code>
             </example>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.RequestSettings.AutoPaging">
             <summary>
             AutoPaging specifies if a feed iterator should return to the server to fetch more data
             automatically. If set to false, a loop over feed.Entries will stop when the currently
             fetched set of data reaches it's end.  This is false by default. <seealso cref="P:EnterpriseDT.Google.GData.Client.RequestSettings.Maximum"/>
            
             </summary>
              <example>
                     The following code illustrates a possible use of
                      the <c>AutoPaging</c> property:
                      <code>
                       YouTubeRequestSettings settings = new YouTubeRequestSettings("yourApp", "yourClient", "yourKey", "username", "pwd");
                        settings.AutoPaging = true;
              </code>
              </example>
             <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.RequestSettings.Maximum">
            <summary>
            the Maximum specifies how many entries should be retrieved in total. This works together with
            <seealso cref="P:EnterpriseDT.Google.GData.Client.RequestSettings.AutoPaging"/>. If set, AutoPaging of a feed will stop when the
            specified amount of entries was iterated over. If Maximum is smaller than  PageSize (<seealso cref="P:EnterpriseDT.Google.GData.Client.RequestSettings.PageSize"/>),
             an exception is thrown. The default is -1 (ignored).
            </summary>
             <example>
                    The following code illustrates a possible use of
                     the <c>Maximum</c> property:
                     <code>
                      YouTubeRequestSettings settings = new YouTubeRequestSettings("yourApp", "yourClient", "yourKey", "username", "pwd");
                       settings.PageSize = 50;
                       settings.AutoPaging = true;
                       settings.Maximum = 2000;
             </code>
             </example>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.RequestSettings.Timeout">
            <summary>gets and sets the Timeout property used for the created
            HTTPRequestObject in milliseconds. if you set it to -1 it will stick
            with the default of the HTTPRequestObject. From MSDN:
            The number of milliseconds to wait before the request times out.
            The default is 100,000 milliseconds (100 seconds).</summary>
             <example>
                    The following code illustrates a possible use of
                     the <c>Timeout</c> property:
                     <code>
                      YouTubeRequestSettings settings = new YouTubeRequestSettings("yourApp", "yourClient", "yourKey", "username", "pwd");
                       settings.Timout = 10000000;
             </code>
             </example>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.RequestSettings.UseSSL">
            <summary>gets and sets the SSL property used for the created
            HTTPRequestObject. If true, all requests will use https
            The default is false.</summary>
             <example>
                    The following code illustrates a possible use of
                     the <c>Timeout</c> property:
                     <code>
                      YouTubeRequestSettings settings = new YouTubeRequestSettings("yourApp", "yourClient", "yourKey", "username", "pwd");
                       settings.UseSSL = true;
             </code>
             </example>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.RequestSettings.ClientLoginHandler">
            <summary>ClientLoginHandler - this is the URI that is used to
            retrieve a client login authentication token
            </summary>
            <returns> </returns>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.FeedRequestType">
            <summary>
            the enum used for Get of T requests
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.FeedRequestType.Next">
            <summary>
            returns the next feed chunk if there is more data
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.FeedRequestType.Prev">
            <summary>
            returns the previous feed chunk if there is data before
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.FeedRequestType.Refresh">
            <summary>
            refreshes the actual feed chunk by going to the server and retrieving it again
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.FeedRequest`1">
            <summary>
            base class for Request objects.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.FeedRequest`1.#ctor(EnterpriseDT.Google.GData.Client.RequestSettings)">
            <summary>
            default constructor based on a RequestSettings object
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.FeedRequest`1.PrepareService">
            <summary>
            prepares the created service based on the settings
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.FeedRequest`1.PrepareService(EnterpriseDT.Google.GData.Client.Service)">
            <summary>
            prepares the passed in service by setting the authentication credentials and the timeout settings
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.FeedRequest`1.PrepareQuery``1(System.String)">
            <summary>
            creates a query object and sets it up based on the settings object.
            </summary>
            <typeparam name="Y"></typeparam>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.FeedRequest`1.PrepareQuery(EnterpriseDT.Google.GData.Client.FeedQuery)">
            <summary>
            prepares the passed in query objects properties based on the settings
            </summary>
            <param name="q"></param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.FeedRequest`1.CreateUri(System.String)">
            <summary>
            should be used in subclasses to create URIs from strings, so that the OAuth parameters can be
            attached
            </summary>
            <param name="location"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.FeedRequest`1.PrepareFeed``1(EnterpriseDT.Google.GData.Client.FeedQuery)">
            <summary>
            creates a feed of Y object based on the query and the settings
            </summary>
            <typeparam name="Y"></typeparam>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.FeedRequest`1.CreateFeed``1(EnterpriseDT.Google.GData.Client.FeedQuery)">
            <summary>
            the virtual creator function for feeds, so that we can create feedsubclasses in
            in subclasses of the request
            </summary>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.FeedRequest`1.Get``1(EnterpriseDT.Google.GData.Client.FeedQuery)">
            <summary>
            gets a feed object of type T
            </summary>
            <typeparam name="Y"></typeparam>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.FeedRequest`1.Get``1(System.Uri)">
            <summary>
            gets a feed object of type T
            </summary>
            <typeparam name="Y"></typeparam>
            <param name="uri">The Uri to retrieve</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.FeedRequest`1.OnSetOtherProxies(System.Net.IWebProxy)">
            <summary>
            called to set additional proxies if required. Overloaded on the document service
            </summary>
            <param name="proxy"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.FeedRequest`1.Get``1(EnterpriseDT.Google.GData.Client.Feed{``0},EnterpriseDT.Google.GData.Client.FeedRequestType)">
            <summary>
            returns a new feed based on the operation passed in.  This is useful if you either do not use
            autopaging, or want to move to previous parts of the feed, or get a refresh of the current feed
            </summary>
             <example>
                    The following code illustrates a possible use of
                     the <c>Get</c> method:
                     <code>
                      YouTubeRequestSettings settings = new YouTubeRequestSettings("yourApp", "yourClient", "yourKey", "username", "pwd");
                       YouTubeRequest f = new YouTubeRequest(settings);
                        Feed&lt;Playlist&gt; feed = f.GetPlaylistsFeed(null);
                        Feed&lt;Playlist&gt; next = f.Get&lt;Playlist&gt;(feed, FeedRequestType.Next);
             </code>
             </example>
            <param name="feed">the original feed</param>
            <param name="operation">an requesttype to indicate what to retrieve</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.FeedRequest`1.Parse``1(System.IO.Stream,System.Uri)">
            <summary>
            takes an existing stream and creates Feed of entries out of it
            </summary>
            <typeparam name="Y"></typeparam>
            <param name="inputStream"></param>
            <param name="targetUri"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.FeedRequest`1.ParseEntry``1(System.IO.Stream,System.Uri)">
            <summary>
            takes an existing stream and creates just one entry (the first in the stream)
            </summary>
            <typeparam name="Y"></typeparam>
            <param name="inputStream"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.FeedRequest`1.Batch``1(System.Collections.Generic.List{``0},EnterpriseDT.Google.GData.Client.Feed{``0})">
            <summary>
            performs a batch operation.
            </summary>
            <param name="feed">the original feed, used to find the batch endpoing </param>
            <param name="entries">List of entries of type Y, that are to be batched</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.FeedRequest`1.Batch``1(System.Collections.Generic.List{``0},EnterpriseDT.Google.GData.Client.Feed{``0},EnterpriseDT.Google.GData.Client.GDataBatchOperationType)">
            <summary>
            performs a batch operation.
            </summary>
            <param name="feed">the original feed, used to find the batch endpoing </param>
            <param name="entries">List of entries of type Y, that are to be batched</param>
            <param name="defaultOperation">indicates the default batch operationtype</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.FeedRequest`1.Batch``1(System.Collections.Generic.List{``0},System.Uri,EnterpriseDT.Google.GData.Client.GDataBatchOperationType)">
            <summary>
            performs a batch operation.
            </summary>
            <param name="batchUri">the batch endpoint of the service</param>
            <param name="entries">List of entries of type Y, that are to be batched</param>
            <param name="defaultOperation">The default operation to be used for all entries</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.FeedRequest`1.Retrieve``1(``0)">
            <summary>
            returns a refreshed version of the entry you passed in, by going back to the server and
            requesting this resource again
            </summary>
             <example>
                    The following code illustrates a possible use of
                     the <c>Get</c> method:
                     <code>
                      YouTubeRequestSettings settings = new YouTubeRequestSettings("yourApp", "yourClient", "yourKey", "username", "pwd");
                       YouTubeRequest f = new YouTubeRequest(settings);
                        Feed&lt;Playlist&gt; feed = f.GetPlaylistsFeed(null);
                        Feed&lt;Playlist&gt; next = f.Get&lt;Playlist&gt;(feed, FeedRequestType.Next);
             </code>
             </example>
            <param name="entry">the entry to get again</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.FeedRequest`1.Retrieve``1(System.Uri)">
            <summary>
            returns the entry the Uri pointed to
            </summary>
            <param name="entryUri">the Uri of the entry</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:EnterpriseDT.Google.GData.Client.FeedRequest`1.Retrieve``1(EnterpriseDT.Google.GData.Client.FeedQuery)" -->
        <member name="M:EnterpriseDT.Google.GData.Client.FeedRequest`1.Update``1(``0)">
            <summary>
             sends the data back to the server.
            </summary>
            <returns>the reflected entry from the server if any given</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.FeedRequest`1.Delete``1(``0)">
            <summary>
             deletes the Entry from the Server
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.FeedRequest`1.Insert``1(System.Uri,``0)">
            <summary>
            takes the given Entry and inserts its into the server
            </summary>
            <returns>the reflected entry from the server if any given</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.FeedRequest`1.Insert``1(EnterpriseDT.Google.GData.Client.Feed{``0},``0)">
            <summary>
            takes the given Entry and inserts it into the server
            </summary>
            <returns>the reflected entry from the server if any given</returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.FeedRequest`1.Proxy">
            <summary>
            sets the proxy on the service to be used.
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.FeedRequest`1.AtomService">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.FeedRequest`1.Service">
            <summary>
            returns the service instance that is used
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.FeedRequest`1.Settings">
            <summary>
            the Settings property returns the RequestSettings object that was used to construct this FeedRequest.
            It can be used to alter properties like AutoPaging etc, inbetween Feed creations.
            </summary>
             <example>
                    The following code illustrates a possible use of
                     the <c>Settings</c> property:
                     <code>
                    YouTubeRequestSettings settings = new YouTubeRequestSettings("NETUnittests", this.ytClient, this.ytDevKey, this.ytUser, this.ytPwd);
                    YouTubeRequest f = new YouTubeRequest(settings);
                    Feed&lt;Video&gt; feed = f.GetStandardFeed(YouTubeQuery.MostPopular);
                    foreach (Video v in feed.Entries)
                    {
                        f.Settings.PageSize = 50;
                        f.Settings.AutoPaging = true;
                        Feed&lt;Comment&gt; list = f.GetComments(v);
                        foreach (Comment c in list.Entries)
                         {
                            Assert.IsTrue(v.AtomEntry != null);
                             Assert.IsTrue(v.Title != null);
                        }
                      }
             </code>
             </example>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPActiveDataSocket">
            <summary>  
            Active data socket handling class
            </summary>
            <author>       
            Bruce Blackshaw
            </author>
            <version>      
            $Revision: 1.15 $
            </version>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPActiveDataSocket.log">
            <summary> Logging object</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPActiveDataSocket.acceptedSock">
            <summary>  
            The socket accepted from server
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPActiveDataSocket.#ctor(EnterpriseDT.Net.BaseSocket)">
            <summary>  
            Constructor
            </summary>
            <param name="sock">   the server socket to use
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPActiveDataSocket.AcceptConnection">
            <summary> 
            Waits for a connection from the server and then sets the timeout
            when the connection is made.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPActiveDataSocket.Close">
            <summary>
            Closes underlying sockets
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPActiveDataSocket.Timeout">
            <summary>   
            Set the TCP timeout on the underlying data socket(s).
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPActiveDataSocket.DataStream">
            <summary>  
            Accepts the FTP server's connection and returns the socket's stream.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpSetStat">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <remarks>
            byte   SSH_FXP_STAT
            uint32 request-id
            string path  [UTF-8]
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpSetStat.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Documents.DocumentslistNametable">
            <summary>
            Name Table for string constants used in the Documents list api
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.DocumentslistNametable.NSDocumentslist">
            <summary>Document list namespace</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.DocumentslistNametable.Prefix">
            <summary>Document list prefix</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.DocumentslistNametable.WritersCanInvite">
            <summary>Writers can invite element</summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Documents.DocumentEntry">
            <summary>
            Entry API customization class for defining entries in an Event feed.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.DocumentEntry.DOCUMENT_CATEGORY">
            <summary>
            a predefined atom category for Documents
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.DocumentEntry.SPREADSHEET_CATEGORY">
            <summary>
            a predefined atom category for Spreadsheets
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.DocumentEntry.PDF_CATEGORY">
            <summary>
            a predefined atom category for PDF
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.DocumentEntry.PRESENTATION_CATEGORY">
            <summary>
            a predefined atom category for starred documentss
            </summary>
            <summary>
            a predefined atom category for Presentations
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.DocumentEntry.DRAWING_CATEGORY">
            <summary>
            a predefined atom category for Drawings
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.DocumentEntry.FOLDER_CATEGORY">
            <summary>
            a predefined atom category for folders
            </summary>        
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.DocumentEntry.FORM_CATEGORY">
            <summary>
            a predefined atom category for forms
            </summary>        
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.DocumentEntry.STARRED_CATEGORY">
            <summary>
            a predefined atom category for starred documents
            </summary>        
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.DocumentEntry.TRASHED_CATEGORY">
            <summary>
            a predefined atom category for trashed documents
            </summary>        
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.DocumentEntry.HIDDEN_CATEGORY">
            <summary>
            a predefined atom category for hidden documents
            </summary>        
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.DocumentEntry.VIEWED_CATEGORY">
            <summary>
            a predefined atom category for VIEWED documents
            </summary>        
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.DocumentEntry.MINE_CATEGORY">
            <summary>
            a predefined atom category for owned by user documents
            </summary>        
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.DocumentEntry.PRIVATE_CATEGORY">
            <summary>
            a predefined atom category for private documents
            </summary>        
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.DocumentEntry.SHARED_CATEGORY">
            <summary>
            a predefined atom category for shared documents
            </summary>        
        </member>
        <member name="M:EnterpriseDT.Google.GData.Documents.DocumentEntry.#ctor">
            <summary>
            Constructs a new EventEntry instance with the appropriate category
            to indicate that it is an event.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Documents.DocumentEntry.AddOtherNamespaces(System.Xml.XmlWriter)">
            <summary>
            add the documentslist NS
            </summary>
            <param name="writer">The XmlWrite, where we want to add default namespaces to</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Documents.DocumentEntry.SkipNode(System.Xml.XmlNode)">
            <summary>
            Checks if this is a namespace declaration that we already added
            </summary>
            <param name="node">XmlNode to check</param>
            <returns>True if this node should be skipped</returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Documents.DocumentEntry.IsDocument">
            <summary>
            Reflects if this entry is a word processor document
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Documents.DocumentEntry.IsSpreadsheet">
            <summary>
            Reflects if this entry is a spreadsheet document
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Documents.DocumentEntry.IsPresentation">
            <summary>
            Reflects if this entry is a presentation document
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Documents.DocumentEntry.IsDrawing">
            <summary>
            Reflects if this entry is a drawing document
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Documents.DocumentEntry.IsForm">
            <summary>
            Reflects if this entry is a form
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Documents.DocumentEntry.IsPDF">
            <summary>
            Reflects if this entry is a PDF document
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Documents.DocumentEntry.IsStarred">
            <summary>
            Reflects if this entry is starred
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Documents.DocumentEntry.IsFolder">
            <summary>
            returns true if this is a folder
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Documents.DocumentEntry.AccessControlList">
            <summary>
            returns the string that should represent the Uri to the access control list
            </summary>
            <returns>the value of the hret attribute for the acl feedlink, or null if not found</returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Documents.DocumentEntry.RevisionDocument">
            <summary>
            returns the string that should represent the Uri to the revision document
            </summary>
            <returns>the value of the hret attribute for the revisons feedlink, or null if not found</returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Documents.DocumentEntry.ParentFolders">
            <summary>
            returns the href value of the parent link releationship
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Documents.DocumentEntry.ResourceId">
            <summary>
            Documents resource Identifier.
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Documents.DocumentEntry.WritersCanInvite">
            <summary>
            Identifies if a collaborator can modify the ACLs of the document
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Documents.DocumentEntry.LastViewed">
            <summary>
            Returns the last viewed timestamp
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Documents.DocumentEntry.LastModified">
            <summary>
            returns the last modififiedBy Element
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Documents.DocumentEntry.QuotaUsed">
            <summary>
            returns the last quotabytesused Element
            </summary>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Documents.WritersCanInvite">
            <summary>
            Determines if a collaborator can modify a documents ACL
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Documents.WritersCanInvite.#ctor">
            <summary>
            default constructor for gd:resourceid 
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Documents.DocumentsFeed">
            <summary>
            Google Documents List feed URI takes the following form:
                http://docs.google.com/feeds/documents/visibility/projection
            The visibility parameter has two possible values: private and public. 
            In almost all cases, your client should use private. 
            The projection parameter indicates what information is included in the representation. 
            For example, if your client specifies a projection of basic, it's requesting an Atom feed
             without any GData extension elements. 
            Currently, in the Documents List feed, only the private/full combination 
            for visibility and projection is available. 
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Documents.DocumentsFeed.#ctor(System.Uri,EnterpriseDT.Google.GData.Client.IService)">
            <summary>
             default constructor
            </summary>
            <param name="uriBase">the base URI of the feedEntry</param>
            <param name="iService">the Service to use</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Documents.DocumentsFeed.CreateFeedEntry">
            <summary>
            this needs to get implemented by subclasses
            </summary>
            <returns>AtomEntry</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Documents.DocumentsFeed.HandleExtensionElements(EnterpriseDT.Google.GData.Client.ExtensionElementEventArgs,EnterpriseDT.Google.GData.Client.AtomFeedParser)">
            <summary>
            get's called after we already handled the custom entry, to handle all 
            other potential parsing tasks
            </summary>
            <param name="e"></param>
            <param name="parser">the atom feed parser used</param>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssl.SSLFTPActiveDataSocket">
            <summary>
            Active data socket handling class
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.ExFTPActiveDataSocket">
            <summary>
            Active data socket handling class
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.OriginalEvent">
            <summary>
            GData schema extension describing the original recurring event.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.OriginalEvent.#ctor">
            <summary>
            default constructor for an original event
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.OriginalEvent.CreateInstance(System.Xml.XmlNode,EnterpriseDT.Google.GData.Client.AtomFeedParser)">
            <summary>Parses an xml node to create a Who object.</summary> 
            <param name="node">the xml parses node, can be NULL</param>
            <param name="parser">the xml parser to use if we need to dive deeper</param>
            <returns>the created IExtensionElement object</returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.OriginalEvent.Href">
            <summary>accessor method public Href</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.OriginalEvent.IdOriginal">
            <summary>accessor method public IdOriginal</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.OriginalEvent.OriginalStartTime">
            <summary>accessor method public original Start Time</summary> 
            <returns> </returns>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.AtomEntryConverter">
            <summary>TypeConverter, so that AtomEntry shows up in the property pages
            </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomEntryConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>Standard type converter method</summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomEntryConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>Standard type converter method</summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SSHAuthPrompt">
            <summary>
            Represents an SSH keyboard-interactive prompt. 
            </summary>
            <remarks>
            The SSH server sends a prompt string which the client must respond to. 
            Instances of this class are supplied to the server so that the prompt is
            automatically answered with the required response
            </remarks>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHAuthPrompt.prompt">
            <summary>
            Prompt string
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHAuthPrompt.response">
            <summary>
            Client response
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHAuthPrompt.#ctor">
            <summary>
            Default constructor.  Sets prompt and response to empty strings.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHAuthPrompt.#ctor(System.String,System.String)">
            <summary>
            Creates a new SSHPrompt object.
            </summary>
            <param name="prompt">prompt string from server, e.g. 'Password:'</param>
            <param name="response">response to this prompt</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHAuthPrompt.ToString">
            <summary>
            Returns a string representation of the prompt.
            </summary>
            <returns>a string representation of the prompt</returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHAuthPrompt.Prompt">
            <summary>
            Get the prompt string
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHAuthPrompt.Response">
            <summary>
            Get the response to the prompt
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SSHPasswordPrompt">
            <summary>
            Utility class that makes it easy to create a prompt that is
            a response to a password prompt.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHPasswordPrompt.PASSWORD_PROMPT">
            <summary>
            Typical password prompt
            </summary>                       
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHPasswordPrompt.#ctor(System.String)">
            <summary>
            Construct a prompt that provides the user's password
            </summary>
            <param name="password">user's password</param>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Http.FileUpload">
             <summary>
             Provides functionality for programmatically uploading files 
             with the HTTP protocol.
             </summary>
             <remarks>
             Code modified from Jouni Heikniemi's file upload code, see
             http://www.heikniemi.net/hc/archives/000205.html
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.FileUpload.UploadFile(System.String,System.Uri,System.String,System.Net.CookieContainer,System.Net.ICredentials)">
            <summary>
            Uploads the given file to the given url.
            </summary>
            <param name="pathname">The pathname of the file to be uploaded.</param>
            <param name="uri">The URI to which the file shall be sent.</param>
            <param name="fieldName">The name of the form field for the upload.</param>
            <param name="cookies">Cookies to be sent with the request.</param>
            <param name="credentials">Login credentials to be passed.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.FileUpload.UploadByteArray(System.Byte[],System.String,System.Uri,System.String,System.Net.CookieContainer,System.Net.ICredentials)">
            <summary>
            Uploads the given byte array to the given url.
            </summary>
            <param name="data">The data to be uploaded.</param>
            <param name="fileName">The name to be sent as the filename.</param>
            <param name="uri">The URI to which the file shall be sent.</param>
            <param name="fieldName">The name of the form field for the upload.</param>
            <param name="cookies">Cookies to be sent with the request.</param>
            <param name="credentials">Login credentials to be passed.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.FileUpload.Upload(System.Uri,System.Net.CookieContainer,System.Net.ICredentials,EnterpriseDT.Net.Ftp.Http.UploadSpec[])">
            <summary>
            Uploads the given data.
            </summary>
            <param name="uri">The URI to which the data shall be sent.</param>
            <param name="cookies">Cookies to be sent with the request.</param>
            <param name="credentials">Login credentials to be passed.</param>
            <param name="objects">The data to be sent.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.FileUpload.Upload(System.Uri,System.Collections.Specialized.StringDictionary,System.Net.CookieContainer,System.Net.ICredentials,EnterpriseDT.Net.Ftp.Http.UploadSpec[])">
            <summary>
            Uploads the given data.
            </summary>
            <param name="uri">The URI to which the data shall be sent.</param>
            <param name="formFields">Form fields to be posted along with the file.</param>
            <param name="cookies">Cookies to be sent with the request.</param>
            <param name="credentials">Login credentials to be passed.</param>
            <param name="objects">The data to be sent.</param>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Http.UploadSpec">
            <summary>
            Holds the information about the file(s) to be uploaded.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.UploadSpec.#ctor(System.Byte[],System.String,System.String)">
            <summary>
            Creates a new upload spec based on a byte array.
            </summary>
            <param name="contents">The contents to be uploaded.</param>
            <param name="fileName">The file to be uploaded.</param>
            <param name="fieldName">The field name as which this file shall be sent to.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.UploadSpec.#ctor(System.String,System.String)">
            <summary>
            Creates a new upload spec based on a file name.
            </summary>
            <param name="pathname"></param>
            <param name="fieldName"></param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.UploadSpec.Contents">
            <summary>
            The byte array content to be uploaded.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.UploadSpec.FileName">
            <summary>
            The name of the file to be uploaded.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.UploadSpec.FieldName">
            <summary>
            The HTML form field the file should be uploaded into.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.DirCommand">
            <summary>  List directory
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.2 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Util.Socks.Socks4Context">
            <summary>
            <c>Socks4Context</c> holds information about making SOCKS4 connections.
            </summary>
            <remarks>
            <para>
            At a minimum the following properties must be set:
            <list type="table">
            <listheader>
            <term>Property</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>ProxyAddress</term>
            <description>Address to be used to connect to the proxy.</description>
            </item>
            <item>
            <term>ProxyPort</term>
            <description>Port to be used to connect to the proxy (defaults to 1080).</description>
            </item>
            <item>
            <term>UserName</term>
            <description>User-name to be used for validation on the proxy.</description>
            </item>
            </list>
            </para>
            <para>
            The following properties should be used in cases where problems establishing
            SOCKS connections are encountered:
            <list type="table">
            <listheader>
            <term>Property</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>PublicProxyAddress</term>
            <description>Address that the proxy server presents to the "outside" network.</description>
            </item>
            <item>
            <term>UseClientNameResolution</term>
            <description>Use SOCKS4A feature of requesting that the proxy should resolve host-names.</description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Util.Socks.Socks4Context.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.Socks.Socks4Context.#ctor(System.String,System.String)">
            <summary>
            Constructs a <c>Socks4Context</c> setting the proxy-address and user-name.
            </summary>
            <param name="proxyAddress">Address to be used to connect to the proxy.</param>
            <param name="userName">User-name to be used for validation on the proxy.</param>
        </member>
        <member name="M:EnterpriseDT.Util.Socks.Socks4Context.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructs a <c>Socks4Context</c> setting the proxy-address, the user-name,
            and the flag controlling the way host-names are resolved.
            </summary>
            <param name="proxyAddress">Address to be used to connect to the proxy.</param>
            <param name="userName">User-name to be used for validation on the proxy.</param>
            <param name="useClientNameResolution">Controls use of SOCKS4A feature of requesting 
            that the proxy should resolve host-names.</param>
        </member>
        <member name="M:EnterpriseDT.Util.Socks.Socks4Context.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Constructs a <c>Socks4Context</c> setting the proxy-address, the proxy-port, 
            and the user-name.
            </summary>
            <param name="proxyAddress">Address to be used to connect to the proxy.</param>
            <param name="proxyPort">Port on the proxy to connect to.</param>
            <param name="userName">User-name to be used for validation on the proxy.</param>
        </member>
        <member name="M:EnterpriseDT.Util.Socks.Socks4Context.#ctor(System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Constructs a <c>Socks4Context</c> setting the proxy-address, the proxy-port, 
            the user-name, and the flag controlling the way host-names are resolved.
            </summary>
            <param name="proxyAddress">Address to be used to connect to the proxy.</param>
            <param name="proxyPort">Port on the proxy to connect to.</param>
            <param name="userName">User-name to be used for validation on the proxy.</param>
            <param name="useClientNameResolution">Controls use of SOCKS4A feature of requesting 
            that the proxy should resolve host-names.</param>
        </member>
        <member name="M:EnterpriseDT.Util.Socks.Socks4Context.#ctor(System.Net.IPAddress,System.String,System.Boolean)">
            <summary>
            Constructs a <c>Socks4Context</c> setting the proxy-address, the user-name,
            and the flag controlling the way host-names are resolved.
            </summary>
            <param name="proxyAddress">Address to be used to connect to the proxy.</param>
            <param name="userName">User-name to be used for validation on the proxy.</param>
            <param name="useClientNameResolution">Controls use of SOCKS4A feature of requesting 
            that the proxy should resolve host-names.</param>
        </member>
        <member name="M:EnterpriseDT.Util.Socks.Socks4Context.#ctor(System.Net.IPAddress,System.Int32,System.String,System.Boolean)">
            <summary>
            Constructs a <c>Socks4Context</c> setting the proxy-address, the proxy-port, 
            the user-name, and the flag controlling the way host-names are resolved..
            </summary>
            <param name="proxyAddress">Address to be used to connect to the proxy.</param>
            <param name="proxyPort">Port on the proxy to connect to.</param>
            <param name="userName">User-name to be used for validation on the proxy.</param>
            <param name="useClientNameResolution">Controls use of SOCKS4A feature of requesting 
            that the proxy should resolve host-names.</param>
        </member>
        <member name="M:EnterpriseDT.Util.Socks.Socks4Context.ToString">
            <summary>
            Returns a string representation of this object.
            </summary>
            <returns>Returns a string representation of this object</returns>
        </member>
        <member name="P:EnterpriseDT.Util.Socks.Socks4Context.UserName">
            <summary>
            User-name to be used for validation on the proxy.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Util.Socks.Socks4Context.UseClientNameResolution">
            <summary>
            Use SOCKS4A feature of requesting that the proxy should resolve host-names.
            </summary>
            <remarks>
            The SOCKS4 protocol requires host-names to be resolved on the client-side.
            In some cases this is not feasible, so SOCKS4A introduced an extension which
            allowed name-resolution to be performed on the proxy instead.  If this flag
            is set then the SOCKS4A extension will be employed thus preventing the 
            attempt to resolve host-names on the client.  The default is <c>false</c>.
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Forms.FTPCommandView">
            <summary>
            <c>FTPCommandView</c> displays all FTP commands and their replies in real-time.
            </summary>
            <remarks>
            <para>Commands are prefixed with the value of <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPCommandView.CommandPrefix"/> and
            replies are prefixed with <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPCommandView.ReplyPrefix"/>.</para>
            <para>A context-menu is displayed if the user right-clicks on the control.  The context menu
            has options for clearing all messages; selecting all messages; clearing the current selection;
            copying messages to the clipboard; and freezing the display.  Freezing the display means
            that no new messages are displayed.</para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPCommandView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EnterpriseDT.Net.Ftp.Forms.FTPCommandView"/> class. 
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPCommandView.Connection">
            <summary>
            The <see cref="T:EnterpriseDT.Net.Ftp.ExFTPConnection"/> or <see cref="T:EnterpriseDT.Net.Ftp.SecureFTPConnection"/> that is
            currently being edited.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPCommandView.CommandPrefix">
            <summary>
            String that precedes command messages.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPCommandView.ReplyPrefix">
            <summary>
            String that precedes reply messages.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPCommandView.MaxLineLength">
            <summary>
            Maximum length of lines (-1 means no maximum).
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.PortRange">
            <summary>
            Specifies a TCP port range defining the lower and upper limits for
            data-channels.
            </summary>
            <remarks>
            The default is to let the operating system select
            the port number within the range 1024-5000.  If the range is set to
            anything other than the default then ports will be selected sequentially,
            increasing by one until the higher limit is reached and then wrapping around
            to the lower limit.
            </remarks>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.PortRange.LOW_PORT">
            <summary>
            Lowest port number permitted.  This is also the default value for 
            <see cref="P:EnterpriseDT.Net.Ftp.PortRange.LowPort"/>.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.PortRange.DEFAULT_HIGH_PORT">
            <summary>
            Default value for <see cref="P:EnterpriseDT.Net.Ftp.PortRange.HighPort"/>.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.PortRange.HIGH_PORT">
            <summary>
            Highest port number permitted.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.PortRange.propertyChangeHandler">
            <summary>
            Used to notify of changed properties.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.PortRange.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.PortRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor setting the lower and higher limits of the range.
            </summary>
            <param name="low">Lower limit of the port-range.</param>
            <param name="high">Higher limit of the port-range.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.PortRange.ValidateRange">
            <summary>
            Validate the port range, and throw an exception if incorrect.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.PortRange.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>. 
            </summary>
            <returns>A String that represents the current Object. </returns>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.PortRange.low">
            <summary>
            Low port number in range
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.PortRange.high">
            <summary>
            High port number in range
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.PortRange.LowPort">
            <summary>
            Lowest port number in range.
            </summary>
            <remarks>
            The default value is 1024.  If it is left at this value and <see cref="P:EnterpriseDT.Net.Ftp.PortRange.HighPort"/>
            is left at 5000 then the OS will select the port.  If it is set to
            anything other than 1024 then ports will be selected sequentially,
            increasing by one until the higher limit is reached and then wrapping around
            to the lower limit.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.PortRange.HighPort">
            <summary>
            Highest port number in range.
            </summary>
            <remarks>
            The default value is 5000.  If it is left at this value and <see cref="P:EnterpriseDT.Net.Ftp.PortRange.LowPort"/>
            is left at 1024 then the OS will select the port.  If it is set to
            anything other than 5000 then ports will be selected sequentially,
            increasing by one until the higher limit is reached and then wrapping around
            to the lower limit.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.PortRange.UseOSAssignment">
            <summary>
            Determines if the operating system should select the ports within the range 1024-5000.
            </summary>
            <remarks>
            If <c>UseOSAssignment</c> is set to <c>true</c> then the OS will select data-channel
            ports within the range 1024-5000.  Otherwise ports will be selected sequentially,
            increasing by one until the higher limit is reached and then wrapping around
            to the lower limit.  Setting this flag will cause <see cref="P:EnterpriseDT.Net.Ftp.PortRange.LowPort"/> and
            <see cref="P:EnterpriseDT.Net.Ftp.PortRange.HighPort"/> to be set to 1024 and 5000, respectively.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.PortRange.PropertyChangeHandler">
            <summary>
            Called when a property is changed.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPConnectMode">
            <summary>
            Enumerates the connect modes that are possible, active and passive.
            </summary>
            <remarks>
            The mode describes the behaviour of the server. In active mode, the server
            actively connects to the client to establish a data connection. In passive mode
            the client connects to the server.
            </remarks>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnectMode.ACTIVE">
            <summary>   
            Represents active - PORT - connect mode. The server connects to the client
            for data transfers.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnectMode.PASV">
            <summary>   
            Represents passive - PASV - connect mode. The client connects to the server 
            for data transfers.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.AtomBaseLinkConverter">
            <summary>TypeConverter, so that AtomBaseLink shows up in the property pages
            </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomBaseLinkConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>Standard type converter method</summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomBaseLinkConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
             <summary>standard ConvertTo typeconverter code</summary> 
            <summary>Standard type converter method</summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.FeedParserEventArgs">
            <summary>Parsing event class...
            </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.FeedParserEventArgs.#ctor">
            <summary>constructor for the feedParser events - this one is only used
            to ask for a new entry</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.FeedParserEventArgs.#ctor(EnterpriseDT.Google.GData.Client.AtomFeed,EnterpriseDT.Google.GData.Client.AtomEntry)">
            <summary>constructor for the feedParser events</summary> 
            <param name="feed">the feed to use </param>
            <param name="entry">the feedentry to use </param> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.FeedParserEventArgs.DiscardEntry">
            <summary>the eventhandler can set this to discard the entry</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.FeedParserEventArgs.DoneParsing">
            <summary>Read only accessor for done</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.FeedParserEventArgs.CreatingEntry">
            <summary>Read only accessor for creating an entry</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.FeedParserEventArgs.Entry">
            <summary>the newly created entry obect</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.FeedParserEventArgs.Feed">
            <summary>accessor method public Feed Feed</summary> 
            <returns> </returns>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.ExtensionElementEventArgs">
            <summary>extension element event class
            </summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.ExtensionElementEventArgs.DiscardEntry">
            <summary>the eventhandler can set this to discard the entry</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.ExtensionElementEventArgs.ExtensionElement">
            <summary>accessor method public XmlNode ExtensionElement</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.ExtensionElementEventArgs.Base">
            <summary>accessor method public AtomBase Base</summary> 
            <returns> </returns>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.FeedParserEventHandler">
            <summary>Delegate declaration for the parsing eventhandler</summary> 
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.ExtensionElementEventHandler">
            <summary>Delegate declaration for the extension eventhandler</summary> 
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Ssl.RequestEventArgs">
            <summary>
            Provides data for the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.CertRequestEventHandler"/> event.
            </summary>
            <remarks>
            This class is used when a CertRequestEventHandler delegate is called. Application code can set a <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.RequestEventArgs.Certificate"/> instance that will then be subseuently used by the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/> to send to the peer.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.RequestEventArgs.#ctor">
            <summary>
            Initializes a new <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.RequestEventArgs"/> instance.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.RequestEventArgs.#ctor(EnterpriseDT.Mentalis.Security.Certificates.Certificate)">
            <summary>
            Initializes a new <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.RequestEventArgs"/> instance.
            </summary>
            <param name="cert">A <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.RequestEventArgs.Certificate"/> instance.</param>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.RequestEventArgs.m_Certificate">
            <summary>
            Holds the Certificate instance.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.RequestEventArgs.Certificate">
            <summary>
            Gets or sets the <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.RequestEventArgs.Certificate"/> that should be sent to the remote host.
            </summary>
            <value>A Certificate instance.</value>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.AuthenticationException">
            <summary>standard exception class to be used when authentication 
            using Google Client Login fails
            </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AuthenticationException.#ctor">
            <summary>default constructor so that FxCop does not complain</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AuthenticationException.#ctor(System.String)">
            <summary>
            base constructor, takes a message text
            </summary> 
            <param name="msg"></param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AuthenticationException.#ctor(System.String,System.Exception)">
            <summary>
            default constructor
            </summary>
            <param name="msg">message for exception</param>
            <param name="e">inner exception</param>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.InvalidCredentialsException">
            <summary>thrown when the credentials are wrong</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.InvalidCredentialsException.#ctor">
            <summary>default constructor so that FxCop does not complain</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.InvalidCredentialsException.#ctor(System.String)">
            <summary>constructor taking a descriptive string</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.InvalidCredentialsException.#ctor(System.String,System.Exception)">
            <summary>
            default constructor
            </summary>
            <param name="msg">message for exception</param>
            <param name="e">inner exception</param>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.AccountDeletedException">
            <summary>thrown when the account was deleted
            </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AccountDeletedException.#ctor">
            <summary>default constructor so that FxCop does not complain</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AccountDeletedException.#ctor(System.String)">
            <summary>constructor taking a descriptive string</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AccountDeletedException.#ctor(System.String,System.Exception)">
            <summary>
            default constructor
            </summary>
            <param name="msg">message for exception</param>
            <param name="e">inner exception</param>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.AccountDisabledException">
            <summary>thrown when the account was disabled
            </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AccountDisabledException.#ctor">
            <summary>default constructor so that FxCop does not complain</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AccountDisabledException.#ctor(System.String)">
            <summary>constructor taking a descriptive string</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AccountDisabledException.#ctor(System.String,System.Exception)">
            <summary>
            default constructor
            </summary>
            <param name="msg">message for exception</param>
            <param name="e">inner exception</param>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.NotVerifiedException">
            <summary>the account hoder was not verified
            </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.NotVerifiedException.#ctor">
            <summary>default constructor so that FxCop does not complain</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.NotVerifiedException.#ctor(System.String)">
            <summary>constructor taking a descriptive string</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.NotVerifiedException.#ctor(System.String,System.Exception)">
            <summary>
            default constructor
            </summary>
            <param name="msg">message for exception</param>
            <param name="e">inner exception</param>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.TermsNotAgreedException">
            <summary>The Terms were not agreed with..
            </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.TermsNotAgreedException.#ctor">
            <summary>default constructor so that FxCop does not complain</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.TermsNotAgreedException.#ctor(System.String)">
            <summary>constructor taking a descriptive string</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.TermsNotAgreedException.#ctor(System.String,System.Exception)">
            <summary>
            default constructor
            </summary>
            <param name="msg">message for exception</param>
            <param name="e">inner exception</param>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.ServiceUnavailableException">
            <summary>The service is current not available
            </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.ServiceUnavailableException.#ctor">
            <summary>default constructor so that FxCop does not complain</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.ServiceUnavailableException.#ctor(System.String)">
            <summary>constructor taking a descriptive string</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.ServiceUnavailableException.#ctor(System.String,System.Exception)">
            <summary>
            default constructor
            </summary>
            <param name="msg">message for exception</param>
            <param name="e">inner exception</param>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.CaptchaRequiredException">
            <summary>many unsuccessfull logins might create this...
            </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.CaptchaRequiredException.#ctor">
            <summary>default constructor so that FxCop does not complain</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.CaptchaRequiredException.#ctor(System.String,System.String,System.String)">
            <summary>constructor taking a descriptive string</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.CaptchaRequiredException.#ctor(System.String,System.Exception)">
            <summary>
            default constructor
            </summary>
            <param name="msg">message for exception</param>
            <param name="e">inner exception</param>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.CaptchaRequiredException.Url">
            <summary>Read only accessor for captchaUrl</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.CaptchaRequiredException.Token">
            <summary>Read only accessor for captchaToken</summary> 
        </member>
        <member name="T:EnterpriseDT.Util.Debug.RollingFileAppender">
            <summary>  
            Rolling file appender that moves the log file to
            a backup file once it exceeds a certain size.
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.5 $
            </version>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.RollingFileAppender.maxFileSize">
            <summary> Destination</summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.RollingFileAppender.thresholdBytesWritten">
            <summary>
            record of bytes written in this check cycle
            </summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.RollingFileAppender.maxSizeRollBackups">
            <summary>
            Maximum number of backup files
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.RollingFileAppender.#ctor(System.String,System.Int64,System.Int32)">
            <summary>Constructor</summary>
            <param name="fileName">name of file to log to</param>
            <param name="maxFileSize">maximum size of log file in bytes</param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.RollingFileAppender.#ctor(System.String,System.Int64)">
            <summary>Constructor</summary>
            <param name="fileName">name of file to log to</param>
            <param name="maxFileSize">maximum size of log file in bytes</param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.RollingFileAppender.#ctor(System.String)">
             <summary>Constructor</summary>
             <param name="fileName">name of file to log to</param>
             <remarks>
             Default maximum size of logfile is 10MB
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.RollingFileAppender.CheckForRollover">
            <summary>
            Check if files should be rolled over
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.RollingFileAppender.CheckSizeForRollover">
            <summary>
            Check if the file's size means it should be rolled over
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.RollingFileAppender.Rollover">
            <summary>
            Rollover the log files
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.RollingFileAppender.Log(System.String)">
            <summary> 
            Log a message
            </summary>
            <param name="msg"> message to log
            </param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.RollingFileAppender.Log(System.Exception)">
            <summary> 
            Log a stack trace
            </summary>
            <param name="t"> throwable object
            </param>
        </member>
        <member name="P:EnterpriseDT.Util.Debug.RollingFileAppender.MaxSizeRollBackups">
            <summary>
            Set the maximum number of backup files to retain. If this is set to
            zero, the log file will be truncated when it reaches the MaxSize. Backup
            files are called FileName.1, FileName.2 etc. This value can't be negative.
            The default is 1 backup file.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Util.Debug.RollingFileAppender.MaxFileSize">
            <summary>
            Maximum size of log file in bytes
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Http.HttpMethod">
            <summary>
            The HTTP method to use. This is so POST or GET can be used to 
            send parameters when the request is created.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpMethod.GET">
            <summary>
            Use HTTP GET. Any parameters are appended to the URL
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpMethod.POST">
            <summary>
            Use HTTP POST. Parameters are posted.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Http.ParseHtmlLinkHandler">
            <summary>
            Delegate used for ParseHtmlLink event
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Http.ParseHtmlLinkEventArgs">
            <summary>
            Event args for ParseHtmlLink
            </summary>    
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.ParseHtmlLinkEventArgs.#ctor(EnterpriseDT.Net.Ftp.FTPFile,System.String,System.String)">
            <summary>
            Event args for 
            </summary>
            <param name="ftpFile"></param>
            <param name="href"></param>
            <param name="text"></param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.ParseHtmlLinkEventArgs.FTPFile">
            <summary>
            Gets the FTPFile object which has been constructed from the HTML link, which
            can be modified using the supplied href and text.
            </summary>   
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.ParseHtmlLinkEventArgs.Href">
            <summary>
            Gets the href link
            </summary>   
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.ParseHtmlLinkEventArgs.Text">
            <summary>
            Gets the href text 
            </summary>   
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPFileFactory">
            <summary>  
            Factory for creating FTPFile objects
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.25 $
            </version>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFileFactory.WINDOWS_STR">
            <summary> Windows server comparison string</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFileFactory.UNIX_STR">
            <summary> UNIX server comparison string</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFileFactory.AIX_STR">
            <summary> UNIX server comparison string</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFileFactory.VMS_STR">
            <summary> VMS server comparison string</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFileFactory.OS400_STR">
            <summary> OS/400 server comparison string</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFileFactory.log">
            <summary> Logging object</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFileFactory.system">
            <summary> SYST string</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFileFactory.windows">
            <summary> Cached windows parser</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFileFactory.unix">
            <summary> Cached unix parser</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFileFactory.vms">
            <summary> Cached unix parser</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFileFactory.os400">
            <summary> Cached OS400 parser</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFileFactory.parser">
            <summary> Does the parsing work</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFileFactory.parsers">
            <summary>
            List of the parsers
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFileFactory.userSetParser">
            <summary>
            Did the user set the parser?
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFileFactory.parserDetected">
            <summary>
            Has the parser been detected?
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFileFactory.parserCulture">
            <summary>Culture used for parsing file details</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFileFactory.timeDiff">
            <summary>Time difference between server and client (relative to client).</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPFileFactory.#ctor(System.String)">
            <summary> 
            Constructor
            </summary>
            <param name="system">   SYST string
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPFileFactory.#ctor(EnterpriseDT.Net.Ftp.FTPFileParser)">
            <summary> Constructor. User supplied parser. Note that parser
            detection is disabled if a parser is explicitly supplied
            </summary>
            <param name="parser">  the parser to use
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPFileFactory.#ctor">
            <summary> Default constructor. No parsers are set.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPFileFactory.AddParser(EnterpriseDT.Net.Ftp.FTPFileParser)">
            <summary>
            Rather than forcing a parser (as in the constructor that accepts
            a parser), this adds a parser to the list of those used.
            </summary>
            <param name="parser">parser to add to list being used</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPFileFactory.SetParser(System.String)">
            <summary> 
            Set the remote server type
            </summary>
            <param name="system">SYST string</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPFileFactory.DetectParser(System.String[])">
            <summary>
            Detect the parser format to use
            </summary>
            <param name="files"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPFileFactory.Parse(System.String[])">
            <summary>
            Parse an array of raw file information returned from the
            FTP server
            </summary>
            <param name="fileStrings">    array of strings
            </param>
            <returns> array of FTPFile objects
            </returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPFileFactory.GetSystem">
            <summary> 
            Get the SYST string
            </summary>
            <returns> the system string.
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileFactory.ParsingCulture">
            <summary>
            Get/set the culture info for parsing
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileFactory.ParserSetExplicitly">
            <summary>
            Was the parser set explicitly, or was it worked out
            via the SYST command>
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileFactory.FileParser">
            <summary>
            Get or set the file parser to be used. If it is
            set explicitly, it is never rotated.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileFactory.VMSParser">
            <summary>
            Get the instance of the VMS parser
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileFactory.TimeDifference">
            <summary>
            [FTP/FTPS Only] Time difference between server and client (relative to client).
            </summary>
            <remarks>
            The time-difference is relative to the server such that, for example, if the server is
            in New York and the client is in London then the difference would be -5 hours 
            (ignoring daylight savings differences).  This property only applies to FTP and FTPS.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileFactory.TimeIncludesSeconds">
            <summary>
            Get flag indicating whether or not the most recent parse returned seconds.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileFactory.System">
            <summary>
            Get or set the system string (typically the string
            returned from the SYST command).
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Cryptography.RC4UnmanagedTransform">
            <summary>
            Represents an ARCFour managed ICryptoTransform.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RC4UnmanagedTransform.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.RC4UnmanagedTransform"/> class.
            </summary>
            <param name="key">The key used to initialize the RC4 state.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RC4UnmanagedTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Transforms the specified region of the input byte array and copies the resulting transform to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write the transform.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>The number of bytes written.</returns>
            <exception cref="T:System.ObjectDisposedException">The object has been disposed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="inputBuffer"/> or <paramref name="outputBuffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="inputOffset"/>, <paramref name="inputCount"/> or <paramref name="outputOffset"/> is invalid.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RC4UnmanagedTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Transforms the specified region of the specified byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the byte array to use as data.</param>
            <returns>The computed transform.</returns>
            <exception cref="T:System.ObjectDisposedException">The object has been disposed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="inputBuffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="inputOffset"/> or <paramref name="inputCount"/> is invalid.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RC4UnmanagedTransform.Dispose">
            <summary>
            Disposes of the cryptographic parameters.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RC4UnmanagedTransform.Finalize">
            <summary>
            Finalizes the object.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.RC4UnmanagedTransform.m_Key">
            <summary>
            Holds the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey"/> used for the cryptographic transformations.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RC4UnmanagedTransform.CanReuseTransform">
            <summary>
            Gets a value indicating whether the current transform can be reused.
            </summary>
            <value>This property returns <b>true</b>.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RC4UnmanagedTransform.CanTransformMultipleBlocks">
            <summary>
            Gets a value indicating whether multiple blocks can be transformed.
            </summary>
            <value>This property returns <b>true</b>.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RC4UnmanagedTransform.InputBlockSize">
            <summary>
            Gets the input block size.
            </summary>
            <value>This property returns 1.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RC4UnmanagedTransform.OutputBlockSize">
            <summary>
            Gets the output block size.
            </summary>
            <value>This property returns 1.</value>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Forms.FTPLocalFileList">
            <summary>
            Displays a list of local files and directories available for upload via FTP.
            </summary>
            <remarks>
            <para>
            <c>FTPLocalFileList</c> is analogous to a <see cref="T:System.Windows.Forms.ListView"/>, and displays 
            a list of local files and directories available for upload via FTP.
            </para>
            <para>
            When an instance of <c>FTPLocalFileList</c> is placed on a Windows form, it will 
            automatically detect an instance of <see cref="T:EnterpriseDT.Net.Ftp.ExFTPConnection"/> or 
            <see cref="T:EnterpriseDT.Net.Ftp.SecureFTPConnection"/>. 
            </para>
            <para>
            If the connection has been established to the FTP server, a listing of the 
            current local working directory will be displayed. Clicking on a filename 
            displayed in the list will cause the file to be uploaded 
            to the current remote working directory of the connection
            </para>
            <para>
            <c>FTPLocalFileList</c> also supports drag and drop in conjunction with 
            <see cref="T:EnterpriseDT.Net.Ftp.Forms.FTPRemoteFileList"/>. If files are dragged from an instance of 
            <c>FTPLocalFileList</c> and dropped on an instance of <c>FTPRemoteFileList</c>, 
            they will be downloaded to the current local directory, and the file list refreshed.
            </para>
            <para>
            Renaming of local files is also supported by the standard single click mechanism, 
            and local files can be deleted via the delete key. A warning prompt is displayed 
            before the deletion occurs. Upload, rename and delete are also available as 
            right mouse click menu items.
            </para>
            </remarks>    
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPLocalFileList.#ctor">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPLocalFileList.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPLocalFileList.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPLocalFileList.RefreshFileList">
            <summary>
            Refresh the file listing for the current local working directory.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPLocalFileList.BackColor">
            <summary>
            Gets or sets the background color for the control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPLocalFileList.AllowDownload">
            <summary>
            Indicates whether or not downloading of files is permitted.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPLocalFileList.ReadOnly">
            <summary>
            Get or set the property that controls whether files can be renamed, 
            deleted or downloaded.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPLocalFileList.LocalDirectory">
            <summary>
            This is used only when the connection is not set.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPLocalFileList.Connection">
            <summary>
            Get or set the FTP connection object associated with this file list.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPLocalFileList.LocalWorkingDirectory">
            <summary>
            Get or set the local working directory for this file listing.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPLocalFileList.DirectoryPanel">
            <summary>
            Get the panel in which directory information is displayed.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPLocalFileList.DirectoryLabel">
            <summary>
            Get the label of the directory panel.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPLocalFileList.DirectoryTextBox">
            <summary>
            Get the textbox showing the directory.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPLocalFileList.DirectoryButton">
            <summary>
            Get the directory browse button.
            </summary>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Forms.FTPLocalFileList.DirectoryChanged">
            <summary>Occurs when the directory shown in the list has been changed.</summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Forms.FTPLocalFileList.DragDrop">
            <summary>
            Occurs when a drag-and-drop operation is completed.
            </summary>
            <remarks>
            This event may be used to replace the default DragDrop behavior.
            If this event is handled then the default DragDrop behavior is not performed.
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Design.ProxySettingsForm">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Design.ProxySettingsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ProxySettingsForm.#ctor">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ProxySettingsForm.#ctor(EnterpriseDT.Util.Socks.SocksContext)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="socksContext"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ProxySettingsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ProxySettingsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Design.ProxySettingsForm.ProxySettings">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.AccessControl.AclNameTable">
            <summary>Google Access Control List namespace</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.AccessControl.AclNameTable.gAclNamespace">
            <summary>default access control namespace</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.AccessControl.AclNameTable.gAclPrefix">
            <summary>default access control prefix</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.AccessControl.AclNameTable.gAclCalPrefix">
            <summary>
            hash prefixed start for AclNamespace strings
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.AccessControl.AclNameTable.gAclAlias">
            <summary>default access control alias</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.AccessControl.AclNameTable.LINK_REL_ACCESS_CONTROL_LIST">
            <summary>Link that provides the URI for the access control list feed 
            </summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.AccessControl.AclNameTable.LINK_REL_CONTROLLED_OBJECT">
            <summary>UIR for the entry that is controlled by the ACL feed
            </summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.AccessControl.AclNameTable.ACL_KIND">
            <summary>access kind</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.AccessControl.AclNameTable.XmlAclScopeElement">
            <summary>the scope element</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.AccessControl.AclNameTable.XmlAclRoleElement">
            <summary>the role element</summary> 
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.ExFTPControlSocket">
            <summary>
            Supports client-side FTP operations.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPControlSocket">
            <summary>Supports client-side FTP operations</summary>
            <author>Bruce Blackshaw</author>
            <version>$Revision: 1.68 $</version>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPControlSocket.EOL">
            <summary>   Standard FTP end of line sequence</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPControlSocket.CARRIAGE_RETURN">
            <summary>
            Used for ASCII translation
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPControlSocket.LINE_FEED">
            <summary>
            Used for ASCII translation
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPControlSocket.MAX_ACTIVE_RETRY">
            <summary>   Maximum number of auto retries in active mode</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPControlSocket.CONTROL_PORT">
            <summary>   The default and standard control port number for FTP</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPControlSocket.DEBUG_ARROW">
            <summary>   Used to flag messages</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPControlSocket.PASSWORD_MESSAGE">
            <summary>   Start of password message</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPControlSocket.log">
            <summary> Logging object</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPControlSocket.synchronizePassiveConnections">
            <summary> Synchronize PASV socket connections if true (false by default)</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPControlSocket.strictReturnCodes">
            <summary> Use strict return codes if true</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPControlSocket.remoteHost">
            <summary>Address of the remote host</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPControlSocket.controlPort">
            <summary>FTP port of the remote host</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPControlSocket.controlSock">
            <summary>  The underlying socket.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPControlSocket.timeout">
            <summary>  
            The timeout for the control socket
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPControlSocket.writer">
            <summary>  The write that writes to the control socket</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPControlSocket.reader">
            <summary>  The reader that reads control data from the
            control socket
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPControlSocket.activePortRange">
            <summary>
            Port range for active mode
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPControlSocket.activeIPAddress">
            <summary>
            IP address to send with PORT command
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPControlSocket.nextPort">
            <summary>
            The next port number to use if activePortRange is set
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPControlSocket.autoPassiveIPSubstitution">
            <summary>
            If true, uses the original host IP if an internal IP address
            is returned by the server in PASV mode.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPControlSocket.logTag">
            <summary>
            Log tag.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPControlSocket.#ctor(System.String,System.Int32,System.Int32,System.Text.Encoding,EnterpriseDT.Util.Debug.ILogTag)">
            <summary>
            Constructor. Performs TCP connection and
            sets up reader/writer. Allows different control
            port to be used
            </summary>
            <param name="remoteHost">      
            Remote inet address
            </param>
            <param name="controlPort">     
            port for control stream
            </param>
            <param name="timeout">          
            the length of the timeout, in milliseconds
            </param>
            <param name="encoding">          
            encoding to use for control channel
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPControlSocket.#ctor(EnterpriseDT.Util.Debug.ILogTag)">
            <summary>   
            Default constructor
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPControlSocket.Initialize(EnterpriseDT.Net.BaseSocket,System.String,System.Int32,System.Int32,System.Text.Encoding)">
            <summary>   
            Performs TCP connection and sets up reader/writer. 
            Allows different control port to be used
            </summary>
            <param name="sock">
             Socket instance
            </param>
            <param name="remoteHost">     
            address of remote host
            </param>
            <param name="controlPort">     
            port for control stream
            </param>
            <param name="timeout">    
            the length of the timeout, in milliseconds      
            </param>
            <param name="encoding">          
            encoding to use for control channel
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPControlSocket.ConnectSocket(EnterpriseDT.Net.BaseSocket,System.String,System.Int32)">
            <summary>   
            Establishes the socket connection
            </summary>
            <param name="socket">
             Socket instance
            </param>
            <param name="address">     
            IP address to connect to
            </param>
            <param name="port">    
            port to connect to     
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPControlSocket.ValidateConnection">
            <summary>   Checks that the standard 220 reply is returned
            following the initiated connection. Allow 230 as well, some proxy
            servers return it.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPControlSocket.InitStreams(System.Text.Encoding)">
            <summary>  Obtain the reader/writer streams for this
            connection
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPControlSocket.SetActivePortRange(EnterpriseDT.Net.Ftp.PortRange)">
            <summary>
            Set the port range to use in active mode
            </summary>
            <param name="portRange">port range to use</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPControlSocket.SetActiveIPAddress(System.Net.IPAddress)">
            <summary>
            Set an IP address to use for PORT commands
            </summary>
            <param name="address">IP address to use for PORT command</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPControlSocket.Logout">
            <summary>  
            Quit this FTP session and clean up.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPControlSocket.CreateDataSocket(EnterpriseDT.Net.Ftp.FTPConnectMode)">
            <summary>  
            Request a data socket be created on the
            server, connect to it and return our
            connected socket.
            </summary>
            <param name="connectMode">  
            The mode to connect in
            </param>
            <returns>  
            connected data socket
            </returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPControlSocket.CreateDataSocketActive">
            <summary>  
            Request a data socket be created on the Client
            client on any free port, do not connect it to yet.
            </summary>
            <returns>  
            not connected data socket
            </returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPControlSocket.SetNextAvailablePortFromRange">
            <summary>
            Increment port number to use to next in range, or else recycle
            from lowPort again, making sure we avoid the current port
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPControlSocket.SetDataPort(System.Net.IPEndPoint)">
            <summary>  
            Sets the data port on the server, i.e. sends a PORT
            command        
            </summary>
            <param name="ep">local endpoint
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPControlSocket.ToByteArray(System.UInt16)">
            <summary>  
            Convert a short into a byte array
            </summary>
            <param name="val">  value to convert
            </param>
            <returns>  a byte array
            
            </returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPControlSocket.CreateDataSocketPASV">
            <summary>  
            Request a data socket be created on the
            server, connect to it and return our
            connected socket.
            </summary>
            <returns>  connected data socket
            </returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPControlSocket.NewPassiveDataSocket(System.String,System.Int32)">
            <summary> Constructs a new <code>FTPDataSocket</code> object (client mode) and connect
            to the given remote host and port number.
            
            </summary>
            <param name="ipAddress">IP Address to connect to.
            </param>
            <param name="port">Remote port to connect to.
            </param>
            <returns> A new <code>FTPDataSocket</code> object (client mode) which is
            connected to the given server.
            </returns>
            <throws>  SystemException Thrown if no TCP/IP connection could be made.  </throws>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPControlSocket.NewActiveDataSocket(System.Int32)">
            <summary> 
            Constructs a new <code>FTPDataSocket</code> object (server mode) which will
            listen on the given port number.
            </summary>
            <param name="port">Remote port to listen on.
            </param>
            <returns> A new <code>FTPDataSocket</code> object (server mode) which is
            configured to listen on the given port.
            </returns>
            <throws>  SystemException Thrown if an error occurred when creating the socket.  </throws>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPControlSocket.SendCommand(System.String)">
            <summary>  Send a command to the FTP server and
            return the server's reply as a structured
            reply object
            </summary>
            <param name="command">  
            command to send
            </param>
            <returns>  reply to the supplied command
            </returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPControlSocket.WriteCommand(System.String)">
            <summary>  Send a command to the FTP server. Don't
            read the reply
            
            </summary>
            <param name="command">  command to send
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPControlSocket.ReadLine">
            <summary>
            Read a line, which means until a \r\n is reached
            </summary>
            <returns>line that is read</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPControlSocket.ReadReply">
            <summary>  Read the FTP server's reply to a previously
            issued command. RFC 959 states that a reply
            consists of the 3 digit code followed by text.
            The 3 digit code is followed by a hyphen if it
            is a muliline response, and the last line starts
            with the same 3 digit code.
            
            </summary>
            <returns>  structured reply object
            </returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPControlSocket.ValidateReply(EnterpriseDT.Net.Ftp.FTPReply,System.String[])">
            <summary>  
            Validate the response the host has supplied against the
            expected reply. If we get an unexpected reply we throw an
            exception, setting the message to that returned by the
            FTP server
            </summary>
            <param name="reply">reply object</param>
            <param name="expectedReplyCodes"> array of expected replies</param>
            <returns>reply object</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPControlSocket.Log(System.String,System.Boolean)">
            <summary>  
            Log a message, checking for passwords
            </summary>
            <param name="msg">
            message to log
            </param>
            <param name="command"> 
            true if a response, false otherwise
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPControlSocket.SetSocketTimeout(EnterpriseDT.Net.BaseSocket,System.Int32)">
            <summary>  
            Helper method to set a socket's timeout value
            </summary>
            <param name="sock">
            socket to set timeout for
            </param>
            <param name="timeout">
            timeout value to set
            </param>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPControlSocket.CommandSent">
            <summary>
            Event for notifying start of a transfer
            </summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPControlSocket.ReplyReceived">
            <summary>
            Event for notifying start of a transfer
            </summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPControlSocket.CommandError">
            <summary>
            Occurs when there is an error while a command was being sent or
            a reply was being received.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPControlSocket.SynchronizePassiveConnections">
            <summary> 
            For cases where your FTP server does not properly manage PASV connections,
            it may be necessary to synchronize the creation of passive data sockets.
            It has been reported that some FTP servers (such as those at Akamai) 
            appear to get confused when multiple FTP clients from the same IP address
            attempt to connect at the same time.  For more details, please read
            the forum post http://www.enterprisedt.com/forums/viewtopic.php?t=2559
            The default value for SynchronizePassiveConnections is false.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPControlSocket.StrictReturnCodes">
            <summary> 
            Get/Set strict checking of FTP return codes. If strict 
            checking is on (the default) code must exactly match the expected 
            code. If strict checking is off, only the first digit must match.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPControlSocket.Timeout">
            <summary>   
            Get/Set the TCP timeout on the underlying control socket.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPControlSocket.Connected">
            <summary>
            True if the control socket was connected at the last operation
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPControlSocket.AutoPassiveIPSubstitution">
            <summary>
            Use <c>AutoPassiveIPSubstitution</c> to ensure that 
            data-socket connections are made to the same IP address
            that the control socket is connected to.
            </summary>
            <remarks>
            <c>AutoPassiveIPSubstitution</c> can be useful when connecting
            to FTP servers that request data connections be connected to an
            IP address other than the one to which the connection was 
            initially made.  This usually happens when an FTP server is behind
            a NAT router and has not been configured to reflect the fact that
            its internal (LAN) IP address is different from the address that
            external (Internet) machines connect to.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPControlSocket.ConnectSocket(EnterpriseDT.Net.BaseSocket,System.String,System.Int32)">
            <summary>   
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPControlSocket.SetDataPort(System.Net.IPEndPoint)">
            <summary>  
            Sets the data port on the server, i.e. sends a PORT
            command        
            </summary>
            <param name="ep">local endpoint
            </param>
        </member>
        <member name="T:EnterpriseDT.Net.Ssh.Routrek.SSHC.SSHConnectionInfo">
            <summary>
            ConnectionInfo describes the attributes of the host or the connection.
            It is available after the connection is established without any errors.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.LicenseCommand">
            <summary>  Print license details
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.6 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Forms.FTPFileListItem">
            <summary>
            Represents an item in an <c>FTPFileList</c> control.
            </summary>
            <remarks>
            The FTPFileListItem class defines the appearance, behavior, and data 
            associated with an item that is displayed in the <c>FTPFileList</c> control.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileListItem.FileInfo">
            <summary>
            The <c>FTPFile</c> object that this instance is providing
            a visual representation of.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileListItem.FileName">
            <summary>
            The file-name of the item.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileListItem.Size">
            <summary>
            The size of the file in bytes.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileListItem.ModifiedTime">
            <summary>
            The last modified time of file.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Forms.FTPColumnHeader">
            <summary>
            Displays a single column header in an <c>FTPFileList</c>. 
            </summary>
            <remarks>
            An FTPColumnHeader is an item in an <c>FTPFileList</c> that contains heading text.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPColumnHeader.CompareFileItems(EnterpriseDT.Net.Ftp.Forms.FTPFileListItem,EnterpriseDT.Net.Ftp.Forms.FTPFileListItem,System.Boolean,System.Boolean)">
            <summary>
            Compares two list items.
            </summary>
            <param name="file1">first item</param>
            <param name="file2">second item</param>
            <param name="ascending">true if compared in ascending order, false otherwise</param>
            <returns>if ascending is true, returns 1 if file1 is greater than file2, 0, 
            if they are equal, and -1 if file1 is less than file2. The opposite if not ascending.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPColumnHeader.ToString">
            <summary>
            Converts the value of this instance to a string.
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPColumnHeader.Visible">
            <summary>
            Get or set the visibility of this column header.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPColumnHeader.Type">
            <summary>
            Get or set the type of this column header.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPColumnHeader.DisplayIndex">
            <summary>
            Get or set the display index for this column header.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Forms.FTPColumnHeader.ColumnType">
            <summary>
            Lists the types of FTPColumnHeaders.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPColumnHeader.ColumnType.Name">
            <summary>
            Represents a column containing a file or directory name.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPColumnHeader.ColumnType.Size">
            <summary>
            Represents a size column.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPColumnHeader.ColumnType.Date">
            <summary>
            Represents a date column.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Forms.FTPDateColumnHeader">
            <summary>
            Displays a single column header in an <c>FTPFileList</c>. 
            </summary>
            <remarks>
            An FTPDateColumnHeader is an item in an <c>FTPFileList</c> that contains heading text for a date column.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPDateColumnHeader.Format">
            <summary>
            Get or set the format specifier for formatting dates.
            </summary>
            <remarks>
            See the custom DateTime format strings for possible values of this property.
            The default is the standard general format specifier, 'g'.
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Forms.FTPFileListSorter">
            <summary>
            Used as a sorting comparer for an FTPColumnHeader column.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileListSorter.#ctor(EnterpriseDT.Net.Ftp.Forms.FTPColumnHeader)">
            <summary>
            Constructor. 
            </summary>
            <param name="column">Column that is to be sorted.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileListSorter.Compare(System.Object,System.Object)">
            <summary>
            Compares two FTPFileListItems and returns a value indicating whether 
            one is less than, equal to or greater than the other.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileListSorter.SortColumn">
            <summary>
            Gets or sets the column to be sorted.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileListSorter.Ascending">
            <summary>
            Gets or sets a value that determines if the sort 
            order is ascending or descending.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileListSorter.DirsPrecedeFiles">
            <summary>
            Gets or sets a value that determines if directories should precede
            files in the sort order.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Spreadsheets.SpreadsheetEntry">
            <summary>
            Entry API customization class for defining entries in a Spreadsheets feed.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Spreadsheets.SpreadsheetEntry.SPREADSHEET_CATEGORY">
            <summary>
            Category used to label entries that contain Cell extension data.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.SpreadsheetEntry.#ctor">
            <summary>
            Constructs a new SpreadsheetEntry instance with the appropriate category
            to indicate that it is a worksheet.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Spreadsheets.SpreadsheetEntry.Worksheets">
            <summary>
            returns a query object for the Worksheets feed for this spreadsheet
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Spreadsheets.SpreadsheetEntry.WorksheetsLink">
            <summary>
            returns a string for the Worksheets feed Uri 
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Forms.FTPConnectionEditor">
            <summary>
            A Windows Forms control which allows the user to edit the properties of an
            <see cref="T:EnterpriseDT.Net.Ftp.ExFTPConnection"/> or <see cref="T:EnterpriseDT.Net.Ftp.SecureFTPConnection"/>.
            </summary>
            <remarks>
            <para><c>FTPConnectionEditor</c> is a <see cref="T:System.Windows.Forms.PropertyGrid"/> that has been
            customized for editing <see cref="T:EnterpriseDT.Net.Ftp.ExFTPConnection"/> and <see cref="T:EnterpriseDT.Net.Ftp.SecureFTPConnection"/> 
            objects.</para>
            <para>The <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPConnectionEditor.Connection"/> property selects the connection object being
            edited.  By default all properties are displayed, but the <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPConnectionEditor.Properties"/> 
            property may be used to hide any of the connection's properties.</para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPConnectionEditor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPConnectionEditor.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPConnectionEditor.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPConnectionEditor.LinkComponent(EnterpriseDT.Net.Ftp.IFTPComponent)">
            <summary>
            Called by the given FTP component when it is added to a container.
            </summary>
            <remarks>
            This method allows FTP components to interlink themselves automatically.
            </remarks>
            <param name="component">FTP component just added to the container.</param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPConnectionEditor.Connection">
            <summary>
            The <see cref="T:EnterpriseDT.Net.Ftp.ExFTPConnection"/> or <see cref="T:EnterpriseDT.Net.Ftp.SecureFTPConnection"/> that is
            currently being edited.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPConnectionEditor.Properties">
            <summary>
            Controls which properties are displayed.
            </summary>
            <remarks>
            <para>By default all properties are displayed.  When specific categories/properties 
            are selected using <see cref="M:EnterpriseDT.Net.Ftp.Forms.FTPConnectionProperties.AddCategory(System.String,System.String,System.Boolean)"/> or
            <see cref="M:EnterpriseDT.Net.Ftp.Forms.FTPConnectionProperties.AddProperty(System.String,System.String,System.String,System.String,System.Boolean,System.Int32)"/> then only those categories/properties
            will be displayed.</para>
            <para>The easiest way to edit this property is through your IDE's Property View
            as it will display a custom designer.  It should be noted that this editor
            only allows categories/properties to be hidden or displayed.  If it necessary
            to change Display Names or Descriptions then the methods of 
            <see cref="T:EnterpriseDT.Net.Ftp.Forms.FTPConnectionProperties"/> should be used.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPConnectionEditor.ContextMenuDefaultLocation">
            <summary>
            Location at which the context menu will be displayed.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPConnectionEditor.HelpBackColor">
            <summary>
            Background color of the help pane.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPConnectionEditor.HelpForeColor">
            <summary>
            Foreground color of the help pane.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPConnectionEditor.HelpVisible">
            <summary>
            Determines whether or not the help pane is visible.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPConnectionEditor.LineColor">
            <summary>
            Color of lines used within editor.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPConnectionEditor.PropertySort">
            <summary>
            Method by which properties are sorted.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPConnectionEditor.SelectedGridItem">
            <summary>
            The currently selected <see cref="T:System.Windows.Forms.GridItem"/>.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPConnectionEditor.ToolbarVisible">
            <summary>
            Determines whether or not the toolbar is visible.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPConnectionEditor.ViewBackColor">
            <summary>
            Background color of the property display area.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPConnectionEditor.ViewForeColor">
            <summary>
            Foreground color of the property display area.
            </summary>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Forms.FTPConnectionEditor.PropertyChanged">
            <summary>
            Called when a connection property is changed.
            </summary>
            <remarks>
            Note that this event is simply delegating the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.PropertyChanged"/> event.
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Forms.FTPConnectionProperties">
            <summary>
            Used by <see cref="T:EnterpriseDT.Net.Ftp.Forms.FTPConnectionEditor"/> to select the properties that
            may be edited by the user of the control.
            </summary>
            <remarks>
            <para>The easiest way to edit <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPConnectionEditor.Properties"/> 
            is through your IDE's Property View as it will display a custom designer.  This editor
            only allows categories/properties to be hidden or displayed.  If it necessary
            to change Display Names or Descriptions then <see cref="M:EnterpriseDT.Net.Ftp.Forms.FTPConnectionProperties.AddCategory(System.String,System.String,System.Boolean)"/>
            and <see cref="M:EnterpriseDT.Net.Ftp.Forms.FTPConnectionProperties.AddProperty(System.String,System.String,System.String,System.String,System.Boolean,System.Int32)"/> should be used.</para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPConnectionProperties.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPConnectionProperties.#ctor(System.Boolean)">
            <summary>
            Constructor that permits setting the default visible state for properties.
            </summary>
            <param name="defaultVisible">Used to set the default visible state.</param>
            <remarks>
            The default visible state applies to all categories and properties that are 
            added to this class.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPConnectionProperties.AddCategory(System.String,System.String,System.Boolean)">
            <summary>
            Adds the named category using the given Display Name.
            </summary>
            <param name="name">Actual name of the category.</param>
            <param name="displayName">Name to be display to the user.</param>
            <param name="visible">Is this category visible?</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPConnectionProperties.AddProperty(System.String,System.String,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Adds the named property using the given display information.
            </summary>
            <param name="categoryName">Actual name of the category.</param>
            <param name="propertyName">Actual name of the property.</param>
            <param name="propertyDisplayName">Name to be display to the user.</param>
            <param name="propertyDescription">Description to display to the user.</param>
            <param name="visible">Is this property visible?</param>
            <param name="order">Properties will be displayed in ascending order.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPConnectionProperties.RemoveProperty(System.String,System.String)">
            <summary>
            Removes the given property.
            </summary>
            <param name="categoryName">Category name</param>
            <param name="propertyName">Property name</param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPConnectionProperties.CountCategories">
            <summary>
            Gets the number of categories.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPConnectionProperties.CountProperties">
            <summary>
            Gets the total number of properties in all categories.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPConnectionProperties.CountVisibleProperties">
            <summary>
            Gets the total number of visible properties in all categories.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Design.CertForm">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.CertForm.#ctor">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.CertForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.CertForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExEventAggregator.SetConnectionInstance(System.Object,EnterpriseDT.Net.Ftp.FTPEventArgs)">
            <summary>
            Sets the <see cref="P:EnterpriseDT.Net.Ftp.FTPEventArgs.ConnectionInstanceNumber"/> property of e.
            </summary>
            <param name="sender">(Usually) the ExFTPConnection</param>
            <param name="e">Event-args object to be set.</param>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Pro.ProFTPActiveDataSocket">
            <summary>
            Active data socket handling class
            </summary>
        </member>
        <member name="T:EnterpriseDT.Util.Debug.StandardOutputAppender">
            <summary>  Appends log statements to standard output
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.7 $
            </version>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.StandardOutputAppender.log">
            <summary> 
            Destination
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.StandardOutputAppender.#ctor">
            <summary> 
            Constructor
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.StandardOutputAppender.Log(System.String)">
            <summary> 
            Log a message
            </summary>
            <param name="msg"> message to log
            </param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.StandardOutputAppender.Log(System.Exception)">
            <summary> 
            Log a stack trace
            </summary>
            <param name="t"> throwable object
            </param>		
        </member>
        <member name="M:EnterpriseDT.Util.Debug.StandardOutputAppender.Close">
            <summary> 
            Close this appender
            </summary>
        </member>
        <member name="T:EnterpriseDT.Util.License.LicenseProperties">
             <summary>  
             Manages application properties
            </summary>
             <author>       
             Bruce Blackshaw
             </author>
             <version>      
             $Revision: 1.15 $
             </version>
        </member>
        <member name="F:EnterpriseDT.Util.License.LicenseProperties.OWNER">
            <summary> The name of the property storing the application name</summary>
        </member>
        <member name="F:EnterpriseDT.Util.License.LicenseProperties.PRODUCT">
            <summary> The name of the property storing the product name</summary>
        </member>
        <member name="F:EnterpriseDT.Util.License.LicenseProperties.LICENSE_KEY">
            <summary> Licence property</summary>
        </member>
        <member name="F:EnterpriseDT.Util.License.LicenseProperties.LICENSE_FILE">
            <summary>Name of output file for licenses generated</summary>
        </member>
        <member name="F:EnterpriseDT.Util.License.LicenseProperties.log">
            <summary>Logger</summary>
        </member>
        <member name="F:EnterpriseDT.Util.License.LicenseProperties.outputFormat">
            <summary> Date format</summary>
        </member>
        <member name="F:EnterpriseDT.Util.License.LicenseProperties.reader">
            <summary> Reads licences</summary>
        </member>
        <member name="F:EnterpriseDT.Util.License.LicenseProperties.key">
            <summary> Licence key</summary>
        </member>
        <member name="F:EnterpriseDT.Util.License.LicenseProperties.owner">
            <summary> Owner of software</summary>
        </member>
        <member name="F:EnterpriseDT.Util.License.LicenseProperties.product">
            <summary> Type of the product</summary>
        </member>
        <member name="F:EnterpriseDT.Util.License.LicenseProperties.isTrial">
            <summary> Is it a trial licence?</summary>
        </member>
        <member name="F:EnterpriseDT.Util.License.LicenseProperties.expiryDate">
            <summary> Expiry date of licence</summary>
        </member>
        <member name="M:EnterpriseDT.Util.License.LicenseProperties.ReadLicenseOwnerFromReg(System.String,System.String)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.License.LicenseProperties.ReadLicenseKeyFromReg(System.String,System.String)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.License.LicenseProperties.ReadLicenseDetailsFromReg(System.String,System.String,System.String)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.License.LicenseProperties.WriteLicenseDetailsToRegistry(System.String,System.String,System.String)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.License.LicenseProperties.#ctor(System.String,System.String)">
            <summary>
            Loads the license key properties
            </summary>
            <param name="ownerStr">owner of license</param>
            <param name="keyStr">license key</param>
        </member>
        <member name="M:EnterpriseDT.Util.License.LicenseProperties.CheckLicense(System.String,EnterpriseDT.Util.License.EdtProduct[])">
            <summary>
            Check to see if licensed for the supplied products
            </summary>
            <param name="requiredProduct"></param>
        </member>
        <member name="M:EnterpriseDT.Util.License.LicenseProperties.GetTrialSettings">
            <summary>
            Read license settings from trial license file embedded in assembly. Don't
            overwrite existing values though.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.License.LicenseProperties.Main(System.String[])">
            <summary> 
            Test harness which examines the license and prints its properties
            </summary>
            <param name="args"> standard args
            </param>
        </member>
        <member name="P:EnterpriseDT.Util.License.LicenseProperties.Trial">
            <summary> 
            Is this a trial key?
            </summary>
        </member>
        <member name="P:EnterpriseDT.Util.License.LicenseProperties.ExpiryDate">
            <summary> 
            Get the license expiry date
            </summary>
        </member>
        <member name="P:EnterpriseDT.Util.License.LicenseProperties.ProductId">
            <summary>
            Get the type of product this license is for
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Cryptography.MD2CryptoServiceProvider">
            <summary>
            Computes the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.MD2"/> hash for the input data using the implementation provided by the cryptographic service provider (CSP).
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.MD2CryptoServiceProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.MD2CryptoServiceProvider"/> class. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.MD2CryptoServiceProvider.Initialize">
            <summary>
            Initializes an instance of <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.MD2CryptoServiceProvider"/>.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The MD2CryptoServiceProvider instance has been disposed.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.MD2CryptoServiceProvider.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Routes data written to the object into the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.MD2"/> hash algorithm for computing the hash.
            </summary>
            <param name="array">The array of data bytes.</param>
            <param name="ibStart">The offset into the byte array from which to begin using data.</param>
            <param name="cbSize">The number of bytes in the array to use as data.</param>
            <exception cref="T:System.ObjectDisposedException">The MD2CryptoServiceProvider instance has been disposed.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The data could not be hashed.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.MD2CryptoServiceProvider.HashFinal">
            <summary>
            Returns the computed <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.MD2CryptoServiceProvider"/> hash as an array of bytes after all data has been written to the object.
            </summary>
            <returns>The computed hash value.</returns>
            <exception cref="T:System.ObjectDisposedException">The MD2CryptoServiceProvider instance has been disposed.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The data could not be hashed.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.MD2CryptoServiceProvider.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.MD2CryptoServiceProvider"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.MD2CryptoServiceProvider.Finalize">
            <summary>
            Finalizes the MD2CryptoServiceProvider.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.MD2CryptoServiceProvider.m_Provider">
            <summary>
            Holds the handle of the crypto service provider.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.MD2CryptoServiceProvider.m_Hash">
            <summary>
            Holds the hash handle.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.MD2CryptoServiceProvider.m_Disposed">
            <summary>
            <b>true</b> if the object ahs been disposed, <b>false</b> otherwise.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Pro.ProFTPStatusBar">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPStatusBar.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPStatusBar.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPStatusBar.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPStatusBar.Connection">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Pro.ProFTPStatusBar.Error">
            <summary>
            Occurs when an exception is thrown during an asynchronous operation.
            </summary> 
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.AtomCategory">
            <summary>
            Category elements contain information about a category to which an Atom feed or entry is associated.
            atomCategory = element atom:category {
               atomCommonAttributes,
               attribute term { text },
               attribute scheme { atomUri }?,
               attribute label { text }?,
               empty
            }
            </summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomCategory.term">
            <summary>holds the term</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomCategory.scheme">
            <summary>holds the scheme as an Uri</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomCategory.label">
            <summary>holds the category label</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomCategory.#ctor">
            <summary>empty Category constructor</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomCategory.#ctor(System.String)">
            <summary>Category constructor</summary> 
            <param name="term">the term of the category</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomCategory.#ctor(System.String,EnterpriseDT.Google.GData.Client.AtomUri)">
            <summary>Category constructor</summary> 
            <param name="term">the term of the category</param>
            <param name="scheme">the scheme of the category</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomCategory.#ctor(System.String,EnterpriseDT.Google.GData.Client.AtomUri,System.String)">
            <summary>Category constructor</summary> 
            <param name="term">the term of the category</param>
            <param name="scheme">the scheme of the category</param>
            <param name="label"> the label for the category</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomCategory.SaveXmlAttributes(System.Xml.XmlWriter)">
            <summary>overridden to save attributes for this(XmlWriter writer)</summary> 
            <param name="writer">the xmlwriter to save into </param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomCategory.ShouldBePersisted">
            <summary>figures out if this object should be persisted</summary> 
            <returns> true, if it's worth saving</returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomCategory.XmlName">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomCategory.Term">
            <summary>accessor method public string Term</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomCategory.Label">
            <summary>accessor method public string Label</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomCategory.Scheme">
            <summary>accessor method public Uri Scheme</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomCategory.UriString">
            <summary>creates a string rep of a category useful for a query URI</summary> 
            <returns>the category as a string for a query </returns>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPSynchronizer.log">
            <summary>Logging object</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPSynchronizer.Cancel">
            <summary>
            Cancels the current operation.
            </summary>
            <remarks>
            The method that is performing the operation will throw an
            <see cref="T:EnterpriseDT.Net.Ftp.FTPTransferCancelledException"/>.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSynchronizer.LogTag">
            <summary>
            Log tag.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPSyncRules">
            <summary>
            Contains a set of instructions for how a synchronization operation should be performed.
            </summary>
            <remarks>
            <para></para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncRules.Direction">
            <summary>
            Controls the direction of synchronization.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncRules.IgnoreCase">
            <summary>
            Determines whether or not case is ignored when matching file-names.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncRules.IncludeFilesInFilter">
            <summary>
            Controls whether the filter is an inclusion-filter or an exclusion-filter.
            </summary>
            <remarks>If <c>IncludeFilesInFilter</c> is true (the default) then only the files
            that match the filter (if there is one) will be synchronized.  Otherwise only those
            that don't match it will be synchronized.</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncRules.FilterType">
            <summary>
            Controls whether the <see cref="P:EnterpriseDT.Net.Ftp.FTPSyncRules.FileNameFilter"/> should be interpreted as a wildcard string
            or a regular expression.
            </summary>
            <remarks>
            Wildcard strings use a DOS-like notation where <c>?</c> matches any single character and 
            <c>*</c> matches multiple characters.  Regular expressions are of the kind used in 
            <see cref="T:System.Text.RegularExpressions.Regex"/>.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncRules.FilterOnServer">
            <summary>
            Controls whether files are filtered on the client (the default) or on the server.  
            Requires server to support filtering.
            </summary>
            <remarks>
            When set to <c>true</c> filters will be passed to the server such that only files
            that match the filter are returned to the client in directory listings.  This can be more 
            efficient since smaller listings may be returned, but it requires the server to support
            filtering (wildcards or regular-expressions).
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncRules.FileNameFilter">
            <summary>
            File-name filter that controls which files are synchronized.
            </summary>
            <remarks>
            <c>FileNameFilter</c> may contain multiple strings separated by commas.  Each string
            may be a regular expression (as defined by <see cref="T:System.Text.RegularExpressions.Regex"/>)
            or a wildcard string (where <c>?</c> matches any single character and <c>*</c> matches 
            multiple characters).  The type of filter (wildcard or regular expression) may be chosen via the
            <see cref="P:EnterpriseDT.Net.Ftp.FTPSyncRules.FilterType"/> property.  The filter may be used to exclude or include files; this
            behavior is selected via the <see cref="!:ExcludeFilesInFilter"/> property.  By default files in
            the filter are included.  If no filter is defined then all files will be considered.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncRules.FilterCallback">
            <summary>
            FileFilter callback to be called each time a file is to be filtered.
            </summary>
            <remarks>
            If <see cref="P:EnterpriseDT.Net.Ftp.FTPSyncRules.FilterType"/> is set to <see cref="!:FTPFileType.Callback"/> then this 
            <see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> will be called when a file is to be filtered.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncRules.IgnoreDate">
            <summary>
            Controls whether or not dates are taken into consideration when performing file comparisons.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncRules.TransferAlways">
            <summary>
            Causes files to be transferred regardless of date and size.
            </summary>
            <remarks>
            This flag overrides all other flags except <see cref="P:EnterpriseDT.Net.Ftp.FTPSyncRules.DeleteIfSourceAbsent"/>.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncRules.TransferNewOnly">
            <summary>
            If <c>TransferNewOnly</c> is set then only files that do not exist on the target file-system 
            will be considered.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncRules.TransferMatchingOnly">
            <summary>
            If <c>TransferMatchingOnly</c> is set then only files that exist both on the source and target
            file-systems will be considered.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncRules.DeleteIfSourceAbsent">
            <summary>
            When set, this flag will advise that if a file exists on the target but not on the source then
            that file should be deleted.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncRules.SyncLocalDateAfterDownload">
            <summary>
            When set, this flag will cause the control to set the date of the local file
            to be the same as the remote file after the file has been downloaded.  
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncRules.IncludeSubdirectories">
            <summary>
            When set, this flag will cause files in subdirectories to be included in the 
            synchronization operaton.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncRules.StopOnError">
            <summary>
            When set, this flag will cause synchronization to stop when errors occur.
            </summary>
            <remarks>
            If <c>StopOnError</c> is <c>true</c> (the default) the synchronization process will stop 
            when an error occurs.  If <c>StopOnError</c> is <c>false</c> then <see cref="T:EnterpriseDT.Net.Ftp.FTPSynchronizer"/>
            will continue the process as far as it can.  For example, if an attempt to create a directory
            fails then it will give up on transferring files in that directory, but will keep transferring
            other files.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncRules.FileRegEx">
            <summary>
            Returns an array of regular expression that match the wildcards.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPSyncResults">
            <summary>
            Encapsulates the results of a synchronization operation.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPSyncResults.GetFileAction(EnterpriseDT.Net.Ftp.FTPFileSyncPair)">
            <summary>
            Returns the action that was applied to the given file-pair.
            </summary>
            <param name="filePair">File-pair to retrieve action for.</param>
            <returns>Action that was applied.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPSyncResults.GetActionSucceeded(EnterpriseDT.Net.Ftp.FTPFileSyncPair)">
            <summary>
            Did the action succeed for the given file-pair.
            </summary>
            <param name="filePair">File-pair</param>
            <returns><c>true</c> if the action succeeded.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPSyncResults.GetException(EnterpriseDT.Net.Ftp.FTPFileSyncPair)">
            <summary>
            Exception thrown when action was attempted (if any).
            </summary>
            <param name="filePair">File-pair to get exception for.</param>
            <returns>Exception thrown when action was attemped or <c>null</c> if no exception was thrown.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPSyncResults.GetException(System.String)">
            <summary>
            Exception thrown when attempting to get a directory listing (if any).
            </summary>
            <param name="directory">Directory to get exception for.</param>
            <returns>Exception thrown when attempting to get a directory listing or <c>null</c> if no exception was thrown.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPSyncResults.ToString(System.Boolean)">
            <summary>
            Returns a string representation of the results.
            </summary>
            <param name="verbose">Show file-by-file results or just a summary?</param>
            <returns>A string representation.</returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncResults.FilePairs">
            <summary>
            All pairs of files.
            </summary>
            <remarks>Pairs are matched by their paths relative to the base directories.</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncResults.TotalCount">
            <summary>
            Total number of file-pairs.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncResults.SuccessCount">
            <summary>
            Number of actions successfully applied.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncResults.FailureCount">
            <summary>
            Number of failures encountered when actions were applied.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPSyncEventHandler">
            <summary>
            Event-handler for synchronization events.
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event-arguments</param>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPSyncFileEventHandler">
            <summary>
            Event-handler for synchronization events.
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event-arguments</param>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPSyncEventArgs">
            <summary>
            Arguments for synchronization events.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncEventArgs.LocalDirectory">
            <summary>
            Local directory.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncEventArgs.RemoteDirectory">
            <summary>
            Remote directory.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncEventArgs.Results">
            <summary>
            Results of synchronization operation.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPSyncFileEventArgs">
            <summary>
            Events for file synchronization events.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncFileEventArgs.SynchronizationRules">
            <summary>
            Rules for synchronization.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncFileEventArgs.LocalFileExists">
            <summary>
            Does the local file exist?
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncFileEventArgs.LocalFile">
            <summary>
            Reference to an <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> object representing the local file.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncFileEventArgs.RemoteFileExists">
            <summary>
            Does the remote file exist?
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncFileEventArgs.RemoteFile">
            <summary>
            Reference to an <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> object representing the remote file.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncFileEventArgs.Action">
            <summary>
            Action to apply.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPSyncFileAction">
            <summary>
            Used for determining which synchronization action should be applied.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPSyncFileAction.None">
            <summary>Do nothing.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPSyncFileAction.Download">
            <summary>Download the file.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPSyncFileAction.Upload">
            <summary>Upload the file.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPSyncFileAction.DeleteLocal">
            <summary>Delete the local file.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPSyncFileAction.DeleteRemote">
            <summary>Delete the remote file.</summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPSyncException">
            <summary>
            Thrown when a synchronization operation fails.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncException.Results">
            <summary>
            Results of the synchronization operation.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SFTPFileStreamReader">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPFileStreamReader.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream
            </summary>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <param name="origin">Indicates the reference point used to obtain the new position</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPFileStreamReader.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the 
            position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, 
            the buffer contains the specified byte array with the values between 
            offset and (offset + count- 1) replaced by the bytes read from the 
            current source.
            </param>
            <param name="offset">The zero-based byte offset in buffer at which 
            to begin storing the data read from the current stream. 
            </param>
            <param name="len">The maximum number of bytes to be read from 
            the current stream. 
            </param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPFileStreamReader.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within 
            the stream by one byte
            </summary>
            <returns>returns -1 if at the end of the stream</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPFileStreamReader.Close">
            <summary>
            Closes the current stream 
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SFTPFileStreamWriter">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPFileStreamWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances 
            the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="len">The number of bytes to be written to the current stream.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPFileStreamWriter.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the stream and 
            advances the position within the stream by one byte.                                                  )
            </summary>
            <param name="b">byte to write</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPFileStreamWriter.Close">
            <summary>
            Closes the current stream 
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.MediaService">
            <summary>MediaService implementation. Adds the ability to send MimeMultipart
            message (used for Piasa/YouTube etc
            </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.MediaService.#ctor(System.String)">
            <summary>default constructor, sets the default GDataRequest</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.MediaService.#ctor(System.String,System.String)">
            <summary>this will trigger the creation of an authenticating service</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.MediaService.EntrySend(System.Uri,EnterpriseDT.Google.GData.Client.AtomBase,EnterpriseDT.Google.GData.Client.GDataRequestType,EnterpriseDT.Google.GData.Client.AsyncSendData)">
            <summary>Inserts an AtomBase entry against a Uri. The overloaded
            version here will check if this is an AbstractEntry and if it has
            a media property set. If so, it will create a mime multipart envelope</summary> 
            <param name="feedUri">the uri for the feed this object should be posted against</param> 
            <param name="baseEntry">the entry to be inserted</param> 
            <param name="type">the type of request to create</param> 
            <param name="data">the async data payload</param>
            <returns> the response as a stream</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.MediaService.CreateBoundary(System.IO.StreamWriter,System.String)">
            <summary>
            creates the MIME boundary string
            </summary>
            <param name="w">stream to write to</param>
            <param name="contentType">content type to use</param>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Tools.CertificateSettings">
            <summary>
            Holds the different settings for the self-signed certificate generation process.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Tools.CertificateSettings.#ctor">
            <summary>
            Initializes a new version of the CertificateSettings class.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Tools.CertificateSettings.StartDate">
            <summary>
            Gets or sets a value that represents the start date of the certificate.
            </summary>
            <value>A <see cref="T:System.DateTime"/> instance.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Tools.CertificateSettings.EndDate">
            <summary>
            Gets or sets a value that represents the end date of the certificate.
            </summary>
            <value>A <see cref="T:System.DateTime"/> instance.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Tools.CertificateSettings.SignCertificate">
            <summary>
            Gets or sets a value that indicates whether the certificate should be signed.
            </summary>
            <value><b>true</b> if a signature must be generated, <b>false</b> otherwise.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Tools.CertificateSettings.ReferencePrivateKey">
            <summary>
            Gets or sets a value that indicates whether the certificate must reference its private key.
            </summary>
            <value><b>true</b> if the private key must be referenced, <b>false</b> otherwise.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Tools.CertificateSettings.Extensions">
            <summary>
            Gets a collection of X509 extensions.
            </summary>
            <value>A <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection"/> instance.</value>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssl.SSLFTPControlSocket">
            <summary>
            Supports client-side FTP operations.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPControlSocket.IMPLICIT_FTPS_CONTROL_PORT">
            <summary>   The default and standard control port number for implicit FTPS.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPControlSocket.log">
            <summary> Logging object</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPControlSocket.isChannelSecure">
            <summary>
            Flag indicating whether or not the control channel has been switched
            to secure mode.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPControlSocket.isPrivateDataChannel">
            <summary>
            Flag indicating whether or not data channels are to be secure.
            This flag is affected by the PBSZ/PROT command pair; if PROT
            is set to P (Private) then it should be on otherwise it should
            be off.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPControlSocket.waitOnShutdownSSL">
            <summary>
            USed for the CCC command - do we wait for the Shutdown
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPControlSocket.ConnectSocket(EnterpriseDT.Net.BaseSocket,System.String,System.Int32)">
            <summary>   
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPControlSocket.ShuttingDownSSL">
            <summary>
            Used for CCC
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain">
            <summary>
            Defines a chain of certificates.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain.#ctor(EnterpriseDT.Mentalis.Security.Certificates.Certificate)">
            <summary>
            Initializes a new <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain"/> instance from a <see cref="P:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain.Certificate"/>.
            </summary>
            <param name="cert">The certificate for which a chain is being built.</param>
            <remarks><paramref name="cert"/> will always be the end certificate.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="cert"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while building the certificate chain.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain.#ctor(EnterpriseDT.Mentalis.Security.Certificates.Certificate,EnterpriseDT.Mentalis.Security.Certificates.CertificateStore)">
            <summary>
            Initializes a new <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain"/> instance from a <see cref="P:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain.Certificate"/>.
            </summary>
            <param name="cert">The certificate for which a chain is being built.</param>
            <param name="additional">Any additional store to be searched for supporting certificates and CTLs.</param>
            <remarks><paramref name="cert"/> will always be the end certificate.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="cert"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while building the certificate chain.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain.#ctor(EnterpriseDT.Mentalis.Security.Certificates.Certificate,EnterpriseDT.Mentalis.Security.Certificates.CertificateStore,EnterpriseDT.Mentalis.Security.Certificates.CertificateChainOptions)">
            <summary>
            Initializes a new <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain"/> instance from a <see cref="P:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain.Certificate"/>.
            </summary>
            <param name="cert">The certificate for which a chain is being built.</param>
            <param name="additional">Any additional store to be searched for supporting certificates and CTLs.</param>
            <param name="options">Additional certificate chain options.</param>
            <remarks><paramref name="cert"/> will always be the end certificate.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="cert"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while building the certificate chain.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain.Finalize">
            <summary>
            Disposes of the certificate chain.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain.GetCertificates">
            <summary>
            Returns the list of certificates in this <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain"/>.
            </summary>
            <returns>An array of <see cref="P:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain.Certificate"/> instances.</returns>
            <remarks>
            The certificate with index 0 is the end certificate in the chain, the certificate with the highest index is the root certificate [if it can be found].
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain.VerifyChain(System.String,EnterpriseDT.Mentalis.Security.Certificates.AuthType)">
            <summary>
            Verifies the end <see cref="P:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain.Certificate"/> according to the SSL policy rules.
            </summary>
            <param name="server">The server that returned the certificate -or- a null reference if the certificate is a client certificate.</param>
            <param name="type">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.AuthType"/> values.</param>
            <returns>One of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus"/> values.</returns>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while verifying the certificate.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain.VerifyChain(System.String,EnterpriseDT.Mentalis.Security.Certificates.AuthType,EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags)">
            <summary>
            Verifies the end <see cref="P:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain.Certificate"/> according to the SSL policy rules.
            </summary>
            <param name="server">The server that returned the certificate -or- a null reference if the certificate is a client certificate.</param>
            <param name="type">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.AuthType"/> values.</param>
            <param name="flags">One or more of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags"/> values. VerificationFlags values can be combined with the OR operator.</param>
            <returns>One of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus"/> values.</returns>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while verifying the certificate.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain.VerifyChain(System.String,EnterpriseDT.Mentalis.Security.Certificates.AuthType,EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags,System.Byte[])">
            <summary>
            Verifies the end <see cref="P:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain.Certificate"/> according to the SSL policy rules.
            </summary>
            <param name="server">The server that returned the certificate -or- a null reference if the certificate is a client certificate.</param>
            <param name="type">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.AuthType"/> values.</param>
            <param name="flags">One or more of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags"/> values. VerificationFlags values can be combined with the OR operator.</param>
            <param name="crl">An optional CRL to check. This parameter can be null (<b>Nothing</b> in Visual Basic).</param>
            <returns>One of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus"/> values.</returns>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while verifying the certificate.</exception>
            <remarks>Only the leaf certificate is checked against the CRL.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain.BeginVerifyChain(System.String,EnterpriseDT.Mentalis.Security.Certificates.AuthType,EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags,System.AsyncCallback,System.Object)">
            <summary>
            Begins verification of the end <see cref="P:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain.Certificate"/> according to the SSL policy rules.
            </summary>
            <param name="server">The server that returned the certificate -or- a null reference if the certificate is a client certificate.</param>
            <param name="type">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.AuthType"/> values.</param>
            <param name="flags">One or more of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags"/> values. VerificationFlags values can be combined with the OR operator.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="asyncState">An object that contains state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous connection.</returns>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while queuing the verification request.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain.EndVerifyChain(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous certificate verification request.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
            <returns>One of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus"/> values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="ar"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="ar"/> parameter was not returned by a call to the <see cref="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain.BeginVerifyChain(System.String,EnterpriseDT.Mentalis.Security.Certificates.AuthType,EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags,System.AsyncCallback,System.Object)"/> method.</exception>
            <exception cref="T:System.InvalidOperationException"><b>EndVerifyChain</b> was previously called for the asynchronous chain verification.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while verifying the certificate chain.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain.StartVerification(System.Object)">
            <summary>
            Verifies a certificate chain and calls a delegate when finished.
            </summary>
            <param name="state">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain.m_Handle">
            <summary>
            The handle of the certificate chain.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain.m_Certificate">
            <summary>
            The end certificate that was used to build the chain.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain.Certificate">
            <summary>
            Returns the certificate for which this chain was built.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.AtomSourceConverter">
            <summary>TypeConverter, so that AtomHead shows up in the property pages
            </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomSourceConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>Standard type converter method</summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomSourceConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>Standard type converter method</summary>
        </member>
        <member name="T:EnterpriseDT.Util.Debug.MemoryAppender">
            <summary>Appends log statements to an in-memory buffer.</summary>
            <remarks>This appender keeps only the past <see cref="P:EnterpriseDT.Util.Debug.MemoryAppender.MaxMessages"/> lines in memory.
            They may be accessed at any time using the <see cref="P:EnterpriseDT.Util.Debug.MemoryAppender.Messages"/> property.  It
            is useful for debugging problems where timing is critical (e.g. deadlocks).</remarks>
            <author>Hans Andersen</author>
            <version>$Revision$</version>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.MemoryAppender.#ctor">
            <summary>
            Constructs a <c>MemoryAppender</c>.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.MemoryAppender.#ctor(System.Int32)">
            <summary>
            Constructs a <c>MemoryAppender</c> which stores a maximum of <c>maxMessages</c> messages.
            </summary>
            <param name="maxMessages">Maximum number of messages stored.</param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.MemoryAppender.Log(System.String)">
            <summary> 
            Log a message
            </summary>
            <param name="msg"> message to log
            </param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.MemoryAppender.Log(System.Exception)">
            <summary> 
            Log a stack trace
            </summary>
            <param name="t"> throwable object
            </param>		
        </member>
        <member name="M:EnterpriseDT.Util.Debug.MemoryAppender.Close">
            <summary> 
            Close this appender
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.MemoryAppender.Write(System.String)">
            <summary>
            Write the current content of the log to the given file.
            </summary>
            <param name="path">Path of file</param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.MemoryAppender.Write(System.IO.StreamWriter)">
            <summary>
            Write the current content of the log to the given stream.
            </summary>
            <param name="stream">Stream to write messages to.</param>
        </member>
        <member name="P:EnterpriseDT.Util.Debug.MemoryAppender.MaxMessages">
            <summary>
            Maximum number of messages stored in the appender.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Util.Debug.MemoryAppender.Messages">
            <summary>
            Messages currently in the appender.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.DeleteCommand">
            <summary>  Delete a file
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.2 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Spreadsheets.GDataSpreadsheetsNameTable">
            <summary>
            Name Table for string constants used in the Spreadsheets
            GData feeds.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Spreadsheets.GDataSpreadsheetsNameTable.FeedSpreadsheet">
            <summary>indicates a spreadsheet feed in the URI</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Spreadsheets.GDataSpreadsheetsNameTable.FeedWorksheet">
            <summary>indicates a worksheet feed in the URI</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Spreadsheets.GDataSpreadsheetsNameTable.FeedList">
            <summary>indicates a list feed in the URI</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Spreadsheets.GDataSpreadsheetsNameTable.FeedCell">
            <summary>indicates a cell feed in the URI</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Spreadsheets.GDataSpreadsheetsNameTable.NSGSpreadsheets">
            <summary>Spreadsheets namespace</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Spreadsheets.GDataSpreadsheetsNameTable.NSGSpreadsheetsExtended">
            <summary>Spreadsheets extended namespace</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Spreadsheets.GDataSpreadsheetsNameTable.NSGSpreadsheetsPrefix">
            <summary>Spreadsheets namespace prefix</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Spreadsheets.GDataSpreadsheetsNameTable.Prefix">
            <summary>Prefix for spreadsheets extensions if writing</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Spreadsheets.GDataSpreadsheetsNameTable.ExtendedPrefix">
            <summary>Prefix for spreadsheets custom extensions if writing</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Spreadsheets.GDataSpreadsheetsNameTable.CellRel">
            <summary>Link "rel" for cells feed</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Spreadsheets.GDataSpreadsheetsNameTable.ListRel">
            <summary>Link "rel" for list feed</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Spreadsheets.GDataSpreadsheetsNameTable.WorksheetRel">
            <summary>Link "rel" for worksheet feed</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Spreadsheets.GDataSpreadsheetsNameTable.Spreadsheet">
            <summary>The spreadsheet prefix </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Spreadsheets.GDataSpreadsheetsNameTable.Cell">
            <summary>The cell prefix </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Spreadsheets.GDataSpreadsheetsNameTable.List">
            <summary>The list prefix </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Spreadsheets.GDataSpreadsheetsNameTable.Worksheet">
            <summary>The worksheet prefix </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Spreadsheets.GDataSpreadsheetsNameTable.Source">
            <summary>The sources prefix </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Spreadsheets.GDataSpreadsheetsNameTable.XmlCellElement">
            <summary>Static string for parsing</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Spreadsheets.GDataSpreadsheetsNameTable.XmlColCountElement">
            <summary>Static string for parsing</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Spreadsheets.GDataSpreadsheetsNameTable.XmlRowCountElement">
            <summary>Static string for parsing</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Spreadsheets.GDataSpreadsheetsNameTable.XmlAttributeRow">
            <summary>String for row attribute</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Spreadsheets.GDataSpreadsheetsNameTable.XmlAttributeColumn">
            <summary>String for col attibute</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Spreadsheets.GDataSpreadsheetsNameTable.XmlAttributeInputValue">
            <summary>String for inputValue attibute</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Spreadsheets.GDataSpreadsheetsNameTable.XmlAttributeNumericValue">
            <summary>String for numericValue attribute</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.Crypto.Rijndael.BLOCK_SIZE">
            <summary>
            constants
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:EnterpriseDT.Net.Ssh.Routrek.Crypto.Rijndael.encryptCTR(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)" -->
        <member name="M:EnterpriseDT.Net.Ssh.Routrek.Crypto.Rijndael.decryptCTR(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            AES-CTR decrypt is actually the same as encrypt
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ssh.Routrek.Crypto.Rijndael.increment(System.Byte[])">
            <summary>
            As the counter is in network byte order, increment from the
            least significant byte (on the right), byte by byte.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Spreadsheets.RowCountElement">
            <summary>
            GData schema extension for rowCount element.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.RowCountElement.#ctor">
            <summary>
            default constructor 
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.RowCountElement.#ctor(System.UInt32)">
            <summary>
            default constructor with an initial value as a integer 
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Spreadsheets.RowCountElement.Count">
            <summary>
            Gets or sets the count of rows.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPFileSystemWatcher">
            <summary>
            Raises events when files in the <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.ServerDirectory">current remote directory</see>
            are created, changed or deleted.
            </summary>
            <remarks>
            <para>
            <c>FTPFileSystemWatcher</c> listens to <see cref="T:EnterpriseDT.Net.Ftp.FTPConnection"/> events and 
            (<see cref="P:EnterpriseDT.Net.Ftp.FTPFileSystemWatcher.DirectoryPollingEnabled">optionally</see>) polls the FTP server
            every <see cref="!:RefreshPeriodSecs"/> to detect changes.
            </para><para>
            Three events are provided for notification of changes on the remote file:
            <list type="table">
            <listheader>
              <term>Event</term>
              <description>Triggered when <c>FTPFileSystemWatcher</c> detects that..</description>
            </listheader>
            <item>
              <term><see cref="E:EnterpriseDT.Net.Ftp.FTPFileSystemWatcher.Created"/></term>
              <description>...a file has been created on the server.</description>
            </item>
            <item>
              <term><see cref="E:EnterpriseDT.Net.Ftp.FTPFileSystemWatcher.Changed"/></term>
              <description>...a file has been created on or uploaded to the server.</description>
            </item>
            <item>
              <term><see cref="E:EnterpriseDT.Net.Ftp.FTPFileSystemWatcher.Deleted"/></term>
              <description>...a file has been deleted on the server.</description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFileSystemWatcher.log">
            <summary>Logging object</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPFileSystemWatcher.#ctor">
            <summary>
            Default consructor.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPFileSystemWatcher.OnCreated(System.String,EnterpriseDT.Net.Ftp.FTPFile)">
            <summary>
            Called when a file is created in the current remote directory.
            </summary>
            <param name="directory">Directory in which file was created.</param>
            <param name="file">File that was created</param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileSystemWatcher.EnableRaisingEvents">
            <summary>
            Enables generation of events.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileSystemWatcher.DirectoryPollingEnabled">
            <summary>
            Determines whether or not the server directory should be fetched periodically. 
            </summary>
            <remarks>
            <para>
            If enabled the server will be polled every
            <see cref="!:RefreshPeriodSecs"/> seconds to detect changes that are not
            made via the current <see cref="P:EnterpriseDT.Net.Ftp.FTPFileSystemWatcher.Connection"/> instance.  If no such changes are
            expected then this is not necessary since changes made through the current
            <see cref="P:EnterpriseDT.Net.Ftp.FTPFileSystemWatcher.Connection"/> will be detected by means of event-handlers.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileSystemWatcher.PollingPeriodSecs">
            <summary>
            Number of seconds between consecutive directory listings.
            </summary>
            <remarks>
            <para>Note that this property will only be used if <see cref="P:EnterpriseDT.Net.Ftp.FTPFileSystemWatcher.DirectoryPollingEnabled"/>
            is true.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileSystemWatcher.DelayPeriodSecs">
            <summary>
            Number of seconds to wait after a connection is established or the current directory
            is changed before requesting a directory listing.
            </summary>
            <remarks>
            This property is used to reduce the chance of requesting redundant directory listings.
            For example, other FTP GUI controls will often request a directory listing after changing
            directories, so an additional request from <c>FTPFileSystemWatcher</c> would be redundant.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileSystemWatcher.Connection">
            <summary>
            Get or set the FTP connection object for which status information is 
            being displayed.
            </summary>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPFileSystemWatcher.Created">
            <summary>
            Notifies that a file has been created in the current remote directory.
            </summary>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPFileSystemWatcher.Changed">
            <summary>
            Notifies that the size and/or last-modified time of a file in the current remote
            directory has changed.
            </summary>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPFileSystemWatcher.Deleted">
            <summary>
            Notifies that a file has been deleted in the current remote directory.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPFileChangeEventArgs">
            <summary>
            Provides data for the <see cref="E:EnterpriseDT.Net.Ftp.FTPFileSystemWatcher.Created"/>, 
            <see cref="E:EnterpriseDT.Net.Ftp.FTPFileSystemWatcher.Changed"/>,  and <see cref="E:EnterpriseDT.Net.Ftp.FTPFileSystemWatcher.Deleted"/> 
            events.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileChangeEventArgs.File">
            <summary>
            File that was created, changed or deleted.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPFileChangeEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:EnterpriseDT.Net.Ftp.FTPFileSystemWatcher.Created"/>, 
            <see cref="E:EnterpriseDT.Net.Ftp.FTPFileSystemWatcher.Changed"/>,  and <see cref="E:EnterpriseDT.Net.Ftp.FTPFileSystemWatcher.Deleted"/> 
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Spreadsheets.ListEntry">
            <summary>
            Entry API customization class for defining entries in a List feed.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Spreadsheets.ListEntry.LIST_CATEGORY">
            <summary>
            Category used to label entries that contain Cell extension data.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.ListEntry.#ctor">
            <summary>
            Constructs a new ListEntry instance with the appropriate category
            to indicate that it is a list entry.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.ListEntry.Parse(EnterpriseDT.Google.GData.Client.ExtensionElementEventArgs,EnterpriseDT.Google.GData.Client.AtomFeedParser)">
            <summary>
            Parses the inner state of the element. TODO. 
            </summary>
            <param name="e">The extension element that should be added to this entry</param>
            <param name="parser">The AtomFeedParser that called this</param>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Spreadsheets.ListEntry.Elements">
            <summary>
            The custom elements in this list entry
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Spreadsheets.ListEntry.Custom">
            <summary>
            GData schema extension describing a custom element in a spreadsheet.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.ListEntry.Custom.#ctor">
            <summary>
            Constructs an empty custom element
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.ListEntry.Custom.ParseCustom(System.Xml.XmlNode,EnterpriseDT.Google.GData.Client.AtomFeedParser)">
            <summary>
            Parses an XML node to create a Custom object
            </summary>
            <param name="node">Custom node</param>
            <param name="parser">AtomFeedParser to use</param>
            <returns>The created Custom object</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.ListEntry.Custom.Equals(System.Object)">
            <summary>
            Custom elements are equal if they have the same local name.
            </summary>
            <param name="value">The custom element to compare against.</param>
            <returns>True if the LocalNames are equal, false otherwise</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.ListEntry.Custom.GetHashCode">
            <summary>
            The hash code is simply the hash of the local name
            </summary>
            <returns>The hash code calculated by String on the LocalName</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.ListEntry.Custom.Save(System.Xml.XmlWriter)">
            <summary>
            Used to save the EntryLink instance into the passed in xmlwriter
            </summary>
            <param name="writer">the XmlWriter to write into</param>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Spreadsheets.ListEntry.Custom.LocalName">
            <summary>
            The local name of the custom element
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Spreadsheets.ListEntry.Custom.Value">
            <summary>
            The value of the custom element
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Spreadsheets.ListEntry.Custom.XmlName">
            <summary>
            Returns the constant representing the XML element.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Spreadsheets.ListEntry.CustomElementCollection">
            <summary>Typed collection for Custom Extensions.</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Spreadsheets.ListEntry.CustomElementCollection.atomElement">
            <summary>holds the owning feed</summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.ListEntry.CustomElementCollection.#ctor(EnterpriseDT.Google.GData.Client.AtomBase)">
            <summary>constructor</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.ListEntry.CustomElementCollection.Add(EnterpriseDT.Google.GData.Spreadsheets.ListEntry.Custom)">
            <summary>standard typed add method </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.ListEntry.CustomElementCollection.IndexOf(EnterpriseDT.Google.GData.Spreadsheets.ListEntry.Custom)">
            <summary>standard typed indexOf method </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.ListEntry.CustomElementCollection.Insert(System.Int32,EnterpriseDT.Google.GData.Spreadsheets.ListEntry.Custom)">
            <summary>standard typed insert method </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.ListEntry.CustomElementCollection.Remove(EnterpriseDT.Google.GData.Spreadsheets.ListEntry.Custom)">
            <summary>standard typed remove method </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.ListEntry.CustomElementCollection.Contains(EnterpriseDT.Google.GData.Spreadsheets.ListEntry.Custom)">
            <summary>standard typed Contains method </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.ListEntry.CustomElementCollection.OnValidate(System.Object)">
            <summary>standard typed OnValidate Override </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.ListEntry.CustomElementCollection.OnClear">
            <summary>standard override OnClear, to remove the objects from the extension list</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Spreadsheets.ListEntry.CustomElementCollection.Item(System.Int32)">
            <summary>standard typed accessor method </summary> 
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.AtomContentConverter">
            <summary>TypeConverter, so that AtomContentConverter shows up in the property pages
            </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomContentConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>Standard type converter method</summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomContentConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>Standard type converter method</summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.AtomContent">
            <summary>atom:content object representation
            </summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomContent.type">
            <summary>holds the  type attribute</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomContent.src">
            <summary>holds the src URI attribute</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomContent.content">
            <summary>holds the content</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomContent.#ctor">
            <summary>default constructor. Set's the content type to text.</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomContent.ShouldBePersisted">
            <summary>figures out if this object should be persisted</summary> 
            <returns> true, if it's worth saving</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomContent.SaveXmlAttributes(System.Xml.XmlWriter)">
            <summary>overridden to save attributes for this(XmlWriter writer)</summary> 
            <param name="writer">the xmlwriter to save into </param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomContent.SaveInnerXml(System.Xml.XmlWriter)">
            <summary>saves the inner state of the element. Note that if the 
            content type is xhtml, no encoding will be done by this object</summary> 
            <param name="writer">the xmlWriter to save into </param>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomContent.XmlName">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomContent.Type">
            <summary>accessor method public string Type</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomContent.Src">
            <summary>accessor method public Uri Src</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomContent.AbsoluteUri">
            <summary>public Uri AbsoluteUri</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomContent.Content">
            <summary>accessor method public string Content</summary> 
            <returns> </returns>
        </member>
        <member name="M:EnterpriseDT.Net.Proxy.Http.HttpResponse.#ctor(System.IO.Stream)">
             Creates a new HttpResponse object.
            
             @param input
            
             @throws IOException
        </member>
        <member name="P:EnterpriseDT.Net.Proxy.Http.HttpResponse.Version">
            
            
             @return
        </member>
        <member name="P:EnterpriseDT.Net.Proxy.Http.HttpResponse.Status">
            
            
             @return
        </member>
        <member name="P:EnterpriseDT.Net.Proxy.Http.HttpResponse.Reason">
            
            
             @return
        </member>
        <member name="T:EnterpriseDT.Google.GData.Spreadsheets.ColCountElement">
            <summary>
            GData schema extension for rowCount element.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.ColCountElement.#ctor">
            <summary>
            default constructor 
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.ColCountElement.#ctor(System.UInt32)">
            <summary>
            default constructor with an initial value as a integer 
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Spreadsheets.ColCountElement.Count">
            <summary>
            Gets or sets the count of rows.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Spreadsheets.ListFeed">
            <summary>
            Feed API customization class for defining a List feed.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.ListFeed.#ctor(System.Uri,EnterpriseDT.Google.GData.Client.IService)">
            <summary>
            Constructor
            </summary>
            <param name="uriBase">The uri for this list feed.</param>
            <param name="iService">The Spreadsheets service.</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.ListFeed.CreateFeedEntry">
            <summary>
            returns a new entry for this feed
            </summary>
            <returns>AtomEntry</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.ListFeed.HandleExtensionElements(EnterpriseDT.Google.GData.Client.ExtensionElementEventArgs,EnterpriseDT.Google.GData.Client.AtomFeedParser)">
            <summary>
            get's called after we already handled the custom entry, to handle all 
            other potential parsing tasks
            </summary>
            <param name="e">the event arguments</param>
            <param name="parser">the atom feed parser calling</param>
        </member>
        <member name="M:EnterpriseDT.Net.Zlib.SupportClass.Identity(System.Int64)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Zlib.SupportClass.Identity(System.UInt64)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Zlib.SupportClass.Identity(System.Single)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Zlib.SupportClass.Identity(System.Double)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Zlib.SupportClass.URShift(System.Int32,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Zlib.SupportClass.URShift(System.Int32,System.Int64)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Zlib.SupportClass.URShift(System.Int64,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Zlib.SupportClass.URShift(System.Int64,System.Int64)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Pro.ProFTPSocket">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPSocket.Connected">
            <summary>
            True if the control socket was connected at the last operation
            </summary>
        </member>
        <member name="T:EnterpriseDT.Util.Debug.TraceAppender">
            <summary>Appends log statements using <see cref="T:System.Diagnostics.Trace"/>.</summary>
            <author>Hans Andersen</author>
            <version>$Revision: 1.2 $</version>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.TraceAppender.Log(System.String)">
            <summary> 
            Log a message
            </summary>
            <param name="msg"> message to log
            </param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.TraceAppender.Log(System.Exception)">
            <summary> 
            Log a stack trace
            </summary>
            <param name="t"> throwable object
            </param>		
        </member>
        <member name="M:EnterpriseDT.Util.Debug.TraceAppender.Close">
            <summary> 
            Close this appender
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SFTPFile">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SFTPFile.log">
            <summary> Logging object</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPFile.Pad(System.Int32)">
            <summary>
            Produce a blank padding string
            </summary>
            <param name="num">number of blank spaces</param>
            <returns>padding string</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SFTPFileAttributes">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SFTPFileAttributes.TIMESTAMP_FORMAT_YR">
            <summary> Date format</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SFTPFileAttributes.TIMESTAMP_FORMAT">
            <summary> Date format</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SFTPFileAttributes.UNIX_EPOCH">
            <summary>
            Unix epoch datetime
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SFTPFileAttributes.extended">
            <summary>
            Extension name-value pairs (version 3, 4)
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPFileAttributes.SetPermissions(System.String)">
            <summary>
            Set new permissions from a Unix-style permissions string
            </summary>
            <param name="newPermissions">Unix permissions string</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPFileAttributes.GetPermissionsString">
            <summary>
            Get the existing permissions as a Unix permissions string
            </summary>
            <returns>Unix permissions string</returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SFTPFileAttributes.User">
            <summary>
            Get or set the file's user/uid. 
            </summary>
            <remarks>
            Most versions will only accept an integer, i.e. the UID. Only
            version 4 upwards will accept a user name
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SFTPFileAttributes.Group">
            <summary>
            Get or set the file's group/gid. 
            </summary>
            <remarks>
            Most versions will only accept an integer, i.e. the GID. Only
            version 4 upwards will accept a group name
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SFTPFileAttributes.Size">
            <summary>
            Get or set the remote file's size 
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.OAuthBase">
            <summary>
            The original OAuth code from http://eran.sandler.co.il/, hosted at http://oauth.net
            Modified only to change namespace.
            Written by Eran Sandler (http://eran.sandler.co.il)
            Edited by Claudio Cherubino and Alain Vongsouvanh
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.OAuthBase.ComputeHash(System.Security.Cryptography.HashAlgorithm,System.String)">
            <summary>
            Helper function to compute a hash value
            </summary>
            <param name="hashAlgorithm">The hashing algorithm used. If that algorithm needs some initialization,
            like HMAC and its derivatives, they should be initialized prior to passing it to this function</param>
            <param name="data">The data to hash</param>
            <returns>a Base64 string of the hash value</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.OAuthBase.GetQueryParameters(System.String)">
            <summary>
            Overloaded version of GetQueryParameters to work without a IDictionary parameter
            </summary>
            <param name="querystring">The query string part of the Url</param>
            <returns>A sorted dictionary with string keys and values representing the query parameters</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.OAuthBase.GetQueryParameters(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Internal function to parse query string parameters and merge them with an existing dictionary
            </summary>
            <param name="querystring">The query string part of the Url</param>
            <param name="dict">The dictionary to be merged with the query string parameters</param>
            <returns>A sorted dictionary with string keys and values representing the query parameters merged with
            the values taken from the dictionary passed as parameter</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.OAuthBase.EncodingPerRFC3986(System.String)">
            <summary>
            All parameter names and values are escaped using the [RFC3986]  
            percent-encoding (%xx) mechanism. Characters not in the unreserved character 
            MUST be encoded. Characters in the unreserved character set MUST NOT be encoded. 
            Hexadecimal characters in encodings MUST be upper case. Text names and values MUST be 
            encoded as UTF-8 octets before percent-encoding them per [RFC3629] 
            </summary>
            <param name="value">The value to Url encode</param>
            <returns>Returns a Url encoded string</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.OAuthBase.NormalizeRequestParameters(System.Collections.Generic.SortedDictionary{System.String,System.String})">
            <summary>
            Normalizes the request parameters according to the spec for the signature generation.
            </summary>
            <param name="parameters">The sorted dictionary containing parameters</param>
            <returns>a string representing the normalized parameters</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.OAuthBase.GenerateSignatureBase(System.Uri,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Generate the signature base that is used to produce the signature
            </summary>
            <param name="url">The full url that needs to be signed including its non OAuth url parameters</param>
            <param name="consumerKey">The consumer key</param>        
            <param name="token">The token, if available. If not available pass null or an empty string</param>
            <param name="tokenSecret">The token secret, if available. If not available pass null or an empty string</param>
            <param name="httpMethod">The http method used. Must be a valid HTTP method verb (POST,GET,PUT, etc)</param>
            <param name="timeStamp">The OAuth timestamp. Must be a valid timestamp and equal or greater than
            timestamps used in previous requests</param>
            <param name="nonce">The OAuth nonce. A random string uniquely generated for each request</param>
            <param name="signatureType">The signature type.</param>
            <returns>The signature base</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.OAuthBase.GenerateSignatureBase(System.Uri,System.String,EnterpriseDT.Google.GData.Client.OAuthParameters)">
            <summary>
            Generate the signature base that is used to produce the signature
            </summary>
            <param name="url">The full url that needs to be signed including its non OAuth url parameters</param>
            <param name="httpMethod">The http method used. Must be a valid HTTP method verb (POST,GET,PUT, etc)</param>       
            <param name="parameters">The OAuth parameters</param>
            <returns>The signature base</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.OAuthBase.GenerateSignatureUsingHash(System.String,System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Generate the signature value based on the given signature base and hash algorithm
            </summary>
            <param name="signatureBase">The signature based as produced by the GenerateSignatureBase method or by any other means</param>
            <param name="hash">The hash algorithm used to perform the hashing. If the hashing algorithm requires initialization or a key it should be set prior to calling this method</param>
            <returns>A base64 string of the hash value</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.OAuthBase.GenerateSignature(System.Uri,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Generates a signature using the HMAC-SHA1 algorithm
            </summary>		
            <param name="url">The full url that needs to be signed including its non OAuth url parameters</param>
            <param name="consumerKey">The consumer key</param>
            <param name="consumerSecret">The consumer seceret</param>
            <param name="token">The token, if available. If not available pass null or an empty string</param>
            <param name="tokenSecret">The token secret, if available. If not available pass null or an empty string</param>
            <param name="httpMethod">The http method used. Must be a valid HTTP method verb (POST,GET,PUT, etc)</param>
            <param name="timeStamp">The OAuth timestamp. Must be a valid timestamp and equal or greater than
            timestamps used in previous requests</param>
            <param name="nonce">The OAuth nonce. A random string uniquely generated for each request</param>
            <returns>A base64 string of the hash value</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.OAuthBase.GenerateSignature(System.Uri,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Generates a signature using the specified signatureMethod 
            </summary>		
            <param name="url">The full url that needs to be signed including its non OAuth url parameters</param>
            <param name="consumerKey">The consumer key</param>
            <param name="consumerSecret">The consumer seceret</param>
            <param name="token">The token, if available. If not available pass null or an empty string</param>
            <param name="tokenSecret">The token secret, if available. If not available pass null or an empty string</param>
            <param name="httpMethod">The http method used. Must be a valid HTTP method verb (POST,GET,PUT, etc)</param>
            <param name="timeStamp">The OAuth timestamp. Must be a valid timestamp and equal or greater than
            timestamps used in previous requests</param>
            <param name="nonce">The OAuth nonce. A random string uniquely generated for each request</param>
            <param name="signatureMethod">The type of signature to use</param>
            <returns>A base64 string of the hash value</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.OAuthBase.GenerateSignature(System.Uri,System.String,EnterpriseDT.Google.GData.Client.OAuthParameters)">
            <summary>
            Generates a signature using the specified signatureMethod 
            </summary>		
            <param name="url">The full url that needs to be signed including its non OAuth url parameters</param>
            <param name="httpMethod">The http method used. Must be a valid HTTP method verb (POST,GET,PUT, etc)</param>
            <param name="parameters">The OAuth parameters</param>
            <returns>A base64 string of the hash value</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:EnterpriseDT.Google.GData.Client.OAuthBase.GenerateOAuthSignatureEncoded(System.String,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:EnterpriseDT.Google.GData.Client.OAuthBase.GenerateOAuthSignature(System.String,System.String)" -->
        <member name="M:EnterpriseDT.Google.GData.Client.OAuthBase.GenerateTimeStamp">
            <summary>
            Generate the timestamp for the signature        
            </summary>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.OAuthBase.GenerateNonce">
            <summary>
            Generate a nonce
            </summary>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Pro.ProFTPControlSocket">
            <summary>
            Supports client-side FTP operations.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPControlSocket.IMPLICIT_FTPS_CONTROL_PORT">
            <summary>   The default and standard control port number for implicit FTPS.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPControlSocket.log">
            <summary> Logging object</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPControlSocket.isChannelSecure">
            <summary>
            Flag indicating whether or not the control channel has been switched
            to secure mode.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPControlSocket.isPrivateDataChannel">
            <summary>
            Flag indicating whether or not data channels are to be secure.
            This flag is affected by the PBSZ/PROT command pair; if PROT
            is set to P (Private) then it should be on otherwise it should
            be off.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPControlSocket.ConnectSocket(EnterpriseDT.Net.BaseSocket,System.String,System.Int32)">
            <summary>   
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName">
            <summary>
            Represents a Relative Distinguished Name (RDN) of a <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/>.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName"/> class.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName.#ctor(EnterpriseDT.Mentalis.Security.CertificateNameInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName"/> class.
            </summary>
            <param name="cni">A <see cref="T:EnterpriseDT.Mentalis.Security.CertificateNameInfo"/> instance that's used to initialize the object.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName"/> class.
            </summary>
            <param name="input">A pointer to a buffer that's used to initialize the object.</param>
            <param name="length">The length of the buffer.</param>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">Could not decode the buffer.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName.Initialize(EnterpriseDT.Mentalis.Security.CertificateNameInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName"/> class with a given <see cref="T:EnterpriseDT.Mentalis.Security.CertificateNameInfo"/> instance.
            </summary>
            <param name="cni">The CertificateNameInfo instance to initialize from.</param>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while initializeing the DistinguishedName object.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName.Add(EnterpriseDT.Mentalis.Security.Certificates.NameAttribute)">
            <summary>
            Adds a <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.NameAttribute"/> to the end of the list.
            </summary>
            <param name="attribute">The NameAttribute to be added to the end of the list. </param>
            <returns>The index at which the value has been added.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName.Clear">
            <summary>
            Removes all elements from the list.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName.Contains(EnterpriseDT.Mentalis.Security.Certificates.NameAttribute)">
            <summary>
            Determines whether an element is in the list.
            </summary>
            <param name="value">The <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.NameAttribute"/> to locate in the list.</param>
            <returns><b>true</b> if item is found in the list; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName.IndexOf(EnterpriseDT.Mentalis.Security.Certificates.NameAttribute)">
            <summary>
            Searches for the specified Object and returns the zero-based index of the first occurrence within the entire list.
            </summary>
            <param name="value">The <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.NameAttribute"/> to locate in the list.</param>
            <returns>The zero-based index of the first occurrence of value within the entire list, if found; otherwise, -1.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName.IndexOf(System.String)">
            <summary>
            Searches for an Object with the specified Object identifier and returns the zero-based index of the first occurrence within the entire list.
            </summary>
            <param name="oid">The object identifier to search for.</param>
            <returns>The zero-based index of the first occurrence of value within the entire list, if found; otherwise, -1.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName.Insert(System.Int32,EnterpriseDT.Mentalis.Security.Certificates.NameAttribute)">
            <summary>
            Inserts an element into the list at the specified index.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="value">The <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.NameAttribute"/> to insert.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName.Remove(EnterpriseDT.Mentalis.Security.Certificates.NameAttribute)">
            <summary>
            Removes the first occurrence of a specific element from the list.
            </summary>
            <param name="value">The <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.NameAttribute"/> to remove from the list.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the list.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName.m_List">
            <summary>
            The internal list instance.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set. </param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero -or- <paramref name="index"/> is equal to or greater than <see cref="P:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName.Count"/>.</exception>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName.Count">
            <summary>
            Gets the number of elements actually contained in the list.
            </summary>
            <value>The number of elements actually contained in the list.</value>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList">
            <summary>
            Implements a collection of <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName"/> instances.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList.#ctor">
            <summary>
            Initializes a new <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList"/> instance.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList.#ctor(System.Collections.ArrayList)">
            <summary>
            Initializes a new <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList"/> instance.
            </summary>
            <param name="state">The initial state of the collection.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="state"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList.Add(EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName)">
            <summary>
            Adds a <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName"/> to the end of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList"/>.
            </summary>
            <param name="value">The <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName"/> to be added to the end of the DistinguishedNameList.</param>
            <returns>The list index at which the value has been added.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.NotSupportedException">The list is read-only -or- the list has a fixed size.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList.Clear">
            <summary>
            Removes all elements from the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The list is read-only -or- the list has a fixed size.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList.Contains(EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName)">
            <summary>
            Determines whether an element is in the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList"/>.
            </summary>
            <param name="value">The Object to locate in the DistinguishedNameList. The element to locate cannot be a null reference (<b>Nothing</b> in Visual Basic).</param>
            <returns><b>true</b> if item is found in the DistinguishedNameList; otherwise, <b>false</b>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList.IndexOf(EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName)">
            <summary>
            Searches for the specified <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName"/> and returns the zero-based index of the first occurrence within the entire <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList"/>.
            </summary>
            <param name="value">The DistinguishedName to locate in the DistinguishedNameList.</param>
            <returns>The zero-based index of the first occurrence of value within the entire DistinguishedNameList, if found; otherwise, -1.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList.Insert(System.Int32,EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName)">
            <summary>
            Inserts an element into the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="value"/> should be inserted.</param>
            <param name="value">The <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName"/> to insert. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero -or- <paramref name="index"/> is greater than <see cref="P:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList.Count"/>.</exception>
            <exception cref="T:System.NotSupportedException">The DistinguishedNameList is read-only -or- the DistinguishedNameList has a fixed size.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList.Remove(EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList"/>.
            </summary>
            <param name="value">The <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName"/> to remove from the DistinguishedNameList.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.NotSupportedException">The DistinguishedNameList is read-only -or- the DistinguishedNameList has a fixed size.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero -or- <paramref name="index"/> is greater than <see cref="P:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList.Count"/>.</exception>
            <exception cref="T:System.NotSupportedException">The DistinguishedNameList is read-only -or- the DistinguishedNameList has a fixed size.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the entire <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList"/> to a compatible one-dimensional <see cref="T:System.Array"/>, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from DistinguishedNameList. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional -or- <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/> -or- the number of elements in the source DistinguishedNameList is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination array.</exception>
            <exception cref="T:System.InvalidCastException">The type of the source DistinguishedNameList cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList.GetEnumerator">
            <summary>
            Returns an enumerator for the entire <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList"/>.
            </summary>
            <returns>An IEnumerator for the entire ArrayList.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList.Clone">
            <summary>
            Creates a shallow copy of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList"/>.
            </summary>
            <returns>A shallow copy of the DistinguishedNameList.</returns>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList.m_List">
            <summary>
            Holds the internal list.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList"/> has a fixed size.
            </summary>
            <value><b>true</b> if the ArrayList has a fixed size; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList"/> is read-only.
            </summary>
            <value><b>true</b> if the ArrayList is read-only; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <value>The element at the specified index.</value>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero -or- <paramref name="index"/> is equal to or greater than <see cref="P:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList.Count"/>.</exception>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList.Count">
            <summary>
            Gets the number of elements actually contained in the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList"/>.
            </summary>
            <value>The number of elements actually contained in the DistinguishedNameList.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList"/> is synchronized (thread-safe).
            </summary>
            <value><b>true</b> if access to the DistinguishedNameList is synchronized (thread-safe); otherwise, <b>false</b>.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList"/>.
            </summary>
            <value>An object that can be used to synchronize access to the DistinguishedNameList.</value>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.SspiProvider">
            <summary>
            Defines the external methods of the CryptoAPI.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Spreadsheets.ListQuery">
            <summary>
            A subclass of FeedQuery, to create a Spreadsheets list query URI.
            Provides public properties that describe the different
            aspects of the URI, as well as a composite URI.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.ListQuery.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor 
            </summary>
            <param name="key">The spreadsheet key</param>
            <param name="worksheetId">The unique identifier or position of the worksheet</param>
            <param name="visibility">public or private</param>
            <param name="projection">full, values, or basic</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.ListQuery.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor - Sets the base URI
            </summary>
            <param name="baseUri">The feed base</param>
            <param name="key">The spreadsheet key</param>
            <param name="worksheetId">The unique identifier or position of the worksheet</param>
            <param name="visibility">public or private</param>
            <param name="projection">full, values, or basic</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.ListQuery.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="baseUri">The feed base with the key, worksheetId, visibility and 
            projections are appended and delimited by "/"</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.ListQuery.ParseUri(System.Uri)">
            <summary>
            Parses an incoming URI string and sets the instance variables
            of this object.
            </summary>
            <param name="targetUri">Takes an incoming Uri string and parses all the properties of it</param>
            <returns>Throws a query exception when it finds something wrong with the input, otherwise returns a baseuri.</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.ListQuery.Reset">
            <summary>
            Resets object state to default, as if newly created.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.ListQuery.CalculateQuery(System.String)">
            <summary>
            Creates the partial URI query string based on all set properties.
            </summary>
            <returns> string => the query part of the URI </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Spreadsheets.ListQuery.SpreadsheetQuery">
            <summary>
            A spreadsheet query string, if set to a non-null value, 
            then the FullTextQuery will be set to null
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Spreadsheets.ListQuery.OrderByColumn">
            <summary>
            The header of the column to sort results by.  Sets OrderByPosition to false.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Spreadsheets.ListQuery.OrderByPosition">
            <summary>
            If true, then results will be ordered by the position in the spreadsheet.  
            Sets OrderByColumn to null.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Spreadsheets.ListQuery.Reverse">
            <summary>
            If true, then however the results are ordered will be reversed.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.MkDirCommand">
            <summary>  
            Make a directory
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.2 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Util.PasswordHasher">
            <summary>
            Best password hasher
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.PasswordHasher.Hash(System.String,System.String)">
            <summary>
            Convert a byte array to a string in hex
            </summary>
            <param name="data">byte array</param>
            <returns>hex string</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpData">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpData.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Proxy.ProxyType">
            <summary>
            The type of proxy to be used, or if a proxy is to be used at all.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Proxy.ProxyType.NoProxy">
            <summary>   
            No proxy set
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Proxy.ProxyType.Http">
            <summary>   
            HTTP proxy type. Note that for FTP, only passive mode is supported.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Proxy.ProxyType.Socks4">
            <summary>   
            SOCKS 4 proxy
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Proxy.ProxyType.Socks4A">
            <summary>   
            SOCKS 4A proxy
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Proxy.ProxyType.Socks5">
            <summary>   
            SOCKS 5 proxy
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Proxy.ProxySettings">
            <summary>
            Holds all the settings required for connecting via a proxy. 
            </summary>
            <remarks>
            Settings for HTTP, SOCKS4, SOCKS4A and SOCKS5 are held in this
            class. 
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Proxy.ProxySettings.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Proxy.ProxySettings.#ctor(System.String,System.Int32)">
            <summary>
            Constructs a <c>ProxySettings</c> setting the proxy-address and the proxy-port.
            </summary>
            <param name="proxyAddress">Address to be used to connect to the proxy.</param>
            <param name="proxyPort">Port on the proxy to connect to.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Proxy.ProxySettings.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            Constructs a <c>ProxySettings</c> setting the proxy-address and the proxy-port.
            </summary>
            <param name="proxyAddress">Address to be used to connect to the proxy.</param>
            <param name="proxyPort">Port on the proxy to connect to.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Proxy.ProxySettings.OnPropertyChanged(System.String)">
            <summary>
            Called when a property is changed.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Proxy.ProxySettings.ProxyAddress">
            <summary>
            Address to be used to connect to the proxy.
            </summary>
            <remarks>
            Proxies often have more than one address.  This address should be the one
            that the client must use to connect to it.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Proxy.ProxySettings.PublicProxyAddress">
            <summary>
            Address that the proxy server presents to the "outside" network.
            </summary>
            <remarks>
            <para>
            This is the address that systems that are being connected to through the proxy
            will see.
            </para>
            <para>
            SOCKS servers usually provide this address to the client as SOCKS connections
            to be made, so it's usually unnecessary to set this property.  In some instances 
            however, when the server does not provide this address it may be necessary to 
            set this property. Not required for HTTP proxies.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Proxy.ProxySettings.ProxyPort">
            <summary>
            Port to be used to connect to the proxy.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Proxy.ProxySettings.UserName">
            <summary>
            User name used to authenticate to the proxy.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Proxy.ProxySettings.Password">
            <summary>
            Password used to authenticate to the proxy.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Proxy.ProxySettings.ProxyType">
            <summary>
            Type of proxy being used.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Proxy.ProxySettings.NullAuthenticationEnabled">
            <summary>
            True if null authentication enabled for SOCKS5.
            </summary>
            <remarks>Irrelevant to protocols other than SOCKS5</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Proxy.ProxySettings.PasswordAuthenticationEnabled">
            <summary>
            True if password authentication enabled for SOCKS5.
            </summary>
            <remarks>Irrelevant to protocols other than SOCKS5</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Proxy.ProxySettings.PropertyChangeHandler">
            <summary>
            Called when a property is changed.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.Utilities">
            <summary>String utilities
            </summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.Utilities.XSDTrue">
            <summary>
            xsd version of bool:true
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.Utilities.XSDFalse">
            <summary>
            xsd version of bool:false
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.Utilities.DefaultUser">
            <summary>
            default user string
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Utilities.#ctor">
            <summary>private constructor to prevent the compiler from generating a default one</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Utilities.IsPersistable(System.String)">
            <summary>Little helper that checks if a string is XML persistable</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Utilities.IsPersistable(EnterpriseDT.Google.GData.Client.AtomUri)">
            <summary>Little helper that checks if a string is XML persistable</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Utilities.IsPersistable(System.Int32)">
            <summary>Little helper that checks if an int is XML persistable</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Utilities.IsPersistable(System.DateTime)">
            <summary>Little helper that checks if a datevalue is XML persistable</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Utilities.ConvertBooleanToXSDString(System.Boolean)">
            <summary>
            .NET treats bool as True/False as the default
            string representation. XSD requires true/false
            this method encapsulates this
            </summary>
            <param name="flag">the boolean to convert</param>
            <returns>"true" or "false"</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Utilities.ConvertToXSDString(System.Object)">
            <summary>
            .NET treats bool as True/False as the default
            string representation. XSD requires true/false
            this method encapsulates this
            </summary>
            <param name="obj">the object to convert</param>
            <returns>the string representation</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Utilities.EncodeString(System.String)">
            <summary>helper to read in a string and Encode it</summary> 
            <param name="content">the xmlreader string</param>
            <returns>UTF8 encoded string</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Utilities.EncodeStringToUtf8(System.String)">
            <summary>
            returns you a bytearray of UTF8 bytes from the string passed in
            the passed in string is assumed to be UTF16
            </summary>
            <param name="content">UTF16 string</param>
            <returns>utf 8 byte array</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Utilities.EncodeSlugHeader(System.String)">
            <summary>helper to read in a string and Encode it according to 
            RFC 5023 rules for slugheaders</summary> 
            <param name="slug">the Unicode string for the slug header</param>
            <returns>ASCII  encoded string</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Utilities.DecodedValue(System.String)">
            <summary>
            used as a cover method to hide the actual decoding implementation
            decodes an html decoded string
            </summary>
            <param name="value">the string to decode</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Utilities.UrlDecodedValue(System.String)">
            <summary>
            used as a cover method to hide the actual decoding implementation
            decodes an URL decoded string
            </summary>
            <param name="value">the string to decode</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Utilities.UriEncodeReserved(System.String)">
            <summary>helper to read in a string and replace the reserved URI 
            characters with hex encoding</summary> 
            <param name="content">the parameter string</param>
            <returns>hex encoded string</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Utilities.IsWeakETag(System.String)">
            <summary>
             tests an etag for weakness. returns TRUE for weak etags and for null strings
            </summary>
            <param name="eTag"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Utilities.IsWeakETag(EnterpriseDT.Google.GData.Client.ISupportsEtag)">
            <summary>
             tests an etag for weakness. returns TRUE for weak etags and for null strings
            </summary>
            <param name="ise">the element that supports an etag</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Utilities.UriEncodeUnsafe(System.String)">
            <summary>helper to read in a string and replace the reserved URI 
            characters with hex encoding</summary> 
            <param name="content">the parameter string</param>
            <returns>hex encoded string</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Utilities.LocalDateInUTC(System.DateTime)">
            <summary>Method to output just the date portion as string</summary>
            <param name="dateTime">the DateTime object to output as a string</param>
            <returns>an rfc-3339 string</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Utilities.LocalDateTimeInUTC(System.DateTime)">
            <summary>Method to output DateTime as string</summary>
            <param name="dateTime">the DateTime object to output as a string</param>
            <returns>an rfc-3339 string</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Utilities.NextChildElement(System.Xml.XmlReader,System.Int32@)">
            <summary>
            returns the next child element of the xml reader, based on the
            depth passed in.
            </summary>
            <param name="reader">the xml reader to use</param>
            <param name="depth">the depth to start with</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Utilities.FormatTimeOffset(System.TimeSpan)">
            <summary>Helper method to format a TimeSpan as a string compliant with the "time-offset" format defined in RFC-3339</summary>
            <param name="spanFromUtc">the TimeSpan to format</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Utilities.FormatNumOffset(System.TimeSpan)">
            <summary>Helper method to format a TimeSpan to {HH}:{MM}</summary>
            <param name="timeSpan">the TimeSpan to format</param>
            <returns>a string in "hh:mm" format.</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Utilities.CalculateUri(EnterpriseDT.Google.GData.Client.AtomUri,EnterpriseDT.Google.GData.Client.AtomUri,System.String)">
            <summary>public static string CalculateUri(string base, string inheritedBase, string local)</summary> 
            <param name="localBase">the baseUri from xml:base </param>
            <param name="inheritedBase">the pushed down baseUri from an outer element</param>
            <param name="localUri">the Uri value</param>
            <returns>the absolute Uri to use... </returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Utilities.EnsureAtomNamespace(System.Xml.XmlWriter)">
            <summary>Sets the Atom namespace, if it's not already set.
            </summary> 
            <param name="writer"> the xmlwriter to use</param>
            <returns> the namespace prefix</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Utilities.EnsureGDataNamespace(System.Xml.XmlWriter)">
            <summary>Sets the gData namespace, if it's not already set.
            </summary> 
            <param name="writer"> the xmlwriter to use</param>
            <returns> the namespace prefix</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Utilities.EnsureGDataBatchNamespace(System.Xml.XmlWriter)">
            <summary>Sets the gDataBatch namespace, if it's not already set.
            </summary> 
            <param name="writer"> the xmlwriter to use</param>
            <returns> the namespace prefix</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Utilities.FindToken(EnterpriseDT.Google.GData.Client.TokenCollection,System.String)">
            <summary>searches tokenCollection for a specific NEXT value. 
             The collection is assume to be a key/value pair list, so if A,B,C,D is the list
              A and C are keys, B and  D are values
            </summary> 
            <param name="tokens">the TokenCollection to search</param>
            <param name="key">the key to search for</param>
            <returns> the value string</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Utilities.ParseStreamInTokenCollection(System.IO.Stream)">
            <summary>converts a form response stream to a TokenCollection,
             by parsing the contents of the stream for newlines and equal signs
             the input stream is assumed to be an ascii encoded form resonse
            </summary> 
             <param name="inputStream">the stream to read and parse</param>
            <returns> the resulting TokenCollection </returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Utilities.ParseValueFormStream(System.IO.Stream,System.String)">
            <summary>parses a form response stream in token form for a specific value
            </summary> 
            <param name="inputStream">the stream to read and parse</param>
            <param name="key">the key to search for</param>
            <returns> the string in the tokenized stream </returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Utilities.FindExtension(EnterpriseDT.Google.GData.Client.ExtensionList,System.String,System.String)">
            <summary>
            Finds a specific ExtensionElement based on it's local name
            and it's namespace. If namespace is NULL, the first one where
            the localname matches is found. If there are extensionelements that do 
            not implment ExtensionElementFactory, they will not be taken into account
            Primary use of this is to find XML nodes
            </summary>
            <param name="arrList">the array to search through</param>
            <param name="localName">the xml local name of the element to find</param>
            <param name="ns">the namespace of the elementToPersist</param>
            <returns>Object</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Utilities.FindExtensions(EnterpriseDT.Google.GData.Client.ExtensionList,System.String,System.String,EnterpriseDT.Google.GData.Client.ExtensionList)">
            <summary>
            Finds all ExtensionElement based on it's local name
            and it's namespace. If namespace is NULL, allwhere
            the localname matches is found. If there are extensionelements that do 
            not implment ExtensionElementFactory, they will not be taken into account
            Primary use of this is to find XML nodes
            </summary>
            <param name="arrList">the array to search through</param>
            <param name="localName">the xml local name of the element to find</param>
            <param name="ns">the namespace of the elementToPersist</param>
            <param name="arr">the array to fill</param>
            <returns>none</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Utilities.FindExtensions``1(EnterpriseDT.Google.GData.Client.ExtensionList,System.String,System.String)">
            <summary>
            Finds all ExtensionElement based on it's local name
            and it's namespace. If namespace is NULL, allwhere
            the localname matches is found. If there are extensionelements that do 
            not implment ExtensionElementFactory, they will not be taken into account
            Primary use of this is to find XML nodes
            </summary>
            <param name="arrList">the array to search through</param>
            <param name="localName">the xml local name of the element to find</param>
            <param name="ns">the namespace of the elementToPersist</param>
            <returns>none</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Utilities.GetAttributeValue(System.String,System.Xml.XmlNode)">
            <summary>
            save method to get an attribute value from an xmlnode
            </summary>
            <param name="attributeName"></param>
            <param name="xmlNode"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Utilities.GetAssemblyVersion">
            <summary>
            returns the current assembly version using split() instead of the version 
            attribute to avoid security issues
            </summary>
            <returns>the current assembly version as a string</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Utilities.ConstructUserAgent(System.String,System.String)">
            <summary>
            returns the useragent string, including a version number
            </summary>
            <returns>the constructed userAgend in a standard form</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Utilities.QueryClientLoginToken(EnterpriseDT.Google.GData.Client.GDataCredentials,System.String,System.String,System.Boolean,System.Uri)">
            <summary>goes to the Google auth service, and gets a new auth token</summary> 
            <returns>the auth token, or NULL if none received</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Utilities.QueryClientLoginToken(EnterpriseDT.Google.GData.Client.GDataCredentials,System.String,System.String,System.Boolean,System.Net.IWebProxy,System.Uri)">
            <summary>goes to the Google auth service, and gets a new auth token</summary> 
            <returns>the auth token, or NULL if none received</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.Utilities.getAuthException(EnterpriseDT.Google.GData.Client.TokenCollection,System.Net.HttpWebResponse)">
            <summary>
             Returns the respective GDataAuthenticationException given the return
            values from the login URI handler.
            </summary>
            <param name="tokens">The tokencollection of the parsed return form</param>
            <param name="response">the  webresponse</param> 
            <returns>AuthenticationException</returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.Utilities.EmptyDate">
            <summary>returns a blank emptyDate. That's the default for an empty string date</summary> 
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.TokenCollection">
            <summary>standard string tokenizer class. Pretty much cut/copy/paste out of 
            MSDN. 
            </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.TokenCollection.#ctor(System.String,System.Char[])">
            <summary>Constructor, takes a string and a delimiter set</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.TokenCollection.#ctor(System.String,System.Char,System.Boolean,System.Int32)">
            <summary>Constructor, takes a string and a delimiter set</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.TokenCollection.CreateDictionary">
            <summary>
            creates a dictionary of tokens based on this tokencollection
            </summary>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.TokenCollection.GetEnumerator">
            <summary>IEnumerable Interface Implementation, for the noninterface</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.TokenCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>IEnumerable Interface Implementation</summary> 
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.TokenCollection.TokenEnumerator">
            <summary>Inner class implements IEnumerator interface</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.TokenCollection.TokenEnumerator.#ctor(EnterpriseDT.Google.GData.Client.TokenCollection)">
            <summary>Standard constructor</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.TokenCollection.TokenEnumerator.MoveNext">
            <summary>IEnumerable::MoveNext implementation</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.TokenCollection.TokenEnumerator.Reset">
            <summary>IEnumerable::Reset implementation</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.TokenCollection.TokenEnumerator.Current">
            <summary>Current implementation, non interface, type-safe</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.TokenCollection.TokenEnumerator.System#Collections#IEnumerator#Current">
            <summary>Current implementation, interface, not type-safe</summary> 
        </member>
        <member name="M:EnterpriseDT.Net.Ssh.Routrek.PKI.RSAKeyPair.#ctor(EnterpriseDT.Util.BigInteger,EnterpriseDT.Util.BigInteger,EnterpriseDT.Util.BigInteger,EnterpriseDT.Util.BigInteger,EnterpriseDT.Util.BigInteger,EnterpriseDT.Util.BigInteger)">
            <summary>
            RSA keypair
            </summary>
            <param name="e">internal exponent</param>
            <param name="d">private exponent</param>
            <param name="n">p x q</param>
            <param name="u">phi, i.e. (p-1)(q-1)</param>
            <param name="p">prime</param>
            <param name="q">prime</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ssh.Routrek.PKI.RSAKeyPair.#ctor(System.Security.Cryptography.RSAParameters)">
            <summary>
            Not sure if this works properly - private key fails openssl check
            </summary>
            <param name="p"></param>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHCV2.ClientKeyExchanger.log">
            <summary> Logging object</summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Pro.ProFTPException">
            <summary>
            Indicates that an error occurred within edtFTPnet/PRO.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpRmDir">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <remarks>
            byte   SSH_FXP_RMDIR
            uint32 request-id
            string filename  [UTF-8]
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpRmDir.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.OAuthUri">
            <summary>
            An implementation of Uri that will create an uri with an 
            xoauth_requestor_id query string.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.OAuthUri.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a Uri with a xoauth_requestor_id query string.
            </summary>
            <param name="uriString">The base Uri</param>
            <param name="userName">The username for the xoauth_requestor_id</param>
            <param name="domain">The domain for the xoauth_requestor_id</param>
        </member>
        <member name="T:EnterpriseDT.Net.Ssh.Routrek.SSHC.SSHConnectionParameter">
            <summary>
            Fill the properties of ConnectionParameter object before you start the connection.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssl.SSLFTPException">
            <summary>
            Indicates that an SSL-related error occurred.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPException.CertificateChain">
            <summary>
            Returns the certificate-chain presented by the server, if the exception occurred during
            a failed SSL/TLS handshake.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPReply">
            <summary>  Encapsulates the FTP server reply
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.6 $
            </version>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPReply.replyCode">
            <summary>  Reply code</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPReply.replyText">
            <summary>  Reply text</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPReply.data">
            <summary> Lines of data returned, e.g. FEAT</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPReply.#ctor(System.String,System.String)">
            <summary>  Constructor. Only to be constructed
            by this package, hence package access
            
            </summary>
            <param name="replyCode"> the server's reply code
            </param>
            <param name="replyText"> the server's reply text
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPReply.#ctor(System.String,System.String,System.String[])">
            <summary>  Constructor. Only to be constructed
            by this package, hence package access
            
            </summary>
            <param name="replyCode"> the server's reply code
            </param>
            <param name="replyText"> the server's full reply text
            </param>
            <param name="data">      data lines contained in reply text
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPReply.ReplyCode">
            <summary>  Getter for reply code
            
            </summary>
            <returns> server's reply code
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPReply.ReplyText">
            <summary>  Getter for reply text
            
            </summary>
            <returns> server's reply text
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPReply.ReplyData">
            <summary> Getter for reply data lines
            
            </summary>
            <returns> array of data lines returned (if any). Null
            if no data lines
            </returns>
        </member>
        <member name="T:EnterpriseDT.Util.License.LicenseReader">
            <summary>  
            Some useful licence key methods for extracting data from keys
            </summary>
            <author>       
            Hans Andersen
            </author>
            <version>      
            $Revision: 1.6 $
            </version>
        </member>
        <member name="M:EnterpriseDT.Util.License.LicenseReader.CalcRegExpiryDateNew(System.String,System.String)">
            <summary>
            Returns the expiry date encoded into the given key
            </summary>
            <remarks>
            Returns the expiry date encoded into the given key, provided that
            the name matches the key. If the name doesn't match the key or
            if the key is invalid in some way, then an invalid date is returned.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Util.License.LicenseReader.CalcRegExpiryDateOld(System.String,System.String)">
            <summary>
            Returns the expiry date encoded into the given key
            </summary>
            <remarks>
            Returns the expiry date encoded into the given key, provided that
            the name matches the key. If the name doesn't match the key or
            if the key is invalid in some way, then an invalid date is returned.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Util.License.LicenseReader.CalcRegExpiryDate(System.String,System.String,System.Int32)">
            <summary>
            Returns the expiry date encoded into the given key
            </summary>
            <remarks>
            Returns the expiry date encoded into the given key, provided that
            the name matches the key. If the name doesn't match the key or
            if the key is invalid in some way, then an invalid date is returned.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Util.License.LicenseReader.CalcRegFlagsNew(System.String,System.String)">
            <summary> 
            Returns array of flags that have been registered with this name and key
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.License.LicenseReader.CalcRegFlagsOld(System.String,System.String)">
            <summary> 
            Returns array of flags that have been registered with this name and key
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.License.LicenseReader.CalcRegFlags(System.String,System.String,System.Int32)">
            <summary> 
            Returns array of flags that have been registered with this name and key
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpUnknown">
            <summary>
            Represents all unknown messages. SSH_FXP_UNKNOWN is not a real type.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpUnknown.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Pro.Design.ProFTPConnectionPropertyEditor">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.Design.ProFTPConnectionPropertyEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="Context"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.Design.ProFTPConnectionPropertyEditor.List_SelectedValueChanged(System.Object,System.EventArgs)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.Design.ProFTPConnectionPropertyEditor.GetFTPConnections(System.Object)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.Design.ProFTPConnectionPropertyEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Pro.Design.ProFTPSocksEditor">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.Design.ProFTPSocksEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="Context"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.Design.ProFTPSocksEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="Context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Pro.Design.ProFTPConnectionEditor">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.Design.ProFTPConnectionEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="Context"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.Design.ProFTPConnectionEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="Context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Pro.Design.ProFTPConnectionDesigner">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.Design.ProFTPConnectionDesigner.#ctor">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.Design.ProFTPConnectionDesigner.Initialize(System.ComponentModel.IComponent)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.Design.ProFTPConnectionDesigner.DoDefaultAction">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.Design.ProFTPConnectionDesigner.Verbs">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Pro.Design.CertificatePropertyEditor">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.Design.CertificatePropertyEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.Design.CertificatePropertyEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.Design.CertificatePropertyEditor.PromptForCertificate(System.Windows.Forms.Form,System.Boolean)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="parent"></param>
            <param name="promptForPrivateKey"></param>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Pro.Design.ProFTPConnectionSerializer">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.Design.ProFTPConnectionSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="manager"></param>
            <param name="codeDomObject"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.Design.ProFTPConnectionSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="manager"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.Design.ProFTPConnectionSerializer.GetTargetObject(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="manager"></param>
            <param name="codeDomObject"></param>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Pro.Design.ProFTPCxnSite">
            <summary>
            INTERNAL USE ONLY
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.Design.ProFTPCxnSite.#ctor(System.ComponentModel.IComponent,System.ComponentModel.IContainer)">
            <summary>
            INTERNAL USE ONLY
            </summary>
            <param name="component"></param>
            <param name="container"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.Design.ProFTPCxnSite.GetService(System.Type)">
            <summary>
            INTERNAL USE ONLY
            </summary>
            <param name="serviceType"></param>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.Design.ProFTPCxnSite.Component">
            <summary>
            INTERNAL USE ONLY
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.Design.ProFTPCxnSite.Container">
            <summary>
            INTERNAL USE ONLY
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.Design.ProFTPCxnSite.DesignMode">
            <summary>
            INTERNAL USE ONLY
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.Design.ProFTPCxnSite.Name">
            <summary>
            INTERNAL USE ONLY
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.HostNameResolver">
            <summary>
            Utility class for resolving names on all versions of the .NET framework.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.HostNameResolver.IP_ADDRESS_REGEX">
            <summary>
            Used for determining whether a host-name is actually an IP address.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.HostNameResolver.log">
            <summary>
            Logger
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.HostNameResolver.GetAddress(System.String)">
            <summary>
            Returns the IP address matching the given host-name or IP address-string.
            </summary>
            <param name="hostName">Host-name or IP address-string.</param>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket">
            <summary>
            Implements the Berkeley sockets interface and optionally encrypts/decrypts transmitted data.
            </summary>
            <remarks>Any public static (Shared in Visual Basic) members of this type are safe for multithreaded operations. Any instance members are not guaranteed to be thread safe.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,EnterpriseDT.Util.Debug.ILogTag)">
            <summary>
            Initializes a new instance of the SecureSocket class.
            </summary>
            <param name="addressFamily">One of the <see cref="T:System.Net.Sockets.AddressFamily"/> values.</param>
            <param name="socketType">One of the <see cref="T:System.Net.Sockets.SocketType"/> values.</param>
            <param name="protocolType">One of the <see cref="T:System.Net.Sockets.ProtocolType"/> values.</param>
            <exception cref="T:System.Net.Sockets.SocketException">The combination of addressFamily, socketType, and protocolType results in an invalid socket.</exception>
            <remarks>The SecureSocket will act like a normal Socket and will not use a secure transfer protocol.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions,EnterpriseDT.Util.Debug.ILogTag)">
            <summary>
            Initializes a new instance of the SecureSocket class.
            </summary>
            <param name="addressFamily">One of the <see cref="T:System.Net.Sockets.AddressFamily"/> values.</param>
            <param name="socketType">One of the <see cref="T:System.Net.Sockets.SocketType"/> values.</param>
            <param name="protocolType">One of the <see cref="T:System.Net.Sockets.ProtocolType"/> values.</param>
            <param name="options">The <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions"/> to use.</param>
            <exception cref="T:EnterpriseDT.Mentalis.Security.SecurityException">An error occurs while changing the security protocol.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.#ctor(System.Net.Sockets.Socket,EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions,EnterpriseDT.Util.Debug.ILogTag)">
            <summary>
            Initializes a new instance of the SecureSocket class.
            </summary>
            <param name="accepted">The accepted <see cref="T:System.Net.Sockets.Socket"/> instance.</param>
            <param name="options">The <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions"/> to use.</param>
            <exception cref="T:EnterpriseDT.Mentalis.Security.SecurityException">An error occurs while changing the security protocol.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.ChangeSecurityProtocol(EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions)">
            <summary>
            Changes the security protocol. This method can only be used to 'upgrade' a connection from no-security to either SSL or TLS.
            </summary>
            <param name="options">The new <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions"/> parameters.</param>
            <exception cref="T:EnterpriseDT.Mentalis.Security.SecurityException">An error occurs while changing the security protocol.</exception>
            <remarks>
            Programs should only call this method if there is no active <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.Connect(System.Net.EndPoint)"/>, <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.Accept"/>, 
            one of the <c>Send</c> methods or 
            one of the <c>Receive</c> methods!
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.Connect(System.Net.EndPoint)">
            <summary>
            Establishes a connection to a remote device and optionally negotiates a secure transport protocol.
            </summary>
            <param name="remoteEP">An <see cref="T:System.Net.EndPoint"/> that represents the remote device.</param>
            <exception cref="T:System.ArgumentNullException">The remoteEP parameter is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The SecureSocket has been closed.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.SecurityException">The security negotiation failed.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for a connection to a network device.
            </summary>
            <param name="remoteEP">An <see cref="T:System.Net.EndPoint"/> that represents the remote device.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous connection.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="remoteEP"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while creating the SecureSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The SecureSocket has been closed.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.OnConnect(System.IAsyncResult)">
            <summary>
            Called then the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/> connects to the remote host.
            </summary>
            <param name="ar">An <see cref="T:System.IAsyncResult"/> instance.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.EndConnect(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous connection request.
            </summary>
            <param name="asyncResult">The result of the asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="asyncResult"/> was not returned by a call to the <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)"/> method.</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.EndConnect(System.IAsyncResult)"/> was previously called for the asynchronous connection.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the SecureSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The SecureSocket has been closed.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.SecurityException">An error occurred while negotiating the security protocol.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.Accept">
            <summary>
            Creates a new <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/> to handle an incoming connection request.
            </summary>
            <returns>A SecureSocket to handle an incoming connection request.</returns>
            <remarks>The returned <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket"/> can be cast to a SecureSocket if necessary.</remarks>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the SecureSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The SecureSocket has been closed.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.SecurityException">Unable to create the credentials.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.BeginAccept(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to create a new <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/> to accept an incoming connection request.
            </summary>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object containing state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous SecureSocket creation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="callback"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while creating the SecureSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The SecureSocket has been closed.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.EndAccept(System.IAsyncResult)">
            <summary>
            Ends an asynchronous request to create a new <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/> to accept an incoming connection request.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>A SecureSocket to handle the incoming connection.</returns>
            <remarks>The returned <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket"/> can be cast to a SecureSocket if necessary.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="asyncResult"/> was not created by a call to <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.BeginAccept(System.AsyncCallback,System.Object)"/>.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the SecureSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The SecureSocket has been closed.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.SecurityException">Unable to create the credentials -or- client authentication error.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.Send(System.Byte[])">
            <summary>
            Sends data to a connected <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/>, starting at the indicated location in the data.
            </summary>
            <param name="buffer">The data to be sent.</param>
            <returns>The number of bytes sent to the SecureSocket.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The specified size is zero.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the SecureSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The SecureSocket has been closed.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.SecurityException">Unable to encrypt the data.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.Send(System.Byte[],System.Net.Sockets.SocketFlags)">
            <summary>
            Sends data to a connected <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/>, starting at the indicated location in the data.
            </summary>
            <param name="buffer">The data to be sent.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <returns>The number of bytes sent to the SecureSocket.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The specified size is zero.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the SecureSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The SecureSocket has been closed.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.SecurityException">Unable to encrypt the data.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Sends data to a connected <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/>, starting at the indicated location in the data.
            </summary>
            <param name="buffer">The data to be sent.</param>
            <param name="size">The number of bytes to send.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <returns>The number of bytes sent to the SecureSocket.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the SecureSocket.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The size parameter exceeds the size of buffer.</exception>
            <exception cref="T:System.ArgumentException">The specified size is zero.</exception>
            <exception cref="T:System.ObjectDisposedException">The SecureSocket has been closed.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.SecurityException">Unable to encrypt the data.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Sends data to a connected <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/>, starting at the indicated location in the data.
            </summary>
            <param name="buffer">The data to be sent.</param>
            <param name="offset">The position in the data buffer to begin sending data.</param>
            <param name="size">The number of bytes to send.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <returns>The number of bytes sent to the SecureSocket.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the SecureSocket.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The offset or size parameter exceeds the size of buffer.</exception>
            <exception cref="T:System.ArgumentException">The specified size is zero.</exception>
            <exception cref="T:System.ObjectDisposedException">The SecureSocket has been closed.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.SecurityException">Unable to encrypt the data.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)">
            <summary>
            Sends data asynchronously to a connected <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/>.
            </summary>
            <param name="buffer">The data to send.</param>
            <param name="offset">The zero-based position in the buffer parameter at which to begin sending data.</param>
            <param name="size">The number of bytes to send.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object containing state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous send.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the SecureSocket.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified offset or size exceeds the size of buffer.</exception>
            <exception cref="T:System.ArgumentException">The specified size is zero.</exception>
            <exception cref="T:System.ObjectDisposedException">The SecureSocket has been closed.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.SecurityException">An error occurred while encrypting the data.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.EndSend(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous send.
            </summary>
            <param name="asyncResult">The result of the asynchronous operation.</param>
            <returns>If successful, the number of bytes sent to the SecureSocket.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="asyncResult"/> was not returned by a call to the <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)"/> method.</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.EndSend(System.IAsyncResult)"/> was previously called for the asynchronous read.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the SecureSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The SecureSocket has been closed.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.SecurityException">An error occurs while communicating with the remote host.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.Receive(System.Byte[])">
            <summary>
            Receives data from a connected <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/> into a specific location of the receive buffer.
            </summary>
            <param name="buffer">The storage location for the received data.</param>
            <returns>The number of bytes received.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the SecureSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The SecureSocket has been closed.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.SecurityException">An error occurred while decrypting the received data.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.Receive(System.Byte[],System.Net.Sockets.SocketFlags)">
            <summary>
            Receives data from a connected <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/> into a specific location of the receive buffer.
            </summary>
            <param name="buffer">The storage location for the received data.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <returns>The number of bytes received.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the SecureSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The SecureSocket has been closed.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.SecurityException">An error occurred while decrypting the received data.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Receives data from a connected <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/> into a specific location of the receive buffer.
            </summary>
            <param name="buffer">The storage location for the received data.</param>
            <param name="size">The number of bytes to receive.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/> values.</param>
            <returns>The number of bytes received.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The size exceeds the size of buffer.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the SecureSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The SecureSocket has been closed.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.SecurityException">An error occurred while decrypting the received data.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Receives data from a connected <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/> into a specific location of the receive buffer.
            </summary>
            <param name="buffer">The storage location for the received data.</param>
            <param name="offset">The location in buffer to store the received data.</param>
            <param name="size">The number of bytes to receive.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <returns>The number of bytes received.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The size exceeds the size of buffer.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the SecureSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The SecureSocket has been closed.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.SecurityException">An error occurred while decrypting the received data.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)">
            <summary>
            Begins to asynchronously receive data from a connected SecureSocket.
            </summary>
            <param name="buffer">The storage location for the received data.</param>
            <param name="offset">The zero-based position in the buffer parameter at which to store the received data.</param>
            <param name="size">The number of bytes to receive.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object containing state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous read.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the SecureSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">SecureSocket has been closed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The offset parameter is outside the bounds of buffer or size is either smaller or larger than the buffer size.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.EndReceive(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous read.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>The number of bytes received.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="asyncResult"/> was not returned by a call to the <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)"/> method.</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.EndReceive(System.IAsyncResult)"/> was previously called for the asynchronous read.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/> has been closed.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.SecurityException">An error occurs while communicating with the remote host.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.Shutdown(System.Net.Sockets.SocketShutdown)">
            <summary>
            Shuts down the secure connection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">SecureSocket has been closed.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the SecureSocket.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.SecurityException">An error occurs while shutting the secure connection down.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.ShutdownSSL">
            <summary>
            Shuts down SSL.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.BeginShutdownSSL(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to shut SSL down.
            </summary>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object containing state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous shutdown.</returns>
            <exception cref="T:System.InvalidOperationException"><see cref="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.BeginShutdownSSL(System.AsyncCallback,System.Object)"/> has already been called.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.OnShutdownSSL(System.IAsyncResult)">
            <summary>
            Called when the shutdown data has been sent to the remote server.
            </summary>
            <param name="ar">An <see cref="T:System.IAsyncResult"/> instance.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.EndShutdownSSL(System.IAsyncResult)">
            <summary>
            Ends an asynchronous request to shut SSL down.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that references the asynchronous shutdown.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.EndShutdownSSL(System.IAsyncResult)"/> has not been called first.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="asyncResult"/> has not been returned by a call to <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.EndShutdownSSL(System.IAsyncResult)"/>.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.BeginClose(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to shut the connection down.
            </summary>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object containing state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous shutdown.</returns>
            <exception cref="T:System.InvalidOperationException"><see cref="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.BeginClose(System.AsyncCallback,System.Object)"/> has already been called.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.BeginClose(System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to shut the connection down.
            </summary>
            <param name="timeoutMillis">Timeout for closure</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object containing state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous shutdown.</returns>
            <exception cref="T:System.InvalidOperationException"><see cref="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.BeginClose(System.AsyncCallback,System.Object)"/> has already been called.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.OnClose(System.IAsyncResult)">
            <summary>
            Called when the shutdown data has been sent to the remote server.
            </summary>
            <param name="ar">An <see cref="T:System.IAsyncResult"/> instance.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.EndClose(System.IAsyncResult)">
            <summary>
            Ends an asynchronous request to shut the connection down.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that references the asynchronous shutdown.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.EndClose(System.IAsyncResult)"/> has not been called first.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="asyncResult"/> has not been returned by a call to <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.EndClose(System.IAsyncResult)"/>.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.QueueRenegotiate">
            <summary>
            Queues a renegotiation request.
            </summary>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the SecureSocket.</exception>
            <remarks>
            Use the QueueRenegotiate function with caution. Some SSL/TLS clients or server do not support renegotiation.
            For instance, requesting a renegotiation in the middle of sending a HTTP request to a MS IIS server causes the connection to be shut down.
            Renegotiations should only be used when a small private key [512 bits] is used and the connection is active for a long period of time.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.Close">
            <summary>
            Forces a SecureSocket connection to close.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.Finalize">
            <summary>
            Frees resources used by the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/> class.
            </summary>
            <remarks>
            The SecureSocket class finalizer calls the Close method to close the SecureSocket and free resources associated with the SecureSocket.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.Poll(System.Int32,System.Net.Sockets.SelectMode)">
            <summary>
            Determines the status of the VirtualSocket.
            </summary>
            <param name="microSeconds">The time to wait for a response, in microseconds.</param>
            <param name="mode">One of the <see cref="T:System.Net.Sockets.SelectMode"/> values.</param>
            <returns>See the Socket documentation for the return values.</returns>
            <remarks>This property is not supported for SSL/TLS sockets. It can only be used if the SecureProtocol is set to None. Asynchronous behavior in SSL or TLS mode can be achieved by calling the asynchronous methods.</remarks>
            <exception cref="T:System.NotSupportedException">The mode parameter is not one of the SelectMode values -or- the socket is in SSL or TLS mode.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>Set microSeconds parameter to a negative integer if you would like to wait indefinitely for a response.</remarks>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.Available">
            <summary>
            Gets the amount of data that has been received from the network and is available to be read.
            </summary>
            <value>The number of bytes of data that has been received from the network and are available to be read.</value>
            <exception cref="T:System.ObjectDisposedException">The SecureSocket has been closed.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the SecureSocket.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.SecurityException">An error occurs while interpreting the security data.</exception>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.LocalCertificate">
            <summary>
            Gets the local certificate.
            </summary>
            <value>An instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> class.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.RemoteCertificate">
            <summary>
            Gets the remote certificate.
            </summary>
            <value>An instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> class -or- a null reference (<b>Nothing</b> in Visual Basic) if no certificate has been received.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.SecureProtocol">
            <summary>
            Gets the security protocol in use.
            </summary>
            <value>A bitwise combination of the <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.SecureProtocol"/> values.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.Entity">
            <summary>
            Gets the credential type.
            </summary>
            <value>One of the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.ConnectionEnd"/> values.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.CommonName">
            <summary>
            Gets the common name of the remote host.
            </summary>
            <value>A string representing the common name of the remote host.</value>
            <remarks>
            The common name of the remote host is usually the domain name.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.VerificationType">
            <summary>
            Gets the credential verification type.
            </summary>
            <value>One of the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.CredentialVerification"/> values.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.Verifier">
            <summary>
            Gets the verify delegate.
            </summary>
            <value>A <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.CertVerifyEventHandler"/> instance.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.SecurityFlags">
            <summary>
            Gets the security flags of the connection.
            </summary>
            <value>A bitwise combination of the <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.SecurityFlags"/> values.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.ActiveEncryption">
            <summary>
            Gets the active encryption cipher suite.
            </summary>
            <value>One of the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SslAlgorithms"/> values.</value>
            <remarks>
            <para>This value is properly initialized after the handshake of the SSL or TLS protocol. Currently, there's no way of knowing when a handshake is completed. However as soon as either a Send or a Receive returns, the handshake must be complete.</para>
            <para>If SSL or TLS is not used, this property returns <b>SslAlgorithms.NONE</b>.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.Blocking">
            <summary>
            Gets or sets a value that indicates whether the VirtualSocket is in blocking mode.
            </summary>
            <value><b>true</b> if the VirtualSocket will block; otherwise, <b>false</b>. The default is <b>true</b>.</value>
            <remarks>This property is not supported for SSL/TLS sockets. It can only be used if the SecureProtocol is set to None. Asynchronous behavior in SSL or TLS mode can be achieved by calling the asynchronous methods.</remarks>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <exception cref="T:System.NotSupportedException">Non-blocking sockets are not supported in SSL or TLS mode.</exception>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Ssl.Shared.AlertDescription">
            <summary>
            
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.Shared.AlertDescription.CloseNotify">
            <summary></summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.Shared.AlertDescription.UnexpectedMessage">
            <summary></summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.Shared.AlertDescription.BadRecordMac">
            <summary></summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.Shared.AlertDescription.DecryptionFailed">
            <summary></summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.Shared.AlertDescription.RecordOverflow">
            <summary></summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.Shared.AlertDescription.DecompressionFailure">
            <summary></summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.Shared.AlertDescription.HandshakeFailure">
            <summary></summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.Shared.AlertDescription.BadCertificate">
            <summary></summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.Shared.AlertDescription.UnsupportedCertificate">
            <summary></summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.Shared.AlertDescription.CertificateRevoked">
            <summary></summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.Shared.AlertDescription.CertificateExpired">
            <summary></summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.Shared.AlertDescription.CertificateUnknown">
            <summary></summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.Shared.AlertDescription.IllegalParameter">
            <summary></summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.Shared.AlertDescription.UnknownCa">
            <summary></summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.Shared.AlertDescription.AccessDenied">
            <summary></summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.Shared.AlertDescription.DecodeError">
            <summary></summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.Shared.AlertDescription.DecryptError">
            <summary></summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.Shared.AlertDescription.ExportRestriction">
            <summary></summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.Shared.AlertDescription.ProtocolVersion">
            <summary></summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.Shared.AlertDescription.InsufficientSecurity">
            <summary></summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.Shared.AlertDescription.InternalError">
            <summary></summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.Shared.AlertDescription.UserCanceled">
            <summary></summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.Shared.AlertDescription.NoRenegotiation">
            <summary></summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpExtended">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpExtended.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpExtendedAdmin">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpExtendedAdmin.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate">
            <summary>
            Contains information regarding an X.509v3 certificate.
            </summary>
            <remarks>
            <para>
            Certificates are used here in two basic ways: (1) to validate the
            server to the client, and (2) to validate the client to the server.  In the former
            case, the certificate is obtained from the server.  In the latter case, the 
            certificate must be loaded from a file.
            </para>
            <para>
            Certificates may be loaded from files using one of the following three methods:
            <list type="number">
            <item><term>CreateFromCER(...)</term>
            <description>Loads the certificate from a <i>CER</i> file</description></item>
            <item><term>CreateFromPEM(...)</term>
            <description>Loads the certificate from a <i>PEM</i> file</description></item>
            <item><term>CreateFromPFX(...)</term>
            <description>Loads the certificate from a <i>PFX</i> file</description></item>
            </list>
            </para>
            <para>
            Private keys may be loaded from a PVK file and associated with a certificate using the 
            <c>AssociatePrivateKey(string,string)</c> method.
            </para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.CreateFromCER_PVK(System.String,System.String,System.String)">
            <summary>
            Loads the certificate from a <i>CER</i> file, and the private
            key from a <i>PVK</i> file.
            </summary>
            <param name="cerFileName">Name of CER file.</param>
            <param name="pvkFileName">Name of PVK file</param>
            <param name="pvkPassword">Password used to access PVK file.</param>
            <returns>The certificate object (including the private key).</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.CreateFromPEM_PVK(System.String,System.String,System.String)">
            <summary>
            Loads the certificate from a <i>PEM</i> file, and the private
            key from a <i>PVK</i> file.
            </summary>
            <param name="pemFileName">Name of CER file.</param>
            <param name="pvkFileName">Name of PVK file</param>
            <param name="pvkPassword">Password used to access PVK file.</param>
            <returns>The certificate object (including the private key).</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.CreateFromPFX_PVK(System.String,System.String,System.String,System.String)">
            <summary>
            Loads the certificate from a <i>PFX</i> file, and the private
            key from a <i>PVK</i> file.
            </summary>
            <param name="pfxFileName">Name of PFX file.</param>
            <param name="pfxPassword">Password used to access PFX file.</param>
            <param name="pvkFileName">Name of PVK file</param>
            <param name="pvkPassword">Password used to access PVK file.</param>
            <returns>The certificate object (including the private key).</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.CreateFromFile(System.String)">
            <summary>
            Loads the certificate from a file.
            </summary>
            <remarks>
            This method first attempts to load the certificate as a PEM file,
            then CER, and finally PFX.  If all fail then an exception is thrown.
            </remarks>
            <param name="fileName">Path of file to load.</param>
            <returns>The certificate.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.CreateFromFile(System.String,System.String)">
            <summary>
            Loads the certificate from a file.
            </summary>
            <remarks>
            This method first attempts to load the certificate as a PEM file,
            then CER, and finally PFX.  If all fail then an exception is thrown.
            </remarks>
            <param name="fileName">Path of file to load.</param>
            <param name="password">Password (only used if file is in PFX format).</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.CreateFromCER(System.String)">
            <summary>
            Loads the certificate from a <i>CER</i> file.
            </summary>
            <param name="cerFileName">Name of CER file.</param>
            <returns>The certificate object (not including the private key).</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.CreateFromPEM(System.String)">
            <summary>
            Loads the certificate from a <i>PEM</i> file.
            </summary>
            <param name="pemFileName">Name of CER file.</param>
            <returns>The certificate object (not including the private key).</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.CreateFromPFX(System.String,System.String)">
            <summary>
            Loads the certificate and private key from a <i>PFX</i> file.
            </summary>
            <remarks>
            This PFX file must contain the private key.
            </remarks>
            <param name="pfxFileName">Name of PFX file.</param>
            <param name="pfxPassword">Password used to access PFX file.</param>
            <returns>The certificate object (including the private key).</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.CreateFromPFX(System.String,System.String,System.Boolean)">
            <summary>
            Loads the certificate and private key from a <i>PFX</i> file.
            </summary>
            <remarks>
            This PFX file must contain the private key.
            </remarks>
            <param name="pfxFileName">Name of PFX file.</param>
            <param name="pfxPassword">Password used to access PFX file.</param>
            <returns>The certificate object (including the private key).</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.CreateFromPFX(System.Byte[],System.String)">
            <summary>
            Loads the certificate and private key from a <i>PFX</i> buffer.
            </summary>
            <remarks>
            This PFX buffer must contain the private key.
            </remarks>
            <param name="pfxBuffer">Buffer containing the certificate in PFX format.</param>
            <param name="pfxPassword">Password used to access PFX file.</param>
            <returns>The certificate object (including the private key).</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.CreateFromPKCS12(System.Byte[],System.String)">
            <summary>
            Loads the certificate and private key from a <i>PKCS12</i> buffer.
            </summary>
            <remarks>
            This PKCS12 buffer must contain the private key.
            </remarks>
            <param name="pfxBuffer">Buffer containing the certificate in PFX format.</param>
            <param name="pfxPassword">Password used to access PFX file.</param>
            <returns>The certificate object (including the private key).</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.AssociatePrivateKey(System.String,System.String)">
            <summary>
            Loads the private key from the given PVK file.
            </summary>
            <param name="pvkFileName">Name of PVK file.</param>
            <param name="password">Password used to access PVK file.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.AssociatePrivateKey(System.String,System.String,System.Boolean)">
            <summary>
            Loads the private key from the given PVK file.
            </summary>
            <param name="pvkFileName">Name of PVK file.</param>
            <param name="password">Password used to access PVK file.</param>
            <param name="exportable"><b>true</b> if the private key should be marked exportable, <b>false</b> otherwise.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.WriteToCER(System.String)">
            <summary>
            Writes the certificate to a file in CER format.
            </summary>
            <param name="cerFilePath">Path of file.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.WriteToPEM(System.String)">
            <summary>
            Writes the certificate to a file in PEM format.
            </summary>
            <param name="pemFilePath">Path of file.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.WriteToPFX(System.String,System.String,System.Boolean)">
            <summary>
            Writes the certificate and (optionally) the private key to a file in PFX format.
            </summary>
            <param name="pfxFilePath">Path of file.</param>
            <param name="password">The password to use when encrypting the private keys.</param>
            <param name="withPrivateKeys"><b>true</b> if the private keys should be exported [if possible], <b>false</b> otherwise.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.GetBase64String">
            <summary>
            Returns a base-64 representation of the certificate.
            </summary>
            <returns>The base-64 representation of the certificate</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.GetX509">
            <summary>
            Returns an X509Certificate object that corresponds to this certificate.
            </summary>
            <returns>An X509Certificate instance.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.GetPFXBuffer(System.String,System.Boolean)">
            <summary>
            Returns the certificate in buffer in the PFX format.
            </summary>
            <param name="password">The password to use when encrypting the private keys.</param>
            <param name="withPrivateKeys"><b>true</b> if the private keys should be exported [if possible], <b>false</b> otherwise.</param>
            <returns>A byte-array containing the certificate in PFX format</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.GetPKCS12Buffer(System.String)">
            <summary>
            Returns the certificate in buffer in the PKCS12 format.
            </summary>
            <param name="password">The password to use when encrypting the private keys.</param>
            <returns>A byte-array containing the certificate in PKCS12 format</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.ShowCertificateManager">
            <summary>
            Displays the certificate manager either as a modal dialog or as a window.
            </summary>
            <remarks>
            The certificate manager allows the user to view, import and remove 
            certificates on the local machine.  It is useful for managing server-
            and Certificate Authority- certificates.
            </remarks>
            <seealso cref="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.ShowCertificateManager(System.String)"/>
            <seealso cref="!:ShowCertificateManager(string,IWin32Window)"/>
            <seealso cref="!:ShowCertificateManager(string,IWin32Window,bool)"/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.ShowCertificateManager(System.String)">
            <summary>
            Displays the certificate manager either as a modal dialog or as a window.
            </summary>
            <remarks>
            The certificate manager allows the user to view, import and remove 
            certificates on the local machine.  It is useful for managing server-
            and Certificate Authority- certificates.
            </remarks>
            <param name="title">The title of the form (may be null).</param>
            <seealso cref="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.ShowCertificateManager"/>
            <seealso cref="!:ShowCertificateManager(string,IWin32Window)"/>
            <seealso cref="!:ShowCertificateManager(string,IWin32Window,bool)"/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.ShowCertificateManager(System.String,System.Windows.Forms.IWin32Window)">
            <summary>
            Displays the certificate manager either as a modal dialog or as a window.
            </summary>
            <remarks>
            The certificate manager allows the user to view, import and remove 
            certificates on the local machine.  It is useful for managing server-
            and Certificate Authority- certificates.
            </remarks>
            <param name="title">The title of the form (may be null).</param>
            <param name="parent">Reference to parent window (may be null)</param>
            <seealso cref="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.ShowCertificateManager"/>
            <seealso cref="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.ShowCertificateManager(System.String)"/>
            <seealso cref="!:ShowCertificateManager(string,IWin32Window,bool)"/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.ShowCertificateManager(System.String,System.Windows.Forms.IWin32Window,System.Boolean)">
            <summary>
            Displays the certificate manager either as a modal dialog or as a window.
            </summary>
            <remarks>
            The certificate manager allows the user to view, import and remove 
            certificates on the local machine.  It is useful for managing server-
            and Certificate Authority- certificates.
            </remarks>
            <param name="title">The title of the form (may be null).</param>
            <param name="parent">Reference to parent window (may be null)</param>
            <param name="modal">Controls whether or not the form is shown as a modal dialog.</param>
            <returns>A reference to the form (useful only when invoking as non-modal window).</returns>
            <seealso cref="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.ShowCertificateManager"/>
            <seealso cref="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.ShowCertificateManager(System.String)"/>
            <seealso cref="!:ShowCertificateManager(string,IWin32Window)"/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.PromptForCertificate(System.Boolean)">
            <summary>
            Prompts the user for a certificate file and a matching private key.
            </summary>
            <remarks>
            This method will first prompt for a certificate file of format CER, PEM or PFX.
            If the file is a PFX file it will then prompt for a password to access this file.
            If <c>promptForPrivateKey</c> is <c>true</c> then the user will be prompted
            for a private key file of the PVK format and a matching password.
            </remarks>
            <param name="promptForPrivateKey">Should the user also be prompted for a private key</param>
            <returns>An instance of SSLFTPCertificate with the associated private key.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.PromptForCertificate(System.Windows.Forms.Form,System.Boolean)">
            <summary>
            Prompts the user for a certificate file and a matching private key.
            </summary>
            <remarks>
            This method will first prompt for a certificate file of format CER, PEM or PFX.
            If the file is a PFX file it will then prompt for a password to access this file.
            If <c>promptForPrivateKey</c> is <c>true</c> then the user will be prompted
            for a private key file of the PVK format and a matching password.
            </remarks>
            <param name="parent">Parent form (may be null)</param>
            <param name="promptForPrivateKey">Should the user also be prompted for a private key</param>
            <returns>An instance of SSLFTPCertificate with the associated private key.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.PromptForCertificate(System.Windows.Forms.Form,System.String,System.Boolean)">
            <summary>
            Prompts the user for a certificate file and a matching private key.
            </summary>
            <remarks>
            This method will first prompt for a certificate file of format CER, PEM or PFX.
            If the file is a PFX file it will then prompt for a password to access this file.
            If <c>promptForPrivateKey</c> is <c>true</c> then the user will be prompted
            for a private key file of the PVK format and a matching password.
            </remarks>
            <param name="parent">Parent form (may be null)</param>
            <param name="dialogTitle">Title of dialog box</param>
            <param name="promptForPrivateKey">Should the user also be prompted for a private key</param>
            <returns>An instance of SSLFTPCertificate with the associated private key.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.Generate(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.DateTime,System.DateTime,System.Int32)">
            <summary>
            Generates a new certificate using the given parameters.
            </summary>
            <param name="commonName">Common Name</param>
            <param name="organizationName">Organization Name</param>
            <param name="organizationUnitName">Organization Unit Name</param>
            <param name="street">Street</param>
            <param name="locality">Locality</param>
            <param name="state">State</param>
            <param name="country">Country</param>
            <param name="startTime">Valid from</param>
            <param name="endTime">Valid to</param>
            <param name="keySize">Key-size</param>
            <returns>Certificate</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.ImportIntoStore(EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate,EnterpriseDT.Net.Ftp.Ssl.SSLFTPStoreLocation,EnterpriseDT.Net.Ftp.Ssl.SSLFTPStoreName)">
            <summary>
            Imports a certificate into a particular certificate store.
            </summary>
            <param name="certificate">Certificate to install.</param>
            <param name="location">Location of store.</param>
            <param name="name">Name of store.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.ImportCACertificate(EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate)">
            <summary>
            Imports a certificate into the <i>TrustedRootCAs</i> store on the <i>LocalMachine</i>.
            </summary>
            <param name="certificate">Certificate to import.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.GetCertificates(EnterpriseDT.Net.Ftp.Ssl.SSLFTPStoreLocation,EnterpriseDT.Net.Ftp.Ssl.SSLFTPStoreName)">
            <summary>
            Returns an array of all the certificates in a particular store.
            </summary>
            <param name="location">Location of store.</param>
            <param name="name">Name of store.</param>
            <returns>An array of all the certificates in a particular store.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.GetCACertificates">
            <summary>
            Returns an array of all the certificates in the <i>TrustedRootCAs</i> store on the <i>LocalMachine</i>.
            </summary>
            <returns>An array of all the certificates in the <i>TrustedRootCAs</i> store on the <i>LocalMachine</i>.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.RemoveFromStore(EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate,EnterpriseDT.Net.Ftp.Ssl.SSLFTPStoreLocation,EnterpriseDT.Net.Ftp.Ssl.SSLFTPStoreName)">
            <summary>
            Removes a certificate from a specific certificate store.
            </summary>
            <param name="certificate">Certificate to remove.</param>
            <param name="location">Location of store.</param>
            <param name="name">Name of store.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.RemoveCACertificate(EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate)">
            <summary>
            Removes the given CA certificate from the <i>TrustedRootCAs</i> store on the <i>LocalMachine</i>. 
            </summary>
            <param name="certificate"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.ToString">
            <summary>
            Returns a string representation of the certificate.
            </summary>
            <returns>A string representation of the certificate.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.ToLongString(System.String)">
            <summary>
            Returns a long string representation of the certificate.
            </summary>
            <param name="separator">Separator to use</param>
            <returns>A string representation of the certificate.</returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.Name">
            <summary>
            Name of the entity to which the certificate was issued.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.IssuerName">
            <summary>
            Name of the entity which issued the certificate.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.SubjectName">
            <summary>
            Distinguished Name (DN) of the entity to which the certificate was issued.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.SerialNumber">
            <summary>
            Serial number of certificate.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.SerialNumberString">
            <summary>
            String representation of the serial number of the certificate.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.EffectiveDate">
            <summary>
            Date from which the certificate became effective.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.ExpirationDate">
            <summary>
            Date on which the certificate expires.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.PublicKey">
            <summary>
            Public key associated with the certificate.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.PrivateKey">
            <summary>
            Private key associated with the certificate.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.KeyAlgorithm">
            <summary>
            Algorithm that was used to generate the public/private key pair.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.KeyAlgorithmParameters">
            <summary>
            Parameters that were used to generate the public/private key pair.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.KeyAlgorithmParametersString">
            <summary>
            String representation of the parameters that were used to generate 
            the public/private key pair.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.Extensions">
            <summary>
            Certificate extensions.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.Chain">
            <summary>
            Chain of certificates.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.CertFile">
            <summary>
            Name of the certificate file from which this certificate was read.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.CertFilePassword">
            <summary>
            Password for the certificate file.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.KeyFile">
            <summary>
            Name of the private key file associated with this certificate.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.KeyFilePassword">
            <summary>
            Password for the private key file.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssl.SSLFTPDistinguishedName">
            <summary>
            Distinguished Name (DN) of a certificate.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPDistinguishedName.ToString">
            <summary>
            Returns the Common Name.
            </summary>
            <returns>Returns the Common Name.</returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPDistinguishedName.CommonName">
            <summary>
            CommonName (CN) component of the DN.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPDistinguishedName.OrganizationName">
            <summary>
            Organization (O) component of the DN.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPDistinguishedName.OrganizationalUnitName">
            <summary>
            OrganizationalUnit (OU) component of the DN.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPDistinguishedName.StreetAddress">
            <summary>
            StreetAddress (STREET) component of the DN.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPDistinguishedName.LocalityName">
            <summary>
            LocalityName (L) component of the DN.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPDistinguishedName.StateOrProvinceName">
            <summary>
            StateOrProvinceName (ST) component of the DN.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPDistinguishedName.CountryName">
            <summary>
            CountryName (C) component of the DN.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPDistinguishedName.Item(System.String)">
            <summary>
            Generic accessor for DN components.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssl.SSLFTPExtension">
            <summary>
            SSLFTPExtension to the name.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPExtension.OID">
            <summary>
            Object ID of the extension.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPExtension.IsCritical">
            <summary>
            Indicates if the extension is critical.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPExtension.Value">
            <summary>
            The value of the extension as a byte-array.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssl.SSLFTPStoreLocation">
            <summary>
            Enumeration of certificate store locations.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPStoreLocation.LocalMachine">
            <summary>The certificate store for the local computer.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPStoreLocation.LocalMachineEnterprise">
            <summary>The certificate store for the local machine enterprise.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPStoreLocation.LocalMachineGroupPolicy">
            <summary>The certificate store for the local machine group policy.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPStoreLocation.Services">
            <summary>The certificate store for the service account.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPStoreLocation.Users">
            <summary>The certificate store for the users group of this computer.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPStoreLocation.CurrentUser">
            <summary>The certificate store for the currently logged-on user.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPStoreLocation.CurrentUserGroupPolicy">
            <summary>The certificate store for the currently logged-on group.</summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssl.SSLFTPStoreName">
            <summary>
            Enumeration of certificate store names.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPStoreName.TrustedRootCAs">
            <summary>Trusted root Certificate Autority</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPStoreName.IntermediateCAs">
            <summary>Intermediate Certificate Autority</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPStoreName.CurrentUser">
            <summary>Current User</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPStoreName.SoftwarePublishers">
            <summary>Software Publishers</summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.TransferCompleteStrings">
            <summary>  
            Contains fragments of server replies that a transfer completed
            </summary>
            <author>Bruce Blackshaw</author>
            <version>$Revision: 1.1 $</version>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.TransferCompleteStrings.TRANSFER_COMPLETE">
            <summary>
            Server string indicating no files found (NO_FILES)
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.TransferCompleteStrings.#ctor">
            <summary>
            Constructor. Adds the fragments to match on
            </summary>
        </member>
        <member name="T:EnterpriseDT.Util.Debug.Lock">
            <summary>
            Utility class for helping to debug deadlocks caused by lock synchronization.
            </summary>
            <remarks>
            When run in debug mode it will print logging information before entering and after leaving each lock-block.
            To use, replace all occurrances of <c>lock(xyz)</c> with <c>using(new LoggingLock(xyz))</c>.
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SFTPChannelReceiver">
            <summary>
            SSH messages received are channelled via this class
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SFTPChannelReceiver.log">
            <summary> Logging object</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPChannelReceiver.#ctor(EnterpriseDT.Net.Ftp.Ssh.SFTPMessageStore)">
            <summary>
            Constructor
            </summary>
            <param name="messages">store for received messages</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPChannelReceiver.OnChannelReady">
            <summary>
            Called when the SSH channel is initialised
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SFTPChannelReceiver.ChannelReady">
            <summary>
            True if the channel to be used by the SFTP subsystem is ready
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SFTPChannelReceiver.SFTP">
            <summary>
            Gets the SFTP subsystem instance
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Design.SecureFTPDesignerForm">
            <summary>
            INTERNAL USE ONLY
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.SecureFTPDesignerForm.#ctor(EnterpriseDT.Net.Ftp.SecureFTPConnection)">
            <summary>
            INTERNAL USE ONLY
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.GetCommand">
            <summary>  Get a file. First arg is remote file, second optional arg
            is local file.
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.3 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpLStat">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <remarks>
            byte   SSH_FXP_LSTAT
            uint32 request-id
            string path  [UTF-8]
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpLStat.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SimpleASNReader">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.RecurrenceException">
            <summary>
            GData schema extension describing an RFC 2445 recurrence rule.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.RecurrenceException.Specialized">
            <summary>Accessor for "specialized" attribute.</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.RecurrenceException.EntryLink">
            <summary>
            exposes the EntryLink element for this exception
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.RecurrenceException.OriginalEvent">
            <summary>
            exposes the OriginalEvent element for this exception
            </summary>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Ssl.Shared.RSAKeyTransform">
            <summary>
            We use this class because there's a bug in the RSACryptoServiceProvider class that disallows encrypting
            more than 16 bytes on Windows 98, ME and NT4.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream">
            <summary>
            Provides the underlying stream of data for secure network access.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.#ctor(EnterpriseDT.Mentalis.Security.Ssl.SecureSocket)">
            <summary>
            Creates a new instance of the SecureNetworkStream class for the specified <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/>.
            </summary>
            <param name="socket">The SecureSocket that provides the network data. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="socket"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="socket"/> is not connected -or- the SocketType property of <paramref name="socket"/> is not SocketType.Stream.</exception>
            <exception cref="T:System.IO.IOException"><paramref name="socket"/> is a nonblocking socket.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.#ctor(EnterpriseDT.Mentalis.Security.Ssl.SecureSocket,System.Boolean)">
            <summary>
            Creates a new instance of the SecureNetworkStream class for the specified <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/>.
            </summary>
            <param name="socket">The SecureSocket that provides the network data. </param>
            <param name="ownsSocket"><b>true</b> if the socket will be owned by this NetworkStream instance; otherwise, <b>false</b>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="socket"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="socket"/> is not connected -or- the SocketType property of <paramref name="socket"/> is not SocketType.Stream.</exception>
            <exception cref="T:System.IO.IOException"><paramref name="socket"/> is a nonblocking socket.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.#ctor(EnterpriseDT.Mentalis.Security.Ssl.SecureSocket,System.IO.FileAccess)">
            <summary>
            Creates a new instance of the SecureNetworkStream class for the specified <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/>.
            </summary>
            <param name="socket">The SecureSocket that provides the network data. </param>
            <param name="access">One of the <see cref="T:System.IO.FileAccess"/> values that sets the CanRead and CanWrite properties of the SecureNetworkStream.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="socket"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="socket"/> is not connected -or- The SocketType property of socket is not SocketType.Stream.</exception>
            <exception cref="T:System.IO.IOException"><paramref name="socket"/> is a nonblocking socket.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.#ctor(EnterpriseDT.Mentalis.Security.Ssl.SecureSocket,System.IO.FileAccess,System.Boolean)">
            <summary>
            Creates a new instance of the SecureNetworkStream class for the specified <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/>.
            </summary>
            <param name="socket">The SecureSocket that provides the network data.</param>
            <param name="access">One of the FileAccess values that sets the CanRead and CanWrite properties of the SecureNetworkStream.</param>
            <param name="ownsSocket"><b>true</b> if the socket will be owned by this SecureNetworkStream instance; otherwise, <b>false</b>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="socket"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="socket"/> is not connected -or- the SocketType property of socket is not SocketType.Stream.</exception>
            <exception cref="T:System.IO.IOException"><paramref name="socket"/> is a nonblocking socket.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.Flush">
            <summary>
            Flushes data from the stream. This method is reserved for future use.
            </summary>
            <remarks>
            The Flush method implements the Stream.Flush method but, because SecureNetworkStream is not buffered, has no effect on secure network streams. Calling the Flush method will not throw an exception.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the current position of the stream to the given value. This method always throws a NotSupportedException.
            </summary>
            <param name="offset">This parameter is not used.</param>
            <param name="origin">This parameter is not used.</param>
            <returns>The position in the stream. This method is not supported.</returns>
            <exception cref="T:System.NotSupportedException">The Seek method is not supported.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream. This method always throws a NotSupportedException.
            </summary>
            <param name="value">This parameter is not used.</param>
            <exception cref="T:System.NotSupportedException">The SetLength method is not supported.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from the stream.
            </summary>
            <param name="buffer">The location in memory to store data read from the stream.</param>
            <param name="offset">The location in the buffer to begin storing the data to.</param>
            <param name="size">The number of bytes to read from the stream.</param>
            <returns>The number of bytes read from the stream.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified <paramref name="offset"/> or <paramref name="size"/> exceeds the size of <paramref name="buffer"/>.</exception>
            <exception cref="T:System.IO.IOException">There is a failure while reading from the network.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data to the stream.
            </summary>
            <param name="buffer">The data to write to the stream.</param>
            <param name="offset">The location in the buffer to start writing data from.</param>
            <param name="size">The number of bytes to write to the stream.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified <paramref name="offset"/> or <paramref name="size"/> exceeds the size of <paramref name="buffer"/>.</exception>
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.ChangeSecurityProtocol(EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions,System.Boolean)">
            <summary>
            Changes the security protocol. This method can only be used to 'upgrade' a connection from no-security to either SSL or TLS.
            </summary>
            <param name="options">The new <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions"/> parameters.</param>
            <param name="synchronized">Flag indicating whether the call is synchronous or asynchronous.</param>
            <exception cref="T:EnterpriseDT.Mentalis.Security.SecurityException">An error occurs while changing the security protocol.</exception>
            <remarks>
            Programs should only call this method if there is no active <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.Read(System.Byte[],System.Int32,System.Int32)"/> or <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.Write(System.Byte[],System.Int32,System.Int32)"/>!
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.Close">
            <summary>
            Closes the stream and optionally closes the underlying <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/>.
            </summary>
            <remarks>
            The Close method frees resources used by the SecureNetworkStream instance and, if the SecureNetworkStream owns the underlying socket, closes the underlying socket.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous read from a stream.
            </summary>
            <param name="buffer">The location in memory that stores the data from the stream.</param>
            <param name="offset">The location in buffer to begin storing the data to.</param>
            <param name="size">The maximum number of bytes to read.</param>
            <param name="callback">The delegate to call when the asynchronous call is complete.</param>
            <param name="state">An object containing additional information supplied by the client.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the asynchronous call.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified <paramref name="offset"/> or <paramref name="size"/> exceeds the size of <paramref name="buffer"/>.</exception>
            <exception cref="T:System.IO.IOException">There is a failure while reading from the network.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.EndRead(System.IAsyncResult)">
            <summary>
            Handles the end of an asynchronous read.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> representing an asynchronous call. </param>
            <returns>The number of bytes read from the stream.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.IO.IOException">There is a failure while reading from the network.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous write to a stream.
            </summary>
            <param name="buffer">The location in memory that holds the data to send.</param>
            <param name="offset">The location in buffer to begin sending the data.</param>
            <param name="size">The size of buffer.</param>
            <param name="callback">The delegate to call when the asynchronous call is complete.</param>
            <param name="state">An object containing additional information supplied by the client.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the asynchronous call.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified <paramref name="offset"/> or <paramref name="size"/> exceeds the size of <paramref name="buffer"/>.</exception>
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.OnBytesSent(System.IAsyncResult)">
            <summary>
            Called when the bytes have been sent to the remote server
            </summary>
            <param name="asyncResult">The <see cref="T:System.IAsyncResult"/> representing the asynchronous call.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.OnWriteComplete(System.Exception)">
            <summary>
            Called when all bytes have been sent to the remote host, or when a network error occurred.
            </summary>
            <param name="e">The error that occurred.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.EndWrite(System.IAsyncResult)">
            <summary>
            Handles the end of an asynchronous write.
            </summary>
            <param name="asyncResult">The <see cref="T:System.IAsyncResult"/> representing the asynchronous call.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="asyncResult"/> parameter was not returned by a call to the BeginWrite method.</exception>
            <exception cref="T:System.IO.IOException">An error occurs while writing to the network.</exception>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.log">
            <summary>Logger</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.m_WriteResult">
            <summary>Holds the value of the <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.WriteResult"/> property</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.m_OwnsSocket">
            <summary><b>true</b> if the SecureNetworkStream owns the SecureSocket, <b>false</b> otherwise.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.m_CanRead">
            <summary>Holds the value of the <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.CanRead"/> property</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.m_CanWrite">
            <summary>Holds the value of the <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.CanWrite"/> property</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.m_Socket">
            <summary>Holds the value of the <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.Socket"/> property</summary>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.CanRead">
            <summary>
            Gets a value that indicates whether the current stream supports writing.
            </summary>
            <value><b>true</b> if data can be written to the stream; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.CanWrite">
            <summary>
            Gets a value that indicates whether the current stream supports writing.
            </summary>
            <value><b>true</b> if data can be written to the stream; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.CanSeek">
            <summary>
            Gets a value indicating whether the stream supports seeking. This property always returns false.
            </summary>
            <value><b>false</b> to indicate that SecureNetworkStream cannot seek a specific location in the stream.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.Length">
            <summary>
            The length of the data available on the stream. This property always throws a NotSupportedException.
            </summary>
            <value>The length of the data available on the stream. This property is not supported.</value>
            <exception cref="T:System.NotSupportedException">The Length property is not supported.</exception>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.Position">
            <summary>
            Gets or sets the current position in the stream. This property always throws a NotSupportedException.
            </summary>
            <value>The current position in the stream. This property is not supported.</value>
            <exception cref="T:System.NotSupportedException">The Position property is not supported.</exception>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.Socket">
            <summary>
            Gets the underlying network connection.
            </summary>
            <value>A <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/> that represents the underlying network connection.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.WriteResult">
            <summary>
            Holds the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.Shared.TransferItem"/> object returned by BeginWrite.
            </summary>
            <value>A <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.Shared.TransferItem"/> object.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.DataAvailable">
            <summary>
            Gets a value indicating whether data is available on the stream to be read.
            </summary>
            <value><b>true</b> if data is available on the stream to be read; otherwise, <b>false</b>.</value>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Certificates.HashType">
            <summary>
            Defines the different hash type values.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.HashType.SHA1">
            <summary>The certificate will be hashed using the SHA1 algorithm.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.HashType.MD5">
            <summary>The certificate will be hashed using the MD5 algorithm.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.HashType.Default">
            <summary>The certificate will be hashed using the default hashing algorithm.</summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Certificates.KeyUsage">
            <summary>
            Defines the different key usage values.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.KeyUsage.DataEncipherment">
            <summary>The key can be used for data encipherment.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.KeyUsage.DigitalSignature">
            <summary>The key can be used to sign data.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.KeyUsage.KeyAgreement">
            <summary>The key can be used in key agreement algorithms.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.KeyUsage.KeyCertSign">
            <summary>The key can be used to sign certificates.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.KeyUsage.KeyEncipherment">
            <summary>The key can be used for key encipherment.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.KeyUsage.NonRepudiation">
            <summary>The key can be used for electronic non-repudiation.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.KeyUsage.CrlSign">
            <summary>The key can be used to sign certificate revocation lists.</summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Certificates.AuthType">
            <summary>
            Defines the different authentication type values.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.AuthType.Client">
            <summary>The certificate is a client certificate.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.AuthType.Server">
            <summary>The certificate is a server certificate.</summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus">
            <summary>
            Defines the different certificate status values.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus.ValidCertificate">
            <summary>The certificate is valid.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus.Expired">
            <summary>A required certificate is not within its validity period.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus.InvalidBasicConstraints">
            <summary>The certificate's basic constraints are invalid or missing.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus.InvalidChain">
            <summary>A chain of certificates was not correctly created.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus.InvalidNesting">
            <summary>The validity periods of the certification chain do not nest correctly.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus.InvalidPurpose">
            <summary>A certificate is being used for a non permitted purpose.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus.InvalidRole">
            <summary>A certificate that can only be used as an end-entity is being used as a CA or visa versa.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus.InvalidSignature">
            <summary>The signature of the certificate cannot be verified.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus.NoCNMatch">
            <summary>The certificate's CN name does not match the passed value.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus.ParentRevoked">
            <summary>A certificate in the chain has been explicitly revoked by its issuer.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus.RevocationFailure">
            <summary>The revocation process could not continue. The certificates could not be checked.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus.RevocationServerOffline">
            <summary>Since the revocation server was offline, the called function was not able to complete the revocation check.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus.Revoked">
            <summary>The certificate or signature has been revoked.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus.UntrustedRoot">
            <summary>A certification chain processed correctly but terminated in a root certificate not trusted by the trust provider.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus.UntrustedTestRoot">
            <summary>The root certificate is a testing certificate and policy settings disallow test certificates.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus.WrongUsage">
            <summary>The certificate is not valid for the requested usage.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus.InvalidName">
            <summary>The certificate has an invalid name. Either the name is not included in the permitted list, or it is explicitly excluded.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus.InvalidPolicy">
            <summary>The certificate has an invalid policy.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus.Critical">
            <summary>The certificate is being used for a purpose other than the purpose specified by its CA.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus.NoRevocationCheck">
            <summary>The revocation function was unable to check revocation for the certificate</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus.OtherError">
            <summary>The certificate is invalid.</summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStoreType">
            <summary>
            Defines the different certificate store values.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStoreType.SerializedStore">
            <summary>The certificate store should be saved as a serializes store.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStoreType.Pkcs7Message">
            <summary>The certificate store should be saved as a signed PKCS7 message.</summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateChainOptions">
            <summary>
            Defines additional options for building a certificate chain.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateChainOptions.Default">
            <summary>The default chain options</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateChainOptions.RevocationCheckEndCert">
            <summary>Revocation checking is done on the end certificate and only the end certificate.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateChainOptions.RevocationCheckChain">
            <summary>Revocation checking is done on all of the certificates in every chain.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateChainOptions.RevocationCheckChainExcludeRoot">
            <summary>Revocation checking in done on all certificates in all of the chains except the root certificate.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateChainOptions.RevocationCacheEndCert">
            <summary>When this flag is set, the end certificate is cached, which might speed up the chain-building process. By default, the end certificate is not cached and it would need to be verified each time a chain is built for it.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateChainOptions.RevocationCheckCacheOnly">
            <summary>Revocation checking only accesses cached URLs and does not hit the wire to do any revocation URL retrieval. Supported on Windows Me, Windows 2000 and later.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateChainOptions.CacheOnlyUrlRetrieval">
            <summary>Uses only cached URLs in building a certificate chain. The Internet and Intranet are not searched for URL-based objects. Note, not applicable to revocation checking. Set CERT_CHAIN_REVOCATION_CHECK_CACHE_ONLY to use only cached URLs for revocation checking.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateChainOptions.DisablePass1QualityFiltering">
            <summary>For performance reasons, the second pass of chain building only considers potential chain paths that have quality greater than or equal to the highest quality determined during the first pass. The first pass only considers valid signature, complete chain and trusted roots to calculate chain quality. This flag can be set to disable this optimization and consider all potential chain paths during the second pass.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateChainOptions.ReturnLowerQualityContexts">
            <summary>The default is to return only the highest quality chain path. Setting this flag will return the lower quality chains. These are returned in the chain context's cLowerQualityChainContext and rgpLowerQualityChainContext fields.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateChainOptions.DisableAuthRootAutoUpdate">
            <summary>Setting this flag inhibits the auto update of third party roots from the Windows Update Web Server.</summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags">
            <summary>
            Defines the different verificateion flags values.
            </summary>
            <remarks>
            You can specify more VerificationFlags at once by combining them with the OR operator.
            </remarks>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags.None">
            <summary>No flags.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags.IgnoreTimeNotValid">
            <summary>Ignore an invalid time.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags.IgnoreCtlTimeNotValid">
            <summary>Ignore an invalid time of the certificate trust list.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags.IgnoreTimeNotNested">
            <summary>Ignore an invalid time nesting.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags.IgnoreInvalidBasicContraints">
            <summary>Ignore invalid basic contraints.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags.IgnoreAllTimeChecks">
            <summary>Ignore all time checks.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags.AllowUnknownCA">
            <summary>Allow an unknown certificate authority.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags.IgnoreWrongUsage">
            <summary>Ignore the wrong usage of a certificate.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags.IgnoreInvalidName">
            <summary>Ignore an invalid name.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags.IgnoreInvalidPolicy">
            <summary>Ignore an invalid policy.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags.IgnoreEndRevUnknown">
            <summary>Ignore an unknown revocation status of the end certificate.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags.IgnoreSignerRevUnknown">
            <summary>Ignore an unknown revocation status of the signer certificate.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags.IgnoreCARevUnknown">
            <summary>Ignore an unknown revocation status of the certificate authority.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags.IgnoreRootRevUnknown">
            <summary>Ignore an unknown revocation status of the root certificate.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags.IgnoreAllRevUnknown">
            <summary>Ignore an unknown revocation status of any of the certificates.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags.AllowTestroot">
            <summary>Allow a test root.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags.TrustTestroot">
            <summary>Trust a test root.</summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Certificates.StoreLocation">
            <summary>
            Specifies the location of the X.509 certificate store.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.StoreLocation.CurrentService">
            <summary>The certificate store for the current service.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.StoreLocation.CurrentUser">
            <summary>The certificate store for the currently logged-on user.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.StoreLocation.CurrentUserGroupPolicy">
            <summary>The certificate store for the currently logged-on group.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.StoreLocation.LocalMachine">
            <summary>The certificate store for the local computer.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.StoreLocation.LocalMachineEnterprise">
            <summary>The certificate store for the local machine enterprise downloaded from a network setting.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.StoreLocation.LocalMachineGroupPolicy">
            <summary>The certificate store for the local machine group policy downloaded from a network setting.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.StoreLocation.Services">
            <summary>The certificate store for a specified service account; for example, an Alerter or the Event Log.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.StoreLocation.Unknown">
            <summary>The location is unknown.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.StoreLocation.Users">
            <summary>The certificate store for the users group of this computer.</summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Certificates.NameAttribute">
            <summary>
            Defines a structure that represents one attribute of a relative distinguished name.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.NameAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.NameAttribute"/> instance.
            </summary>
            <param name="oid">The object identifier of the attribute.</param>
            <param name="val">The decoded value of the attribute.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.NameAttribute.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.NameAttribute"/>.
            </summary>
            <param name="obj">The Object to compare with the current Object. </param>
            <returns><b>true</b> if the specified Object is equal to the current NameAttribute; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.NameAttribute.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.NameAttribute"/> type, suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current Object.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.NameAttribute.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.NameAttribute"/>.
            </summary>
            <returns>A String that represents the current NameAttribute.</returns>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.NameAttribute.ObjectID">
            <summary>
            The object identifier of the attribute.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.NameAttribute.Value">
            <summary>
            The value of the attribute.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Certificates.Extension">
            <summary>
            Represents an encoded certificate extension. 
            </summary>
            <remarks>These extensions can be decoded with the Certificate.DecodeExtension() method.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Extension.#ctor(System.String,System.Boolean,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Extension"/> class.
            </summary>
            <param name="oid">The object identifier of the extension.</param>
            <param name="critical"><b>true</b> if it is a critical extension, <b>false</b> otherwise.</param>
            <param name="val">A byte array that contains the encoded extension.</param>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.Extension.ObjectID">
            <summary>
            The object identifier of the extension.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.Extension.Critical">
            <summary>
            <b>true</b> if it is a critical extension, <b>false</b> otherwise.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.Extension.EncodedValue">
            <summary>
            A byte array that contains the encoded extension.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Certificates.KeysetLocation">
            <summary>
            Defines the different keyset locations.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.KeysetLocation.Default">
            <summary>The private keys are stored in the default location.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.KeysetLocation.LocalMachine">
            <summary>The private keys are stored under local machine and not the current user.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.KeysetLocation.CurrentUser">
            <summary>The private keys are stored under the current user and not the local machine even if the PFX BLOB specifies they should go into local machine.</summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate">
            <summary>
            Defines a X509 v3 encoded certificate.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.CreateFromPfxFile(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> class by opening a PFX file and retrieving the first certificate from it.
            </summary>
            <param name="file">The full path to the PFX file.</param>
            <param name="password">The password used to encrypt the private key.</param>
            <returns>One of the certificates in the PFX file.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> or <paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while loading certificates from the specified file.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="password"/> is invalid.</exception>
            <remarks>
            Warning: this method returns the first Certificate it can find in the specified PFX file.
            Care should be taken to verify whether the correct Certificate instance is returned
            when using PFX files that contain more than one certificate.
            For more fine-grained control over which certificate is returned, use
            the CertificateStore.CreateFromPfxFile method to instantiate a CertificateStore object
            and then use the CertificateStore.FindCertificateBy*** methods.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.CreateFromPfxFile(System.String,System.String,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> class by opening a PFX file and retrieving the first certificate from it.
            </summary>
            <param name="file">The full path to the PFX file.</param>
            <param name="password">The password used to encrypt the private key.</param>
            <param name="exportable"><b>true</b> if the private keys associated with the certificates should be marked as exportable, <b>false</b> otherwise.</param>
            <returns>One of the certificates in the PFX file.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> or <paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while loading certificates from the specified file.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="password"/> is invalid.</exception>
            <remarks>
            Warning: this method returns the first Certificate it can find in the specified PFX file.
            Care should be taken to verify whether the correct Certificate instance is returned
            when using PFX files that contain more than one certificate.
            For more fine-grained control over which certificate is returned, use
            the CertificateStore.CreateFromPfxFile method to instantiate a CertificateStore object
            and then use the CertificateStore.FindCertificateBy*** methods.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.CreateFromPfxFile(System.String,System.String,System.Boolean,EnterpriseDT.Mentalis.Security.Certificates.KeysetLocation)">
            <summary>
            Creates a new instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> class by opening a PFX file and retrieving the first certificate from it.
            </summary>
            <param name="file">The full path to the PFX file.</param>
            <param name="password">The password used to encrypt the private key.</param>
            <param name="exportable"><b>true</b> if the private keys associated with the certificates should be marked as exportable, <b>false</b> otherwise.</param>
            <param name="location">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.KeysetLocation"/> values.</param>
            <returns>One of the certificates in the PFX file.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> or <paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while loading certificates from the specified file.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="password"/> is invalid.</exception>
            <remarks>
            Warning: this method returns the first Certificate it can find in the specified PFX file.
            Care should be taken to verify whether the correct Certificate instance is returned
            when using PFX files that contain more than one certificate.
            For more fine-grained control over which certificate is returned, use
            the CertificateStore.CreateFromPfxFile method to instantiate a CertificateStore object
            and then use the CertificateStore.FindCertificateBy*** methods.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.CreateFromPfxFile(System.Byte[],System.String)">
            <summary>
            Creates a new instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> class by opening a PFX file and retrieving the first certificate from it.
            </summary>
            <param name="file">The contents of a PFX file.</param>
            <param name="password">The password used to encrypt the private key.</param>
            <returns>One of the certificates in the PFX file.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> or <paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while loading certificates from the specified bytes.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="password"/> is invalid.</exception>
            <remarks>
            Warning: this method returns the first Certificate it can find in the specified PFX file.
            Care should be taken to verify whether the correct Certificate instance is returned
            when using PFX files that contain more than one certificate.
            For more fine-grained control over which certificate is returned, use
            the CertificateStore.CreateFromPfxFile method to instantiate a CertificateStore object
            and then use the CertificateStore.FindCertificateBy*** methods.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.CreateFromPfxFile(System.Byte[],System.String,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> class by opening a PFX file and retrieving the first certificate from it.
            </summary>
            <param name="file">The contents of a PFX file.</param>
            <param name="password">The password used to encrypt the private key.</param>
            <param name="exportable"><b>true</b> if the private keys associated with the certificates should be marked as exportable, <b>false</b> otherwise.</param>
            <returns>One of the certificates in the PFX file.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> or <paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while loading certificates from the specified bytes.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="password"/> is invalid.</exception>
            <remarks>
            Warning: this method returns the first Certificate it can find in the specified PFX file.
            Care should be taken to verify whether the correct Certificate instance is returned
            when using PFX files that contain more than one certificate.
            For more fine-grained control over which certificate is returned, use
            the CertificateStore.CreateFromPfxFile method to instantiate a CertificateStore object
            and then use the CertificateStore.FindCertificateBy*** methods.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.CreateFromPfxFile(System.Byte[],System.String,System.Boolean,EnterpriseDT.Mentalis.Security.Certificates.KeysetLocation)">
            <summary>
            Creates a new instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> class by opening a PFX file and retrieving the first certificate from it.
            </summary>
            <param name="file">The contents of a PFX file.</param>
            <param name="password">The password used to encrypt the private key.</param>
            <param name="exportable"><b>true</b> if the private keys associated with the certificates should be marked as exportable, <b>false</b> otherwise.</param>
            <param name="location">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.KeysetLocation"/> values.</param>
            <returns>One of the certificates in the PFX file.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> or <paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while loading certificates from the specified bytes.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="password"/> is invalid.</exception>
            <remarks>
            Warning: this method returns the first Certificate it can find in the specified PFX file.
            Care should be taken to verify whether the correct Certificate instance is returned
            when using PFX files that contain more than one certificate.
            For more fine-grained control over which certificate is returned, use
            the CertificateStore.CreateFromPfxFile method to instantiate a CertificateStore object
            and then use the CertificateStore.FindCertificateBy*** methods.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.CreateFromCerFile(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> class by opening a certificate file and retrieving the first certificate from it.
            </summary>
            <param name="file">The full path to the certificate file to open.</param>
            <returns>One of the certificates in the certificate file.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while loading certificates from the specified file.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.CreateFromCerFile(System.Byte[])">
            <summary>
            Creates a new instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> class by reading a certificate from a certificate blob.
            </summary>
            <param name="file">The contents of the certificate file.</param>
            <returns>A Certificate instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> if a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while loading the specified certificate.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.CreateFromCerFile(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> class by reading a certificate from a certificate blob.
            </summary>
            <param name="file">The contents of the certificate file.</param>
            <param name="offset">The offset from which to start reading.</param>
            <param name="size">The length of the certificate.</param>
            <returns>A Certificate instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> if a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while loading the specified certificate.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.CreateFromX509Certificate(System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            Creates a new instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> class by duplicating an existing <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> instance.
            </summary>
            <param name="certificate">The X509Certificate instance to duplicate.</param>
            <returns>A Certificate instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="certificate"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.CreateFromPemFile(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> class by reading a certificate from a PEM encoded file.
            </summary>
            <param name="filename">The path to the PEM file.</param>
            <returns>A Certificate instance.</returns>
            <remarks>This implementation only reads certificates from PEM files. It does not read the private key from the certificate file, if one is present.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="filename"/> if a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.IO.IOException">An error occurs while reading from the file.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while reading the certificate from the PEM blob.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.CreateFromPemFile(System.Byte[])">
            <summary>
            Creates a new instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> class by reading a certificate from a PEM encoded file.
            </summary>
            <param name="file">The contents of the PEM file.</param>
            <returns>A Certificate instance.</returns>
            <remarks>This implementation only reads certificates from PEM files. It does not read the private key from the certificate file, if one is present.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> if a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while reading the certificate from the PEM blob.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetCertString(System.String,System.String)">
            <summary>
            Extracts an encoded certificate from a PEM file.
            </summary>
            <param name="cert">The PEM encoded certificate file.</param>
            <param name="delimiter">The delimiter to search for.</param>
            <returns>The Base64 encoded certificate if successfull or a null reference otherwise.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.#ctor(EnterpriseDT.Mentalis.Security.Certificates.Certificate)">
            <summary>
            Duplicates a given certificate.
            </summary>
            <param name="certificate">The certificate to duplicate.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="certificate"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.#ctor(System.IntPtr)">
            <summary>
            Initializes a new <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> instance from a handle.
            </summary>
            <param name="handle">The handle from which to initialize the state of the new instance.</param>
            <exception cref="T:System.ArgumentException"><paramref name="handle"/> is invalid.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> instance from a handle.
            </summary>
            <param name="handle">The handle from which to initialize the state of the new instance.</param>
            <param name="duplicate"><b>true</b> if the handle should be duplicated, <b>false</b> otherwise.</param>
            <exception cref="T:System.ArgumentException"><paramref name="handle"/> is invalid.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.InitCertificate(System.IntPtr,System.Boolean,EnterpriseDT.Mentalis.Security.Certificates.CertificateStore)">
            <summary>
            Initializes this <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> instance from a handle.
            </summary>
            <param name="handle">The handle from which to initialize the state of the new instance.</param>
            <param name="duplicate"><b>true</b> if the handle should be duplicated, <b>false</b> otherwise.</param>
            <param name="store">The store that owns the certificate.</param>
            <exception cref="T:System.ArgumentException"><paramref name="handle"/> is invalid.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetCertificateInfo">
            <summary>
            Returns the <see cref="T:EnterpriseDT.Mentalis.Security.CertificateInfo"/> structure associated with the certificate.
            </summary>
            <returns>A CertificateInfo instance.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.#ctor(System.IntPtr,EnterpriseDT.Mentalis.Security.Certificates.CertificateStore)">
            <summary>
            Initializes this <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> instance from a handle.
            </summary>
            <param name="handle">The handle from which to initialize the state of the new instance.</param>
            <param name="store">The <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/> that contains the certificate.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.Clone">
            <summary>
            Creates a copy of this <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/>.
            </summary>
            <returns>The Certificate this method creates, cast as an object.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.Finalize">
            <summary>
            Disposes of the certificate and frees unmanaged resources.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.ToString">
            <summary>
            Returns a string representation of the current <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> object.
            </summary>
            <returns>A string representation of the current Certificate object.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.ToString(System.Boolean)">
            <summary>
            Returns a string representation of the current X509Certificate object, with extra information, if specified.
            </summary>
            <param name="verbose"><b>true</b> to produce the verbose form of the string representation; otherwise, <b>false</b>.</param>
            <returns>A string representation of the current X509Certificate object.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetCertHash">
            <summary>
            Returns the hash value for the X.509v3 certificate as an array of bytes.
            </summary>
            <returns>The hash value for the X.509 certificate.</returns>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while retrieving the hash of the certificate.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetCertHash(EnterpriseDT.Mentalis.Security.Certificates.HashType)">
            <summary>
            Returns the hash value for the X.509v3 certificate as an array of bytes.
            </summary>
            <param name="type">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.HashType"/> values.</param>
            <returns>The hash value for the X.509 certificate.</returns>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while retrieving the hash of the certificate.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetCertHashString">
            <summary>
            Returns the hash value for the X.509v3 certificate as a hexadecimal string.
            </summary>
            <returns>The hexadecimal string representation of the X.509 certificate hash value.</returns>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while retrieving the hash of the certificate.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetCertHashString(EnterpriseDT.Mentalis.Security.Certificates.HashType)">
            <summary>
            Returns the hash value for the X.509v3 certificate as a hexadecimal string.
            </summary>
            <param name="type">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.HashType"/> values.</param>
            <returns>The hexadecimal string representation of the X.509 certificate hash value.</returns>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while retrieving the hash of the certificate.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.BytesToString(System.Byte[])">
            <summary>
            Converts an array of bytes to its hexadecimal string representation.
            </summary>
            <param name="buffer">The bytes to convert.</param>
            <returns>The hexadecimal representation of the byte array.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetEffectiveDate">
            <summary>
            Returns the effective date of this X.509v3 certificate.
            </summary>
            <returns>The effective date for this X.509 certificate.</returns>
            <remarks>The effective date is the date after which the X.509 certificate is considered valid.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetExpirationDate">
            <summary>
            Returns the expiration date of this X.509v3 certificate.
            </summary>
            <returns>The expiration date for this X.509 certificate.</returns>
            <remarks>The expiration date is the date after which the X.509 certificate is no longer considered valid.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetIssuerName">
            <summary>
            Returns the name of the certification authority that issued the X.509v3 certificate.
            </summary>
            <returns>The name of the certification authority that issued the X.509 certificate.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetKeyAlgorithm">
            <summary>
            Returns the key algorithm information for this X.509v3 certificate.
            </summary>
            <returns>The key algorithm information for this X.509 certificate as a string.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetKeyAlgorithmParameters">
            <summary>
            Returns the key algorithm parameters for the X.509v3 certificate.
            </summary>
            <returns>The key algorithm parameters for the X.509 certificate as an array of bytes.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetKeyAlgorithmParametersString">
            <summary>
            Returns the key algorithm parameters for the X.509v3 certificate.
            </summary>
            <returns>The key algorithm parameters for the X.509 certificate as a hexadecimal string.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetPublicKey">
            <summary>
            Returns the public key for the X.509v3 certificate.
            </summary>
            <returns>The public key for the X.509 certificate as an array of bytes.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetPublicKeyString">
            <summary>
            Returns the public key for the X.509v3 certificate.
            </summary>
            <returns>The public key for the X.509 certificate as a hexadecimal string.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetRawCertData">
            <summary>
            Returns the raw data for the entire X.509v3 certificate.
            </summary>
            <returns>A byte array containing the X.509 certificate data.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetRawCertDataString">
            <summary>
            Returns the raw data for the entire X.509v3 certificate.
            </summary>
            <returns>The X.509 certificate data as a hexadecimal string.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetSerialNumber">
            <summary>
            Returns the serial number of the X.509v3 certificate.
            </summary>
            <returns>The serial number of the X.509 certificate as an array of bytes.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetSerialNumberString">
            <summary>
            Returns the serial number of the X.509v3 certificate.
            </summary>
            <returns>The serial number of the X.509 certificate as a hexadecimal string.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetPublicKeyLength">
            <summary>
            Returns the length of the public key of the X.509v3 certificate.
            </summary>
            <returns>Returns the length of the public key in bits. If unable to determine the key's length, returns zero.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetDistinguishedName">
            <summary>
            Returns a list of attributes of the X.509v3 certificate.
            </summary>
            <returns>A StringDictionary that contains the attributes.</returns>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while retrieving the attributes.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetExtensions">
            <summary>
            Returns a list of extensions of the X.509v3 certificate.
            </summary>
            <returns>An array of Extension instances.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.FindExtension(System.String)">
            <summary>
            Searches for a certificate extension.
            </summary>
            <param name="oid">The extension to search for.</param>
            <returns>An instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Extension"/> class -or- a null reference (<b>Nothing</b> in Visual Basic) if the specified extension could not be found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="oid"/> is a null  reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.DecodeExtension(EnterpriseDT.Mentalis.Security.Certificates.Extension,System.Int32,System.Type)">
            <summary>
            Decodes the specified extension and returns an object of the specified type that is instantiated with the decoded bytes.
            </summary>
            <param name="extension">The certificate extension to decode.</param>
            <param name="oid">One of the predefined constants specified in the Win32 CryptoAPI. Refer to the documentation of the <a href="http://msdn.microsoft.com/library/en-us/security/security/cryptdecodeobject.asp">CryptDecodeObject</a> function for more information.</param>
            <param name="returnType">A <see cref="T:System.Type"/> instance. See remarks.</param>
            <returns>An object of the type <paramref name="returnType"/>.</returns>
            <remarks>
            The specified type should have a public constructor that takes an IntPtr and an int as parameters [in that order].
            The IntPtr is a pointer to the decoded buffer and the int contains the number of decoded bytes.
            The type should not keep the IntPtr reference after construction of an instance, because the memory is freed when the DecodeExtension method returns.
            </remarks>
            <exception cref="T:System.ArgumentNullException">One of the parameters is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while decoding the certificate extension.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.DecodeExtension(EnterpriseDT.Mentalis.Security.Certificates.Extension,System.String,System.Type)">
            <summary>
            Decodes the specified extension and returns an object of the specified type that is instantiated with the decoded bytes.
            </summary>
            <param name="extension">The certificate extension to decode.</param>
            <param name="oid">The Object Identifier of the structure. Refer to the documentation of the <a href="http://msdn.microsoft.com/library/en-us/security/security/cryptdecodeobject.asp">CryptDecodeObject</a> function for more information.</param>
            <param name="returnType">A <see cref="T:System.Type"/> instance. See remarks.</param>
            <returns>An object of the type <paramref name="returnType"/>.</returns>
            <remarks>
            The specified type should have a public constructor that takes an IntPtr and an int as parameters [in that order].
            The IntPtr is a pointer to the decoded buffer and the int contains the number of decoded bytes.
            The type should not keep the IntPtr reference after construction of an instance, because the memory is freed when the DecodeExtension method returns.
            </remarks>
            <exception cref="T:System.ArgumentNullException">One of the parameters is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while decoding the certificate extension.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.DecodeExtension(EnterpriseDT.Mentalis.Security.Certificates.Extension,System.IntPtr,System.Type)">
            <summary>
            Decodes the specified extension and returns an object of the specified type that is instantiated with the decoded bytes.
            </summary>
            <param name="extension">The certificate extension to decode.</param>
            <param name="oid">The Object Identifier of the structure.</param>
            <param name="returnType">A <see cref="T:System.Type"/> instance. See remarks.</param>
            <returns>An object of the type <paramref name="returnType"/>.</returns>
            <remarks>
            The specified type should have a public constructor that takes an IntPtr and an int as parameters [in that order].
            The IntPtr is a pointer to the decoded buffer and the int contains the number of decoded bytes.
            The type should not keep the IntPtr reference after construction of an instance, because the memory is freed when the DecodeExtension method returns.
            </remarks>
            <exception cref="T:System.ArgumentNullException">One of the parameters is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while decoding the certificate extension.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetName">
            <summary>
            Returns the name of the current principal.
            </summary>
            <returns>The name of the current principal.</returns>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">The certificate does not have a name attribute.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetIntendedKeyUsage">
            <summary>
            Returns a list of intended key usages of the X.509v3 certificate.
            </summary>
            <returns>An integer that contains a list of intended key usages.</returns>
            <remarks>Use the bitwise And operator to check whether a specific key usage is set.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetEnhancedKeyUsage">
            <summary>
            Returns a list of enhanced key usages of the X.509v3 certificate.
            </summary>
            <returns>A StringCollection that contains a list of the enhanced key usages.</returns>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while retrieving the enhanced key usages.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetCertificateChain">
            <summary>
            Returns a <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain"/> where the leaf certificate corresponds to this <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/>.
            </summary>
            <returns>The CertificateChain corresponding to this Certificate.</returns>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while building the certificate chain.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.HasPrivateKey">
            <summary>
            Checks whether the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> has a private key associated with it.
            </summary>
            <returns><b>true</b> if the certificate has a private key associated with it, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetFormat">
            <summary>
            Returns the name of the format of this X.509v3 certificate.
            </summary>
            <returns>The format of this X.509 certificate.</returns>
            <remarks>The format X.509 is always returned in this implementation.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetHashCode">
            <summary>
            Returns the hash code for the X.509v3 certificate as an integer.
            </summary>
            <returns>The hash code for the X.509 certificate as an integer.</returns>
            <remarks>If the X.509 certificate hash is an array of more than 4 bytes, any byte after the fourth byte is not seen in this integer representation.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.Equals(EnterpriseDT.Mentalis.Security.Certificates.Certificate)">
            <summary>
            Compares two <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> objects for equality.
            </summary>
            <param name="other">A Certificate object to compare to the current object.</param>
            <returns><b>true</b> if the current Certificate object is equal to the object specified by <paramref name="other"/>; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.Equals(System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            Compares a <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> object and an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> object for equality.
            </summary>
            <param name="other">An X509Certificate object to compare to the current object.</param>
            <returns><b>true</b> if the current Certificate object is equal to the object specified by <paramref name="other"/>; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.Equals(System.Object)">
            <summary>
            Compares two <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> objects for equality.
            </summary>
            <param name="other">A Certificate object to compare to the current object.</param>
            <returns><b>true</b> if the current Certificate object is equal to the object specified by <paramref name="other"/>; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetValidUsages(EnterpriseDT.Mentalis.Security.Certificates.Certificate[])">
            <summary>
            Returns an array of usages consisting of the intersection of the valid usages for all certificates in an array of certificates.
            </summary>
            <param name="certificates">Array of certificates to be checked for valid usage.</param>
            <returns>An array of valid usages -or- a null reference (<b>Nothing</b> in Visual Basic) if all certificates support all usages.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="certificates"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The array of certificates contains at least one invalid entry.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while determining the intersection of valid usages.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.ToPfxFile(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Saves the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> as a PFX encoded file.
            </summary>
            <param name="filename">The filename of the new PFX file.</param>
            <param name="password">The password to use when encrypting the private keys.</param>
            <param name="withPrivateKeys"><b>true</b> if the private keys should be exported [if possible], <b>false</b> otherwise.</param>
            <param name="withParents"><b>true</b> if the parent certificates should be exported too [if possible], <b>false</b> otherwise.</param>
            <remarks>If the specified file already exists, the method will throw an exception.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="filename"/> or <paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.IO.IOException">An error occurs while writing the data to the file.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while exporting the certificate store<br>-or-</br><br>an error occurs while building the certificate chain</br><br>-or-</br><br>an error occurs while creating the store</br><br>-or-</br><br>an error occurs while adding the certificate to the store.</br></exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.ToPfxBuffer(System.String,System.Boolean,System.Boolean)">
            <summary>
            Saves the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> as a PFX encoded buffer.
            </summary>
            <param name="password">The password to use when encrypting the private keys.</param>
            <param name="withPrivateKeys"><b>true</b> if the private keys should be exported [if possible], <b>false</b> otherwise.</param>
            <param name="withParents"><b>true</b> if the parent certificates should be exported too [if possible], <b>false</b> otherwise.</param>
            <returns>An array of bytes that represents the PFX encoded certificate.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while exporting the certificate store<br>-or-</br><br>an error occurs while building the certificate chain</br><br>-or-</br><br>an error occurs while creating the store</br><br>-or-</br><br>an error occurs while adding the certificate to the store.</br></exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.CreateCertStore(System.Boolean)">
            <summary>
            Creates an in memory <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/> with this <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> in it.
            </summary>
            <param name="withParents"><b>true</b> if the parent certificates should be included [if possible], <b>false</b> otherwise.</param>
            <returns>A CertificateStore instance.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.ToCerFile(System.String)">
            <summary>
            Saves the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> as an encoded file.
            </summary>
            <param name="filename">The file where to store the certificate.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="filename"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.IO.IOException">An error occurs while writing the data.</exception>
            <remarks>If the specified file already exists, this method will throw an exception.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.ToCerBuffer">
            <summary>
            Saves the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> as an encoded buffer.
            </summary>
            <returns>An array of bytes that represents the encoded certificate.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetCertificateBuffer">
            <summary>
            Returns a buffer with the encoded certificate.
            </summary>
            <returns>An array of bytes.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.SaveToFile(System.Byte[],System.String)">
            <summary>
            Writes a buffer with data to a file.
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="filename">The filename to write the data to.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="filename"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.IO.IOException">An error occurs while writing the data.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.ToX509">
            <summary>
            Returns an X509Certificate object that corresponds to this <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/>.
            </summary>
            <returns>An X509Certificate instance.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.DuplicateHandle">
            <summary>
            Duplicates the handle of the Certificate.
            </summary>
            <returns>A duplicate handle of the Certificate.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.CreateFromBase64String(System.String)">
            <summary>
            Creates a new Certificate from a string representation.
            </summary>
            <param name="rawString">A Base64-encoded representation of the certificate.</param>
            <returns>A new Certificate.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="rawString"/> if a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while loading the specified certificate.</exception>
            <exception cref="T:System.FormatException">The length of <paramref name="rawString"/> is less than 4 -or- the length of <paramref name="rawString"/> is not an even multiple of 4.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.ToBase64String">
            <summary>
            Returns a Base64-encoded representation of the certificate.
            </summary>
            <returns>A Base64-encoded representation of the certificate.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.ToPemBuffer">
            <summary>
            Converts the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> to a PEM encoded buffer.
            </summary>
            <returns>An array of bytes that represents the PEM encoded certificate.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetKeyIdentifier">
            <summary>
            Gets the unique identifier associated with the key.
            </summary>
            <returns>A byte array containing the unique identifier associated with the key.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.ConvertIntToByteArray(System.Int32)">
            <summary>
            Converts an integer to a series of bytes.
            </summary>
            <param name="dwInput">The integer to convert.</param>
            <returns>An array of bytes that represents the integer.</returns>
            <remarks>This method returns the minimum required number of bytes to represent a specific integer number.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.AssociateWithPrivateKey(System.String,System.String)">
            <summary>
            Associates the certificate with a private key from a PVK file.
            </summary>
            <param name="pvkFile">The path to the PVK file to open.</param>
            <param name="password">The password used to encrypt the private key.</param>
            <remarks>
            <para>The <paramref name="password"/> can be a null reference (<b>Nothing</b> in Visual Basic) if the private key is not encrypted.</para>
            <para>The private key will not be exportable.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">The PVK file is encrypted and <paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.IO.FileNotFoundException">The specified file could not be found.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while importing the private key.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.AssociateWithPrivateKey(System.String,System.String,System.Boolean)">
            <summary>
            Associates the certificate with a private key from a PVK file.
            </summary>
            <param name="pvkFile">The path to the PVK file to open.</param>
            <param name="password">The password used to encrypt the private key.</param>
            <param name="exportable"><b>true</b> if the private key should be marked exportable, <b>false</b> otherwise.</param>
            <remarks>The <paramref name="password"/> can be a null reference (<b>Nothing</b> in Visual Basic) if the private key is not encrypted.</remarks>
            <exception cref="T:System.ArgumentNullException">The PVK file is encrypted and <paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.IO.FileNotFoundException">The specified file could not be found.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while importing the private key.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.ExportPrivateKey(System.String,System.String)">
            <summary>
            Exports the private key of this certificate to a PVK file.
            </summary>
            <param name="pvkFile">The path to the PVK file to create.</param>
            <param name="password">The password used to encrypt the private key.</param>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while exporting the private key.</exception>
            <exception cref="T:System.IO.IOException">An error occurs while writing the PVK file.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.TryDecrypt(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Tries decrypting the PRIVATEKEYBLOB blob.
            </summary>
            <param name="buffer">The buffer to decrypt.</param>
            <param name="offset">The starting offset.</param>
            <param name="length">The number of bytes to decrypt.</param>
            <param name="password">The password used to encrypt the PVK file (the salt should be prepended to the password).</param>
            <param name="keyLen">The effective key length in bytes (16 for 128 bit encryption, 5 for 40 bit encryption).</param>
            <returns>The decrypted buffer if successfull, or a null reference otherwise.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.VerifyRevocation(System.Byte[])">
            <summary>
            Verifies whether this certificate has been revoked or not.
            </summary>
            <param name="crl">The encoded CRL to check against.</param>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while verifying the certificate.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="crl"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <returns><b>true</b> if the certificate is not on the CRL and therefore valid, or <b>false</b> if the certificate is on the CRL and therefore revoked.</returns>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.Certificate.m_Handle">
            <summary>
            The handle of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> object.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.Certificate.m_Store">
            <summary>
            The handle of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/> object.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.Certificate.m_CertInfo">
            <summary>
            A <see cref="T:EnterpriseDT.Mentalis.Security.CertificateInfo"/> instance associated with this certificate.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.Certificate.m_Context">
            <summary>
            A <see cref="T:EnterpriseDT.Mentalis.Security.CertificateContext"/> instance associated with this certificate.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.Certificate.m_Chain">
            <summary>
            A reference to the associated <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain"/>.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.Certificate.Handle">
            <summary>
            Gets the handle of the Certificate.
            </summary>
            <value>An IntPtr that represents the handle of the certificate.</value>
            <remarks>The handle returned by this property should not be closed. If the handle is closed by an external actor, the methods of the Certificate object may fail in undocumented ways [for instance, an Access Violation may occur].</remarks>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.Certificate.Store">
            <summary>
            Gets the handle of the associated <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/>, if any.
            </summary>
            <value>A CertificateStore instance -or- a null reference (<b>Nothing</b> in Visual Basic) is no store is associated with this certificate.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.Certificate.IsCurrent">
            <summary>
            Gets a value indicating whether the certificate is current, that is, has not expired.
            </summary>
            <value><b>true</b> if the certificate is current; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.Certificate.SupportsDataEncryption">
            <summary>
            Gets a value indicating whether the certificate can be used for encrypting and decrypting messages.
            </summary>
            <value><b>true</b> if the certificate can be used for data encryption; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.Certificate.SupportsDigitalSignature">
            <summary>
            Gets a value indicating whether the certificate can be used for digital signatures.
            </summary>
            <value><b>true</b> if the certificate can be used for digital signature; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.Certificate.PrivateKey">
            <summary>
            Gets the private key for the certificate.
            </summary>
            <value>A System.Security.Cryptography.RSA containing the private key for the certificate.</value>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while retrieving the RSA instance associated with the certificate.</exception>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.Certificate.PublicKey">
            <summary>
            Gets the public key derived from the certificate's data. This key cannot be used to sign or decrypt data.
            </summary>
            <value>A System.Security.Cryptography.RSA that contains the public key derived from the certificate's data.</value>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while retrieving the RSA instance associated with the certificate.</exception>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Pro.Design.PasswordForm">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.Design.PasswordForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.Design.PasswordForm.#ctor">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.Design.PasswordForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.Design.PasswordForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.Design.PasswordForm.Password">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateVerificationResult">
            <summary>
            Represents the status of an asynchronous certificate chain verification operation.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateVerificationResult.#ctor(EnterpriseDT.Mentalis.Security.Certificates.CertificateChain,System.String,EnterpriseDT.Mentalis.Security.Certificates.AuthType,EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags,System.AsyncCallback,System.Object)">
            <summary>
            Initializes a new CertificateVerificationResult instance.
            </summary>
            <param name="chain">The <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain"/> that has to be verified.</param>
            <param name="server">The server to which the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> has been issued.</param>
            <param name="type">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.AuthType"/> values.</param>
            <param name="flags">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags"/> values.</param>
            <param name="callback">The delegate to call when the verification finishes.</param>
            <param name="asyncState">User-defined state data.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateVerificationResult.VerificationCompleted(System.Exception,EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus)">
            <summary>
            Sets the WaitHandle to signalled and calls the appropriate delegate.
            </summary>
            <param name="error">An exception that may have occurred.</param>
            <param name="status">The status of the certificate chain.</param>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateVerificationResult.m_IsCompleted">
            <summary>Holds the value of the IsCompleted property.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateVerificationResult.m_AsyncState">
            <summary>Holds the value of the AsyncState property.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateVerificationResult.m_Chain">
            <summary>Holds the value of the Chain property.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateVerificationResult.m_Server">
            <summary>Holds the value of the Server property.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateVerificationResult.m_Type">
            <summary>Holds the value of the Type property.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateVerificationResult.m_Flags">
            <summary>Holds the value of the Flags property.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateVerificationResult.m_WaitHandle">
            <summary>Holds the value of the WaitHandle property.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateVerificationResult.m_Callback">
            <summary>Holds the value of the Callback property.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateVerificationResult.m_HasEnded">
            <summary>Holds the value of the HasEnded property.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateVerificationResult.m_ThrowException">
            <summary>Holds the value of the ThrowException property.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateVerificationResult.m_Status">
            <summary>Holds the value of the Status property.</summary>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.CertificateVerificationResult.CompletedSynchronously">
            <summary>
            Gets an indication of whether the asynchronous operation completed synchronously.
            </summary>
            <value>Always <b>false</b>.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.CertificateVerificationResult.IsCompleted">
            <summary>
            Gets a boolean value that indicates whether the operation has finished.
            </summary>
            <value>
            <b>true</b> if the verification of the chain has been completed, <b>false</b> otherwise.
            </value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.CertificateVerificationResult.AsyncWaitHandle">
            <summary>
            Gets a <see cref="T:System.Threading.WaitHandle"/> that is used to wait for an asynchronous operation to complete.
            </summary>
            <value>
            A WaitHandle that is used to wait for an asynchronous operation to complete.
            </value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.CertificateVerificationResult.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
            <value>
            A user-defined object that qualifies or contains information about an asynchronous operation.
            </value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.CertificateVerificationResult.Chain">
            <summary>
            Gets the associated certificate chain.
            </summary>
            <value>
            A <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain"/> instance.
            </value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.CertificateVerificationResult.Server">
            <summary>
            Gets the associated server name.
            </summary>
            <value>
            A string that holds the server name.
            </value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.CertificateVerificationResult.Type">
            <summary>
            Gets the associated authentication type.
            </summary>
            <value>
            One of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.AuthType"/> values.
            </value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.CertificateVerificationResult.Flags">
            <summary>
            Gets the associated verification flags.
            </summary>
            <value>
            One of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags"/> values.
            </value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.CertificateVerificationResult.HasEnded">
            <summary>
            Gets or sets a value that indicates whether the user has called EndVerifyChain for this object.
            </summary>
            <value>
            <b>true</b> if the user has called EndVerifyChain, <b>false</b> otherwise.
            </value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.CertificateVerificationResult.ThrowException">
            <summary>
            Gets an exception that has occurred while verifying the certificate chain or a null reference (<b>Nothing</b> in Visual Basic) if the verification succeeded.
            </summary>
            <value>
            A <see cref="T:System.Exception"/> instance.
            </value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.CertificateVerificationResult.Status">
            <summary>
            Gets the status of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain"/>.
            </summary>
            <value>
            One of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus"/> values.
            </value>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Design.ListBoxItem">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.QuitCommand">
            <summary>  Quit command 
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.2 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FileTransferProtocol">
            <summary>
            Specifies types of File Transfer Protocols.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FileTransferProtocol.FTP">
            <summary>
            Standard FTP over <b>unencrypted</b> TCP/IP connections.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FileTransferProtocol.FTPSExplicit">
            <summary>
            Explicit FTPS: Standard FTP-over-SSL as defined in RFC4217.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FileTransferProtocol.FTPSImplicit">
            <summary>
            Implicit FTPS: Nonstandard, legacy version of FTP-over-SSL.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FileTransferProtocol.SFTP">
            <summary>
            SFTP - SSH File Transfer Protocol.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FileTransferProtocol.SCP">
            <summary>
            SCP - Secure Copy.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FileTransferProtocol.HTTP">
            <summary>
            HTTP - standard <b>unencrypted</b> HTTP transfers
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FileTransferProtocol.GoogleDocs">
            <summary>
            Google Docs
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Documents.Document">
            <summary>
             the base class for all documents in the document service. A document can represent folders, documents, spreadsheets etc. 
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Documents.Document.EnsureInnerObject">
            <summary>
            creates the inner document entry object when needed
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Documents.Document.DocumentEntry">
            <summary>
            readonly accessor for the DocumentEntry that is underneath this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Documents.Document.Type">
            <summary>
            the type of the document entry
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Documents.Document.ParentFolders">
            <summary>
            returns the href values of the parent link relationships
            can be used to retrieve the parent folder
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Documents.Document.ResourceId">
            <summary>
            returns the document resource id of the object. 
            this uses the gd:resourceId element
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Documents.Document.WritersCanInvite">
            <summary>
            returns true if collaborators are allowed to modify 
            the document ACL list
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Documents.Document.LastViewed">
            <summary>
            Returns the last viewed timestamp
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Documents.Document.LastModified">
            <summary>
            returns the LastModifiedBy object indicating
            who last edited the document
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Documents.Document.QuotaBytesUsed">
            <summary>
            returns the quota used by the object. 0 if not available
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Documents.Document.AccessControlList">
            <summary>
            returns the Uri to the access control list
            </summary>
            <returns>the value of the href attribute for the acl feedlink, or null if not found</returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Documents.Document.RevisionDocument">
            <summary>
            returns the Uri to the revision document
            </summary>
            <returns>The value of the href attribute of the revisions feedlink, or null if not found</returns>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Documents.Document.DocumentType">
            <summary>
            descripes the type of the document entry
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.Document.DocumentType.Document">
            <summary>
            a document
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.Document.DocumentType.Spreadsheet">
            <summary>
            a spreadsheet
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.Document.DocumentType.PDF">
            <summary>
            a pdf file
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.Document.DocumentType.Presentation">
            <summary>
            a presentation
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.Document.DocumentType.Folder">
            <summary>
            a folder
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.Document.DocumentType.Form">
            <summary>
            a form
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.Document.DocumentType.Drawing">
            <summary>
            a drawing
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.Document.DocumentType.Unknown">
            <summary>
            an unknown document type
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Documents.Document.DownloadType">
            <summary>
            describes the download type, in what format you want to download the document
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.Document.DownloadType.txt">
            <summary>
            text file
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.Document.DownloadType.odt">
            <summary>
            open document format
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.Document.DownloadType.pdf">
            <summary>
            portable document format PDF
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.Document.DownloadType.html">
            <summary>
            html format
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.Document.DownloadType.rtf">
            <summary>
            rich text format
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.Document.DownloadType.doc">
            <summary>
            microsoft word format
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.Document.DownloadType.png">
            <summary>
            portable network graphics format
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.Document.DownloadType.zip">
            <summary>
            zip format
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.Document.DownloadType.swf">
            <summary>
            flash format
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.Document.DownloadType.ppt">
            <summary>
            Microsoft Powerpoint format
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.Document.DownloadType.xls">
            <summary>
            Microsoft Excel format
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.Document.DownloadType.csv">
            <summary>
            commma separated value format
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.Document.DownloadType.ods">
            <summary>
            open document spreadsheet format
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.Document.DownloadType.tsv">
            <summary>
            tab separated values format
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.Document.DownloadType.svg">
            <summary>
            Scalable Vector Graphics format
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.Document.DownloadType.jpeg">
            <summary>
            jpeg format
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Documents.DocumentsRequest">
            <summary>
            The Google Documents List Data API allows client applications 
            to view and update documents (spreadsheets and word processor) 
            using a Google Data API feed. Your client application can request
            a list of a user's documents, query the content of a 
            user's documents, and upload new documents.
            </summary>
             <example>
                    The following code illustrates a possible use of   
                     the <c>DocumentsRequest</c> object:  
                     <code>    
                       RequestSettings settings = new RequestSettings("yourApp");
                       settings.PageSize = 50; 
                       settings.AutoPaging = true;
                       DocumentsRequest c = new DocumentsRequest(settings);
                       Feed&lt;Dcouments&gt; feed = c.GetDocuments();
                
                    foreach (Document d in feed.Entries)
                    {
                         Console.WriteLine(d.Title);
                    }
             </code>
             </example>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Documents.DocumentsRequest.#ctor(EnterpriseDT.Google.GData.Client.RequestSettings)">
            <summary>
            default constructor for a DocumentsRequest
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Documents.DocumentsRequest.OnSetOtherProxies(System.Net.IWebProxy)">
            <summary>
            called to set additional proxies if required. Overloaded on the document service
            </summary>
            <param name="proxy"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Documents.DocumentsRequest.GetEverything">
            <summary>
            returns a Feed of all documents and folders for the authorized user
            </summary>
            <returns>a feed of everyting</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Documents.DocumentsRequest.GetDocuments">
            <summary>
            returns a Feed of all documents for the authorized user
            </summary>
            <returns>a feed of Documents</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Documents.DocumentsRequest.GetPresentations">
            <summary>
            returns a Feed of all presentations for the authorized user
            </summary>
            <returns>a feed of Documents</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Documents.DocumentsRequest.GetSpreadsheets">
            <summary>
            returns a Feed of all spreadsheets for the authorized user
            </summary>
            <returns>a feed of Documents</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Documents.DocumentsRequest.GetPDFs">
            <summary>
            returns a Feed of all pdf files for the authorized user
            </summary>
            <returns>a feed of Documents</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Documents.DocumentsRequest.GetMyDocuments">
            <summary>
            returns a Feed of all files that are owned by the authorized user
            </summary>
            <returns>a feed of Documents</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Documents.DocumentsRequest.GetFolders">
            <summary>
            returns a Feed of all folders for the authorized user
            </summary>
            <returns>a feed of Documents</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Documents.DocumentsRequest.GetViewed">
            <summary>
            returns all items the user has viewed recently
            </summary>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Documents.DocumentsRequest.GetForms">
            <summary>
            returns all forms for the authorized user
             </summary>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Documents.DocumentsRequest.GetFolderContent(EnterpriseDT.Google.GData.Documents.Document)">
            <summary>
            returns a feed of documents for the specified folder
            </summary>
            <param name="folder"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Documents.DocumentsRequest.CreateDocument(EnterpriseDT.Google.GData.Documents.Document)">
            <summary>
            this will create an empty document or folder, according to
            the content of the newDocument parameter
            </summary>
            <param name="newDocument"></param>
            <returns>the created document from the server</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Documents.DocumentsRequest.CreateFile(EnterpriseDT.Google.GData.Documents.Document)">
            <summary>
            this will create an empty document or folder, according to
            the content of the newDocument parameter. This will append
            the convert=false parameter to allow arbitrary file uploads
            </summary>
            <param name="newDocument"></param>
            <returns>the created document from the server</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Documents.DocumentsRequest.MoveDocumentTo(EnterpriseDT.Google.GData.Documents.Document,EnterpriseDT.Google.GData.Documents.Document)">
            <summary>
            moves a document or a folder into a folder
            </summary>
            <param name="parent">this has to be a folder</param>
            <param name="child">can be a folder or a document</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Documents.DocumentsRequest.Download(EnterpriseDT.Google.GData.Documents.Document,EnterpriseDT.Google.GData.Documents.Document.DownloadType)">
            <summary>
            downloads a document. 
            </summary>
            <param name="document">The document to download. It needs to have the document type set, as well as the id link</param>
            <param name="type">The output format of the document you want to download</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Documents.DocumentsRequest.Download(EnterpriseDT.Google.GData.Documents.Document,EnterpriseDT.Google.GData.Documents.Document.DownloadType,System.String,System.Int32)">
            <summary>
            downloads a document. 
            </summary>
            <param name="document">The document to download. It needs to have the document type set, as well as the id link</param>
            <param name="type">The output format of the document you want to download</param>
            <param name="sheetNumber">When requesting a CSV or TSV file you must specify an additional parameter called 
            gid which indicates which grid, or sheet, you wish to get (the index is 0-based, so gid 1 
            actually refers to the second sheet sheet on a given spreadsheet). </param>
            <param name="baseDomain">OBSOLETE - if null, default is used. Otherwise needs to specify the domain to download from, ending with a slash</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Documents.DocumentsRequest.Download(EnterpriseDT.Google.GData.Documents.Document,System.String)">
            <summary>
            Downloads arbitrary documents, where the link to the document is inside the 
            content field. 
            </summary>
            <param name="document">a Document Entry</param>
            <param name="exportFormat">a string for the exportformat parameter or null</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Documents.DocumentsRequest.BuildDocumentPartialExportUrl(System.String)">
            <summary>
            helper function used by the Download methods
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Documents.DocumentsRequest.BaseUri">
            <summary>
            the base string to use for queries. Defaults to 
            DocumentsListQuery.documentsBaseUri
            </summary>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.WindowsFileParser">
            <summary>  
            Represents a remote Windows file parser
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.17 $
            </version>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.WindowsFileParser.DIR">
            <summary> Directory field</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.WindowsFileParser.MIN_EXPECTED_FIELD_COUNT">
            <summary> Number of expected fields</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.WindowsFileParser.log">
            <summary> Logging object</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.WindowsFileParser.format1">
            <summary>Date format</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.WindowsFileParser.format2">
            <summary>Date format</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.WindowsFileParser.format3">
            <summary>Date format</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.WindowsFileParser.formats">
            <summary>array of formats</summary> 
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.WindowsFileParser.sep">
            <summary>Splitter token</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.WindowsFileParser.#ctor">
            <summary> Default constructor</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.WindowsFileParser.IsValidFormat(System.String[])">
            <summary>
            Test for valid format for this parser
            </summary>
            <param name="listing">listing to test</param>
            <returns>true if valid</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.WindowsFileParser.Parse(System.String)">
            <summary> Parse server supplied string. Should be in
            form 
            <![CDATA[
            05-17-03  02:47PM                70776 ftp.jar
            08-28-03  10:08PM       <DIR>          EDT SSLTest
            ]]>
            </summary>
            <param name="raw">  
            raw string to parse
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.WindowsFileParser.TimeIncludesSeconds">
            <summary>
            Get flag indicating whether or not the most recent parse returned seconds.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.VersionCommand">
            <summary>  Print out version details
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.2 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.SecureFTPConnection">
            <summary>
            Extends <see cref="T:EnterpriseDT.Net.Ftp.ExFTPConnection"/>'s features by providing support for all secure
            file-transfer protocols, i.e. SFTP, explicit FTPS and implicit FTPS.
            </summary>
            <remarks>
            <para><b>Connections</b> are not opened until the <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.Connect"/> method is called.
            Connection-, Authentication-, and Security-related properties should be set
            prior to opening the connection.</para>
            
            <para>At a minimum, the following properties must be set prior to connection.
            <list type="table">
              <listheader>
            	<term>Property</term>
            	<term>Description</term>
              </listheader>
              <item>
                <term><see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.Protocol">Protocol</see></term>
                <description>The <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.Protocol">protocol</see> to use: 
                SFTP, explicit FTPS, implicit FTPS or plain FTP.</description>
              </item>
              <item>
                <term><see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.ServerAddress">ServerAddress</see></term>
                <description>The domain-name or IP-address of the server.</description>
              </item>
              <item>
                <term><see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.UserName">UserName</see></term>
                <description>User-name of account on the server.</description>
              </item>
              <item>
                <term><see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.Password">Password</see></term>
                <description>Password of account on the server.</description>
              </item>
            </list></para>
            
            <para>The <b>Connection Tester</b> may be used to assist with setting these
            and other properties.
            It allows the developer to test various property-settings interactively without running 
            their application.  The Connection Designer may be accessed by 
            (1) double-clicking on the component, (2) right-clicking on the component and 
            selecting "Connection Tester" from the context menu, or (3) selecting the component
            and then clicking on the "Connection Tester" link at the bottom of the 
            Properties View.</para>
            
            <para><b>Secure Transfers</b> are enabled through the Security properties.  At a minimum, 
            the <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.Protocol">Protocol</see> should be set to <c>SFTP</c>, 
            <c>FTPSExplicit</c> or 
            <c>FTPSImplicit</c> representing the SSH File Transfer Protocol, explicit FTP over
            SSL, and implicit FTP over SSL, respectively.  The issue of Server Validation must 
            also be addressed.</para>
            
            <para><b>Server Validation</b> is the process of making sure that the server with which
            the client is communicating is indeed the intended server.  While developing code, 
            this process may be disabled by setting <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.ServerValidation"/> to
            <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPServerValidationType.None"/>, which disables server validation
            and thus postpones any complications related to it, but this should <b>not</b> be 
            done in deployed applications.</para>
            
            <para>To achieve server validation, the <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.ServerValidation"/> property 
            may be set to <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPServerValidationType.Automatic"/> or 
            <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPServerValidationType.AutomaticNoNameCheck"/>.  The method by 
            which a server is validated depends on whether the protocol is SSH-based 
            or SSL-based.</para>
            
            <para>In the <b>SSL-based protocols</b>, explicit FTPS and implicit FTPS, a certificate that 
            is able to verify the FTP server 
            must be installed on the machine on which the FTP client software is running.  
            This certificate may be either the certificate of the server itself, or the 
            certificate of the Certificate Authority (CA).  <c>SecureFTPConnection</c> provides 
            various means of installing server certificates:
            <list type="bullet">
            <item><term>Design-Time</term>
            <description>The Certificate Manager GUI may be displayed at design-time by
            (1) right-clicking on the component and 
            selecting "Certificate Manager" from the context menu, or (2) selecting the component
            and then clicking on the "Certificate Manager" link at the bottom of the Properties 
            View.</description></item>
            <item><term>Runtime GUI</term>
            <description>The Certificate Manager GUI may be displayed at runtime by using
            the <see cref="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.ShowCertificateManager"/> method.</description></item>
            <item><term>Runtime Programmatic</term>
            <description>Certificates may be imported into the operating system's Certificate Stores
            using the Import methods of <see cref="T:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate"/>.</description></item>
            <item><term>Microsoft Management Console (MMC)</term>
            <description>The Microsoft Management Controls (MMC) may be used for managing the
            operating system's certificate stores.</description></item>
            </list></para>
            
            <para>In the <b>SSH-based protocol</b>, SFTP, the server is validated by means of its
            public key.  Typically, the server's public key is stored in either a file 
            containing that single key, or in a file often called <i>known_hosts</i> which can 
            contain a number of public keys for different servers.  When the client connects 
            to the server, the server's public key is returned and compared with the 
            available public keys stored in the client.  Known-host files may be loaded by 
            setting the <see cref="P:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.KnownHostsFile">KnownHosts.KnownHostsFile</see>
            property.  Individual public keys may be loaded using the
            <see cref="M:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.AddKnownHost(System.String,System.String)">KnownHosts.AddKnownHost</see>
            method.</para>
            
            <para><b>Client validation</b> is the process by which the client authenticates
            itself to the server.  For many FTP/FTPS/SFTP servers password authentication is 
            sufficient; it is configured through the <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.UserName"/> and 
            <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.Password"/> properties.  
            In explicit FTPS and implicit FTPS, a certificate may also be required; this loaded
            by the <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.ClientCertificate"/> property.  In SFTP the server may request
            the public key corresponding to the client's private key, which is set using
            the <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.ClientPrivateKeyFile"/> property.</para>
            </remarks>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.SecureFTPConnection.log">
            <summary>Logging object</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.SecureFTPConnection.sslVersion">
            <summary>Version of secure sockets to use.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.SecureFTPConnection.sslFTPClient">
            <summary>
            Reference to SSLFTPClient which does all the FTPS work.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.SecureFTPConnection.sshFTPClient">
            <summary>
            Reference to SSHFTPClient which does all the SFTP work.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.SecureFTPConnection.sshSCPClient">
            <summary>
            Reference to SSHSCPClient which does all the SCP work.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.SecureFTPConnection.autoSecure">
            <summary>
            Determines if the control channel will automatically be secured upon connection.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.SecureFTPConnection.useUnencryptedCommands">
            <summary>
            Switches the control channel to unencrypted when set to true (if supported).
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.SecureFTPConnection.useUnencryptedData">
            <summary>
            Switches the data channel to unencrypted when set to true (if supported).
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.SecureFTPConnection.simpleXmlProperties">
            <summary>
            List of names of properties that may be serialized using the <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.WriteXml(System.Xml.XmlWriter)"/> 
            and <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.ParseXml(System.Xml.XmlElement)"/> methods.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Constructs a SecureFTPConnection object and places it in the given container.
            </summary>
            <param name="container">Component container</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EnterpriseDT.Net.Ftp.SecureFTPConnection"/> class.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.#ctor(EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient)">
            <summary>
            Create an SecureFTPConnection using the given FTP client.
            </summary>
            <param name="sslFTPClient"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes a connection object from the given <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.
            </summary>
            <param name="information">Serialization information.</param>
            <param name="context">Serialization context.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.EnableSFTPCompression">
            <summary>
            Must be used prior to connection. Arranges algorithms in the correct order
            so that compression is used - and can change the preferred compression algorithms.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.DisableSFTPCompression">
            <summary>
            Disable SFTP compression by putting it last in algorithm list
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.SetTLS1andTLS11">
            <summary>
            Set TLS 1.0 and TLS 1.1 as defaults
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.AreEqual(EnterpriseDT.Net.Ftp.Ssh.SSHAuthPrompt[],EnterpriseDT.Net.Ftp.Ssh.SSHAuthPrompt[])">
            <summary>
            Compare two arrays of prompts for equality
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.InvokeCommandSSH(System.String,System.String[])">
            <summary>
            Invokes the given literal command on the server.
            </summary>
            <param name="command">command to invoke on the server</param>
            <param name="arguments">arguments to the supplied command</param>
            <remarks>
            <para>
            If the server supports the SSH 'exec' command, the command invoked will normally
            be a Unix shell command such as 'ls -al'. This can be invoked as one string with
            no arguments, or arguments can be passed in separately.
            </para>
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:EnterpriseDT.Net.Ftp.SecureFTPConnection.ChangeMode(System.String,System.String)" -->
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.ChangeOwner(System.Int32,System.String)">
            <summary>
            [SFTP Only] Changes the owner of the specified file or directory.
            </summary>
            <param name="ownerID">numerical user id of the owner </param>
            <param name="path">the path to the file/directory on the remote server</param>
            <remarks>
            <para>
            Only numerical user ids are supported currently. Use ExecuteCommand to run
            a Unix command on the server if required (e.g. chown). Not all servers will
            permit this command.
            </para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.ChangeGroup(System.Int32,System.String)">
            <summary>
            [SFTP Only] Changes the group of the specified file or directory.
            </summary>
            <param name="ownerID">numerical group id </param>
            <param name="path">the path to the file/directory on the remote server</param>
            <remarks>
            <para>
            Only numerical group ids are supported currently. Use ExecuteCommand to run
            a Unix command on the server if required (e.g. chgrp). Not all servers will
            permit this command.
            </para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.CreateSymbolicLink(System.String,System.String)">
            <summary>
            [SFTP Only] Creates a symbolic link on the server.
            </summary>
            <param name="linkPath">path name of the symlink to be created </param>
            <param name="targetPath">target of the symlink on the remote server</param>
            <remarks>
            <para>
            Not all servers support symlinks.
            </para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.BeginInvokeCommandSSH(System.String,System.String[],System.AsyncCallback,System.Object)">
            <summary>
            [SFTP Only] Begins an asynchronous request to invoke the given literal command on the server.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginInvokeCommandSSH</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.InvokeCommandSSH(System.String,System.String[])"/>.</para>
            </remarks>
            <param name="command">Command to be sent.</param>
            <param name="arguments">arguments to the supplied command</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous get.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.EndInvokeCommandSSH(System.IAsyncResult)">
            <summary>
            [SFTP Only] Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.BeginInvokeCommandSSH(System.String,System.String[],System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.BeginInvokeCommandSSH(System.String,System.String[],System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.BeginInvokeCommandSSH(System.String,System.String[],System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.BeginInvokeCommandSSH(System.String,System.String[],System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndInvokeCommandSSH</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns>The reply returned by the server.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.BeginChangeMode(System.String,System.String[],System.AsyncCallback,System.Object)">
            <summary>
            [SFTP Only] Changes the access permissions or modes of the specified file or directory. SFTP only.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginChangeMode</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.ChangeMode(System.String,System.String)"/>.</para>
            </remarks>
            <param name="command">Command to be sent.</param>
            <param name="validCodes">Valid return-codes (used for validating reply).</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous get.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.EndChangeMode(System.IAsyncResult)">
            <summary>
            [SFTP Only] Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.BeginChangeMode(System.String,System.String[],System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.BeginChangeMode(System.String,System.String[],System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.BeginChangeMode(System.String,System.String[],System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.BeginChangeMode(System.String,System.String[],System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndChangeMode</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns>The reply returned by the server.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.BeginChangeOwner(System.String,System.String[],System.AsyncCallback,System.Object)">
            <summary>
            [SFTP Only] Changes the owner of the specified file or directory.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginChangeOwner</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.ChangeOwner(System.Int32,System.String)"/>.</para>
            </remarks>
            <param name="command">Command to be sent.</param>
            <param name="validCodes">Valid return-codes (used for validating reply).</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous get.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.EndChangeOwner(System.IAsyncResult)">
            <summary>
            [SFTP Only] Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.BeginChangeOwner(System.String,System.String[],System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.BeginChangeOwner(System.String,System.String[],System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.BeginChangeOwner(System.String,System.String[],System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.BeginChangeOwner(System.String,System.String[],System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndChangeOwner</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns>The reply returned by the server.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.BeginChangeGroup(System.String,System.String[],System.AsyncCallback,System.Object)">
            <summary>
            [SFTP Only] Changes the group of the specified file or directory.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginChangeGroup</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.ChangeGroup(System.Int32,System.String)"/>.</para>
            </remarks>
            <param name="command">Command to be sent.</param>
            <param name="validCodes">Valid return-codes (used for validating reply).</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous get.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.EndChangeGroup(System.IAsyncResult)">
            <summary>
            [SFTP Only] Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.BeginChangeGroup(System.String,System.String[],System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.BeginChangeGroup(System.String,System.String[],System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.BeginChangeGroup(System.String,System.String[],System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.BeginChangeGroup(System.String,System.String[],System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndChangeGroup</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns>The reply returned by the server.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.BeginCreateSymbolicLink(System.String,System.String[],System.AsyncCallback,System.Object)">
            <summary>
            [SFTP Only] Creates a symbolic link on the server.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginCreateSymbolicLink</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.CreateSymbolicLink(System.String,System.String)"/>.</para>
            </remarks>
            <param name="command">Command to be sent.</param>
            <param name="validCodes">Valid return-codes (used for validating reply).</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous get.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.EndCreateSymbolicLink(System.IAsyncResult)">
            <summary>
            [SFTP Only] Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.BeginCreateSymbolicLink(System.String,System.String[],System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.BeginCreateSymbolicLink(System.String,System.String[],System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.BeginCreateSymbolicLink(System.String,System.String[],System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.BeginCreateSymbolicLink(System.String,System.String[],System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndCreateSymbolicLink</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns>The reply returned by the server.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.OnValidateServer(System.Object,EnterpriseDT.Net.Ftp.ServerValidationEventArgs)">
            <summary>
            Used to invoke on the GUI thread
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.Connect">
             <summary>Connect to the FTP server.</summary>
             <remarks>
             <para>If this component is being used on a form or within another component then
             it is a good idea to use the "Connection Tester" to test the property settings.</para>
             
             <para>Connections are not opened until the <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.Connect"/> method is called.
             Connection-, Authentication-, and Security-related properties should be set
             prior to opening the connection.</para>
             
             <para>At a minimum, the following properties should be set prior to connection.
             <list type="table">
               <listheader>
            		<term>Property</term>
            		<term>Description</term>
               </listheader>
               <item>
                 <term><see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.Protocol">Protocol</see></term>
                 <description>The <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.Protocol">protocol</see> to use: 
                 SFTP, explicit FTPS, implicit FTPS or plain FTP.</description>
               </item>
               <item>
                 <term><see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.ServerAddress">ServerAddress</see></term>
                 <description>The domain-name or IP-address of the server.</description>
               </item>
               <item>
                 <term><see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.UserName">UserName</see></term>
                 <description>User-name of account on the server.</description>
               </item>
               <item>
                 <term><see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.Password">Password</see></term>
                 <description>Password of account on the server.</description>
               </item>
             </list></para>
             
             <para><b>FTPS:</b> If explicit FTPS has been selectedand <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.AutoSecure"/> 
             is <c>true</c> (the default) then the component 
             will try to secure the connection immediately after successfully connecting.  
             A secure connection will always be attempted in implicit FTPS is selected 
             regardless of the value of <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.AutoSecure"/>.</para>
            
             <para><example>The following example illustrates the establishment of an explicit FTPS
             connection using automatic server validation</example>
             <code>
               SecureFTPConnection ftp = new SecureFTPConnection();
               ftp.Protocol = FileTransferProtocol.FTPSExplicit;
               ftp.ServerAddress = "my-server-name";
               ftp.UserName = "my-username";
               ftp.Password = "my-password";
               ftp.ServerValidation = SecureFTPServerValidationType.Automatic;
               // the server's certificate must have been previously registered with
               // the operating system (see class description)
               ftp.Connect();
               ftp.Close();
             </code></para>
             
             <para><b>SFTP:</b> SFTP connections always require some kind of authentication;
             this may be set using the <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.AuthenticationMethod"/> property.  Server
             validation is optional, but recommended; it is selected using the
             <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.ServerValidation"/> property.
             </para>
             
             <para><example>The following example illustrates an SFTP client
             connecting to a server using simple password authentication but no
             server validation:</example>
             <code>
               SecureFTPConnection ftp = new SecureFTPConnection();
               ftp.Protocol = FileTransferProtocol.SFTP;
               ftp.ServerAddress = "my-server-name";
               ftp.UserName = "my-username";
               ftp.Password = "my-password";
               ftp.AuthenticationMethod = AuthenticationType.Password;
               ftp.ServerValidation = SecureFTPServerValidationType.None;
               ftp.Connect();
               ftp.Close();
             </code></para>
             
             <para><example>This example illustrates an SFTP client using public key
             authentication connecting to a server:</example>
             <code>
               SecureFTPConnection ftp = new SecureFTPConnection();
               ftp.Protocol = FileTransferProtocol.SFTP;
               ftp.ServerAddress = "my-server-name";
               ftp.UserName = "my-username";
               ftp.AuthenticationMethod = AuthenticationType.PublicKey;
               ftp.ClientPrivateKeyFile = "pathtokeyfile";
               ftp.ClientPrivateKeyPassphrase = "passwordforkeyfile";
               ftp.ServerValidation = SecureFTPServerValidationType.None;
               ftp.Connect();
               ftp.Close();
             </code></para>
             
             <para>This method will throw an <c>FTPException</c> if the component is 
             already connected to the server.</para>
             </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.PostLogin">
            <summary>
            Called after the user has been successfully logged in.
            </summary>
            <remarks>
            Sets the transfer-type and the current working directory. If
            AutoLogin is set to false, this method should be called
            explicitly to initialise the client state.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.SecureConnection">
            <summary>
            [FTP/FTPS Only] Switches an explicit FTPS connection to secure mode.
            </summary>
            <remarks>
            It is not necessary to call this method if <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.AutoSecure"/> is set to
            <c>true</c> (the default) since this is then automatically done when the
            original connection is made.  It is only necessary to do this if 
            <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.AutoSecure"/> is set to <c>false</c> and the user wishes to 
            manually control when the connection is switched to secure mode.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.BeginInvokeAdminCommand(System.String,System.String[],System.AsyncCallback,System.Object)">
            <summary>
            INTERNAL ONLY
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.EndInvokeAdminCommand(System.IAsyncResult)">
            <summary>
            INTERNAL ONLY
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.InvokeAdminCommand(System.String,System.String[])">
            <summary>
            INTERNAL ONLY
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.OnSecuringConnection">
            <summary>
            Called when security is being negotiated on the connection (control channel).
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.OnSecuredConnection">
            <summary>
            Called when security has been negotiated on the connection (control channel).
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.RaiseSecuredConnection(EnterpriseDT.Net.Ftp.Ssl.SSLFTPSecureEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.SecureFTPConnection.SecuredConnection"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.RaiseSecuringConnection(EnterpriseDT.Net.Ftp.Ssl.SSLFTPSecureEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.SecureFTPConnection.SecuringConnection"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.RaiseValidatingServer(EnterpriseDT.Net.Ftp.ServerValidationEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.SecureFTPConnection.ValidatingServer"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.Unlock(System.String,System.String)">
            <summary>
            Unlock the software for use. This method should be used when
            a configuration file isn't available
            </summary>
            <param name="owner">owner string</param>
            <param name="key">license key</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.CheckLicense">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.ReadLicenseDetailsFromRegistry">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.WriteLicenseDetailsToRegistry">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.NewSite">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.CheckFTPType(System.Boolean)">
            <summary>
            Checks the FTP type and throws and exception if it's incorrect.
            </summary>
            <param name="ftpOnly"><c>true</c> if the type must be FTP.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.GetURL">
            <summary>
            Returns a URL corresponding to the current state of this <c>SecureFTPConnection</c>.
            </summary>
            <returns>URL corresponding to the current state of this <c>SecureFTPConnection</c></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.GetURL(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns a URL corresponding to the current state of this <c>SecureFTPConnection</c>.
            The URL optionally includes the directory, user-name and password.
            </summary>
            <param name="includeDirectory">Should the directory be included in the URL?</param>
            <param name="includeUserName">Should the user-name be included in the URL?</param>
            <param name="includePassword">Should the password be included in the URL?</param>
            <returns>URL corresponding to the current state of this <c>SecureFTPConnection</c></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.ShowSocksProxyEditor(System.Windows.Forms.IWin32Window)">
            <summary>
            Displays the proxy settings editor as a modal dialog or as a window.
            </summary>
            <param name="parent">Reference to parent window (may be null)</param>
            <returns>A reference to the form.</returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.ServerAddress">
            <summary>
            The domain-name or IP address of the FTP server.
            </summary>
            <remarks>
            <para>This property may only be set if not currently connected.</para>
            <para><example>The following example illustrates an SFTP client
            connecting to a server:</example>
            <code>
              SecureFTPConnection ftp = new SecureFTPConnection();
              ftp.Protocol = FileTransferProtocol.SFTP;
              ftp.ServerAddress = "my-server-name";
              ftp.UserName = "my-username";
              ftp.Password = "my-password";
              ftp.AuthenticationMethod = AuthenticationType.Password;
              ftp.ServerValidation = SecureFTPServerValidationType.None;
              ftp.Connect();
              ftp.Close();
            </code></para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.ServerPort">
            <summary>
            The port on the server to which to connect the control-channel. 
            </summary>
            <remarks>
            <para>This property may only be set if not currently connected.</para>
            <para><example>The following example illustrates an SFTP client
            connecting to a server:</example>
            <code>
              SecureFTPConnection ftp = new SecureFTPConnection();
              ftp.Protocol = FileTransferProtocol.SFTP;
              ftp.ServerAddress = "my-server-name";
              ftp.ServerPort = 22;
              ftp.UserName = "my-username";
              ftp.Password = "my-password";
              ftp.AuthenticationMethod = AuthenticationType.Password;
              ftp.ServerValidation = SecureFTPServerValidationType.None;
              ftp.Connect();
              ftp.Close();
            </code></para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.UserName">
            <summary>User-name of account on the server.</summary>
            <value>The user-name of the account the server that will be logged into upon connection.</value>
            <remarks>
            <para>This property must be set before a connection with the server is made.</para>
            <para><example>The following example illustrates an SFTP client
            connecting to a server:</example>
            <code>
              SecureFTPConnection ftp = new SecureFTPConnection();
              ftp.Protocol = FileTransferProtocol.SFTP;
              ftp.ServerAddress = "my-server-name";
              ftp.UserName = "my-username";
              ftp.Password = "my-password";
              ftp.ServerValidation = SecureFTPServerValidationType.None;
              ftp.Connect();
              ftp.Close();
            </code></para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.Password">
            <summary>Password of account on the server.</summary>
            <value>The password of the account the server that will be logged into upon connection.</value>
            <remarks>
            <para>This property must be set before a connection with the server is made.</para>
            <para><example>The following example illustrates an SFTP client
            connecting to a server using simple password authentication but no
            server validation:</example>
            <code>
              SecureFTPConnection ftp = new SecureFTPConnection();
              ftp.Protocol = FileTransferProtocol.SFTP;
              ftp.ServerAddress = "my-server-name";
              ftp.UserName = "my-username";
              ftp.Password = "my-password";
              ftp.AuthenticationMethod = AuthenticationType.Password;
              ftp.ServerValidation = SecureFTPServerValidationType.None;
              ftp.Connect();
              ftp.Close();
            </code></para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.Protocol">
            <summary>
            Type of secure FTP to use.
            </summary>
            <remarks>
            Four types of file transfer are available:
            <list type="bullet">
            <listheader><term>Type</term></listheader>
            <item>
            <term>FTP</term>
            <description>Traditional unencrypted FTP.</description>
            </item>
            <item>
            <term>FTPSExplicit</term>
            <description>FTP-over-SSL which allows switching between secure and unsecure transfers.</description>
            </item>
            <item>
            <term>FTPSImplicit</term>
            <description>FTP-over-SSL which simply performs FTP over pure SSL sockets.</description>
            </item>
            <item>
            <term>SFTP</term>
            <description>SSH File Transfer Protocol, which are secure file transfers via SSH.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.MaxTransferRate">
            <summary>
            The maximum transfer rate in bytes per sec. Set to -1 or 0 for
            no bandwidth limiting.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.CompressionPreferred">
            <summary>
            Flag to enable or disable compression for FTP/FTPS/SFTP transfers.
            </summary>
            <remarks>
            <para>
            Some FTP/FTPS servers support the MODE Z command, permitting transfers to
            be compressed. This speeds up transfers significantly for files that
            are compressible such as text files. Most SFTP servers also support
            compression. Note that setting this flag to true does not guarantee that
            compression will occur, as it must be supported by the server.
            </para>
            <para>
            If this flag is switched on, MODE Z compression is enabled if the
            FTP/FTPS server permits it. If the flag is later switched off, MODE Z compression
            is not disabled until the connection is closed and then re-opened again. 
            For SFTP servers, zlib compression is set as the preferred compression, and
            will be used if supported by the server (and it can alter PreferredCompressionAlgorithms,
            adding zlib compression if it is not present).
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.SocksProxySettings">
            <summary>
            Settings for SOCKS proxy.
            </summary>
            <remarks>
            <para>
            SOCKS may be used for FTPing through firewalls.  For this to be possible
            a SOCKS proxy must be available, and a user account must be set up on that proxy.
            <c>SecureFTPConnection</c> supports all the popular versions of SOCKS - 4, 4A, and 5.
            </para>
            <para>
            The SOCKS features are controlled entirely through the <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.SocksProxySettings"/>
            property.  If it is <c>null</c> (the default) then SOCKS is not used.  To use SOCKS,
            the property must be set to an instance of <see cref="T:EnterpriseDT.Util.Socks.Socks4Context"/> or 
            <see cref="T:EnterpriseDT.Util.Socks.Socks5Context"/>.
            For example, for SOCKS4:
            </para>
            <code>
            	myFTPClient.SocksContext = new Socks4Context("192.168.0.2", 1080, "marvin23");
            </code>
            and for SOCKS5:
            <code>
            	Socks5Context socksContext = new Socks5Context("192.168.0.2", 1080);
            	socksContext.AuthMethods.Add(new Socks5NoAuthMethod());
            	socksContext.AuthMethods.Add(new Socks5UserNamePasswordAuthMethod("marvin23", "m31erk"));
            	myFTPClient.SocksContext = socksContext;
            </code>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.ProxySettings">
            <summary>
            Settings for using proxies.
            </summary>
            <remarks>
            <para>
            Proxies may be used for FTPing through firewalls.  HTTP and SOCKS (4,4A and 4) are
            supported.  
            </para>
            <para>
             SOCKS supports both passive (PASV) and active (PORT) mode transfers. 
             Note that only passive mode transfers are possible via an HTTP proxy. There
             is no facility for HTTP proxies to listen for incoming connections, and hence active
             mode transfers cannot be done via an HTTP proxy. An exception will be thrown
             if they are attempted.
            </para>
            <para>
             Often a username and password will be required to authenticate with the proxy.
             These can be set in <c>ProxySettings</c>. 
            </para>
            <para><c>ProxySettings</c> is easiest to edit via the Property View.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.CommandEncoding">
            <summary>
            The character-encoding to use when dealing with file- and directory-paths.
            </summary>
            <remarks>
            The default is <c>ASCII</c>, except for SFTP but should be changed 
            when communicating with FTP servers that have file-names containing non-ASCII characters
            <para>
            The default for SFTP is <c>UTF-8</c>, but may need to be changed for SFTP servers
            that do not support UTF-8 (typically SFTP version 3 or below).
            </para>
            <para>
            Note that this value is NOT used for SFTP servers with a version number
            greater than 3 - UTF-8 is <c>always</c> used in these cases as per the standard.
            </para>    
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.WelcomeMessage">
            <summary>
            Server's welcome message.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.UploadWithExtension">
            <summary>
            [GDATA] Property to determine if the file extension should be preserved when a document
            is uploaded to Google Docs.
            </summary>
            <remarks>
            <para>When a document such as "MyDoc.doc" is uploaded to Google Docs via the web interface,
            the name displayed will be "MyDoc", i.e. Google removes the extension. This convention
            is maintained, so that by default this property is false. Set to true if you wish
            extensions to be preserved.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.ConvertOnUpload">
            <summary>
            [GDATA] Property to determine if a document should be converted to Google native
            format when uploaded
            </summary>
            <remarks>
            <para>When a document such as "MyDoc.doc" is uploaded to Google Docs via the web interface,
            Google detects that it is a Word document and converts to a native Google document. If this
            property is set to false, the conversion will not be performed. The default is true
            for standard types, but if the uploaded file is not a standard type (document, spreadsheet, 
            presentation or drawing), it will never be converted.</para>
            <para>It is important to note that only native Google documents can be downloaded in other
            formats. For example, a Word document that is uploaded with this property set to false, it
            cannot be downloaded as a PDF file or any other file type other than a Word document.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.ServerCompatibility">
            <summary>
            [SFTP/FTPS] Controls various server security compatibility features.
            </summary>
            <remarks>
            <para>
            Common server incompatibility problems are caused by differing levels
            of adherence to the relevant standards. This is particularly applicable to
            FTPS. For example, the standard dictates how SSL/TLS sockets should be closed.  By default
            SecureFTPConnection will attempt to close sockets in the standard-compliant way.  While 
            this is the most secure, it occasionally will cause hanging as it waits for a
            response from the server which never arrives.  The <c>ServerCompatibility</c>
            property is provided for controlling this behaviour.  If you experience hanging
            when a data-transfer is complete using FTPS then you should first try 
            <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPCompatibilityFlags.SSLDisableDataWaitOnClose"/>
             and, if the problem
            still occurs, <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPCompatibilityFlags.SSLDisableDataClosure"/>.
            If you experience hanging
            as you close your FTPS session then you should first try 
            <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPCompatibilityFlags.SSLDisableControlWaitOnClose"/> and, if the problem
            still occurs, <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPCompatibilityFlags.SSLDisableControlClosure"/>.
            </para>
            <para>
            For SFTP, some servers return an error saying the file does not exist after creating it. By
            default, the client does a permission change after creating the file, which 
            is done to ensure the file permissions are correct. If this error is encountered, try using 
            <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPCompatibilityFlags.SSHDisableChmodAfterPut"/> to eliminate the problem.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.ServerValidation">
            <summary>
            [SFTP/FTPS] Method by which the server's certificate or public key is validated.
            </summary>
            <remarks>
            <para>The default for both SFTP and FTPS is 
            <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPServerValidationType.Automatic"/>.</para>
            
            <para><b>SFTP:</b> SFTP servers are validated by means of their
            public key.  Typically, the server's public key is stored in either a file 
            containing that single key, or in a file often called <i>known_hosts</i> which can 
            contain a number of public keys for different servers.  When the client connects 
            to the server, the server's public key is returned and compared with the 
            available public keys stored in the client.  Known-host files may be loaded by 
            setting the <see cref="P:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.KnownHostsFile">KnownHosts.KnownHostsFile</see>
            property.  Individual public keys may be loaded using the
            <see cref="M:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.AddKnownHost(System.String,System.String)">KnownHosts.AddKnownHost</see>
            method.
            <example>The following example illustrates the loading of server public keys using
            a known-hosts file:</example>
            <code>
              SecureFTPConnection ftp = new SecureFTPConnection();
              ftp.Protocol = FileTransferProtocol.SFTP;
              ftp.ServerAddress = "my-server-name";
              ftp.UserName = "my-username";
              ftp.Password = "my-password";
              ftp.AuthenticationMethod = AuthenticationType.Password;
              ftp.ServerValidation = SecureFTPServerValidationType.Automatic;
              ftp.KnownHosts.KnownHostsFile = "my-knownhosts-file";
              ftp.Connect();
              ftp.Close();
            </code>
            <example>The following example illustrates the loading of a server's public key 
            from a public key file:</example>
            <code>
              SecureFTPConnection ftp = new SecureFTPConnection();
              ftp.Protocol = FileTransferProtocol.SFTP;
              ftp.ServerAddress = "my-server-name";
              ftp.UserName = "my-username";
              ftp.Password = "my-password";
              ftp.AuthenticationMethod = AuthenticationType.Password;
              ftp.ServerValidation = SecureFTPServerValidationType.Automatic;
              ftp.KnownHosts.AddKnownHost("servers-public-key-file");
              ftp.Connect();
              ftp.Close();
            </code>
            </para>
            
            <para><b>FTPS:</b> When an SSL/TLS connection is being negotiated, the FTPS server 
            will present an SSL certificate to the client.  
            <see cref="T:EnterpriseDT.Net.Ftp.SecureFTPServerValidationType"/>s are used to
            control what the client does with this certificate.  If server validation is used
            then the server's certificate will be validated against those installed on 
            the machine.  Please refer to the <see cref="T:EnterpriseDT.Net.Ftp.SecureFTPConnection">class
            description</see> for more information.
            
            <example>The following example illustrates the establishment of an explicit FTPS
            connection using automatic server validation</example>
            <code>
              SecureFTPConnection ftp = new SecureFTPConnection();
              ftp.Protocol = FileTransferProtocol.FTPSExplicit;
              ftp.ServerAddress = "my-server-name";
              ftp.UserName = "my-username";
              ftp.Password = "my-password";
              ftp.ServerValidation = SecureFTPServerValidationType.Automatic;
              // the server's certificate must have been previously registered with
              // the operating system (see class description)
              ftp.Connect();
              ftp.Close();
            </code></para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.ServerValidationCertificate">
            <summary>
            [FTPS Only] Certificate used to validate the certificate presented by the server.
            </summary>
            <remarks>
            If the server certificate is signed by a valid Certificate Authority, this property need not be set, as
            it can be validated using the existing CA certificates controlled by Windows. 
            If the certificate is self-signed (e.g. for testing) then it can't be validated unless it is 
            imported into the trusted CA authorities certificate store. The alternative is to set this property,
            typically, to a copy of the server's certificate. If set, the certificate
            sent by the server is compared with this certificate. If they don't match, validation
            fails (even if the server's certificate is signed by a CA).
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.AutoSecure">
            <summary>[FTPS Only] Determines if the component will automatically switch to SSL/TLS upon 
            connection when using FTPS.</summary>
            <remarks>
            <para>
            If this flag if <c>true</c> and <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.SecureFTPType"/> is 
            <see cref="F:EnterpriseDT.Net.Ftp.FileTransferProtocol.FTPSExplicit"/> or <see cref="F:EnterpriseDT.Net.Ftp.FileTransferProtocol.FTPSImplicit"/> 
            then the component will automatically 
            switch to SSL/TLS upon connection.  This is only relevant for explicit FTPS since
            implicit FTPS always operates over an SSL/TLS connection.
            </para>
            <para>
            The default is <c>true</c>.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.SecureFTPType">
            <summary>
            This property has been deprecated.  Please use <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.Protocol"/>.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.SSLVersion">
            <summary>
            [FTPS Only] SSL/TLS version to use.
            </summary>
            <remarks>
            edtFTPnet/PRO supports SSL 3.0, TLS 1.0 and TLS 1.1.  TLS is the successor to SSL and 
            should be used unless the server does not support it - SSL 3.0 has various vulnerabilities such
            as the POODLE exploit. SSLFTPSSLVersion.DETECT no longer will interoperate with SSL 3.0.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.CipherSuites">
            <summary>
            [FTPS Only] Get/sets the cipher-suites permissible during establishment of a secure
            connection.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.ServerCommonName">
            <summary>
            [FTPS Only] The name to be used when performing a name-check during 
            the validation of the server certificate.
            </summary>
            <remarks>
            An important part of validating the certificate is to perform
            a <i>name-check</i>.  In a name-check the <i>Common Name</i> on the certificate is
            compared with the host-name of the FTP server that we believe we are connected
            to.  Unless this property is set explicitly, the Common Name is assumed to be
            the same as the host-name that is used to connect to the server.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.UseSessionResumption">
            <summary>[FTPS Only] Disables or enables SSL session resumption.</summary>
            <remarks>
            <para>
            If this flag if <c>true</c> and <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.SecureFTPType"/> is 
            <see cref="F:EnterpriseDT.Net.Ftp.FileTransferProtocol.FTPSExplicit"/> then the component will automatically 
            use SSL session resumption when establishing new connections. Session resumption is 
            primarily a performance enhancement - it avoids some of the stages of the SSL handshake, 
            using previously cached session data.
            </para>
            <para>
            The default is <c>true</c>.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.UseUnencryptedCommands">
            <summary>[FTPS Only] Switches the component to using an unencrypted command channel
            when using FTPS.</summary>
            <remarks>
            <para>
            If this flag if <c>true</c> and <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.SecureFTPType"/> is 
            <see cref="F:EnterpriseDT.Net.Ftp.FileTransferProtocol.FTPSExplicit"/> then the component will automatically 
            switch to an unencrypted command channel after connection and login. If the component is 
            already connected, setting this flag to true will switch to using an unencrypted command 
            channel from this point onwards.
            </para>
            <para>
            Not all FTPS servers support this feature (known as CCC, Clear Control Channel). 
            </para>
            <para>
            Once the command channel is changed to being unencrypted, it cannot be changed back to
            encrypted within the session.  
            </para>
            <para>
            This feature can sometimes be useful in getting past firewalls that need to be able to
            inspect command channels to open ports for directory listings and file transfers.
            </para>
            <para>
            The default is <c>false</c>.
            </para>
            <para>
            If things appear to hang here, set the <c>ServerCompatibility</c> property to 
            <c>SecureFTPCompatibilityFlags.SSLDisableControlWaitOnShutdownSSL</c>
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.UseUnencryptedData">
            <summary>[FTPS Only] Switches the component to using an unencrypted data channel
            when using FTPS.</summary>
            <remarks>
            <para>
            If this flag if <c>true</c> and <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.SecureFTPType"/> is 
            <see cref="F:EnterpriseDT.Net.Ftp.FileTransferProtocol.FTPSExplicit"/> then the component will automatically 
            switch to an unencrypted data channel after connection and login. If the component is 
            already connected, setting this flag to true will switch to using an unencrypted data 
            channel for transfers and listings from this point onwards.
            </para>
            <para>
            The default is <c>false</c>.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.ClientCertificate">
            <summary>
            [FTPS Only] The certificate to be presented to the server.
            </summary>
            <remarks>
            If a server requires client validation then this property must be set.
            <see cref="T:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate"/>s are created using one of the static
            <c>SSLFTPCertificate.CreateFrom...</c> methods to load a certificate 
            from a file and the <see cref="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.AssociatePrivateKey(System.String,System.String)"/> 
            to load the associated private key.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.ServerCertificate">
            <summary>
            [FTPS Only] The certificate presented by the server.
            </summary>
            <remarks>
            During the negotiation of a secure connection, the server presents a 
            certificate which may be accessed using this property.  The property
            may not be accessed until a secure connection has been made.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.IsControlChannelSecure">
            <summary>
            [FTPS Only] Indicates whether the control channel is currently secure.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.UMask">
            <summary>
            [SFTP Only] The file creation mode mask that is applied to the default permissions 
            to create the final permission set.
            </summary>
            <remarks>
            <para>This property applies to SFTP only.  Use the <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.Protocol"/> property to
            select the protocol.</para>
            <para>The umask and the <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.DefaultPermissions"/> are specified in
            octal. The permission set of a new file is specified by taking the default
            permissions in octal, and subtracting the umask.</para>
            <para>For example, if the <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.DefaultPermissions"/> are 777 and the umask is
            set to 022, the final create permissions will be 755 (777-022).</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.DefaultPermissions">
            <summary>
            [SFTP Only] The default file creation mode permissions (in octal).
            </summary>
            <remarks>
            <para>This property applies to SFTP only.  Use the <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.Protocol"/> property to
            select the protocol.</para>
            <para>Permission strings consist of three fields - permissions for owner, group and
            other users. A typical executable file might have permissions of read,write and
            executable permissions set for the owner, and read and execute permissions for 
            everyone else. This is typically displayed as rwxr-xr-x, in the order of 
            owner|group|other.</para>
            <para>Permission strings can also be presented in octal, which has certain advantages.
            An octal number corresponds to each type of permission: 4=read, 2=write and
            1=execute. These are combined to form a group of permissions, i.e. a permissions
            field. For example, to specify that a file has read, write and execute permissions,
            it is assigned 4+2+1 = 7. So for the previous example of rwxr-wr-w, this can be 
            represented in octal as 755, where the 5 comes from 4(read)+1(execute).</para>
            <para>The default permissions are combined with the <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.UMask"/> to form the
            final permission set for a new file.</para>
            <para>For more details on permissions and umasks, see a Unix text or look up umask and chmod's 
            man pages.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.AuthenticationMethod">
            <summary>
            [SFTP/SCP Only] The current authentication method being used. 
            </summary>
            <remarks>
            <para>This property applies to SFTP only.  Use the <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.Protocol"/> property to
            select the protocol.</para>
            <para>Note that the different authentication types also have 
            various required properties associated with them that are required
            to be set.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.ClientPrivateKeyFile">
            <summary>[SFTP/SCP Only] Path of the private key file used to authenticate the client in SFTP/SCP.</summary>
            <value>Path of the private key file used to authenticate the client.</value>
            <remarks>
            <para>This property applies to SFTP only.  Use the <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.Protocol"/> property to
            select the protocol.</para>
            <para>This property must be set before a connection with the server is made. 
            The SFTP server must have been set up with the corresponding public key before this 
            authentication method is used. For this property to be used, 
            <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.AuthenticationMethod"/> must be set to
            <see cref="F:EnterpriseDT.Net.Ssh.AuthenticationType.PublicKey"/> or <see cref="F:EnterpriseDT.Net.Ssh.AuthenticationType.PublicKeyAndPassword"/>.
            </para>
            <para><example>This example illustrates an SFTP client using public key
            authentication connecting to a server:</example>
            <code>
              SecureFTPConnection ftp = new SecureFTPConnection();
              ftp.Protocol = FileTransferProtocol.SFTP;
              ftp.ServerAddress = "my-server-name";
              ftp.UserName = "my-username";
              ftp.AuthenticationMethod = AuthenticationType.PublicKey;
              ftp.ClientPrivateKeyFile = "pathtokeyfile";
              ftp.ClientPrivateKeyPassphrase = "passwordforkeyfile";
              ftp.ServerValidation = SecureFTPServerValidationType.None;
              ftp.Connect();
              ftp.Close();
            </code></para>
            </remarks>        
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.ClientPrivateKeyBytes">
            <summary>[SFTP/SCP Only] Byte array containing the private key used to authenticate the client in SFTP/SCP.</summary>
            <value>Byte array containing the private key used to authenticate the client.</value>
            <remarks>
            <para>This property applies to SFTP only.  Use the <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.Protocol"/> property to
            select the protocol.</para>
            <para>This property must be set before a connection with the server is made. 
            The SFTP server must have been set up with the corresponding public key before this 
            authentication method is used. For this property to be used, 
            <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.AuthenticationMethod"/> must be set to
            <see cref="F:EnterpriseDT.Net.Ssh.AuthenticationType.PublicKey"/> or <see cref="F:EnterpriseDT.Net.Ssh.AuthenticationType.PublicKeyAndPassword"/>.
            </para>
            <para>This property is used in preference to <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.ClientPrivateKeyFile"/> if both are set.</para>
            </remarks>        
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.ClientPrivateKeyPassphrase">
            <summary>[SFTP/SCP Only] Passphrase of the private key file used to authenticate the client in SFTP/SCP.</summary>
            <value>Passphrase of the private key file used to authenticate the client.</value>
            <remarks>
            <para>This property applies to SFTP/SCP only.  Use the <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.Protocol"/> property to
            select the protocol.</para>
            <para>This property must be set before a connection with the server is made. 
            The SFTP server must have been set up with the corresponding public key before this 
            authentication method is used. For this property to be used, 
            <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.AuthenticationMethod"/> must be set to
            <see cref="F:EnterpriseDT.Net.Ssh.AuthenticationType.PublicKey"/> or <see cref="F:EnterpriseDT.Net.Ssh.AuthenticationType.PublicKeyAndPassword"/>.
            </para>
            </remarks>        
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.KBIPrompts">
            <summary>
            [SFTP/SCP Only] Array of prompts used for keyboard interactive (KBI) authentication. 
            </summary>
            <remarks>
            <para>This property applies to SFTP/SCP only.  Use the <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.Protocol"/> property to
            select the protocol.</para>
            <para>Setting this property sets up keyboard interactive authentication. 
            The prompts that the server will send to the client must be known. For each prompt, an
            <see cref="T:EnterpriseDT.Net.Ftp.Ssh.SSHAuthPrompt"/> must be created with the matching prompt string and the
            response to be sent back to the server. Often, a single password prompt is all that is 
            required, and a <see cref="T:EnterpriseDT.Net.Ftp.Ssh.SSHPasswordPrompt"/> is supplied for this purpose. 
            For this property to be used, <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.AuthenticationMethod"/> must be set to
            <see cref="F:EnterpriseDT.Net.Ssh.AuthenticationType.KeyboardInteractive"/>.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.KnownHosts">
            <summary>[SFTP/SCP Only] Manager of the list of known hosts used to authenticate the server.</summary>
            <value>Manager of the list of known hosts used to authenticate the server.</value>
            <remarks>
            <para>This property applies to SFTP only.  Use the <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.Protocol"/> property to
            select the protocol.</para>
            <para>This manager is used to set the known_hosts file containing a list of
            known hosts and their public keys. It is also used to add public keys explicitly.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.PreferredKeyExchangeMethods">
            <summary>[SFTP/SCP Only] Preferred key exchange methods to use</summary>
            <remarks>
            <para>This property applies to SFTP/SCP only.  Use the <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.Protocol"/> property to
            select the protocol.</para>
            <para>The default is generally appropriate in most situations.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.PreferredHostKeyAlgorithms">
            <summary>[SFTP/SCP Only] Preferred algorithm(s) to use for server authentication via public key</summary>
            <remarks>
            <para>This property applies to SFTP/SCP only.  Use the <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.Protocol"/> property to
            select the protocol.</para>
            <para>The default is generally appropriate in most situations.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.PreferredCipherAlgorithms">
            <summary>[SFTP/SCP Only] Preferred algorithm(s) to use for encryption</summary>
            <remarks>
            <para>This property applies to SFTP/SCP only.  Use the <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.Protocol"/> property to
            select the protocol.</para>
            <para>The default is generally appropriate in most situations.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.PreferredCompressionAlgorithms">
            <summary>[SFTP/SCP Only] Preferred algorithm(s) to use for compression</summary>
            <remarks>
            <para>This property applies to SFTP/SCP only.  Use the <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.Protocol"/> property to
            select the protocol.</para>
            <para>The default is generally appropriate in most situations.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.PreferredMACAlgorithms">
            <summary>[SFTP/SCP Only] Preferred MAC algorithm(s) to use</summary>
            <remarks>
            <para>This property applies to SFTP/SCP only.  Use the <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.Protocol"/> property to
            select the protocol.</para>
            <para>The default is generally appropriate in most situations.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.ServerLineTerminator">
            <summary>[SFTP Only] Server line terminator to use for ASCII translation</summary>
            <remarks>
            <para>This property applies to SFTP only. </para>
            <para>The default is generally appropriate in most situations.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.SSHWindowSize">
            <summary>[SFTP/SCP Only] SSH maximum local window size.</summary>
            <remarks>
            <para>This property applies to SFTP/SCP only.  Use the <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.Protocol"/> property to
            select the protocol.</para>
            <para>The default is generally appropriate in most situations.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.SSHMaxPacketSize">
            <summary>[SFTP/SCP Only] SSH maximum packet size.</summary>
            <remarks>
            <para>This property applies to SFTP/SCP only.  Use the <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.Protocol"/> property to
            select the protocol.</para>
            <para>The default is generally appropriate in most situations.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.SendInitialWindowAdjust">
            <summary>[SFTP/SCP Only] Determines whether a SSH_MSG_CHANNEL_WINDOW_ADJUST message should be
            sent initially.
            </summary>
            <remarks>
            <para>This property applies to SFTP only.  Use the <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.Protocol"/> property to
            select the protocol.</para>
            <para>The default is generally appropriate in most situations.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.ParallelTransferMode">
            <summary>[SFTP Only] Controls if parallel mode transfers are enabled.</summary>
            <remarks>
            <para>Uploads are by default in parallel mode, which is faster than
            serial mode. This mode can be switched off if servers are unable
            to deal with parallel mode.</para>
            <para>This property applies to SFTP only.  Use the <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.Protocol"/> property to
            select the protocol.</para>
            <para>The default is generally appropriate in most situations.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.CloseStreamsAfterTransfer">
            <summary>
            Determines if transfer-methods taking <see cref="T:System.IO.Stream"/>s as arguments should
            close the stream once the transfer is completed.
            </summary>
            <remarks>
            If <c>CloseStreamsAfterTransfer</c> is <c>true</c> (the default) then streams are closed after 
            a transfer has completed, otherwise they are left open.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.DeleteOnFailure">
            <summary>
            Controls whether or not a file is deleted when a failure occurs.
            </summary>
            <remarks>
            <para>
            If <c>true</c>, a partially downloaded file is deleted if there
            is a failure during the download.  For example, the connection
            to the FTP server might have failed. If <c>false</c>, the partially
            downloaded file remains on the FTP client machine - and the download
            may be resumed, if it is a binary transfer.
            </para>
            <para>
            By default this flag is set to <c>true</c>.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.Timeout">
            <summary> 
            TCP timeout (in milliseconds) of the underlying sockets (0 means none).
            </summary>
            <remarks>Timout value in milliseconds.  The default value is 120000, which indicates 
            a 120 second timeout period.</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.ShowHiddenFiles">
            <summary>
            Include hidden files in operations that involve listing of directories,
            and if supported by the server (FTP and FTPS).
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.TransferBufferSize">
            <summary>
            The size of the buffers used in writing to and reading from the TCP sockets.
            </summary>
            <remarks>
            <para>The size of receive and transmit buffers.</para>
            <para>The default value is 65535.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.TransferNotifyInterval">
            <summary>
            The number of bytes transferred between each notification of the
            <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.BytesTransferred"/> event.
            </summary>
            <remarks>
            <para>This property determines the approximate number of bytes transferred
            between each <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.BytesTransferred"/> event.</para>
            <para>The default value is 4096.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.TransferNotifyListings">
            <summary>
            By default the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.BytesTransferred"/> event is not triggered 
            during directory listings - this property can be used to enable this behaviour.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.LicenseOwner">
            <summary>
            The license owner string.
            </summary>
            <remarks>
            The license owner must be set for the software to function correctly past the trial period.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.LicenseKey">
            <summary>
            The license key string.
            </summary>
            <remarks>
            The license key must be set for the software to function correctly past the trial period.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.LogTag">
            <summary>
            Log tag
            </summary>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.SecureFTPConnection.SecuringConnection">
            <summary>Occurs when the component is securing the connection to the server.</summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.SecureFTPConnection.SecuredConnection">
            <summary>Occurs when the component has secured the connection to the server.</summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.SecureFTPConnection.ValidatingServer">
            <summary>Occurs when the server's identity needs to be validated.</summary>
            <remarks>
            This event is only triggered if <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.ServerValidation"/> is set to 
            <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPServerValidationType.Callback"/>.
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.ServerValidationEventArgs">
            <summary>
            Event args for ValidatingServer event
            </summary>    
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ServerValidationEventArgs.IsValid">
            <summary>
            Set to true if key is to be accepted, false otherwise. 
            </summary>
            <remarks>
            When the event arg object is received by the callback, this will
            already be set to true if the key or certificate was found.
            The callback should set this to true if the key or certificate
            is to be accepted.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ServerValidationEventArgs.SSHPublicKey">
            <summary>
            The public key in the case of an SFTP/SSH server
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ServerValidationEventArgs.SSLServerCertificate">
            <summary>
            The SSL/TLS certificate presented by the FTP server.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ServerValidationEventArgs.SSLServerCertificateChain">
            <summary>
            The full chain of SSL/TLS certificates presented by the FTPS server.
            </summary>
            <remarks>
            The server's certificate is the first element in the array, with those of the issuers
            appearing subsequently.  Note that the <see cref="P:EnterpriseDT.Net.Ftp.ServerValidationEventArgs.SSLServerCertificate"/> property 
            references the first element in this array.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ServerValidationEventArgs.SSLValidationStatus">
            <summary>
            Validation status of the SSL/TLS certificate.
            </summary>
            <remarks>
            This property may be used to aid in evaluating whether or not the certificate should be
            accepted.  A value of <see cref="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPValidationStatus.ValidCertificate"/> indicates that
            the system is recommending that the server should be validated; other values indicate
            that it should not.
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.ServerValidationHandler">
            <summary>
            Delegate used for ValidatingServer event
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.SecureFTPServerValidationType">
            <summary>
            Specifies type of server valudation to use.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.SecureFTPServerValidationType.None">
            <summary>Validates the server regardless of the certificate (FTPS) or 
            public key (SFTP) that is presented.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.SecureFTPServerValidationType.Automatic">
            <summary>
            <para>Automatically performs standard server validation to authenticate the
            server.
            </para>
            <para>For SFTP, the list of known hosts that have been loaded by the client is
            searched for the server's IP address and hostname. The public key presented 
            by the server is checked for a match against the public keys registered for that
            host. Note that if the server presents (for example) a DSA key, only a DSA key 
            registered under the hostname or IP address for the server will be able to match.
            If a matching public key for the server is found, validation succeeds.
            </para>
            <para>
            For FTPS, operating system resources are used to validate the certificate presented
            by the server.  On Windows the installed certificates are used for this purpose.  
            These certificates may be managed on the <i>Contents</i> tab of the <i>Internet Options</i> 
            control panel.  
            </para>
            <para>
            Note that an important part of validating the certificate is to perform
            a <i>name-check</i>.  In a name-check the <i>Common Name</i> on the certificate is
            compared with the host-name of the FTP server that we believe we are connected
            to.  The Common Name to be used for name-checking is assumed to be the
            same as the host-name that was used upon connection, though it may be set
            manually using the <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.ServerCommonName"/>.
            </para>
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.SecureFTPServerValidationType.AutomaticNoNameCheck">
            <summary>
            Same as <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPServerValidationType.Automatic"/> but without name-checking. In the case of SFTP, all public keys loaded
            by the client are checked for a match irrespective of the hostname or IP address that
            they are registered under. 
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.SecureFTPServerValidationType.Callback">
            <summary>
            A callback supplied by the user is used to validate the public key
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.SecureFTPCompatibilityFlags">
            <summary>
            Controls various server security compatibility features. 
            </summary>
            <remarks>
            <para>
            Common server incompatibility problems are caused by differing level
            of adherence to the relevant standards. This is particularly applicable to
            FTPS. For example, the standard dictates how SSL/TLS sockets should be closed.  By default
            SecureFTPConnection will attempt to close sockets in the standard-compliant way.  While 
            this is the most secure, it occasionally will cause hanging as it waits for a
            response from the client which never arrives.  The <c>ServerCompatibility</c>
            property is provided for controlling this behaviour.  If you experience hanging
            when a data-transfer is complete using FTPS then you should first try 
            <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPCompatibilityFlags.SSLDisableDataWaitOnClose"/>
             and, if the problem
            still occurs, <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPCompatibilityFlags.SSLDisableDataClosure"/>.
            If you experience hanging
            as you close your FTPS session then you should first try 
            <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPCompatibilityFlags.SSLDisableControlWaitOnClose"/> and, if the problem
            still occurs, <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPCompatibilityFlags.SSLDisableControlClosure"/>.
            </para>
            <para>
            For SFTP, some servers return an error saying the file does not exist after creating it. By
            default, the client does a permission change after creating the file, which 
            is done to ensure the file permissions are correct. If this error is encountered, try using 
            <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPCompatibilityFlags.SSHDisableChmodAfterPut"/> to eliminate the problem.
            </para>
            </remarks>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.SecureFTPCompatibilityFlags.Standard">
            <summary>No special compatibility options, i.e. standard-compliant FTPS and SFTP.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.SecureFTPCompatibilityFlags.SSLDisableControlClosure">
            <summary>FTPS only. Disables the SSL/TSL closure exchange on the control channel.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.SecureFTPCompatibilityFlags.SSLDisableDataClosure">
            <summary>FTPS only. Disables the SSL/TSL closure exchange on data channels.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.SecureFTPCompatibilityFlags.SSLDisableControlWaitOnClose">
            <summary>FTPS only. Prevents the client from waiting for a reply to the SSL/TLS closure command on the control channel.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.SecureFTPCompatibilityFlags.SSLDisableDataWaitOnClose">
            <summary>FTPS only. Prevents the client from waiting for a reply to the SSL/TLS closure command on the data channel.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.SecureFTPCompatibilityFlags.SSLDisableControlWaitOnShutdownSSL">
            <summary>FTPS only. Prevents the client from waiting for an ShutdownSSL message when calling UseUnencryptedCommands</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.SecureFTPCompatibilityFlags.SSHDisableChmodAfterPut">
            <summary>SFTP only. Disables the permission change made after creating a file.</summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Documents.DocumentsService">
            <summary>
            The Google Documents List data API allows client applications to upload 
            documents to Google Documents and list them in the form of Google data 
            API ("GData") feeds. Your client application can request a list of a user's 
            documents, and query the content in an existing document.
            Here are some of the things you can do with the Documents List data API:
                Upload the word processing documents and spreadsheets on
                    your computer to allow you to back them up or 
                    collaborate online when editing.
                Find all of your documents that contain specific keywords.
                Get a list of spreadsheets which can be accessed through the Google Spreadsheets data API. 
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.DocumentsService.DocumentsNamespace">
            <summary>
            the documents namespace
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.DocumentsService.Revisions">
            <summary>
            revisions prefix
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Documents.DocumentsService.DocumentTypes">
            <summary>
            A Hashtable that expresses the allowed content types.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Documents.DocumentsService.#cctor">
            <summary>
            Static constructor used to initialize GDocumentsAllowedTypes.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Documents.DocumentsService.#ctor(System.String)">
            <summary>
             default constructor
            </summary>
            <param name="applicationName">the applicationname</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Documents.DocumentsService.Query(EnterpriseDT.Google.GData.Documents.DocumentsListQuery)">
            <summary>
            overloaded to create typed version of Query
            </summary>
            <param name="feedQuery"></param>
            <returns>EventFeed</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Documents.DocumentsService.UploadDocument(System.String,System.String)">
            <summary>
            Simple method to upload a document, presentation, or spreadsheet
            based upon the file extension.
            </summary>
            <param name="fileName">The full path to the file.</param>
            <param name="documentName">The desired name of the document on the server.</param>
            <returns>A DocumentEntry describing the created document.</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Documents.DocumentsService.UploadDocument(System.String,System.String,System.String)">
            <summary>
            Simple method to upload a document, presentation, or spreadsheet
            </summary>
            <param name="fileName">The full path to the file.</param>
            <param name="documentName">The desired name of the document on the server.</param>
            <param name="contentType">The mime type of the document</param>
            <returns>A DocumentEntry describing the created document.</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Documents.DocumentsService.UploadFile(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Simple method to upload an arbitrary file. 
            </summary>
            <param name="fileName">The full path to the file.</param>
            <param name="documentName">The desired name of the file on the server.</param>
            <param name="contentType">The mime type of the file</param>
            <param name="convert">Indiates if the document should be converted to a known type on the server</param>
            <returns>A DocumentEntry describing the created document.</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Documents.DocumentsService.InitVersionInformation">
            <summary>
            by default all services now use version 1 for the protocol.
            this needs to be overridden by a service to specify otherwise. 
            Documents uses Version 3
            </summary>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Documents.DocumentsService.Query(EnterpriseDT.Google.GData.AccessControl.AclQuery)">
            <summary>
            overloaded to create typed version of Query
            </summary>
            <param name="feedQuery"></param>
            <returns>EventFeed</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Documents.DocumentsService.OnNewFeed(System.Object,EnterpriseDT.Google.GData.Client.ServiceEventArgs)">
            <summary>eventchaining. We catch this by from the base service, which 
            would not by default create an atomFeed</summary> 
            <param name="sender"> the object which send the event</param>
            <param name="e">FeedParserEventArguments, holds the feedentry</param> 
            <returns> </returns>
        </member>
        <member name="T:EnterpriseDT.Util.Socks.Socks5Context">
            <summary>
            <c>Socks5Context</c> holds information about making SOCKS5 connections.
            </summary>
            <remarks>
            <para>
            At a minimum the following properties must be set:
            <list type="table">
            <listheader>
            <term>Property</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>ProxyAddress</term>
            <description>Address to be used to connect to the proxy.</description>
            </item>
            <item>
            <term>ProxyPort</term>
            <description>Defaults to 1080 - Port to be used to connect to the proxy.</description>
            </item>
            <item>
            <term>UserName</term>
            <description>User-name to be used for validation on the proxy.</description>
            </item>
            <item>
            <term>Authentication Methods</term>
            <description>At least one authentication method must be provided.</description>
            </item>
            </list>
            </para>
            <para>
            The SOCKS5 standard specifies three authentications methods.  Currently, GSSAPI
            is not supported.  If it is required please request it from EDT support.
            <list type="table">
            <listheader>
            <term>Authentication Method</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>Null</term>
            <description>Performs no authentication.</description>
            </item>
            <item>
            <term>Username/Password</term>
            <description>Uses a plain-text user-name/password combination.</description>
            </item>
            <item>
            <term>GSSAPI</term>
            <description>(Currently not supported) Uses the Generic Security 
            Services Application Program Interface (GSS-API)
            to communicate with system-level security services (SSPI on Windows) to authenticate 
            the user.</description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Util.Socks.Socks5Context.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks>
            Before the context can be used, the proxy-address and one or more authentication 
            methods must be set using the <c>AuthMethods</c> property.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Util.Socks.Socks5Context.#ctor(System.String)">
            <summary>
            Constructs a SOCKS5 context for the proxy with the given address.
            </summary>
            <remarks>
            Before the context can be used, one or more authentication methods must
            be set using the <c>AuthMethods</c> property.
            </remarks>
            <param name="proxyAddress">Address to be used to connect to the proxy.</param>
        </member>
        <member name="M:EnterpriseDT.Util.Socks.Socks5Context.#ctor(System.String,System.Int32)">
            <summary>
            Constructs a SOCKS5 context for the proxy with the given address and port.
            </summary>
            <remarks>
            Before the context can be used, one or more authentication methods must
            be set using the <c>AuthMethods</c> property.
            </remarks>
            <param name="proxyAddress">Address to be used to connect to the proxy.</param>
            <param name="proxyPort">Port on the proxy to connect to.</param>
        </member>
        <member name="M:EnterpriseDT.Util.Socks.Socks5Context.#ctor(System.Net.IPAddress)">
            <summary>
            Constructs a SOCKS5 context for the proxy with the given address.
            </summary>
            <remarks>
            Before the context can be used, one or more authentication methods must
            be set using the <c>AuthMethods</c> property.
            </remarks>
            <param name="proxyAddress">Address to be used to connect to the proxy.</param>
        </member>
        <member name="M:EnterpriseDT.Util.Socks.Socks5Context.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Constructs a SOCKS5 context for the proxy with the given address.
            </summary>
            <remarks>
            Before the context can be used, one or more authentication methods must
            be set using the <c>AuthMethods</c> property.
            </remarks>
            <param name="proxyAddress">Address to be used to connect to the proxy.</param>
            <param name="proxyPort">Port on the proxy to connect to.</param>
        </member>
        <member name="M:EnterpriseDT.Util.Socks.Socks5Context.ToString">
            <summary>
            Returns a string representation of this object.
            </summary>
            <returns>Returns a string representation of this object</returns>
        </member>
        <member name="P:EnterpriseDT.Util.Socks.Socks5Context.AuthMethods">
            <summary>
            Collection of authentication methods to be used.
            </summary>
            <remarks>
            <para>
            Before the context can be used, one or more authentication methods must
            be set using the <c>AuthMethods</c> property.
            </para>
            <para>
            The SOCKS5 standard specifies three authentications methods.  Currently, GSSAPI
            is not supported.  If it is required please request it from EDT support.
            <list type="table">
            <listheader>
            <term>Authentication Method</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>Null</term>
            <description>Performs no authentication.</description>
            </item>
            <item>
            <term>Username/Password</term>
            <description>Uses a plain-text user-name/password combination.</description>
            </item>
            <item>
            <term>GSSAPI</term>
            <description>(Currently not supported) Uses the Generic Security 
            Services Application Program Interface (GSS-API)
            to communicate with system-level security services (SSPI on Windows) to authenticate 
            the user.</description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Util.Socks.Socks5AuthMethod">
            <summary>
            Base class for SOCKS5 authentication methods.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Util.Socks.Socks5AuthMethod.Code">
            <summary>
            SOCKS5 code for this authentication method.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Util.Socks.Socks5NoAuthMethod">
            <summary>
            SOCKS5 authentication method which performs no authentication thereby validating
            any user.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Util.Socks.Socks5GssapiMethod">
            <summary>
            GSS-API authentication for SOCKS5 - NOT YET SUPPORTED.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.Socks.Socks5GssapiMethod.#ctor">
            <summary>
            NOT YET SUPPORTED.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Util.Socks.Socks5UserNamePasswordAuthMethod">
            <summary>
            Provides user-name/password authentication for SOCKS5.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.Socks.Socks5UserNamePasswordAuthMethod.#ctor">
            <summary>
            Creates a SOCKS5 authentication method the no user-name and password.
            </summary>
            <remarks>The <see cref="P:EnterpriseDT.Util.Socks.Socks5UserNamePasswordAuthMethod.UserName"/> and <see cref="P:EnterpriseDT.Util.Socks.Socks5UserNamePasswordAuthMethod.Password"/> should be set
            prior to use.</remarks>
        </member>
        <member name="M:EnterpriseDT.Util.Socks.Socks5UserNamePasswordAuthMethod.#ctor(System.String,System.String)">
            <summary>
            Creates a SOCKS5 authentication method the given user-name and password.
            </summary>
            <param name="userName">Name of user.</param>
            <param name="password">Password</param>
        </member>
        <member name="P:EnterpriseDT.Util.Socks.Socks5UserNamePasswordAuthMethod.UserName">
            <summary>
            User-name of SOCKS5 account.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Util.Socks.Socks5UserNamePasswordAuthMethod.Password">
            <summary>
            Password of SOCKS5 account.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Util.Socks.Socks5AuthMethodCollection">
            <summary>
            Collection of SOCKS5 authentication methods.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.Socks.Socks5AuthMethodCollection.Clear">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.Socks.Socks5AuthMethodCollection.Add(EnterpriseDT.Util.Socks.Socks5AuthMethod)">
            <summary>
            Add a methods to the collection.
            </summary>
            <param name="authMethod">The method to add.</param>
        </member>
        <member name="M:EnterpriseDT.Util.Socks.Socks5AuthMethodCollection.Remove(EnterpriseDT.Util.Socks.Socks5AuthMethod)">
            <summary>
            Remove a method from the collection.
            </summary>
            <param name="authMethod">The method to remove.</param>
        </member>
        <member name="M:EnterpriseDT.Util.Socks.Socks5AuthMethodCollection.GetEnumerator">
            <summary>
            Returns an enumerator for the collection.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:EnterpriseDT.Util.Socks.Socks5AuthMethodCollection.Count">
            <summary>
            Number of methods in the collection.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SSHCompression">
            <summary>
            Defines the compression interface
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.ZlibCompression">
            <summary>
            Implements zlib compression
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SECSHPublicKeyFormat">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SECSHPublicKeyFormat.log">
            <summary> Logging object</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SECSHPublicKeyFormat.IsFormatted(System.Byte[])">
            <summary>
            Are the supplied raw key bytes in this key format?
            </summary>
            <param name="formattedKey">raw bytes from keyfile</param>
            <returns>true if in this format, false otherwise</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SECSHPublicKeyFormat.GetKeyBlob(System.Byte[])">
            <summary>
            Get the key blob from the raw key bytes
            </summary>
            <param name="formattedKey">raw bytes from keyfile</param>
            <returns>the key blob</returns>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.OAuthParameters">
            <summary>
            Stores the parameters used to make OAuth requests
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.OAuthParameters.addOrUpdate(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String)">
            <summary>
            Adds a new key-value pair to the dictionary or updates the value if the key is already present
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.OAuthParameters.safeGet(System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Returns the value corresponding to the key in the dictionary or null if the key is not present
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SCPChannelReceiver">
            <summary>
            SSH messages received back from SCP command are channelled via this class
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SCPChannelReceiver.log">
            <summary> Logging object</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SCPChannelReceiver.OnData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Called when SSH_MESSAGE_DATA is received
            </summary>
            <param name="data">array of data</param>
            <param name="offset">offset into array</param>
            <param name="length">length of data</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SCPChannelReceiver.OnChannelReady">
            <summary>
            Called when the SSH channel is initialised
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SCPChannelReceiver.ChannelReady">
            <summary>
            True if the SCP channel is ready
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Pro.Design.ProxySettingsForm">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.Design.ProxySettingsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.Design.ProxySettingsForm.#ctor">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.Design.ProxySettingsForm.#ctor(EnterpriseDT.Util.Socks.SocksContext)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="socksContext"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.Design.ProxySettingsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.Design.ProxySettingsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.Design.ProxySettingsForm.ProxySettings">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.GDataRequestType">
            <summary>enum to describe the different operations on the GDataRequest
            </summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GDataRequestType.Query">
            <summary>The request is used for query</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GDataRequestType.Insert">
            <summary>The request is used for an insert</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GDataRequestType.Update">
            <summary>The request is used for an update</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GDataRequestType.Delete">
            <summary>The request is used for a delete</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GDataRequestType.Batch">
            <summary>This request is used for a batch operation</summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.IBaseWalkerAction">
            <summary>Thin layer to create an action on an item/response
            </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.IBaseWalkerAction.Go(EnterpriseDT.Google.GData.Client.AtomBase)">
            <summary>the only relevant method here</summary> 
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpRead">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpRead.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient">
             <summary>
             Provides low-level access to FTP/FTPS functionality.
             </summary>
             <remarks>
             <para>
             <c>SSLFTPClient</c> supports SOCKS (4, 4A, and 5) and FTPS (implicit and explicit).
             </para>
             <para>
             <b>FTPS</b>: SSLFTPClient supports standard FTP and the two types of FTPS, explicit and implicit.  The
             default is explicit FTPS.  The type may be selected using the <see cref="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.IsImplicitFTPS"/> flag.
             </para>
             <para>
             <b>Explicit FTPS:</b> The FTP client connects
             in plain (non-SSL) mode and operates in this mode until the <c>AUTH</c> command is
             issued by means of the <c>&gt;Auth(string)</c> method.  This will cause
             the client and server to negotiate an SSL connection.  Once complete, all
             commands sent from the client to the server, and their corresponding replies
             will be secure.  
             <example>This example shows a simple explicit FTPS session.
             <code>
               // create an explicit FTPS client
               SSLFTPClient ftp = new SSLFTPClient();
               ftp.RemoteHost = "192.168.10.123";
            
               // Turn off server validation (ONLY do this when testing)
               ftp.ServerValidation = SecureFTPServerValidationType.None;
             
               // connect to the server
               ftp.Connect();                        
            
               // switch to secure command channel
               ftp.Auth(SSLFTPClient.AUTH_TLS);
            
               // log in
               ftp.Login("test", "test");
            
               // get a file
               ftp.Get("file.txt", "file.txt");
            
               // close the connection
               ftp.Quit();
             </code>
             </example>
             </para>
             <para>
             This example uses no client authentication and does not attempt to verify
             server certificates (which should always be done in production systems).
             </para>
             <para>
             <b>Implicit FTPS</b> is an older form of FTPS which uses pure SSL connection,
             i.e. SSL sessions are established immediately upon socket connection for all
             FTP channels.
             <example>This example shows a simple implicit FTPS session:
             <code>
               // create an implicit FTPS client
               SSLFTPClient ftp = new SSLFTPClient();
               ftp.RemoteHost = "192.168.10.123";
            
               // Turn off server validation (ONLY do this when testing)
               ftp.ServerValidation = SecureFTPServerValidationType.None;
               
               // Select implicit FTPS
               ftp.IsImplicitFTPS = true;
             
               // connect to the server
               ftp.Connect();                        
            
               // log in
               ftp.Login("test", "test");
            
               // get a file
               ftp.Get("file.txt", "file.txt");
            
               // close the connection
               ftp.Quit();
             </code>
             </example>
             </para>
             <para>
             Like the previous example, this example uses no client authentication 
             and does not attempt to verify server certificates (which should 
             be done in production systems).
             </para>
             <para>  
             <b>SSL Certificates - Server Validation:</b>
             The examples above used no server validation.  This is only normally 
             acceptable only when testing.  To be secure applications should always 
             validate the server that they're communicating with.  If the 
             <see cref="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.ServerValidation"/> property is set to <c>SecureFTPServerValidationType.Automatic</c>
             or <c>SecureFTPServerValidationType.AutomaticIgnoreHostName</c> then 
             <c>SSLFTPClient</c> will attempt to validate the server's certificate.  In 
             explicit FTPS this occurs when the <c>Auth(SecurityMechanism)</c> method is invoked, whereas
             in implicit FTPS, it occurs upon connection.  Windows Internet security services
             are used to validate the certificate.  This means that one of the following must
             be true
             <list type="number">
             <item>
             <term>CA certificate</term>
             <description>The server's certificate must have been issued by a CA 
             (Certificate Authority) whose certificate is in the Windows certificate store.</description>
             </item>
             <item>
             <term>Non-CA certificate</term>
             <description>The server's certificate must be in the Windows certificate store.
             A certificate may be installed on the system using the <i>Internet Properties</i>
             settings, which may be accessed from the Windows <i>Control Panel</i>.
             </description>
             </item>
             </list>
             </para>
             <para>  
             <b>SSL Certificates - Client Validation:</b>
             Some FTPS servers require a client certificate to be presented at the time security
             information is exchanged.  To enable this feature you must set the
             <see cref="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.ClientCertificate"/> property.  Certificates may be loaded using a range of
             static methods in <see cref="T:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate"/>.
             </para>
             <para><b>Server Compatibility:</b>
             The most severe barrier to server compatilibilty is the lack of FTPS support on the
             server.  Most FTP servers can be configured to support FTPS, but some only support
             SFTP (SSH File Transfer Protocol), which in fact is not FTP in the conventional sense.
             SFTP is not supported by <c>SSLFTPClient</c>.
             </para>
             <para>
             The second most common server incompatibility problem is caused by differing level
             of adherence to the standard for how SSL/TLS sockets should be closed.  By default
             SSLFTPClient will attempt to close sockets in the standards-compliant way.  While 
             this is the most secure, it occasionally will cause hanging as it waits for a
             response from the client which never arrives.  The <see cref="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.ServerCompatibility"/>
             property is provided for controlling this behaviour.  If you experience hanging
             when a data-transfer is complete then you should first try 
             <c>SecureFTPCompatibilityFlags.SSLDisableDataWaitOnClose</c> and, if the problem
             still occurs, <c>SecureFTPCompatibilityFlags.SSLDisableDataClosure</c>.
             If you experience hanging
             as you close your secure FTP session then you should first try 
             <c>SecureFTPCompatibilityFlags.SSLDisableControlWaitOnClose</c> and, if the problem
             still occurs, <c>SecureFTPCompatibilityFlags.SSLDisableControlClosure</c>.
             </para>
             <para>
             <b>Cipher-Suites:</b> A cipher-suite is a set of algorithms that is used for
             various aspects of SSL security.  For a client and a server to be able to communicate,
             they must be able to agree on a particular cipher-suite.  Different types of 
             servers recognize different cipher-suites, so it is usually up to the client make 
             sure that it shares at least one cipher-suite with the server that it is trying
             to communicate securely with.  By itself, this fact would imply that the client should 
             simply enable all possible suites in order to increase the chances of overlap.  
             However, this is not necessarily wise since some cipher-suites, esp. those which 
             adhered to the (now defunct) US export restriction,s are relatively easy to break, 
             whereas some others are trusted as currently being virtually unbreakable.
             </para>
             <para>
             This library supports many cipher-suites (<see cref="T:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCipherSuite"/>)
             so it should be possible to find a suitable cipher-suite in most cases.  Cipher-suites
             are configured on the client using the <see cref="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.CipherSuites"/> property.
             </para>
             <para>
             <b>SOCKS:</b> SOCKS may be used for FTPing through firewalls.  For this to be possible
             a SOCKS proxy must be available, and a user account must be set up on that proxy.
             <c>SSLFTPClient</c> supports all the popular versions of SOCKS - 4, 4A, and 5.
             </para>
             <para>
             The SOCKS features are controlled entirely through the <see cref="T:EnterpriseDT.Util.Socks.SocksContext"/>
             property.  If it is <c>null</c> (the default) then SOCKS is not used.  To use SOCKS,
             the property must be set to an instance of <c>Socks4Context</c> or <c>Socks5Context</c>.
             For example, for SOCKS4:
             </para>
             <code>
            		myFTPClient.SocksContext = new Socks4Context("192.168.0.2", 1080, "marvin23");
             </code>
             and for SOCKS5:
             <code>
            		Socks5Context socksContext = new Socks5Context("192.168.0.2", 1080);
            		socksContext.AuthMethods.Add(new Socks5NoAuthMethod());
            		socksContext.AuthMethods.Add(new Socks5UserNamePasswordAuthMethod("marvin23", "m31erk"));
            		myFTPClient.SocksContext = socksContext;
             </code>
             </remarks>
             <author>Hans Andersen</author>
             <version>$Revision$</version>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.PROT_CLEAR">
            <summary>
            May be passed to the <code>prot(char)</code> method to specify that data-transfers 
            should be done WITHOUT security.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.PROT_PRIVATE">
            <summary>
            May be passed to the <code>prot(char)</code> method to specify that 
            data-transfers should be done WITH security.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.#ctor">
            <summary>  
            Default constructor.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.Connect">
            <summary>
            Connects to the FTP server.
            </summary>
            <remarks>
            <para>
            The <see cref="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.RemoteHost"/> property must be set before this method is called.
            </para>
            <para>Note that for explicit FTP <b>communications will not be secure</b> until the 
            <c>Auth()</c> method is called.
            </para>
            <para>
            Implicit FTPS communications are secure from the outset, usually requiring no 
            extra action by the client.  Some servers, however may require <c>Auth()</c>
            (no arguments) to be called.
            </para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.Quit">
            <summary>Quit the FTP session by sending a <c>QUIT</c> command before closing the socket.</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.Auth">
            <summary>
            (Implicit FTPS only) Instructs the server that data-channels should be secure.
            </summary>
            <remarks>
            Although most implicit FTPS servers secure data-channels by default, thus 
            removing the need for this method, some do not.  These server require that 
            this method be called to ensure that data-channels are secure.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.Auth(EnterpriseDT.Net.Ftp.Ssl.SSLFTPSSLVersion)">
            <summary>
            Switches the control-channel (the connection which carries commands)
            to secure mode.
            </summary>
            <remarks>
            If this command succeeds, then all subsequent
            commands and their corresponding replies will be secure.  The client will also
            switch to private (i.e. secure) data channels immediately after a connection 
            is made.  It does this by invoking <c>Pbsz(0)</c> and <c>Prot(DataProtectionType.Private)</c>.
            </remarks>
            <param name="sslVersion">The version to support</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.Auth(EnterpriseDT.Net.Ftp.Ssl.SSLFTPSSLVersion,System.Boolean)">
            <summary>
            Switches the control-channel (the connection which carries commands)
            to secure mode.
            </summary>
            <remarks>
            If this command succeeds, then all subsequent
            commands and their corresponding replies will be secure.  
            If <c>secureDataChannels</c> is <c>true</c> thenthe client will also
            switch to private (i.e. secure) data channels immediately after a connection 
            is made.  It does this by invoking <code>Pbsz(0)</code> and 
            <code>Prot(SSLFTPClient.DataProtectionType.Private)</code>.
            </remarks>
            <param name="sslVersion">Security mechanism to use</param>
            <param name="secureDataChannels">Flag instructing whether or not to
            secure the data-channels.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.ClearControlChannel">
            <summary>
            Clears the control channel, setting it back to plain text.
            </summary>
            <remarks>
            <para>
            After this command is issued, the server will continue the control connection in plaintext, 
            expecting the next command from the client to be in plaintext. This command is often used in
            conjunction with firewalls, which need to be able to inspect the control channel to open data
            channel ports in the firewall. This can only be done if the control channel is not encrypted.
            </para>
            <para>
            The server will not accept any more PBSZ or PROT commands.  All subsequent
            data transfers must be protected with the current PROT settings.
            </para>
            <para>
            If things appear to hang here, set the <c>ServerCompatibility</c> property to 
            <c>SecureFTPCompatibilityFlags.SSLDisableControlWaitOnShutdownSSL</c>
            </para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.Prot(EnterpriseDT.Net.Ftp.Ssl.SSLFTPDataProtectionType)">
            <summary>
            Defines the security-level of subsequent data-transfers.
            </summary>
            <remarks>
            One of the <c>Auth()</c> methods must be called prior to calling
            this method.  In most cases, calling <c>Auth()</c> will also implicitly
            cause this method to be called, so it's usually unnecessary to call this
            method explicitly.
            </remarks>
            <param name="protectionType">Protection type - either <see cref="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPDataProtectionType.Clear"/> 
            or <see cref="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPDataProtectionType.Private"/>.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.Pbsz(System.Int32)">
            <summary>
            Defines the buffer-size to be used on data-connections.
            </summary>
            <remarks>
            <para>
            In conformity with the standard, this method must be <code>0</code> (zero).  
            Note that this method is required only to conform with the standard.
            </para>
            <para>
            One of the <c>Auth()</c> methods must be called prior to calling
            this method.  In most cases, calling <c>Auth()</c> will also implicitly
            cause this method to be called, so it's usually unnecessary to call this
            method explicitly.
            </para>
            </remarks>
            <param name="bufferSize">Buffer-size to use (must be zero).</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.verifyCertificate(EnterpriseDT.Mentalis.Security.Ssl.SecureSocket,EnterpriseDT.Mentalis.Security.Certificates.Certificate,EnterpriseDT.Mentalis.Security.Certificates.CertificateChain,EnterpriseDT.Mentalis.Security.Ssl.VerifyEventArgs,EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus)">
            <summary>
            Called when a server needs to be verified.
            </summary>
            <param name="socket"></param>
            <param name="remote"></param>
            <param name="chain"></param>
            <param name="e"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.CheckLicense">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.ValidatingServer">
            <summary>
            Notifies that the server must be validated.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.RemoteHost">
            <summary>  
            Get/set the name of the remote host.
            </summary>
            <remarks>
            Can only be set if not currently connected.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.ServerCompatibility">
            <summary>
            Controls various server security compatibility features.
            </summary>
            <remarks>
            <para>
            The most severe barrier to server compatilibilty is the lack of FTPS support on the
            server.  Most FTP servers can be configured to support FTPS, but some only support
            SFTP (SSH File Transfer Protocol), which in fact is not FTP in the conventional sense.
            SFTP is not supported by <c>SSLFTPClient</c>.
            </para>
            <para>
            The second most common server incompatibility problem is caused by differing level
            of adherence to the standard for how SSL/TLS sockets should be closed.  By default
            SSLFTPClient will attempt to close sockets in the standard-compliant way.  While 
            this is the most secure, it occasionally will cause hanging as it waits for a
            response from the client which never arrives.  The <see cref="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.ServerCompatibility"/>
            property is provided for controlling this behaviour.  If you experience hanging
            when a data-transfer is complete then you should first try 
            <c>SecureFTPCompatibilityFlags.DisableDataSSLWaitOnClose</c> and, if the problem
            still occurs, <c>SecureFTPCompatibilityFlags.SSLDisableDataClosure</c>.
            If you experience hanging
            as you close your secure FTP session then you should first try 
            <c>SecureFTPCompatibilityFlags.SSLDisableControlWaitOnClose</c> and, if the problem
            still occurs, <c>SecureFTPCompatibilityFlags.SSLDisableControlClosure</c>.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.ClientCertificate">
            <summary>
            The certificate to be presented to the server.
            </summary>
            <remarks>
            If a server requires client validation then this property must be set.
            <see cref="T:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate"/>s are created using one of the static
            <c>SSLFTPCertificate.CreateFrom...</c> methods, which read a private key
            and a certificate from files.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.ServerValidationCertificate" -->
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.ServerCertificate">
            <summary>
            The certificate presented by the server.
            </summary>
            <remarks>
            During the negotiation of a secure connection, the server presents a 
            certificate which may be accessed using this property.  The property
            may not be accessed until a secure connection has been made.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.IsControlChannelSecure">
            <summary>
            Indicates whether the control channel is currently secure.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.IsImplicitFTPS">
            <summary>
            Controls/indicates whether this client is performing explicit or implicit FTPS.
            </summary>
            <value><c>true</c> if the client is performing implicit FTPS.  
            <c>false</c> is the default.</value>
            <remarks>
            <para>
            Implicit FTPS is an older form of FTPS which uses pure SSL connection,
            i.e. SSL sessions are established immediately upon socket connection for all
            FTP channels.
            </para>
            <para>
            This property may be read any time, but may be set only prior to connection.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.UseSessionResumption">
            <summary>
            Controls/indicates whether this client is using SSL session resumption
            </summary>
            <value><c>true</c> if the client using session resumption  
            <c>true</c> is the default.</value>
            <remarks>
            <para>
            Session resumption is primarily a performance enhancement - it avoids some
            of the stages of the SSL handshake, using previously cached session data.
            </para>
            <para>
            This property may be read any time, but may be set only prior to connection.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.ServerValidation">
            <summary>
            Controls the way in which server certificates are validated.
            </summary>
            <remarks>
            When an SSL/TLS connection is being negotiated, the FTP server will present an
            SSL certificate to the client.  <see cref="T:EnterpriseDT.Net.Ftp.SecureFTPServerValidationType"/>s are used to
            control what the client does with this certificate.  
            The default is <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPServerValidationType.Automatic"/>.
            If <c>ServerValidation</c> is <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPServerValidationType.Callback"/> then
            <see cref="E:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.ValidatingServer"/> must be handled.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.CipherSuites">
            <summary>
            Get/sets the cipher-suites permissible during establishment of a secure
            connection.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.SSLVersion">
            <summary>
            Get/sets the SSL/TLS version to use. TLS is the successor to SSL and 
            should be used unless the server does not support it - SSL 3.0 has various vulnerabilities such
            as the POODLE exploit. SSLFTPSSLVersion.DETECT no longer will interoperate with SSL 3.0.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.ServerCommonName">
            <summary>
            The name to be used when performing a name-check during 
            the validation of the server certificate.
            </summary>
            <remarks>
            An important part of validating the certificate is to perform
            a <i>name-check</i>.  In a name-check the <i>Common Name</i> on the certificate is
            compared with the host-name of the FTP server that we believe we are connected
            to.  Unless this property is set explicitly, the Common Name is assumed to be
            the same as the host-name that is used to connect to the server.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.RootCertificates">
            <summary>
            Returns an array containing all root certificates.
            </summary>
            <remarks>
            <para>
            If <see cref="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.ServerValidation"/> is set to <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPServerValidationType.Automatic"/> or 
            <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPServerValidationType.AutomaticNoNameCheck"/> then the system will attempt to validate the server's
            certificate.  For a certificate to be validated it must either (1) be installed as a
            root certificate, or (2) the base of the chain of certificates that it contains must
            be a root certificate.
            </para>
            <para>
            <b>Root Certificates</b> work through "Chains of Trust".  In other
            words, if X trusts Y, and Y trusts Z, then X can trust Z.  In this case, X is
            the user of the FTP-client, Y is a Certification Authority (CA), and Z is the
            FTP server.  So, in order for the FTP-client to be able to trust the
            FTP-server, the server should have a certificate issued by a CA, and the client
            should have the CA's certificate loaded as a root certificate.  
            When a client connects to a server,
            the server will provide the client with its certificate.  This certificate will
            contain a copy of the CA's certificate and contain data which certifies
            that the server's certificate could only have been issued by this CA.  The 
            client can now match the CA's certificate with the root certificates that it holds 
            and then deduce whether or not the server is trustworthy.  Client certificates
            work similarly, but in reverse to the above description.
            </para>
            <para>
            <b>Installing certificates:</b> 
            A certificate may be installed on the system using the <i>Internet Properties</i>
            settings, which may be accessed from the Windows <i>Control Panel</i>.
            </para>
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.DirectoryEmptyStrings">
            <summary>  
            Contains fragments of server replies that indicate no files were 
            found in a supplied directory.
            </summary>
            <author>Bruce Blackshaw</author>
            <version>$Revision: 1.1 $</version>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.DirectoryEmptyStrings.NO_FILES">
            <summary>
            Server string indicating no files found (NO_FILES)
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.DirectoryEmptyStrings.NO_SUCH_FILE_OR_DIR">
            <summary>
            Server string indicating no files found (wu-ftpd) (NO_SUCH_FILE_OR_DIR)
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.DirectoryEmptyStrings.EMPTY_DIR">
            <summary>
            Server string indicating no files found (EMPTY_DIR)
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.DirectoryEmptyStrings.NO_DATA_SETS_FOUND">
            <summary>
            Server string for OS/390 indicating no files found (NO_DATA_SETS_FOUND)
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.DirectoryEmptyStrings.#ctor">
            <summary>
            Constructor. Adds the fragments to match on
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.AtomGeneratorConverter">
            <summary>TypeConverter, so that AtomGenerator shows up in the property pages
            </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomGeneratorConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>Standard type converter method</summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomGeneratorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>Standard type converter method</summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.AtomGenerator">
            <summary>Represents the Generator element /feed/generator in Atom. In RSS, only the name property is used.
            </summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomGenerator.text">
            <summary>text part of the Generator element</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomGenerator.uri">
            <summary>Uri attribute of the Generator element</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomGenerator.version">
            <summary>version attribute of the Generator element</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomGenerator.#ctor">
            <summary>standard constructor, not used right now
            atomGenerator = element atom:generator {
               atomCommonAttributes,
               attribute url { atomUri }?,
               attribute version { text }?,
               text
            }
            </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomGenerator.#ctor(System.String)">
            <summary>public AtomGenerator(string text)</summary> 
            <param name="text">the human readable representation of the generator</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomGenerator.SaveXmlAttributes(System.Xml.XmlWriter)">
            <summary>overridden to save attributes for this(XmlWriter writer)</summary> 
            <param name="writer">the xmlwriter to save into </param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomGenerator.SaveInnerXml(System.Xml.XmlWriter)">
            <summary>saves the inner state of the element</summary> 
            <param name="writer">the xmlWriter to save into </param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomGenerator.ShouldBePersisted">
            <summary>figures out if this object should be persisted</summary> 
            <returns> true, if it's worth saving</returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomGenerator.XmlName">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomGenerator.Text">
            <summary>accessor method public string Text</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomGenerator.Uri">
            <summary>accessor method public Uri Uri</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomGenerator.Version">
            <summary>accessor method public string Version</summary> 
            <returns> </returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ssh.Routrek.PKI.KeyGenerator">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ssh.Routrek.PKI.KeyGenerator.GenerateRSAKey(System.String)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ssh.Routrek.PKI.KeyGenerator.GenerateDSAKey(System.String)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.GOAuthRequestFactory">
            <summary>
            A request factory to generate an authorization header suitable for use
            with OAuth.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GOAuthRequestFactory.GDataGAuthSubAgent">
            <summary>this factory's agent</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GOAuthRequestFactory.#ctor(System.String,System.String)">
            <summary>
            default constructor.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GOAuthRequestFactory.#ctor(System.String,System.String,EnterpriseDT.Google.GData.Client.OAuthParameters)">
            <summary>
            overloaded constructor that sets parameters from an OAuthParameter instance.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GOAuthRequestFactory.CreateRequest(EnterpriseDT.Google.GData.Client.GDataRequestType,System.Uri)">
            <summary>
            default constructor.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.GOAuthRequest">
            <summary>
            GOAuthSubRequest implementation.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.GOAuthRequest.factory">
            <summary>holds the factory instance</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GOAuthRequest.#ctor(EnterpriseDT.Google.GData.Client.GDataRequestType,System.Uri,EnterpriseDT.Google.GData.Client.GOAuthRequestFactory)">
            <summary>
            default constructor.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.GOAuthRequest.EnsureCredentials">
            <summary>
            sets up the correct credentials for this call.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHCV2.SSH2PacketBuilder.log">
            <summary> Logging object</summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar">
            <summary>
            FTPStatusBar is a status bar tailored for use with <see cref="T:EnterpriseDT.Net.Ftp.ExFTPConnection"/> and 
            <see cref="T:EnterpriseDT.Net.Ftp.SecureFTPConnection"/>, which provides realtime feedback about the 
            current file transfer.
            </summary>
            <remarks>
            <para>
            Typically, an FTPStatusBar is placed on the same Windows form as an 
            instance of ExFTPConnection. It automatically detects an instance of 
            <see cref="T:EnterpriseDT.Net.Ftp.ExFTPConnection"/>. When the application is run and a 
            transfer is initiated, the FTPStatusBar displays a number of 
            realtime visual cues about the transfer. 
            </para>
            <para>
            It shows a progress bar giving a visual representation of the percentage 
            of the file size transferred, the actual percentage, the amount of 
            data transferred, the time taken for the transfer, the current transfer 
            speed, and the name of the file. All of these properties are updated 
            dynamically as the transfer proceeds. A cancel button is also provided 
            on the status bar to cancel the transfer as it is happening. 
            </para>
            </remarks>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.#ctor">
            <summary>
            Default consructor.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.LinkComponent(EnterpriseDT.Net.Ftp.IFTPComponent)">
            <summary>
            Called by the given FTP component when it is added to a container.
            </summary>
            <remarks>
            This method allows FTP components to interlink themselves automatically.
            </remarks>
            <param name="component">FTP component just added to the container.</param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.TransferPanel">
            <summary>
            Main panel containing all components making up the status bar.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.ProgressBar">
            <summary>
            Gets the ProgressBar showing how much of the current transfer is complete.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.StopButton">
            <summary>
            Gets the button that allows the user to interrupt the current transfer.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.TimeLeftLabel">
            <summary>
            Gets the label showing the estimate time left for the current transfer.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.PercentageLabel">
            <summary>
            Gets the label showing the percentage of completion of the current transfer.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.SpeedLabel">
            <summary>
            Gets the label showing the approximate current transfer speed.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.StatusLabel">
            <summary>
            Gets the label showing various status messages.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.FileSizeLabel">
            <summary>
            Gets the label showing the size of the currently selected file.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.BackgroundImage">
            <summary>
            Gets or sets the background color for the control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.Text">
            <summary>
            Gets or sets the text associated with this control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.Dock">
            <summary>
            Gets or sets which edge of the parent container a control is docked to.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.Connection">
            <summary>
            Get or set the FTP connection object for which status information is 
            being displayed.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.VisibleWhenIdle">
            <summary>
            Gets or sets a value that controls whether or not the status-bar will be 
            shown when no transfers are taking place.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.TransferVisibleWhenIdle">
            <summary>
            Gets or sets a value that controls whether or not the transfer-specific section of 
            the status-bar will be shown when no transfers are taking place.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.TransferVisible">
            <summary>
            Gets or sets a value that controls whether or not the transfer-specific section of 
            the status-bar will be shown.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.TimeLeftVisible">
            <summary>
            Gets or sets a value that controls whether or not the time-left field is visible.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.SpeedVisible">
            <summary>
            Gets or sets a value that controls whether or not the speed field is visible.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.FileSizeVisible">
            <summary>
            Gets or sets a value that controls whether or not the size field is visible.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.PercentageVisible">
            <summary>
            Gets or sets a value that controls whether or not the percentage field is visible.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.ImeMode">
            <summary>
            Gets or sets the Input Method Editor (IME) mode of the control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.TabStop">
            <summary>
            Gets or sets a value indicating whether 
            the user can give the focus to this control using the TAB key.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.UserMessages">
            <summary>
            Get the status messages displayed to users.
            </summary>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.Error">
            <summary>
            Occurs when an exception is thrown during an asynchronous operation.
            </summary> 
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.Messages">
            <summary>
            Defines the messages that can be presented to a user by <c>FTPStatusBar</c>.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.Messages.TextConnecting">
            <summary>
            Gets the text displayed when connecting to a server.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.Messages.TextConnected">
            <summary>
            Gets the text displayed when a connection has been established.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.Messages.TextConnectionFailure">
            <summary>
            Gets the text displayed when an attempt to connect has failed.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.Messages.TextListing">
            <summary>
            Gets the text displayed when a directory listing is being fetched.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.Messages.TextDownload">
            <summary>
            Gets the text displayed when a file is being downloaded.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.Messages.TextDownloadComplete">
            <summary>
            Gets the text displayed when a file has been downloaded.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.Messages.TextDownloadCancelled">
            <summary>
            Gets the text displayed when a download has been cancelled.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.Messages.TextUpload">
            <summary>
            Gets the text displayed when a file is being uploaded.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.Messages.TextUploadComplete">
            <summary>
            Gets the text displayed when a file has been downloaded.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.Messages.TextUploadCancelled">
            <summary>
            Gets the text displayed when a download has been cancelled.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Pro.ProFTPRemoteFileList">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPRemoteFileList.#ctor">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPRemoteFileList.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPRemoteFileList.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPRemoteFileList.ftp_LoggedIn(System.Object,EnterpriseDT.Net.Ftp.FTPLogInEventArgs)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPRemoteFileList.ftp_DirectoryChanged(System.Object,EnterpriseDT.Net.Ftp.FTPDirectoryEventArgs)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPRemoteFileList.ftp_Closed(System.Object,EnterpriseDT.Net.Ftp.FTPConnectionEventArgs)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPRemoteFileList.ftp_FileRenamed(System.Object,EnterpriseDT.Net.Ftp.FTPFileRenameEventArgs)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPRemoteFileList.RefreshFileList">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPRemoteFileList.CreateListViewItem(EnterpriseDT.Net.Ftp.FTPFile)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPRemoteFileList.Connection">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.AtomUri">
            <summary>AtomUri object representation
            </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomUri.#ctor(System.Uri)">
            <summary>basic constructor for the atomUri</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomUri.#ctor(System.String)">
            <summary>alternating constructor with a string</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomUri.ToString">
            <summary>override for ToString</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomUri.Compare(EnterpriseDT.Google.GData.Client.AtomUri,EnterpriseDT.Google.GData.Client.AtomUri)">
            <summary>comparison method similar to strings</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomUri.GetHashCode">
            <summary>
            as we do comparisons, we need to override this
            we return the hashcode of our string member
            </summary>
            <returns>int</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomUri.CompareTo(System.Object)">
            <summary>
            overloaded IComparable interface method
            </summary>
            <param name="obj">the object to compare this instance with</param>
            <returns>int</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomUri.Equals(System.Object)">
            <summary>
            overridden equal method
            </summary>
            <param name="obj"></param>
            <returns>bool</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomUri.op_Equality(EnterpriseDT.Google.GData.Client.AtomUri,EnterpriseDT.Google.GData.Client.AtomUri)">
            <summary>
            overridden comparson operator
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>bool</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomUri.op_Inequality(EnterpriseDT.Google.GData.Client.AtomUri,EnterpriseDT.Google.GData.Client.AtomUri)">
            <summary>
            overridden comparson operator
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>bool</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomUri.op_GreaterThan(EnterpriseDT.Google.GData.Client.AtomUri,EnterpriseDT.Google.GData.Client.AtomUri)">
            <summary>
            overridden comparson operator
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>bool</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomUri.op_LessThan(EnterpriseDT.Google.GData.Client.AtomUri,EnterpriseDT.Google.GData.Client.AtomUri)">
            <summary>
            overridden comparson operator
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>bool</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomUri.op_GreaterThanOrEqual(EnterpriseDT.Google.GData.Client.AtomUri,EnterpriseDT.Google.GData.Client.AtomUri)">
            <summary>
            overridden comparson operator
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>bool</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomUri.op_LessThanOrEqual(EnterpriseDT.Google.GData.Client.AtomUri,EnterpriseDT.Google.GData.Client.AtomUri)">
            <summary>
            overridden comparson operator
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>bool</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomUri.op_Implicit(System.String)~EnterpriseDT.Google.GData.Client.AtomUri">
            <summary>
            implicit new instance of AtomUri from string
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomUri.op_Implicit(System.Uri)~EnterpriseDT.Google.GData.Client.AtomUri">
            <summary>
            implicit new instance of AtomUri from Uri object
            </summary>
            <param name="u"></param>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomUri.Content">
            <summary>accessor method public string Content</summary> 
            <returns> </returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpRename">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <remarks>
            byte   SSH_FXP_RENAME
            uint32 request-id
            string oldpath [UTF-8]
            string newpath [UTF-8]
            uint32 flags (this looks only for recent versions? don't use here yet)
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpRename.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Cryptography.ProtectionType">
            <summary>
            Specifies the type of encryption method to use when protecting data.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.ProtectionType.LocalMachine">
            <summary>The encrypted data is associated with the local machine. Any user on the computer on which the data is encrypted can decrypt the data.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.ProtectionType.CurrentUser">
            <summary>The encrypted data is associated with the current user. Only a user with logon credentials matching those of the encrypter can decrypt the data.</summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Cryptography.CryptoAlgorithm">
            <summary>
            Specifies the type of algorithm to be used when performing unmanaged cryptographic transformations.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.CryptoAlgorithm.Rijndael128">
            <summary>The Rijndael algorithm with a key size of 128 bits.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.CryptoAlgorithm.Rijndael192">
            <summary>The Rijndael algorithm with a key size of 192 bits.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.CryptoAlgorithm.Rijndael256">
            <summary>The Rijndael algorithm with a key size of 256 bits.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.CryptoAlgorithm.RC4">
            <summary>The RC4 algorithm.</summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Cryptography.CryptoProvider">
            <summary>
            Specifies the type of CSP to be used when performing unmanaged cryptographic transformations.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.CryptoProvider.RsaFull">
            <summary>Microsoft's full RSA CSP.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.CryptoProvider.RsaAes">
            <summary>Microsoft's full RSA CSP that supports the AES.</summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Cryptography.CryptoMethod">
            <summary>
            Specifies the type of transformation for a cryptographic operation.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.CryptoMethod.Encrypt">
            <summary>Encrypt the data.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.CryptoMethod.Decrypt">
            <summary>Decrypt the data.</summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Cryptography.PUBLICKEYSTRUC">
            <summary>
            The PUBLICKEYSTRUC structure, also known as the BLOBHEADER structure, indicates a key's BLOB type and the algorithm that the key uses. One of these structures is located at the beginning of the pbData member of every key BLOB.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.PUBLICKEYSTRUC.bType">
            <summary>Key BLOB type. The only BLOB types currently defined are PUBLICKEYBLOB, PRIVATEKEYBLOB, SIMPLEBLOB, and PLAINTEXTBLOB. Other key BLOB types will be defined as needed. </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.PUBLICKEYSTRUC.bVersion">
            <summary>Version number of the key BLOB format. This currently must always have a value of CUR_BLOB_VERSION (0x02).</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.PUBLICKEYSTRUC.reserved">
            <summary>WORD reserved for future use. Must be set to zero.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.PUBLICKEYSTRUC.aiKeyAlg">
            <summary>Algorithm identifier for the key contained by the key BLOB. Some examples are CALG_RSA_SIGN, CALG_RSA_KEYX, CALG_RC2, and CALG_RC4.</summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCipherSuite">
            <summary>
            Enumeration of cipher-suites available.
            </summary>
            <remarks>
            The value <c>SECURE_CIPHERS</c> combines all ciphers of 128 bits or more.  Other combinations
            may be created by ORing values together as follows:
            <code>
            	SSLFTPCipherSuite.RSA_RC4_40_MD5 | SSLFTPCipherSuite.RSA_RC2_40_MD5
            </code>
            </remarks>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCipherSuite.NONE">
            <summary>No encryption or compression.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCipherSuite.RSA_RC4_40_MD5">
            <summary>RC4 encryption with a 40 bit key and an MD5 hash.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCipherSuite.RSA_RC4_128_MD5">
            <summary>RC4 encryption with a 128 bit key and an MD5 hash.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCipherSuite.RSA_RC4_128_SHA">
            <summary>RC4 encryption with a 128 bit key and a SHA1 hash.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCipherSuite.RSA_RC2_40_MD5">
            <summary>RC2 encryption with a 40 bit key and an MD5 hash.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCipherSuite.RSA_DES_56_SHA">
            <summary>DES encryption with a 56 bit key and a SHA1 hash.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCipherSuite.RSA_3DES_168_SHA">
            <summary>Triple DES encryption with a 168 bit key and a SHA1 hash.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCipherSuite.RSA_DES_40_SHA">
            <summary>DES encryption with a 40 bit key and a SHA1 hash.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCipherSuite.RSA_AES_128_SHA">
            <summary>AES encryption with a 128 bit key and a SHA1 hash.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCipherSuite.RSA_AES_256_SHA">
            <summary>AES encryption with a 256 bit key and a SHA1 hash.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCipherSuite.SECURE_CIPHERS">
            <summary>
            Cipher Suites that are currently considered secure (i.e. all 128+ bit suites). 
            As a convenience, this value also specifies NULL compression.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCipherSuite.ALL">
            <summary>All encryption and compression algorithms.</summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.SiteCommand">
            <summary>  Site command
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.4 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Pro.ProFTPCipherSuite">
            <summary>
            Enumeration of cipher-suites available in edtFTPnet/PRO.
            </summary>
            <remarks>
            The value <c>SECURE_CIPHERS</c> combines all ciphers of 128 bits or more.  Other combinations
            may be created by ORing values together as follows:
            <code>
            	ProFTPCipherSuite.RSA_RC4_40_MD5 | ProFTPCipherSuite.RSA_RC2_40_MD5
            </code>
            </remarks>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPCipherSuite.NONE">
            <summary>No encryption or compression.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPCipherSuite.RSA_RC4_40_MD5">
            <summary>RC4 encryption with a 40 bit key and an MD5 hash.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPCipherSuite.RSA_RC4_128_MD5">
            <summary>RC4 encryption with a 128 bit key and an MD5 hash.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPCipherSuite.RSA_RC4_128_SHA">
            <summary>RC4 encryption with a 128 bit key and a SHA1 hash.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPCipherSuite.RSA_RC2_40_MD5">
            <summary>RC2 encryption with a 40 bit key and an MD5 hash.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPCipherSuite.RSA_DES_56_SHA">
            <summary>DES encryption with a 56 bit key and a SHA1 hash.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPCipherSuite.RSA_3DES_168_SHA">
            <summary>Triple DES encryption with a 168 bit key and a SHA1 hash.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPCipherSuite.RSA_DES_40_SHA">
            <summary>DES encryption with a 40 bit key and a SHA1 hash.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPCipherSuite.RSA_AES_128_SHA">
            <summary>AES encryption with a 128 bit key and a SHA1 hash.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPCipherSuite.RSA_AES_256_SHA">
            <summary>AES encryption with a 256 bit key and a SHA1 hash.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPCipherSuite.SECURE_CIPHERS">
            <summary>
            Cipher Suites that are currently considered secure (i.e. all 128+ bit suites). 
            As a convenience, this value also specifies NULL compression.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPCipherSuite.ALL">
            <summary>All encryption and compression algorithms.</summary>
        </member>
        <member name="T:EnterpriseDT.Util.Debug.LogLevel">
            <summary>
            Enumeration specifying logging levels.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.LogLevel.Off">
            <summary>No logging</summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.LogLevel.Fatal">
            <summary>Fatal error messages only</summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.LogLevel.Error">
            <summary>Error messages</summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.LogLevel.Warning">
            <summary>Warning and erorr messages</summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.LogLevel.Information">
            <summary>Information, warning and error messages</summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.LogLevel.Debug">
            <summary>Debugging, information, warning, and error messages</summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.LogLevel.All">
            <summary>All logging</summary>
        </member>
        <member name="T:EnterpriseDT.Util.Debug.LogLevelHelper">
            <summary>
            Helper for compact frameworks, which doesn't have 
            Enum.Parse()
            </summary>
        </member>
        <member name="T:EnterpriseDT.Util.Debug.Level">
            <summary>  
            Simple debug level class. Uses the same interface (but
            not implementation) as log4net, so that the debug
            classes could be easily replaced by log4net 
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.8 $
            </version>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.Level.OFF">
            <summary> Off level</summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.Level.FATAL">
            <summary> Fatal level</summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.Level.ERROR">
            <summary> OFF level</summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.Level.WARN">
            <summary> Warn level</summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.Level.INFO">
            <summary> Info level</summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.Level.DEBUG">
            <summary> Debug level</summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.Level.ALL">
            <summary> All level</summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.Level.level">
            <summary> The level's integer value</summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.Level.levelStr">
            <summary> The level's string representation</summary>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Level.#ctor(EnterpriseDT.Util.Debug.LogLevel,System.String)">
            <summary> 
            Private constructor so no-one outside the class can
            create any more instances
            </summary>
            <param name="level">    level to set this instance at
            </param>
            <param name="levelStr">   string representation
            </param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Level.GetLevel">
            <summary> 
            Get integer log level
            </summary>
            <returns> log level
            </returns>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Level.IsGreaterOrEqual(EnterpriseDT.Util.Debug.Level)">
            <summary> 
            Is this level greater or equal to the supplied level
            </summary>
            <param name="l">     level to test against
            </param>
            <returns>  true if greater or equal to, false if less than
            </returns>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Level.GetLevel(System.String)">
            <summary> 
            Get level from supplied string
            </summary>
            <param name="level">level as a string
            </param>
            <returns> level object or null if not found
            </returns>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Level.GetLevel(EnterpriseDT.Util.Debug.LogLevel)">
            <summary>
            Converts a <see cref="T:EnterpriseDT.Util.Debug.LogLevel"/> enum to a <c>Level</c> object.
            </summary>
            <param name="level"><see cref="T:EnterpriseDT.Util.Debug.LogLevel"/> enum to convert.</param>
            <returns>A <c>Level</c> object corresponding to the given LogLevel.</returns>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Level.ToString">
            <summary> 
            String representation
            </summary>
            <returns> string
            </returns>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Spreadsheets.CellFeed">
            <summary>
            Feed API customization class for defining a Cells feed.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.CellFeed.#ctor(System.Uri,EnterpriseDT.Google.GData.Client.IService)">
            <summary>
            Constructor
            </summary>
            <param name="uriBase">The uri for this cells feed.</param>
            <param name="iService">The Spreadsheets service.</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.CellFeed.SkipNode(System.Xml.XmlNode)">
            <summary>checks if this is a namespace 
            decl that we already added</summary> 
            <param name="node">XmlNode to check</param>
            <returns>true if this node should be skipped </returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.CellFeed.CreateFeedEntry">
            <summary>
            creates our cellfeed type entry
            </summary>
            <returns>AtomEntry</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.CellFeed.CellUri(System.UInt32,System.UInt32)">
            <summary>
            returns an update URI for a given row/column combination
            in general that URI is based on the feeds POST feed plus the
            cell address in RnCn notation:
            https://spreadsheets.google.com/feeds/cells/key/worksheetId/private/full/cell
            </summary>
            <param name="row"></param>
            <param name="column"></param>
            <returns>string</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.CellFeed.Delete(System.UInt32,System.UInt32)">
            <summary>
            deletes a cell by using row and column addressing
            </summary>
            <param name="row"></param>
            <param name="column"></param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.CellFeed.Publish">
            <summary>uses GData batch to batchupdate the cell feed. If the returned
            batch result set contained an error, it will throw a GDataRequestBatchException</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Spreadsheets.CellFeed.RowCount">
            <summary>
            The number of rows in this cell feed, as a RowCountElement
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Spreadsheets.CellFeed.ColCount">
            <summary>
            The number of columns in this cell feed, as a ColCountElement
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Spreadsheets.CellFeed.Item(System.UInt32,System.UInt32)">
            <summary>
            returns the given CellEntry object. Note that the getter will go to the server
            to get CellEntries that are NOT yet on the client
            </summary>
            <returns>CellEntry</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Pro.ProFTPValidateEventArgs">
            <summary>
            Arguments passed during a <c>ProFTPClient.Validate</c> event.
            </summary>
            <remarks>
            The only property of <c>ProFTPValidateEventArgs</c> is <c>IsValid</c>.
            Before the event-handler(s) are executed, it contains the systems judgment of the
            validity of the certificate.  The event-handler may then set it to whatever
            value that it calculates.  If, upon completion of all event-handlers, the
            value is <c>true</c> then the certificate will be accepted, otherwise it
            will be rejected.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPValidateEventArgs.IsValid">
            <summary>
            Indicates whether the certificate is valid or invalid.
            </summary>
            <remarks>
            Before the event-handler(s) are executed, it contains the system's judgment of the
            validity of the certificate.  The event-handler may then set it to whatever
            value that it calculates.  If, upon completion of all event-handlers, the
            value if <c>true</c> then the certificate will be accepted, otherwise it
            will be rejected.
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Pro.ProFTPValidateEventHandler">
            <summary>
            Event-handler for <c>ProFTPClient.Validate</c> event.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Pro.ProFTPClient">
             <summary>
             Provides low-level access to edtFTPnet/PRO's FTP/FTPS functionality.
             </summary>
             <remarks>
             <p>
             OBSOLETE. Use <see cref="T:EnterpriseDT.Net.Ftp.SecureFTPConnection"/> for FTP/FTPS/SFTP functionality. 
             For low-level access to FTP/FTPS you can also use <see cref="T:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient"/>. 
             For low-level access to SFTP you can also use <see cref="T:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient"/>.
             </p>
             <p>
             <c>ProFTPClient</c> supports SOCKS (4, 4A, and 5) and FTPS (implicit and explicit).
             </p>
             <p>
             <b>FTPS</b>: ProFTPClient supports standard FTP and the two types of FTPS, explicit and implicit.  The
             default is explicit FTPS.  The type may be selected using the <see cref="P:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.IsImplicitFTPS"/> flag.
             </p>
             <p>
             <b>Explicit FTPS:</b> The FTP client connects
             in plain (non-SSL) mode and operates in this mode until the <c>AUTH</c> command is
             issued by means of the <c>&gt;Auth(string)</c> method.  This will cause
             the client and server to negotiate an SSL connection.  Once complete, all
             commands sent from the client to the server, and their corresponding replies
             will be secure.  
             <example>This example shows a simple explicit FTPS session.
             <code>
               // create an explicit FTPS client
               ProFTPClient ftp = new ProFTPClient();
               ftp.RemoteHost = "192.168.10.123";
            
               // Turn off server validation (ONLY do this when testing)
               ftp.ServerValidation = ProFTPClient.ServerValidationType.None;
             
               // connect to the server
               ftp.Connect();                        
            
               // switch to secure command channel
               ftp.Auth(ProFTPClient.AUTH_TLS);
            
               // log in
               ftp.Login("test", "test");
            
               // get a file
               ftp.Get("file.txt", "file.txt");
            
               // close the connection
               ftp.Quit();
             </code>
             </example>
             </p>
             <p>
             This example uses no client authentication and does not attempt to verify
             server certificates (which should always be done in production systems).
             </p>
             <p>
             <b>Implicit FTPS</b> is an older form of FTPS which uses pure SSL connection,
             i.e. SSL sessions are established immediately upon socket connection for all
             FTP channels.
             <example>This example shows a simple implicit FTPS session:
             <code>
               // create an implicit FTPS client
               ProFTPClient ftp = new ProFTPClient();
               ftp.RemoteHost = "192.168.10.123";
            
               // Turn off server validation (ONLY do this when testing)
               ftp.ServerValidation = ProFTPClient.ServerValidationType.None;
               
               // Select implicit FTPS
               ftp.IsImplicitFTPS = true;
             
               // connect to the server
               ftp.Connect();                        
            
               // log in
               ftp.Login("test", "test");
            
               // get a file
               ftp.Get("file.txt", "file.txt");
            
               // close the connection
               ftp.Quit();
             </code>
             </example>
             </p>
             <p>
             Like the previous example, this example uses no client authentication 
             and does not attempt to verify server certificates (which should 
             be done in production systems).
             </p>
             <p>  
             <b>SSL Certificates - Server Validation:</b>
             The examples above used no server validation.  This is only normally 
             acceptable only when testing.  To be secure applications should always 
             validate the server that they're communicating with.  If the 
             <see cref="P:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.ServerValidation"/> property is set to <c>ServerValidationType.Automatic</c>
             or <c>ServerValidationType.AutomaticIgnoreHostName</c> then 
             <c>ProFTPClient</c> will attempt to validate the server's certificate.  In 
             explicit FTPS this occurs when the <c>Auth(SecurityMechanism)</c> method is invoked, whereas
             in implicit FTPS, it occurs upon connection.  Windows Internet security services
             are used to validate the certificate.  This means that one of the following must
             be true
             <list type="number">
             <item>
             <term>CA certificate</term>
             <description>The server's certificate must have been issued by a CA 
             (Certificate Authority) whose certificate is in the Windows certificate store.</description>
             </item>
             <item>
             <term>Non-CA certificate</term>
             <description>The server's certificate must be in the Windows certificate store.
             A certificate may be installed on the system using the <i>Internet Properties</i>
             settings, which may be accessed from the Windows <i>Control Panel</i>.
             </description>
             </item>
             </list>
             </p>
             <p>  
             <b>SSL Certificates - Client Validation:</b>
             Some FTPS servers require a client certificate to be presented at the time security
             information is exchanged.  To enable this feature you must set the
             <see cref="P:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.ClientCertificate"/> property.  Certificates may be loaded using a range of
             static methods in <see cref="T:EnterpriseDT.Net.Ftp.Pro.ProFTPCertificate"/>.
             </p>
             <p><b>Server Compatibility:</b>
             The most severe barrier to server compatilibilty is the lack of FTPS support on the
             server.  Most FTP servers can be configured to support FTPS, but some only support
             SFTP (SSH File Transfer Protocol), which in fact is not FTP in the conventional sense.
             SFTP is not supported by <c>ProFTPClient</c>.
             </p>
             <p>
             The second most common server incompatibility problem is caused by differing level
             of adherence to the standard for how SSL/TLS sockets should be closed.  By default
             ProFTPClient will attempt to close sockets in the standards-compliant way.  While 
             this is the most secure, it occasionally will cause hanging as it waits for a
             response from the client which never arrives.  The <see cref="P:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.ServerCompatibility"/>
             property is provided for controlling this behaviour.  If you experience hanging
             when a data-transfer is complete then you should first try 
             <c>CompatilibityFlags.DisableDataSSLWaitOnClose</c> and, if the problem
             still occurs, <c>CompatilibityFlags.DisableDataSSLClosure</c>.
             If you experience hanging
             as you close your secure FTP session then you should first try 
             <c>CompatilibityFlags.DisableControlSSLWaitOnClose</c> and, if the problem
             still occurs, <c>CompatilibityFlags.DisableControlSSLClosure</c>.
             </p>
             <p>
             <b>Cipher-Suites:</b> A cipher-suite is a set of algorithms that is used for
             various aspects of SSL security.  For a client and a server to be able to communicate,
             they must be able to agree on a particular cipher-suite.  Different types of 
             servers recognize different cipher-suites, so it is usually up to the client make 
             sure that it shares at least one cipher-suite with the server that it is trying
             to communicate securely with.  By itself, this fact would imply that the client should 
             simply enable all possible suites in order to increase the chances of overlap.  
             However, this is not necessarily wise since some cipher-suites, esp. those which 
             adhered to the (now defunct) US export restriction,s are relatively easy to break, 
             whereas some others are trusted as currently being virtually unbreakable.
             </p>
             <p>
             This library supports many cipher-suites (see {@link SSLFTPCipherSuite})
             so it should be possible to find a suitable cipher-suite in most cases.  Cipher-suites
             are configured on the client using the <c>disableAllCipherSuites()</c>,
             <c>enableCipherSuite(SSLFTPCipherSuite)</c>, and <c>getEnabledCipherSuites()</c>
             methods.
             </p>
             <p>
             <b>SOCKS:</b> SOCKS may be used for FTPing through firewalls.  For this to be possible
             a SOCKS proxy must be available, and a user account must be set up on that proxy.
             <c>ProFTPClient</c> supports all the popular versions of SOCKS - 4, 4A, and 5.
             </p>
             <p>
             The SOCKS features are controlled entirely through the <see cref="P:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.SocksContext"/>
             property.  If it is <c>null</c> (the default) then SOCKS is not used.  To use SOCKS,
             the property must be set to an instance of <c>Socks4Context</c> or <c>Socks5Context</c>.
             For example, for SOCKS4:
             </p>
             <code>
            		myFTPClient.SocksContext = new Socks4Context("192.168.0.2", 1080, "marvin23");
             </code>
             and for SOCKS5:
             <code>
            		Socks5Context socksContext = new Socks5Context("192.168.0.2", 1080);
            		socksContext.AuthMethods.Add(new Socks5NoAuthMethod());
            		socksContext.AuthMethods.Add(new Socks5UserNamePasswordAuthMethod("marvin23", "m31erk"));
            		myFTPClient.SocksContext = socksContext;
             </code>
             </remarks>
             <author>Hans Andersen</author>
             <version>$Revision: 1.42 $</version>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.PROT_CLEAR">
            <summary>
            May be passed to the <code>prot(char)</code> method to specify that data-transfers 
            should be done WITHOUT security.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.PROT_PRIVATE">
            <summary>
            May be passed to the <code>prot(char)</code> method to specify that 
            data-transfers should be done WITH security.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.rops">
            <summary>  
            Helper class for performing recursive ops
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.detectTransferMode">
            <summary>  
            Do we detect transfer mode when transferring files?
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.key">
            <summary> Licence key</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.owner">
            <summary> Owner of software</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.#ctor">
            <summary>  
            Default constructor.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.Connect">
            <summary>
            Connects to the FTP server.
            </summary>
            <remarks>
            <p>
            The <see cref="P:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.RemoteHost"/> property must be set before this method is called.
            </p>
            <p>Note that for explicit FTP <b>communications will not be secure</b> until the 
            <c>Auth()</c> method is called.
            </p>
            <p>
            Implicit FTPS communications are secure from the outset, usually requiring no 
            extra action by the client.  Some servers, however may require <c>Auth()</c>
            (no arguments) to be called.
            </p>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.Quit">
            <summary>Quit the FTP session by sending a <c>QUIT</c> command before closing the socket.</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.Auth">
            <summary>
            (Implicit FTPS only) Instructs the server that data-channels should be secure.
            </summary>
            <remarks>
            Although most implicit FTPS servers secure data-channels by default, thus 
            removing the need for this method, some do not.  These server require that 
            this method be called to ensure that data-channels are secure.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.Auth(EnterpriseDT.Net.Ftp.Pro.ProFTPClient.SecurityMechanism)">
            <summary>
            Switches the control-channel (the connection which carries commands)
            to secure mode.
            </summary>
            <remarks>
            If this command succeeds, then all subsequent
            commands and their corresponding replies will be secure.  The client will also
            switch to private (i.e. secure) data channels immediately after a connection 
            is made.  It does this by invoking <c>Pbsz(0)</c> and <c>Prot(DataProtectionType.Private)</c>.
            </remarks>
            <param name="securityMechanism"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.Auth(EnterpriseDT.Net.Ftp.Pro.ProFTPClient.SecurityMechanism,System.Boolean)">
            <summary>
            Switches the control-channel (the connection which carries commands)
            to secure mode.
            </summary>
            <remarks>
            If this command succeeds, then all subsequent
            commands and their corresponding replies will be secure.  
            If <c>secureDataChannels</c> is <c>true</c> thenthe client will also
            switch to private (i.e. secure) data channels immediately after a connection 
            is made.  It does this by invoking <code>Pbsz(0)</code> and 
            <code>Prot(ProFTPClient.DataProtectionType.Private)</code>.
            </remarks>
            <param name="securityMechanism">Security mechanism to use</param>
            <param name="secureDataChannels">Flag instructing whether or not to
            secure the data-channels.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.Prot(EnterpriseDT.Net.Ftp.Pro.ProFTPClient.DataProtectionType)">
            <summary>
            Defines the security-level of subsequent data-transfers.
            </summary>
            <remarks>
            One of the <c>Auth()</c> methods must be called prior to calling
            this method.  In most cases, calling <c>Auth()</c> will also implicitly
            cause this method to be called, so it's usually unnecessary to call this
            method explicitly.
            </remarks>
            <param name="protectionType">Protection type - either <see cref="F:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.DataProtectionType.Clear"/> 
            or <see cref="F:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.DataProtectionType.Private"/>.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.Pbsz(System.Int32)">
            <summary>
            Defines the buffer-size to be used on data-connections.
            </summary>
            <remarks>
            <p>
            In conformity with the standard, this method must be <code>0</code> (zero).  
            Note that this method is required only to conform with the standard.
            </p>
            <p>
            One of the <c>Auth()</c> methods must be called prior to calling
            this method.  In most cases, calling <c>Auth()</c> will also implicitly
            cause this method to be called, so it's usually unnecessary to call this
            method explicitly.
            </p>
            </remarks>
            <param name="bufferSize">Buffer-size to use (must be zero).</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.MultipleDelete(System.String)">
            <summary>
            Delete multiple files in the current remote directory
            </summary>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <remarks>Wildcard characters supported are '?' and '*'</remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.MultipleDelete(EnterpriseDT.Net.Ftp.FileFilter)">
            <summary>
            Delete multiple files in the current remote directory
            </summary>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.MultipleDelete(System.String,System.String,System.Boolean)">
            <summary>
            Delete multiple files in the current remote directory and its subdirectories.
            </summary>
            <param name="remoteDir">remote directory to delete</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="recurse">if true, recurse down into subdirectories</param>
            <remarks>Wildcard characters supported are '?' and '*'. Subdirectories are not deleted</remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.MultipleDelete(System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary>
            Delete multiple files in the current remote directory and its subdirectories.
            </summary>
            <param name="remoteDir">remote directory to delete</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="recurse">if true, recurse down into subdirectories</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.MultipleDeleteDirectories(System.String)">
            <summary>
            Remove a remote directory, and all its files and its subdirectories
            </summary>
            <param name="remoteDir">the remote directory's name</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.MultiplePut(System.String,System.String)">
            <summary>
            Put multiple files from the specified local directory into the current remote directory
            </summary>
            <param name="localDir">local directory to get files from</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.MultiplePut(System.String,EnterpriseDT.Net.Ftp.FileFilter)">
            <summary>
            Put multiple files from the specified local directory into the current remote directory
            </summary>
            <param name="localDir">local directory to get files from</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.MultiplePut(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Put multiple files from the specified local directory into the specified remote directory
            </summary>
            <remarks>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories
            </remarks>
            <param name="localDir">local directory name</param>
            <param name="remoteDir">remote directory name</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="recurse">if true, subdirectories are put</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.MultiplePut(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary>
            Put multiple files from the specified local directory into the specified remote directory
            </summary>
            <remarks>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories
            </remarks>
            <param name="localDir">local directory name</param>
            <param name="remoteDir">remote directory name</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="recurse">if true, subdirectories are put</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.MultipleGet(System.String,System.String)">
            <summary>
            Get multiple files into the specified local directory from the current remote directory
            </summary>
            <param name="localDir">local directory to get files into</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.MultipleGet(System.String,EnterpriseDT.Net.Ftp.FileFilter)">
            <summary>
            Get multiple files into the specified local directory from the current remote directory
            </summary>
            <param name="localDir">local directory to get files into</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.MultipleGet(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Get multiple files from the specified remote directory into the specified local directory
            </summary>
            <remarks>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories
            </remarks>
            <param name="localDir">local directory name</param>
            <param name="remoteDir">remote directory name</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="recurse">if true, subdirectories are put</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.MultipleGet(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary>
            Get multiple files from the specified remote directory into the specified local directory
            </summary>
            <remarks>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories
            </remarks>
            <param name="localDir">local directory name</param>
            <param name="remoteDir">remote directory name</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="recurse">if true, subdirectories are put</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.Unlock(System.String,System.String)">
            <summary>
            Unlock the software for use. This method should be used when
            a configuration file isn't available
            </summary>
            <param name="owner">owner string</param>
            <param name="key">license key</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.CheckLicense">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.RemoteHost">
            <summary>  
            Get/set the name of the remote host.
            </summary>
            <remarks>
            Can only be set if not currently connected.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.CountBeforeSleep">
            <summary>
            Number of transfers before going to sleep
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.SleepEnabled">
            <summary>
            Enabling or not of sleeping after a certain number of transfers
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.SleepTime">
            <summary>
            Number of seconds spent asleep
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.DetectTransferMode">
            <summary>
            If set to true, the transfer mode in operations involving multiple files is 
            automatically changed between ASCII and binary as appropriate.
            </summary>
            <remarks>
            <see cref="M:EnterpriseDT.Net.Ftp.FileTypes.RegisterExtension(System.String)"/> for how to register a file extension as ASCII, and
            <see cref="T:EnterpriseDT.Net.Ftp.FileTypes"/> for how to obtain the current registered extensions
            </remarks> 
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.ServerCompatibility">
            <summary>
            Controls various server security compatibility features.
            </summary>
            <remarks>
            <p>
            The most severe barrier to server compatilibilty is the lack of FTPS support on the
            server.  Most FTP servers can be configured to support FTPS, but some only support
            SFTP (SSH File Transfer Protocol), which in fact is not FTP in the conventional sense.
            SFTP is not supported by <c>ProFTPClient</c>.
            </p>
            <p>
            The second most common server incompatibility problem is caused by differing level
            of adherence to the standard for how SSL/TLS sockets should be closed.  By default
            ProFTPClient will attempt to close sockets in the standard-compliant way.  While 
            this is the most secure, it occasionally will cause hanging as it waits for a
            response from the client which never arrives.  The <see cref="P:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.ServerCompatibility"/>
            property is provided for controlling this behaviour.  If you experience hanging
            when a data-transfer is complete then you should first try 
            <c>CompatilibityFlags.DisableDataSSLWaitOnClose</c> and, if the problem
            still occurs, <c>CompatilibityFlags.DisableDataSSLClosure</c>.
            If you experience hanging
            as you close your secure FTP session then you should first try 
            <c>CompatilibityFlags.DisableControlSSLWaitOnClose</c> and, if the problem
            still occurs, <c>CompatilibityFlags.DisableControlSSLClosure</c>.
            </p>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.ClientCertificate">
            <summary>
            The certificate to be presented to the server.
            </summary>
            <remarks>
            If a server requires client validation then this property must be set.
            <see cref="T:EnterpriseDT.Net.Ftp.Pro.ProFTPCertificate"/>s are created using one of the static
            <c>ProFTPCertificate.CreateFrom...</c> methods, which read a private key
            and a certificate from files.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.ServerCertificate">
            <summary>
            The certificate presented by the server.
            </summary>
            <remarks>
            During the negotiation of a secure connection, the server presents a 
            certificate which may be accessed using this property.  The property
            may not be accessed until a secure connection has been made.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.IsControlChannelSecure">
            <summary>
            Indicates whether the control channel is currently secure.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.IsImplicitFTPS">
            <summary>
            Controls/indicates whether this client is performing explicit or implicit FTPS.
            </summary>
            <value><c>true</c> if the client is performing implicit FTPS.  
            <c>false</c> is the default.</value>
            <remarks>
            <p>
            Implicit FTPS is an older form of FTPS which uses pure SSL connection,
            i.e. SSL sessions are established immediately upon socket connection for all
            FTP channels.
            </p>
            <p>
            This property may be read any time, but may be set only prior to connection.
            </p>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.ServerValidation">
            <summary>
            Controls the way in which server certificates are validated.
            </summary>
            <remarks>
            When an SSL/TLS connection is being negotiated, the FTP server will present an
            SSL certificate to the client.  <see cref="T:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.ServerValidationType"/>s are used to
            control what the client does with this certificate.  
            The default is <see cref="F:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.ServerValidationType.Automatic"/>.
            </remarks>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.ServerValidate">
            <summary>
            Server validation event.
            </summary>
            <remarks>
            This event occurs when a server certificate requires validation.
            In the event-handler, the <see cref="P:EnterpriseDT.Net.Ftp.Pro.ProFTPValidateEventArgs.IsValid">IsValid</see> 
            property of the <see cref="T:EnterpriseDT.Net.Ftp.Pro.ProFTPValidateEventArgs"/> should be set to indicate whether or
            not the server certificate should be accepted.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.CipherSuites">
            <summary>
            Get/sets the cipher-suites permissible during establishment of a secure
            connection.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.ServerCommonName">
            <summary>
            The name to be used when performing a name-check during 
            the validation of the server certificate.
            </summary>
            <remarks>
            An important part of validating the certificate is to perform
            a <i>name-check</i>.  In a name-check the <i>Common Name</i> on the certificate is
            compared with the host-name of the FTP server that we believe we are connected
            to.  Unless this property is set explicitly, the Common Name is assumed to be
            the same as the host-name that is used to connect to the server.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.RootCertificates">
            <summary>
            Returns an array containing all root certificates.
            </summary>
            <remarks>
            <p>
            If <see cref="P:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.ServerValidation"/> is set to <see cref="F:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.ServerValidationType.Automatic"/> or 
            <see cref="F:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.ServerValidationType.AutomaticNoNameCheck"/> then the system will attempt to validate the server's
            certificate.  For a certificate to be validated it must either (1) be installed as a
            root certificate, or (2) the base of the chain of certificates that it contains must
            be a root certificate.
            </p>
            <p>
            <b>Root Certificates</b> work through "Chains of Trust".  In other
            words, if X trusts Y, and Y trusts Z, then X can trust Z.  In this case, X is
            the user of the FTP-client, Y is a Certification Authority (CA), and Z is the
            FTP server.  So, in order for the FTP-client to be able to trust the
            FTP-server, the server should have a certificate issued by a CA, and the client
            should have the CA's certificate loaded as a root certificate.  
            When a client connects to a server,
            the server will provide the client with its certificate.  This certificate will
            contain a copy of the CA's certificate and contain data which certifies
            that the server's certificate could only have been issued by this CA.  The 
            client can now match the CA's certificate with the root certificates that it holds 
            and then deduce whether or not the server is trustworthy.  Client certificates
            work similarly, but in reverse to the above description.
            </p>
            <p>
            <b>Installing certificates:</b> 
            A certificate may be installed on the system using the <i>Internet Properties</i>
            settings, which may be accessed from the Windows <i>Control Panel</i>.
            </p>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.SocksContext">
            <summary>
            Controls SOCKS integration.
            </summary>
            <remarks>
            <p>
            SOCKS may be used for FTPing through firewalls.  For this to be possible
            a SOCKS proxy must be available, and a user account must be set up on that proxy.
            <c>ProFTPClient</c> supports all the popular versions of SOCKS - 4, 4A, and 5.
            </p>
            <p>
            The SOCKS features are controlled entirely through the <see cref="P:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.SocksContext"/>
            property.  If it is <c>null</c> (the default) then SOCKS is not used.  To use SOCKS,
            the property must be set to an instance of <c>Socks4Context</c> or <c>Socks5Context</c>.
            For example, for SOCKS4:
            </p>
            <code>
            	myFTPClient.SocksContext = new Socks4Context("192.168.0.2", 1080, "marvin23");
            </code>
            and for SOCKS5:
            <code>
            	Socks5Context socksContext = new Socks5Context("192.168.0.2", 1080);
            	socksContext.AuthMethods.Add(new Socks5NoAuthMethod());
            	socksContext.AuthMethods.Add(new Socks5UserNamePasswordAuthMethod("marvin23", "m31erk"));
            	myFTPClient.SocksContext = socksContext;
            </code>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.LicenseOwner">
            <summary>
            The license owner string.
            </summary>
            <remarks>
            The license owner must be set for the software to function correctly past the trial period.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.LicenseKey">
            <summary>
            The license key string.
            </summary>
            <remarks>
            The license key must be set for the software to function correctly past the trial period.
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.CompatibilityFlags">
            <summary>Flags that control compatibilty with different servers</summary>
            <remarks>
            <p>
            A common server incompatibility problem is caused by differing level
            of adherence to the standard for how SSL/TLS sockets should be closed.  By default
            ProFTPClient will attempt to close sockets in the standard-compliant way.  While 
            this is the most secure, it occasionally will cause hanging as it waits for a
            response from the client which never arrives.  The <see cref="P:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.ServerCompatibility"/>
            property is provided for controlling this behaviour.  If you experience hanging
            when a data-transfer is complete then you should first try 
            <c>CompatilibityFlags.DisableDataSSLWaitOnClose</c> and, if the problem
            still occurs, <c>CompatilibityFlags.DisableDataSSLClosure</c>.
            If you experience hanging
            as you close your secure FTP session then you should first try 
            <c>CompatilibityFlags.DisableControlSSLWaitOnClose</c> and, if the problem
            still occurs, <c>CompatilibityFlags.DisableControlSSLClosure</c>.
            </p>
            <p>
            Note that when SSL/TLS closure exchanges are disabled, socket connections are
            shut down abruptly.  This has the effect of leaving the server unsure of the
            reason for the closure.  In particular it cannot be sure that it wasn't a third
            party who somehow shut down the connection in what is called a "truncation attack".
            Such attacks are rare and would often either be obvious or not very dangerous, 
            so disabling SSL/TLS closure is often safe to do.  They do not imply that the 
            attacker has obtained access to the data.
            </p>
            </remarks>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.CompatibilityFlags.DisableControlSSLClosure">
            <summary>Disables the SSL/TSL closure exchange on the control channel.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.CompatibilityFlags.DisableDataSSLClosure">
            <summary>Disables the SSL/TSL closure exchange on data channels.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.CompatibilityFlags.DisableControlWaitOnClose">
            <summary>Prevents the client from waiting for a reply to the SSL/TLS closure command on the control channel.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.CompatibilityFlags.DisableDataWaitOnClose">
            <summary>Prevents the client from waiting for a reply to the SSL/TLS closure command on the data channel.</summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.ServerValidationType">
            <summary>
            Controls the way in which server certificates are validated.
            </summary>
            <remarks>
            When an SSL/TLS connection is being negotiated, the FTP server will present an
            SSL certificate to the client.  <see cref="T:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.ServerValidationType"/>s are used to
            control what the client does with this certificate.  
            The default is <see cref="F:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.ServerValidationType.Automatic"/>.
            </remarks>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.ServerValidationType.None">
            <summary>Accepts the certificate unconditionally.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.ServerValidationType.Callback">
            <summary>
            Triggers the <see cref="E:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.ServerValidate"/> event which may be used to 
            perform manual checks on the certificate.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.ServerValidationType.Automatic">
            <summary>
            <p>
            Uses Operating System resources to validate the certificate.  On Windows
            the installed certificates are used for this purpose.  These certificates
            may be managed on the <i>Contents</i> tab of the <i>Internet Options</i> 
            control panel.  
            </p>
            <p>
            Note that an important part of validating the certificate is to perform
            a <i>name-check</i>.  In a name-check the <i>Common Name</i> on the certificate is
            compared with the host-name of the FTP server that we believe we are connected
            to.  The Common Name to be used for name-checking is assumed to be the
            same as the host-name that was used upon connection, though it may be set
            manually using the <see cref="P:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.ServerCommonName"/>.
            </p>
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.ServerValidationType.AutomaticNoNameCheck">
            <summary>
            Same as <see cref="F:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.ServerValidationType.Automatic"/> but without name-checking.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.SecurityMechanism">
            <summary>
            Enumeration of available security mechanisms.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.SecurityMechanism.TLS">
            <summary>Transport Layer Security version 1 - the latest incarnation of SSL.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.SecurityMechanism.SSL">
            <summary>Secure Sockets Layer version 3.</summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.DataProtectionType">
            <summary>
            Enumeration of available data-channel protections.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.DataProtectionType.Clear">
            <summary>No security.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPClient.DataProtectionType.Private">
            <summary>Full security.</summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.BaseIsDirty">
            <summary>Helper object to walk the tree for the dirty flag.</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.BaseIsDirty.Go(EnterpriseDT.Google.GData.Client.AtomBase)">
            <summary>Walker action. Just gets a property.</summary> 
            <param name="atom">object to set the property on</param>
            <returns>the value of the dirty flag</returns>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.BaseMarkDirty">
            <summary>Helper object to walk the tree for the dirty flag.</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.BaseMarkDirty.flag">
            <summary>Holds if set/unset to dirty.</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.BaseMarkDirty.#ctor(System.Boolean)">
            <summary>Constructor.</summary> 
            <param name="flag">indicates the value to pass </param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.BaseMarkDirty.Go(EnterpriseDT.Google.GData.Client.AtomBase)">
            <summary>Walker action. Just sets a property.</summary> 
            <param name="atom">object to set the property on </param>
            <returns> always false, indicating to walk the whole tree</returns>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.ChangeVersion">
            <summary>Helper to walk the tree and set the versioninformation</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.ChangeVersion.#ctor(EnterpriseDT.Google.GData.Client.IVersionAware)">
            <summary>Constructor.</summary> 
            <param name="v">the versioninformation to pass </param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.ChangeVersion.Go(EnterpriseDT.Google.GData.Client.AtomBase)">
            <summary>Walker action. Just sets a property.</summary> 
            <param name="atom">object to set the property on </param>
            <returns> always false, indicating to walk the whole tree</returns>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.BaseIsPersistable">
            <summary>Helper class, mainly used to walk the tree for the dirty flag.</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.BaseIsPersistable.Go(EnterpriseDT.Google.GData.Client.AtomBase)">
            <summary>Walker action. Just gets a property.</summary> 
            <param name="atom">object to set the property on </param>
            <returns>returns the value of the ShouldBePersisted() of the object</returns>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Reminder">
             <summary>
             GData schema extension describing a reminder on an event.
             </summary>
             <remarks>
             <para>You can represent a set of reminders where each has a (1) reminder
             period and (2) notification method.  The method can be either "sms",
             "email", "alert", "none", "all".</para>
            
             <para>The meaning of this set of reminders differs based on whether you
             are reading or writing feeds.  When reading, the set of reminders
             returned on an event takes into account both defaults on a
             parent recurring event (when applicable) as well as the user's
             defaults on calendar.  If there are no gd:reminders returned that
             means the event has absolutely no reminders.  "none" or "all" will
             not apply in this case.</para>
            
             <para>Writing is different because we have to be backwards-compatible
             (see *) with the old way of setting reminders.  For easier analysis
             we describe all the behaviors defined in the table below.  (Notice
             we only include cases for minutes, as the other cases specified in
             terms of days/hours/absoluteTime can be converted to this case.)</para>
            
             <para>Notice method is case-sensitive: must be in lowercase!</para>
            
             <list type="table">
                 <listheader>
                     <term></term>
                     <term>No method or method=all</term>
                     <term>method=none</term>
                     <term>method=email|sms|alert</term>
                 </listheader>
                 <item>
                     <term>No gd:rem</term>
                     <term>*No reminder</term>
                     <term>N/A</term>
                     <term>N/A</term>
                 </item>
                 <item>
                     <term>1 gd:rem</term>
                     <term>*Use user's default settings</term>
                     <term>No reminder</term>
                     <term>InvalidEntryException</term>
                 </item>
                 <item>
                     <term>1 gd:rem min=0</term>    
                     <term>*Use user's default settings</term>
                     <term>No reminder</term>
                     <term>InvalidEntryException</term>
                 </item>
                 <item>
                     <term>1 gd:rem min=-1</term>
                     <term>*No reminder</term>
                     <term>No reminder</term>
                     <term>InvalidEntryException</term>
                 </item>
                 <item>
                     <term>1 gd:rem min=+n</term>
                     <term>*Override with no +n for user's selected methods</term>
                     <term>No reminder</term>
                     <term>Set exactly one reminder on event at +n with given method</term>
                 </item>
                 <item>
                     <term>Multiple gd:rem</term>
                     <term>InvalidEntryException</term>
                     <term>InvalidEntryException</term>
                     <term>Copy this set exactly</term>
                 </item>
             </list>
             
             <para>Hence, to override an event with a set of reminder time, method
             pairs, just specify them exactly.  To clear an event of all
             overrides (and go back to inheriting the user's defaults), one can
             simply specify a single gd:reminder with no extra attributes.  To
             have NO event reminders on an event, either set a single
             gd:reminder with negative reminder time, or simply update the event
             with a single gd:reminder method=none.</para>
             </remarks>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Reminder.days">
            <summary>
            Number of days before the event.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Reminder.hours">
            <summary>
            Number of hours.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Reminder.minutes">
            <summary>
            Number of minutes.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Reminder.absoluteTime">
            <summary>
            Absolute time of the reminder.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Reminder.method">
            <summary>
            holds the method type
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Reminder.CreateInstance(System.Xml.XmlNode,EnterpriseDT.Google.GData.Client.AtomFeedParser)">
            <summary>Parses an xml node to create a Reminder object.</summary> 
            <param name="node">the node to parse node</param>
            <param name="parser">the xml parser to use if we need to dive deeper</param>
            <returns>the created Reminder object</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Extensions.Reminder.Save(System.Xml.XmlWriter)">
            <summary>
            Persistence method for the Reminder  object
            </summary>
            <param name="writer">the xmlwriter to write into</param>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Reminder.Method">
            <summary>accessor method public Method Method</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Reminder.Days">
            <summary>accessor method public Days</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Reminder.Hours">
            <summary>accessor method public Hours</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Reminder.Minutes">
            <summary>accessor method public Minutes</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Reminder.AbsoluteTime">
            <summary>accessor method public absoluteTime</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Reminder.XmlName">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Reminder.XmlNameSpace">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Extensions.Reminder.XmlPrefix">
            <summary>Returns the constant representing this XML element.</summary> 
        </member>
        <member name="T:EnterpriseDT.Google.GData.Extensions.Reminder.ReminderMethod">
            <summary>
            the different reminder methods available
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Reminder.ReminderMethod.alert">
            <summary>
            visible alert
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Reminder.ReminderMethod.all">
            <summary>
            all alerts
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Reminder.ReminderMethod.email">
            <summary>
            alert per email
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Reminder.ReminderMethod.none">
            <summary>
            no aert
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Reminder.ReminderMethod.sms">
            <summary>
            alert per SMS
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Extensions.Reminder.ReminderMethod.unspecified">
            <summary>
            no alert specified (invalid)
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SFTPMessageStore">
            <summary>
            Temporary store for SFTP messages that have been sent from the server to
            the client
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SFTPMessageStore.log">
            <summary> Logging object</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPMessageStore.AddMessage(EnterpriseDT.Net.Ftp.Ssh.SFTPMessage)">
            <summary>
            Add a message to the store
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPMessageStore.SetException(System.Exception)">
            <summary>
            Sets an exception that should be thrown in GetMessage
            </summary>
            <param name="ex">exception</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPMessageStore.GetMessageAsync(System.Int32)">
            <summary>
            Get the message with the supplied request id
            </summary>
            <param name="requestId">request id to match</param>
            <returns>the message</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPMessageStore.GetMessage(System.Int32)">
            <summary>
            Get the message with the supplied request id
            </summary>
            <param name="requestId">request id to match</param>
            <returns>the message</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPMessageStore.Close">
            <summary>
            Close the store
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SFTPMessageStore.State">
            <summary>
            Get the current state of the message store
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SFTPMessageStore.Timeout">
            <summary>
            Get and set the timeout
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.AuthSubUtil">
            <summary>helper class for communications between a 3rd party site and Google using the AuthSub protocol
            </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AuthSubUtil.getRequestUrl(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>Creates the request URL to be used to retrieve an AuthSub 
            token. On success, the user will be redirected to the continue URL 
            with the AuthSub token appended to the URL.
            Use getTokenFromReply(String) to retrieve the token from the reply.
            </summary> 
            <param name="continueUrl">the URL to redirect to on successful 
            token retrieval</param>
            <param name="scope">the scope of the requested AuthSub token</param>
            <param name="secure">if the token will be used securely</param>
            <param name="session"> if the token will be exchanged for a
             session cookie</param>
            <returns>the URL to be used to retrieve the AuthSub token</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AuthSubUtil.getRequestUrl(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>Creates the request URL to be used to retrieve an AuthSub 
            token. On success, the user will be redirected to the continue URL 
            with the AuthSub token appended to the URL.
            Use getTokenFromReply(String) to retrieve the token from the reply.
            </summary> 
            <param name="hostedDomain">the name of the hosted domain, 
            like www.myexample.com</param>
            <param name="continueUrl">the URL to redirect to on successful 
            token retrieval</param>
            <param name="scope">the scope of the requested AuthSub token</param>
            <param name="secure">if the token will be used securely</param>
            <param name="session"> if the token will be exchanged for a
             session cookie</param>
            <returns>the URL to be used to retrieve the AuthSub token</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AuthSubUtil.getRequestUrl(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>Creates the request URL to be used to retrieve an AuthSub 
            token. On success, the user will be redirected to the continue URL 
            with the AuthSub token appended to the URL.
            Use getTokenFromReply(String) to retrieve the token from the reply.
            </summary> 
            <param name="protocol">the protocol to use to communicate with the 
            server</param>
            <param name="authenticationDomain">the domain at which the authentication server 
            exists</param>
            <param name="continueUrl">the URL to redirect to on successful 
            token retrieval</param>
            <param name="scope">the scope of the requested AuthSub token</param>
            <param name="secure">if the token will be used securely</param>
            <param name="session"> if the token will be exchanged for a
             session cookie</param>
            <returns>the URL to be used to retrieve the AuthSub token</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AuthSubUtil.getRequestUrl(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>Creates the request URL to be used to retrieve an AuthSub 
            token. On success, the user will be redirected to the continue URL 
            with the AuthSub token appended to the URL.
            Use getTokenFromReply(String) to retrieve the token from the reply.
            </summary> 
            <param name="protocol">the protocol to use to communicate with the 
            server</param>
            <param name="authenticationDomain">the domain at which the authentication server 
            exists</param>
            <param name="handler">the location of the authentication handler
             (defaults to "/accounts/AuthSubRequest".</param>
            <param name="continueUrl">the URL to redirect to on successful 
            token retrieval</param>
            <param name="scope">the scope of the requested AuthSub token</param>
            <param name="secure">if the token will be used securely</param>
            <param name="session"> if the token will be exchanged for a
             session cookie</param>
            <returns>the URL to be used to retrieve the AuthSub token</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AuthSubUtil.getRequestUrl(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>Creates the request URL to be used to retrieve an AuthSub 
            token. On success, the user will be redirected to the continue URL 
            with the AuthSub token appended to the URL.
            Use getTokenFromReply(String) to retrieve the token from the reply.
            </summary> 
            <param name="hostedDomain">the name of the hosted domain, 
            like www.myexample.com</param>
            <param name="protocol">the protocol to use to communicate with the 
            server</param>
            <param name="authenticationDomain">the domain at which the authentication server 
            exists</param>
            <param name="handler">the location of the authentication handler
             (defaults to "/accounts/AuthSubRequest".</param>
            <param name="continueUrl">the URL to redirect to on successful 
            token retrieval</param>
            <param name="scope">the scope of the requested AuthSub token</param>
            <param name="secure">if the token will be used securely</param>
            <param name="session"> if the token will be exchanged for a
             session cookie</param>
            <returns>the URL to be used to retrieve the AuthSub token</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AuthSubUtil.addParameter(System.Text.StringBuilder,System.String,System.String)">
            <summary> 
            Adds the query parameter with the given name and value to the URL.
            </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AuthSubUtil.getSessionTokenUrl">
            <summary>
            Returns the URL to use to exchange the one-time-use token for
             a session token.
            </summary> 
            <returns>the URL to exchange for the session token</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AuthSubUtil.getSessionTokenUrl(System.String,System.String)">
            <summary>
            Returns the URL to use to exchange the one-time-use token for
             a session token.
            </summary> 
            <param name="protocol">the protocol to use to communicate with
            the server</param>
            <param name="domain">the domain at which the authentication server 
            exists</param>
            <returns>the URL to exchange for the session token</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AuthSubUtil.getRevokeTokenUrl">
            <summary>
            Returns the URL that handles token revocation, using the default
            domain and the default protocol
            </summary> 
            <returns>the URL to exchange for the session token</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AuthSubUtil.getRevokeTokenUrl(System.String,System.String)">
            <summary>
            Returns the URL that handles token revocation.
            </summary> 
            <param name="protocol">the protocol to use to communicate with
            the server</param>
            <param name="domain">the domain at which the authentication server 
            exists</param>
            <returns>the URL to exchange for the session token</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AuthSubUtil.getTokenFromReply(System.Uri)">
            <summary>
             Parses and returns the AuthSub token returned by Google on a successful
             AuthSub login request.  The token will be appended as a query parameter
            to the continue URL specified while making the AuthSub request.
            </summary> 
            <param name="uri">The reply URI to parse </param>
            <returns>the token value of the URI, or null if none </returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AuthSubUtil.exchangeForSessionToken(System.String,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Exchanges the one time use token returned in the URL for a session
            token. If the key is non-null, the token will be used securely, 
            and the request will be signed
            </summary> 
            <param name="onetimeUseToken">the token send by google in the URL</param>
            <param name="key">the private key used to sign</param>
            <returns>the session token</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AuthSubUtil.exchangeForSessionToken(System.String,System.String,System.String,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
            Exchanges the one time use token returned in the URL for a session
            token. If the key is non-null, the token will be used securely, 
            and the request will be signed
            </summary> 
            <param name="protocol">the protocol to use to communicate with the 
            server</param>
            <param name="domain">the domain at which the authentication server 
            exists</param>
            <param name="onetimeUseToken">the token send by google in the URL</param>
            <param name="key">the private key used to sign</param>
            <returns>the session token</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AuthSubUtil.revokeToken(System.String,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
             Revokes the specified token. If the <code>key</code> is non-null, 
            the token will be used securely and the request to revoke the 
            token will be signed.
            </summary>
            <param name="token">the AuthSub token to revoke</param>
            <param name="key">the private key to sign the request</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AuthSubUtil.revokeToken(System.String,System.String,System.String,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>
             Revokes the specified token. If the <code>key</code> is non-null, 
            the token will be used securely and the request to revoke the 
            token will be signed.
            </summary>
            <param name="protocol"></param>
            <param name="domain"></param>
            <param name="token">the AuthSub token to revoke</param>
            <param name="key">the private key to sign the request</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AuthSubUtil.formAuthorizationHeader(System.String,System.Security.Cryptography.AsymmetricAlgorithm,System.Uri,System.String)">
            <summary>Forms the AuthSub authorization header.
            if key is null, the token will be in insecure mode, otherwise 
            the token will be used securely and the header contains
            a signature
            </summary> 
            <param name="token">the AuthSub token to use </param>
            <param name="key">the private key to used </param>
            <param name="requestUri">the request uri to use </param>
            <param name="requestMethod">the HTTP method to use </param>
            <returns>the authorization header </returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AuthSubUtil.GetTokenInfo(System.String,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>Retrieves information about the AuthSub token. 
            If the <code>key</code> is non-null, the token will be used securely
            and the request to revoke the token will be signed.
            </summary> 
            <param name="token">tthe AuthSub token for which to receive information </param>
            <param name="key">the private key to sign the request</param>
            <returns>the token information in the form of a Dictionary from the name of the
             attribute to the value of the attribute</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AuthSubUtil.GetTokenInfo(System.String,System.String,System.String,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>Retrieves information about the AuthSub token. 
            If the <code>key</code> is non-null, the token will be used securely
            and the request to revoke the token will be signed.
            </summary> 
            <param name="protocol">the protocol to use to communicate with the server</param>
            <param name="domain">the domain at which the authentication server exists</param>
            <param name="token">tthe AuthSub token for which to receive information </param>
            <param name="key">the private key to sign the request</param>
            <returns>the token information in the form of a Dictionary from the name of the
             attribute to the value of the attribute</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AuthSubUtil.generateULONGRnd">
            <summary>creates a max 20 character long string of random numbers</summary>
            <returns> the string containing random numbers</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AuthSubUtil.sign(System.String,System.Security.Cryptography.AsymmetricAlgorithm)">
            <summary>signs the data with the given key</summary>
            <param name="dataToSign">the data to sign </param>
            <param name="key">the private key to used </param>
            <returns> the signed data</returns>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AuthSubUtil.GetTokenInfoUrl(System.String,System.String)">
            <summary>Returns the URL that handles token information call.</summary>
            <param name="protocol">the protocol to use to communicate with the server</param>
            <param name="domain">the domain at which the authentication server exists</param>
            <returns> the URL that handles token information call.</returns>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.AtomPersonConverter">
            <summary>TypeConverter, so that AtomHead shows up in the property pages
            </summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomPersonConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>Standard type converter method</summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomPersonConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>Standard type converter method</summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.AtomPersonType">
            <summary>enum to describe the different person types
            </summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomPersonType.Author">
            <summary>is an author</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomPersonType.Contributor">
            <summary>is an contributor</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomPersonType.Unknown">
            
            <summary>parsing error</summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.AtomPerson">
            <summary>generic Person object, used for the feed and for the entry
            </summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomPerson.name">
            <summary>name holds the Name property as a string</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomPerson.email">
            <summary>email holds the email property as a string</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomPerson.uri">
            <summary>link holds an Uri, representing the link atribute</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomPerson.type">
            <summary>holds  the type for persistence</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomPerson.#ctor">
            <summary>public default constructor, usefull only for property pages</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomPerson.#ctor(EnterpriseDT.Google.GData.Client.AtomPersonType)">
            <summary>Constructor taking a type to indicate whether person is author or contributor.</summary> 
            <param name="type">indicates if author or contributor</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomPerson.#ctor(EnterpriseDT.Google.GData.Client.AtomPersonType,System.String)">
            <summary>Constructor taking a type to indicate whether person is author or contributor, plus the person's name</summary> 
            <param name="type">indicates if author or contributor</param>
            <param name="name">person's name</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomPerson.SaveInnerXml(System.Xml.XmlWriter)">
            <summary>saves the inner state of the element</summary> 
            <param name="writer">the xmlWriter to save into </param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomPerson.ShouldBePersisted">
            <summary>figures out if this object should be persisted</summary> 
            <returns> true, if it's worth saving</returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomPerson.Name">
            <summary>accessor method public string Name</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomPerson.Uri">
            <summary>accessor method public Uri Uri</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomPerson.Email">
            <summary>accessor method public Uri Email</summary> 
            <returns> </returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomPerson.XmlName">
            <summary>Just returns the constant representing this XML element.</summary> 
        </member>
        <member name="T:EnterpriseDT.Google.GData.AccessControl.AclScope">
            <summary>
            GData schema extension describing an account role
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.AccessControl.AclScope.SCOPE_USER">
            <summary>string constant for the user scope</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.AccessControl.AclScope.SCOPE_DOMAIN">
            <summary>string constant for the user scope</summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.AccessControl.AclScope.SCOPE_DEFAULT">
            <summary>string constant for the user scope</summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.AccessControl.AclScope.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.AccessControl.AclScope.#ctor(System.String)">
            <summary>
            default constructor with an init value
            </summary>
            <param name="initValue"></param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.AccessControl.AclScope.#ctor(System.String,System.String)">
            <summary>
            constructor taking an initial value and a name
            </summary>
            <param name="initValue"></param>
            <param name="initName"></param>
        </member>
        <member name="P:EnterpriseDT.Google.GData.AccessControl.AclScope.Type">
            <summary>accessor method public string Type</summary> 
            <returns> </returns>
        </member>
        <member name="T:EnterpriseDT.Util.ShortOpt">
            <summary> 
            Represents a short option (i.e. consisting of one letter)
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.4 $
            
            </version>
        </member>
        <member name="F:EnterpriseDT.Util.ShortOpt.maybeArgument">
            <summary> True if there might be an argument
            </summary>
        </member>
        <member name="F:EnterpriseDT.Util.ShortOpt.requiresArgument">
            <summary> True if there must be an argument
            </summary>
        </member>
        <member name="F:EnterpriseDT.Util.ShortOpt.unknown">
            <summary> True if this option is unknown
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.ShortOpt.#ctor(System.Char,System.Boolean,System.Boolean)">
            <summary> Constructor
            
            </summary>
            <param name="letter">            option letter
            </param>
            <param name="maybeArgument">     possible argument
            </param>
            <param name="requiresArgument">  argument required
            
            </param>
        </member>
        <member name="P:EnterpriseDT.Util.ShortOpt.Letter">
            <summary> Get the option character
            
            </summary>
            <returns> option character
            
            </returns>
        </member>
        <member name="P:EnterpriseDT.Util.ShortOpt.Unknown">
            <summary> Get unknown status of this option
            
            </summary>
            <returns>  true if unknown, false if known
            
            </returns>
        </member>
        <member name="P:EnterpriseDT.Util.ShortOpt.MaybeArgument">
            <returns> true if an argument may be used
            
            </returns>
        </member>
        <member name="P:EnterpriseDT.Util.ShortOpt.RequiresArgument">
            <returns> true if argument is required
            
            </returns>
        </member>
        <member name="T:EnterpriseDT.Util.GetOpt">
             <summary>  
             C# equivalent of Unix getopt().
             </summary>
             <remarks>
             Only partially implemented, just
             enough so it is useful internally.
             
             Short option are of the form -a -b -c or equivalently
             -abc for options with no arguments, or -a foo -b foo
             for arguments, or even -afoo -bfoo. 
             
             Arguments may be optional or required. If optional, they must
             be supplied as -afoo rather than -a foo. 
             
             The options are specified by a string containing each option char.
             If a character is followed by a single colon, then that option has a required 
             argument. If the character is followed by two colons, then that option has an 
             argument that is not required. No colon means no argument.
            </remarks>
             <author>       Bruce Blackshaw
             </author>
             <version>      $Revision: 1.4 $
             
             </version>
        </member>
        <member name="M:EnterpriseDT.Util.GetOpt.#ctor(System.String,System.String[],System.String)">
            <summary>Constructor</summary>
            <param name="program">name of program</param>
            <param name="args">argument list</param>
            <param name="options">option string</param>
            <param name="options">marker (default is '-')</param>
        </member>
        <member name="M:EnterpriseDT.Util.GetOpt.#ctor(System.String,System.String[],System.Int32,System.String)">
            <summary>Constructor</summary>
            <param name="program">name of program</param>
            <param name="args">argument list</param>
            <param name="firstarg">index of first argument</param>
            <param name="options">option string</param>
        </member>
        <member name="M:EnterpriseDT.Util.GetOpt.#ctor(System.String,System.String[],System.Int32,System.String,System.Char)">
            <summary>Constructor</summary>
            <param name="program">name of program</param>
            <param name="args">argument list</param>
            <param name="options">option string</param>
            <param name="optionMarker">marker (default is '-')</param>
        </member>
        <member name="M:EnterpriseDT.Util.GetOpt.ReadOptions(System.String)">
            <summary> Read the specified options.
            
            </summary>
            <param name="opts">  options string
            
            </param>
        </member>
        <member name="M:EnterpriseDT.Util.GetOpt.Getopt">
            <summary> Get the next option character
            
            </summary>
            <returns> next option character, or -1 if all done
            
            </returns>
        </member>
        <member name="M:EnterpriseDT.Util.GetOpt.PrintError(System.String)">
            <summary> Print error message if opterr enabled
            
            </summary>
            <param name="msg"> message to print
            
            </param>
        </member>
        <member name="P:EnterpriseDT.Util.GetOpt.OptArg">
            <summary> Get the current option's argument
            
            </summary>
            <returns>  argument for option
            
            </returns>
        </member>
        <member name="P:EnterpriseDT.Util.GetOpt.Program">
            <summary> Get the program name
            
            </summary>
            <returns> program name
            
            </returns>
        </member>
        <member name="P:EnterpriseDT.Util.GetOpt.Options">
            <summary> Get the options configuration string
            
            </summary>
            <returns> options string
            
            </returns>
        </member>
        <member name="P:EnterpriseDT.Util.GetOpt.ErrorMessages">
            <summary> Get the error messages
            
            </summary>
            <returns> string
            
            </returns>
        </member>
        <member name="P:EnterpriseDT.Util.GetOpt.Opterr">
            <summary> Set to false if error messages should be
            supressed
            
            </summary>
            <param name="opterr"> state to set opterr to 
            
            </param>
        </member>
        <member name="T:EnterpriseDT.Util.ToStringDelegate">
            <summary>INTERNAL</summary>
            <param name="obj">INTERNAL</param>
            <returns>INTERNAL</returns>
        </member>
        <member name="T:EnterpriseDT.Util.PrettyName">
            <summary>INTERNAL</summary>
        </member>
        <member name="M:EnterpriseDT.Util.PrettyName.GetPrettyName(System.String)">
            <summary>
            INTERNAL
            </summary>
            <param name="rawName">INTERNAL</param>
            <returns>INTERNAL</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PrettyName.GetPrettyName(System.String,System.Boolean)">
            <summary>
            INTERNAL
            </summary>
            <param name="rawName">INTERNAL</param>
            <param name="allowConsecutiveCaps">INTERNAL</param>
            <returns>INTERNAL</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PrettyName.AllUpperCase(System.String)">
            <summary>
            INTERNAL
            </summary>
            <param name="rawName">INTERNAL</param>
            <returns>INTERNAL</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PrettyName.RemoveReservedChars(System.String,System.String)">
            <summary>
            INTERNAL
            </summary>
            <param name="rawName">INTERNAL</param>
            <param name="reservedChars">INTERNAL</param>
            <returns>INTERNAL</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PrettyName.RemoveNonAlphaNumChars(System.String)">
            <summary>
            INTERNAL
            </summary>
            <param name="rawName">INTERNAL</param>
            <returns>INTERNAL</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PrettyName.RemoveNonAlphaNumChars(System.String,System.String)">
            <summary>
            INTERNAL
            </summary>
            <param name="rawName">INTERNAL</param>
            <param name="additionalAllowedChars">INTERNAL</param>
            <returns>INTERNAL</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.AuthCommand">
            <summary>  
            Auth command. Can only be called for a plain FTP connection.
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.4 $
            
            </version>
        </member>
        <member name="M:EnterpriseDT.Google.GData.AccessControl.Acl.EnsureInnerObject">
            <summary>
            creates the inner contact object when needed
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.AccessControl.Acl.AclEntry">
            <summary>
            readonly accessor for the AclEntry that is underneath this object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ssh.Routrek.SSHC.KeyExchangeMethod">
            <summary>
            Available key exchange methods
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.KeyExchangeMethod.DiffieHellmanGroup1Sha1">
            <summary>Diffie-Hellman group 1 sha-1</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.KeyExchangeMethod.DiffieHellmanGroup14Sha1">
            <summary>Diffie-Hellman group 14 sha-1</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.KeyExchangeMethod.DiffieHellmanGroupExchangeSha1">
            <summary>Diffie-Hellman group exchange sha-1</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.KeyExchangeMethod.DiffieHellmanGroupExchangeSha256">
            <summary>Diffie-Hellman group exchange sha-256</summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ssh.Routrek.SSHC.PublicKeyAlgorithm">
            <summary>
            Available public key algorithms for authentication
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.PublicKeyAlgorithm.DSA">
            <summary>DSA public key algorithm</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.PublicKeyAlgorithm.RSA">
            <summary>RSA public key algorithm</summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ssh.Routrek.SSHC.CipherAlgorithm">
            <summary>
            Available cipher algorithms for packet encryption
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.CipherAlgorithm.TripleDES">
            <summary>Triple DES encryption</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.CipherAlgorithm.Blowfish">
            <summary>Blowfish encryption</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.CipherAlgorithm.AES128">
            <summary>AES (128 bit) encryption</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.CipherAlgorithm.AES192">
            <summary>AES (192 bit) encryption</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.CipherAlgorithm.AES256">
            <summary>AES (256 bit) encryption</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.CipherAlgorithm.AES_CTR_128">
            <summary>AES (128 bit) encryption CTR mode</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.CipherAlgorithm.AES_CTR_192">
            <summary>AES (192 bit) encryption CTR mode</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.CipherAlgorithm.AES_CTR_256">
            <summary>AES (256 bit) encryption CTR mode</summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ssh.Routrek.SSHC.CompressionAlgorithm">
            <summary>
            Available compression algorithms
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.CompressionAlgorithm.None">
            <summary>No compression</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.CompressionAlgorithm.Zlib">
            <summary>Zlib compression</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.MACAlgorithm.HMAC_SHA1">
            <summary>hmac-sha1</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.MACAlgorithm.HMAC_MD5">
            <summary>hmac-md5</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.MACAlgorithm.HMAC_SHA1_96">
            <summary>hmac-md5-96</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.MACAlgorithm.HMAC_MD5_96">
            <summary>hmac-md5-96</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.MACAlgorithm.HMAC_SHA2_256">
            <summary>hmac-sha2-256</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.MACAlgorithm.HMAC_SHA2_512">
            <summary>hmac-sha2-512</summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView">
            <summary>
            Helps users synchronize a directory on an FTP server with one on the local machine.
            </summary>
            <remarks>
            <para><c>FTPSynchronizeView</c> presents the user with a comparison of the files in the current
            working directory on the server (<see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.ServerDirectory"/>) with those in
            the working directory on the local machine (<see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.LocalDirectory"/>).</para>
            
            <para>Files are matched by name with optional case-sensitivity (see <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.IgnoreCase"/>). 
            The comparison is presented in the form a <see cref="T:System.Windows.Forms.ListView"/> with one row for each matching pair
            of files and with columns showing the names, dates, size of these files, as well as a description 
            of how their dates and sizes compare, and a what action would be required to synchronize them.</para>
            
            <para>A check-box is displayed next to each file, which allows the user to determine whether or
            not the suggested action should be performed.  A synchronize button is displayed in the top-right 
            corner (by default).  When it is pressed all of the checked actions will be performed.</para>
            
            <para><c>FTPSynchronizeView</c> is highly customizable.  The following table shows different
            ways of controlling the file comparisons:
            <list type="table">
              <listheader>
                <term>Behavior</term>
                <description>Properties</description>
              </listheader>
              <item>
                <term>Transfer direction</term>
                <description><see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.Direction"/> determines whether files are to be uploaded or downloaded.</description>
              </item>
              <item>
                <term>Case sensitivity</term>
                <description><see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.IgnoreCase"/></description>
              </item>
              <item>
                <term>File-name filtering</term>
                <description><see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.FileNameFilter"/>, <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.FilterType"/> 
                  and <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.ExcludeFilesInFilter"/></description>
              </item>
              <item>
                <term>Date comparison</term>
                <description><see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.IgnoreDate"/></description>
              </item>
              <item>
                <term>New/existing files</term>
                <description><see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.TransferNewOnly"/> and <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.TransferMatchingOnly"/> control
                whether only new files (i.e. ones not present on the target side) are displayed or whether
                only existing files (i.e. ones that exist on both sides) are displayed, respectively.  By
                default both of these flags are off meaning that all files displayed.</description>
              </item>
              <item>
                <term>File deletion</term>
                <description><see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.DeleteIfSourceAbsent"/> controls whether or not files on the "target"
                side of the comparison will be deleted if they are not present on the "source" side.  For example,
                if the transfer direction is set to upload and a file with a particular name is present on the
                server but there is no file with a matching name on the local machine then the suggested
                action will be to delete the file on the server.</description>
              </item>
              <item>
                <term>Real-time updating</term>
                <description>If <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.RealTimeUpdate"/> is <c>true</c> then <c>FTPSynchronizeView</c>
                will handle its FTP connection's directory-change events and automatically update its
                content in response.  If it is <c>false</c> then the list will not be updated until 
                <see cref="M:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.RefreshList"/> is called.</description>
              </item>
              <item>
                <term>Hide files with no recommended action.</term>
                <description><see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.HideNoAction"/></description>
              </item>
            </list>
            </para>
            
            <para>Customized file comparisons may be defined by handling the <see cref="E:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.CompareFiles"/> event,
            which will allow the developer to specify the match-text and the action using their own
            comparison algorithm.</para>
            
            <para>All text that appears in <c>FTPSynchronizeView</c> may be modified through the properties
            of <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.UserMessages"/> and the sub-components exposed through <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.LocalDirLabel"/>,
            <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.LocalDirTextBox"/>, <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.RemoteDirLabel"/>, <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.RemoteDirTextBox"/>,
            <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.DirectionButton"/> and <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.SynchronizeButton"/>.</para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.#ctor">
            <summary>
            Constructs an <c>FTPSynchronizeView</c>.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.GetItemAt(System.Int32,System.Int32)">
            <summary>
            Returns the item at the specified location.
            </summary>
            <param name="x">x-coordinate to check (in client coordinates)</param>
            <param name="y">y-coordinate to check (in client coordinates)</param>
            <returns>The <see cref="T:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeViewItem"/> at the given location.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.GetItemRect(System.Int32)">
            <summary>
            Returns the bounding rectangle of the item with the given index.
            </summary>
            <param name="index">Index of the item.</param>
            <returns>Bounding rectangle of the item with the given index.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.RefreshList">
            <summary>
            Refreshes the items in the list by querying the current directories 
            (i.e. <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.ServerDirectory"/> and <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.LocalDirectory"/>).
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.Synchronize">
            <summary>
            Performs actions for all checked items.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.AddItems(EnterpriseDT.Net.Ftp.FTPFileSyncPair[])">
            <summary>
            Adds the given items to the list.
            </summary>
            <param name="syncPairs">Items to add.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.AddItem(EnterpriseDT.Net.Ftp.FTPFileSyncPair)">
            <summary>
            Adds the given item to the list.
            </summary>
            <param name="syncPair">Item to add.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.GetDefaultAction(EnterpriseDT.Net.Ftp.FTPFile,EnterpriseDT.Net.Ftp.FTPFile)">
            <summary>
            Returns the default action for the given pair of files.
            </summary>
            <remarks>
            Note that this action may be overridden by handlers of the <see cref="E:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.CompareFiles"/> event.
            </remarks>
            <param name="localFile">Local file.</param>
            <param name="remoteFile">Remote file.</param>
            <returns>Action that should be performed to synchronize the two files.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.GetDefaultMatch(EnterpriseDT.Net.Ftp.FTPFile,EnterpriseDT.Net.Ftp.FTPFile)">
            <summary>
            Returns the default match text for the given pair of files.
            </summary>
            <remarks>
            Note that this text may be overridden by handlers of the <see cref="E:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.CompareFiles"/> event.
            </remarks>
            <param name="localFile">Local file.</param>
            <param name="remoteFile">Remote file.</param>
            <returns>Text describing how the two files compare.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.LinkComponent(EnterpriseDT.Net.Ftp.IFTPComponent)">
            <summary>
            Called by the given FTP component when it is added to a container.
            </summary>
            <remarks>
            This method allows FTP components to interlink themselves automatically.
            </remarks>
            <param name="component">FTP component just added to the container.</param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.BackgroundImage">
            <summary>
            Gets or sets the background image displayed in the control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.CheckBoxes">
            <summary>
            Gets or sets a value indicating whether a check box appears next to 
            each item in the control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.DateFormat">
            <summary>
            Format of all dates displayed.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.FullRowSelect">
            <summary>
            Get or set the property that determines whether full rows are selectable (true) or just the file-name (false).
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.GridLines">
            <summary>
            Gets or sets a value indicating whether grid lines appear between the 
            rows and columns containing the items and subitems in the control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.ListBackColor">
            <summary>
            Gets or sets the background color for the control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.Text">
            <summary>
            Gets or sets the text associated with this control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.Activation">
            <summary>
            Gets or sets the type of action the user must take to activate an item.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.AllowColumnReorder">
            <summary>
            Get or set the property that determines whether or not the user is allowed to reorder columns.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.AllowDrop">
            <summary>
            Indicates whether the user can transfer files using drag-and-drop operations.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.Connection">
            <summary>
            Get or set the FTP connection object to use for FTP operations.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.HeaderStyle">
            <summary>
            Gets or sets the column header style.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.HideSelection">
            <summary>
            Gets or sets a value indicating whether the selected item in 
            the control remains highlighted when the control loses focus.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.HoverSelection">
            <summary>
            Gets or sets a value indicating whether an item is automatically selected when the 
            mouse pointer remains over the item for a few seconds.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.MultiSelect">
            <summary>
            Get or set the property that determines whether or not multiple 
            files may be selected.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.Scrollable">
            <summary>
            Get or set the property that determines whether or not scroll-bars will be displayed.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.SelectedIndices">
            <summary>
            Gets the indexes of the selected items in the control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.ShowControlPanel">
            <summary>
            Controls visibility of the panel containing the directory text-boxes, and direction 
            and synchronization buttons.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.ShowDirectionButton">
            <summary>
            Controls visibility of the direction button.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.ShowSynchronizeButton">
            <summary>
            Controls visibility of the synchronize button.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.Sorting">
            <summary>
            Gets or sets the sort order for items in the control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.UserMessages">
            <summary>
            Get the messages displayed to users.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.Direction">
            <summary>
            Controls the direction of synchronization.
            </summary>
            <remarks>
            <c>FTPSynchronizeView</c> only works in one direction at a time, although the user can
            instantly switch directions by clicking the direction button.  The <c>Direction</c>
            property may be used to control the direction programmatically.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.IgnoreCase">
            <summary>
            Determines whether or not case is ignored when matching file-names.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.ExcludeFilesInFilter">
            <summary>
            Controls whether the filter is an inclusion-filter or an exclusion-filter.
            </summary>
            <remarks>If <c>ExcludeFilesInFilter</c> is false (the default) then only the files
            that match the filter (if there is one) will be displayed.  Otherwise only those
            that don't match it will be displayed.</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.FilterType">
            <summary>
            Controls whether the <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.FileNameFilter"/> should be interpreted as a wildcard string
            or a regular expression.
            </summary>
            <remarks>
            Wildcard strings use a DOS-like notation where <c>?</c> matches any single character and 
            <c>*</c> matches multiple characters.  Regular expressions are of the kind used in 
            <see cref="T:System.Text.RegularExpressions.Regex"/>.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.FileNameFilter">
            <summary>
            File-name filter that controls which files are displayed.
            </summary>
            <remarks>
            <c>FileNameFilter</c> may contain multiple strings separated by commas.  Each string
            may be a regular expression (as defined by <see cref="T:System.Text.RegularExpressions.Regex"/>)
            or a wildcard string (where <c>?</c> matches any single character and <c>*</c> matches 
            multiple characters).  The type of filter (wildcard or regular expression) may be chosen via the
            <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.FilterType"/> property.  The filter may be used to exclude or include files; this
            behavior is selected via the <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.ExcludeFilesInFilter"/> property.  By default files in
            the filter are included.  If no filter is defined then all files will be considered.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.IgnoreDate">
            <summary>
            Controls whether or not dates are taken into consideration when performing file comparisons.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.TransferNewOnly">
            <summary>
            If <c>TransferNewOnly</c> is set then only files that do not exist on the target file-system 
            will be considered.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.TransferMatchingOnly">
            <summary>
            If <c>TransferMatchingOnly</c> is set then only files that exist both on the source and target
            file-systems will be considered.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.DeleteIfSourceAbsent">
            <summary>
            When set, this flag will advise that if a file exists on the target but not on the source then
            that file should be deleted.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.RealTimeUpdate">
            <summary>
            Causes <c>FTPSynchronizeView</c> to be updated automatically when its FTP connection notified of changes.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.HideNoAction">
            <summary>
            Prevents files which are up-to-date to be excluded from the list.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.SyncLocalDateAfterDownload">
            <summary>
            When set, this flag will cause the control to set the date of the local file
            to be the same as the remote file after the file has been downloaded.  This
            property only has an effect when real-time mode is enabled.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.ColumnFileName">
            <summary>
            File-name column.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.ColumnMatch">
            <summary>
            Match column.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.ColumnAction">
            <summary>
            Action column.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.ColumnLocalDate">
            <summary>
            Local date column.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.ColumnRemoteDate">
            <summary>
            Remote date column.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.ColumnLocalSize">
            <summary>
            Local size column.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.ColumnRemoteSize">
            <summary>
            Remote size column.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.LocalDirLabel">
            <summary>
            Label next to the local directory.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.LocalDirTextBox">
            <summary>
            Text-box which displays the local directory.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.RemoteDirLabel">
            <summary>
            Label next to the remote directory.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.RemoteDirTextBox">
            <summary>
            Text-box which displays the remote directory.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.DirectionButton">
            <summary>
            Button which controls the direction.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.SynchronizeButton">
            <summary>
            Button which triggers synchronization.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.CheckedIndices">
            <summary>
            Gets the indexes of the currently checked items in the control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.CheckedItems">
            <summary>
            Gets the currently checked items in the control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.Columns">
            <summary>
            Columns shown in file-list.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.Items">
            <summary>
            Items currently displayed in the list.  Each item is a <see cref="T:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView"/>.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.ListViewItemSorter">
            <summary>
            Gets or sets the sorting comparer for the control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.TopItem">
            <summary>
            Gets the first visible item in the control.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "E:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.CompareFiles" -->
        <member name="E:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.Synchronizing">
            <summary>
            Occurs immediately before synchronization is about to begin.
            </summary>
            <remarks>
            This is a "cancelable" event.  To cancel synchronization, set the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> property
            to <c>true</c> in the event handler.
            </remarks>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.Synchronized">
            <summary>
            Occurs when synchronization is complete.
            </summary>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.ItemClick">
            <summary>
            Occurs when an item in the list is clicked.
            </summary>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.SelectedIndexChanged">
            <summary>
            Occurs when the selected index has been changed.
            </summary>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.ItemCheck">
            <summary>
            Occurs when the when the check state of an item changes.
            </summary>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.ItemChecked">
            <summary>
            Occurs when the when the checked state of an item changes.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.Messages">
            <summary>
            Defines the messages that can be presented to a user by <c>FTPSynchronizeView</c>.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.Messages.TextLocalMissing">
            <summary>
            Text indicating that there is no local file with the same name as the remote file.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.Messages.TextRemoteMissing">
            <summary>
            Text indicating that there is no remote file with the same name as the local file.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.Messages.TextRemoteNewer">
            <summary>
            Text indicating that the remote file with the same name is was modified more recently than the local file.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.Messages.TextLocalNewer">
            <summary>
            Text indicating that the local file with the same name is was modified more recently than the remote file.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.Messages.TextLocalBigger">
            <summary>
            Text indicating that the local file with the same name is bigger than the remote file.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.Messages.TextRemoteBigger">
            <summary>
            Text indicating that the remote file with the same name is bigger than the local file.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.Messages.TextSameSizeDate">
            <summary>
            Text indicating that the remote file with the same name has the same size and date as the local file.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.Messages.TextActionNone">
            <summary>
            Text indicating that no action is required to synchronize a given file-pair.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.Messages.TextActionDownload">
            <summary>
            Text indicating that the remote file should be downloaded in order for a file-pair to be synchronized.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.Messages.TextActionUpload">
            <summary>
            Text indicating that the local file should be uploaded in order for a file-pair to be synchronized.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.Messages.TextActionDelete">
            <summary>
            Text indicating that the target file should be deleted in order for a file-pair to be synchronized.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeViewItem">
            <summary>
            Represents an item in the <see cref="T:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView"/> list.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeViewItem.Match">
            <summary>
            Brief textual description of how the two files compare.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeViewItem.Action">
            <summary>
            Action required to synchronize the files.
            </summary>
            <remarks>
            <para>Note <c>Action</c> is set to its default values before the event is
            triggered so it is not set in the handler then the default value will be used.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeViewItem.SyncPair">
            <summary>
            Represents the pair of files (one local and one remote) to which the item relates.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Forms.FTPSyncAction">
            <summary>
            Actions that may be taken in order to synchronize a local file with a remote file.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPSyncAction.None">
            <summary>
            No action required.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPSyncAction.Upload">
            <summary>
            Upload the local file to the server.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPSyncAction.Download">
            <summary>
            Download the remote file from the server.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPSyncAction.Delete">
            <summary>
            Delete the file (either local or remote).
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Forms.FTPCompareEventHandler">
            <summary>
            Delegate for the <see cref="E:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.CompareFiles"/> event.
            </summary>
            <param name="sender">Object which requested the comparison (usually <see cref="T:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView"/>).</param>
            <param name="e">Handlers should set the <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPCompareEventArgs.Match">Match</see> and
            <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPCompareEventArgs.Action">Action</see> properties of this argument.</param>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Forms.FTPCompareEventArgs">
            <summary>
            Provides a reference to a local file (<see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPCompareEventArgs.LocalFile"/>) and a remote file
            (<see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPCompareEventArgs.RemoteFile"/>) and requires <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPCompareEventArgs.Action"/> and <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPCompareEventArgs.Match"/> to
            be set in order to return the result of the file comparison.
            </summary>
            <remarks>
            <para>Handlers of the <see cref="E:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.CompareFiles"/> event should set the 
            <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPCompareEventArgs.Match">Match</see> and
            <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPCompareEventArgs.Action">Action</see> properties in order to indicate the
            result of the comparison.</para>
            
            <para>Note that the <c>Match</c> and <c>Action</c> properties are set to their default values before the event is
            triggered so they are not set in the handler then the default values will be used.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPCompareEventArgs.LocalFile">
            <summary>
            Reference to the local file.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPCompareEventArgs.RemoteFile">
            <summary>
            Reference to the remote file.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPCompareEventArgs.Action">
            <summary>
            Action required to synchronize the files.
            </summary>
            <remarks>
            <para>Note <c>Action</c> is set to its default values before the event is
            triggered so it is not set in the handler then the default value will be used.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPCompareEventArgs.Match">
            <summary>
            Brief textual description of how the two files compare.
            </summary>
            <remarks>
            <para>Note <c>Match</c> is set to its default values before the event is
            triggered so it is not set in the handler then the default value will be used.</para>
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Forms.FTPSyncItemClickEventHandler">
            <summary>
            Delegate for the <see cref="E:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.ItemClick"/> event.
            </summary>
            <param name="sender">Object which triggered the event.</param>
            <param name="e">Contains details regarding the click.</param>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Forms.FTPSyncItemClickEventArgs">
            <summary>
            Contains information regarding an <see cref="E:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.ItemClick"/> event.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSyncItemClickEventArgs.MousePosition">
            <summary>
            Position of the mouse (in client coordinates) when the item was clicked.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSyncItemClickEventArgs.Button">
            <summary>
            Button that was pressed.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSyncItemClickEventArgs.Clicks">
            <summary>
            Number of times the button was pressed.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSyncItemClickEventArgs.Item">
            <summary>
            Item that was clicked.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Cryptography.RC4CryptoServiceProvider">
            <summary>
            Defines a wrapper object to access the cryptographic service provider (CSP) version of the RC4 algorithm. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RC4CryptoServiceProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.RC4CryptoServiceProvider"/> class.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RC4CryptoServiceProvider.GenerateIV">
            <summary>
            This is a stub method.
            </summary>
            <remarks>Since the RC4 cipher doesn't use an Initialization Vector, this method will not do anything.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RC4CryptoServiceProvider.GenerateKey">
            <summary>
            Generates a random Key to be used for the algorithm.
            </summary>
            <remarks>Use this method to generate a random key when none is specified.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RC4CryptoServiceProvider.CreateDecryptor(System.Byte[],System.Byte[])">
            <summary>
            Creates a symmetric decryptor object with the specified Key.
            </summary>
            <param name="rgbKey">The secret key to be used for the symmetric algorithm. </param>
            <param name="rgbIV">Not used in RC4. It can be a null reference or a byte array with a length less than 2.</param>
            <returns>A symmetric decryptor object.</returns>
            <remarks>This method decrypts an encrypted message created using the <see cref="M:EnterpriseDT.Mentalis.Security.Cryptography.RC4CryptoServiceProvider.CreateEncryptor(System.Byte[],System.Byte[])"/> overload with the same parameters.</remarks>
            <exception cref="T:System.ObjectDisposedException">The object is disposed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="rgbKey"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException"></exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RC4CryptoServiceProvider.CreateEncryptor(System.Byte[],System.Byte[])">
            <summary>
            Creates a symmetric encryptor object with the specified Key.
            </summary>
            <param name="rgbKey">The secret key to be used for the symmetric algorithm. </param>
            <param name="rgbIV">Not used in RC4. It can be a null reference or a byte array with a length less than 2.</param>
            <returns>A symmetric encryptor object.</returns>
            <remarks>Use the <see cref="M:EnterpriseDT.Mentalis.Security.Cryptography.RC4CryptoServiceProvider.CreateDecryptor(System.Byte[],System.Byte[])"/> overload with the same parameters to decrypt the result of this method.</remarks>
            <exception cref="T:System.ObjectDisposedException">The object is disposed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="rgbKey"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException"></exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RC4CryptoServiceProvider.CanUseUnmanaged(System.Int32)">
            <summary>
            Returns a boolean that indicates whether the unmanaged CSP can be used or not.
            </summary>
            <param name="keySize">The size of the required key (in bits).</param>
            <returns><b>true</b> if the unmanaged CSP can be used to encrypt and decrypt data, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RC4CryptoServiceProvider.Dispose">
            <summary>
            Releases all managed and unmanaged resources used by this class.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RC4CryptoServiceProvider.Finalize">
            <summary>
            Finalizes the RC4CryptoServiceProvider.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.RC4CryptoServiceProvider.m_Managed">
            <summary>Holds a managed <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.RC4"/> instance.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.RC4CryptoServiceProvider.m_Provider">
            <summary>Handle of the unmanaged RC4 CSP.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.RC4CryptoServiceProvider.m_MinLen">
            <summary>Minimal supported key length by the acquired provider.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.RC4CryptoServiceProvider.m_MaxLen">
            <summary>Maximal supported key length by the acquired provider.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.RC4CryptoServiceProvider.m_Disposed">
            <summary><b>true</b> if the class is disposed, <b>false</b> otherwise.</summary>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RC4CryptoServiceProvider.BlockSize">
            <summary>
            Gets or sets the block size of the cryptographic operation in bits.
            </summary>
            <value>The block size of RC4 is always 8 bits.</value>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The block size is invalid.</exception>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RC4CryptoServiceProvider.FeedbackSize">
            <summary>
            Gets or sets the feedback size of the cryptographic operation in bits.
            </summary>
            <value>This property always throws a <see cref="T:System.Security.Cryptography.CryptographicException"/>.</value>
            <exception cref="T:System.Security.Cryptography.CryptographicException">This exception is always thrown.</exception>
            <remarks>RC4 doesn't use the FeedbackSize property.</remarks>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RC4CryptoServiceProvider.IV">
            <summary>
            Gets or sets the initialization vector (IV) for the symmetric algorithm.
            </summary>
            <value>This property always returns a byte array of length one. The value of the byte in the array is always set to zero.</value>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An attempt is made to set the IV to an invalid instance.</exception>
            <remarks>RC4 doesn't use the IV property, however the property accepts IV's of up to one byte (RC4's <see cref="P:EnterpriseDT.Mentalis.Security.Cryptography.RC4CryptoServiceProvider.BlockSize"/>) in order to interoperate with software that has been written with the use of block ciphers in mind.</remarks>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RC4CryptoServiceProvider.Key">
            <summary>
            Gets or sets the secret key for the symmetric algorithm.
            </summary>
            <value>The secret key to be used for the symmetric algorithm.</value>
            <exception cref="T:System.ArgumentNullException">An attempt is made to set the key to a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RC4CryptoServiceProvider.KeySize">
            <summary>
            Gets or sets the size of the secret key used by the symmetric algorithm in bits.
            </summary>
            <value>The size of the secret key used by the symmetric algorithm.</value>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The key size is not valid.</exception>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RC4CryptoServiceProvider.LegalBlockSizes">
            <summary>
            Gets the block sizes that are supported by the symmetric algorithm.
            </summary>
            <value>An array containing the block sizes supported by the algorithm.</value>
            <remarks>Only a block size of one byte is supported by the RC4 algorithm.</remarks>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RC4CryptoServiceProvider.LegalKeySizes">
            <summary>
            Gets the key sizes that are supported by the symmetric algorithm.
            </summary>
            <value>An array containing the key sizes supported by the algorithm.</value>
            <remarks>Only key sizes that match an entry in this array are supported by the symmetric algorithm.</remarks>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RC4CryptoServiceProvider.Mode">
            <summary>
            Gets or sets the mode for operation of the symmetric algorithm.
            </summary>
            <value>The mode for operation of the symmetric algorithm.</value>
            <remarks>RC4 only supports the OFB cipher mode. See <see cref="T:System.Security.Cryptography.CipherMode"/> for a description of this mode.</remarks>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cipher mode is not OFB.</exception>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RC4CryptoServiceProvider.Padding">
            <summary>
            Gets or sets the padding mode used in the symmetric algorithm.
            </summary>
            <value>The padding mode used in the symmetric algorithm. This property always returns PaddingMode.None.</value>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The padding mode is set to a padding mode other than PaddingMode.None.</exception>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.CdUpCommand">
            <summary>  Description
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.2 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection">
            <summary>
            Main interface to edtFTPnet/PRO's FTP functionality.
            </summary>
            <remarks>
            <p>
            OBSOLETE. Use <see cref="T:EnterpriseDT.Net.Ftp.SecureFTPConnection"/>.
            </p>
            <p>
            A <c>ProFTPConnection</c> object represents a unique connection to an FTP server.
            It offers a broad range of properties and events, as well as a full complement
            of asynchronous methods that are especially helpful for improving the 
            responsiveness of Windows Forms application.
            <c>ProFTPConnection</c> is a .NET component that may be dropped onto a 
            design-surface in an IDE and configured using a property editor or the 
            ProFTPConnection Designer (see below).
            </p>
            <p>
            <b>Connections</b> are not opened until the <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.Connect"/> method is called.
            Connection-, Authentication-, and Security-related properties should be set
            prior to opening the connection.  
            </p>
            <p>
            At a minimum, the following properties must be set prior to connection.
            <list type="table">
              <listheader>
            	<term>Property</term>
            	<term>Description</term>
              </listheader>
              <item>
                <term><see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.ServerAddress"/></term>
                <description>The domain-name or IP-address of the server.</description>
              </item>
              <item>
                <term><see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.UserName"/></term>
                <description>User-name of account on the server.</description>
              </item>
              <item>
                <term><see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.Password"/></term>
                <description>Password of account on the server.</description>
              </item>
            </list>
            </p>
            <p>
            The <b>ProFTPConnection Designer</b> may be used to assist with setting these
            and other properties.
            It allows the developer to test various property-settings interactively without running 
            their application.  The Connection Designer may be accessed by 
            (1) double-clicking on the component, (2) right-clicking on the component and 
            selecting "Connection Designer" from the context menu, or (3) selecting the component
            and then clicking on the "Connection Designer" link at the bottom of the Properties View.
            </p>
            <p>
            The developer may set properties from within the Connection Designer and test them
            by pressing the "Connect" button.  Once connected, transfers may be tested by dragging
            from one file-list to the other.  A command-log and a debug-log is shown at the bottom
            of the window.
            </p>
            <p>
            <b>Secure Transfers</b> are enabled through the Security properties.  At a minimum, 
            the <see cref="P:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.SecureFTPType"/> should be set to <c>FTPSExplicit</c> or 
            <c>FTPSImplicit</c>, representing explicit FTPS and implicit FTPS, respectively.
            The issue of Server Validation must also be addressed.
            </p>
            <p>
            <b>Server Validation</b> is the process of making sure that the server with which
            the client is communicating is indeed the intended server.  While developing code, 
            this process may be disabled by setting <see cref="P:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.ServerValidation"/> to
            <see cref="F:EnterpriseDT.Net.Ftp.Pro.ProFTPServerValidationType.None"/>, which disables server validation, 
            but this should <b>not</b> be done in deployed applications.
            </p>
            <p>
            To achieve server validation, the <see cref="P:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.ServerValidation"/> property may be set to
            <see cref="F:EnterpriseDT.Net.Ftp.Pro.ProFTPServerValidationType.Automatic"/> or 
            <see cref="F:EnterpriseDT.Net.Ftp.Pro.ProFTPServerValidationType.AutomaticNoNameCheck"/> and
            a Certificate that is able to verify the FTP server 
            must be installed on the machine on which the FTP client software is running.  
            This certificate may be either the certificate of the server itself, or the 
            certificate of the Certificate Authority (CA).  edtFTPnet/PRO provides various
            means of installing server certificates:
            <list type="bullet">
            <item>
            <term>Design-Time</term>
            <description>The Certificate Manager GUI may be displayed at design-time by
            (1) right-clicking on the component and 
            selecting "Certificate Manager" from the context menu, or (2) selecting the component
            and then clicking on the "Certificate Manager" link at the bottom of the Properties 
            View.</description>
            </item>
            <item>
            <term>Runtime GUI</term>
            <description>The Certificate Manager GUI may be displayed at runtime by using
            the <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPCertificate.ShowCertificateManager">ProFTPCertificate.ShowCertificateManager</see>
            method.</description>
            </item>
            <item>
            <term>Runtime Programmatic</term>
            <description>Certificates may be imported into the operating system's Certificate Stores
            using the Import methods of <see cref="T:EnterpriseDT.Net.Ftp.Pro.ProFTPCertificate">ProFTPCertificate</see>.</description>
            </item>
            <item>
            <term>Microsoft Management Console (MMC)</term>
            <description>The Microsoft Management Controls (MMC) may be used for managing the
            operating system's certificate stores.</description>
            </item>
            </list>
            </p>
            <p>
            ProFTPConnection supports <b>Asynchronous Operations</b>.  These are particularly
            useful in improving the responsiveness of GUI applications since they allow the
            application to keep processing user input while FTP operations are taking place.
            Asynchronous operations are automatically queued such that, if an asynchronous 
            operation is requested while another is under way, it will 
            automatically be queued to begin once the previous one has completed.
            </p>
            <p>
            Asynchronous operations are supported by means of a large number of
            Begin___() and End___() methods.  Nearly every synchronous method offered in <see cref="T:EnterpriseDT.Net.Ftp.FTPConnection"/>
            and <see cref="T:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection"/> has matching asynchronous operations in the form of
            a matching Begin___() and End___() pair of methods.  The following example illustrates the use of
            </p>
            <code>
            	private void button1_Click(object sender, System.EventArgs e)
            	{
            		proFTPConnection1.BeginDownloadFile(fileName, fileName, new AsyncCallback(DownloadComplete), fileName);
            	}
            	
            	private void DownloadComplete(IAsyncResult ar)
            	{
            		proFTPConnection1.EndDownloadFile(ar);
            		label1.Text = "Finished downloading " + (string)ar.AsyncState;
            	}
            </code>
            <p>
            The <c>button1_Click</c> method initiates the download using the <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginDownloadFile(System.String,System.String,System.AsyncCallback,System.Object)"/>
            method and returns immediately (i.e. before the file has been downloaded).  
            The <c>DownloadComplete</c> method is then called once the file has been downloaded allowing
            us to notify the user of this fact.  Since the download happens in the background the
            application may perform other processing while the file is being downloaded.
            </p>
            </remarks>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.log">
            <summary>Logging object</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.ftpType">
            <summary>Determines if FTP, FTPS (explicit), or FTPS (implicit).</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.sslVersion">
            <summary>Version of secure sockets to use.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.taskProcessor">
            <summary>
            Used for processing asynchronous tasks;
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.rops">
            <summary>  
            Helper class for performing recursive ops
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.detectTransferMode">
            <summary>  
            Do we detect transfer mode when transferring files?
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.proFTPClient">
            <summary>
            Reference to ProFTPClient which does all the work.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.autoSecure">
            <summary>
            Determines if the control channel will automatically be secured upon connection.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Constructs a ProFTPConnection object and places it in the given container.
            </summary>
            <param name="container">Component container</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection"/> class.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.#ctor(EnterpriseDT.Net.Ftp.FTPClient)">
            <summary>
            Create an ProFTPConnection using the given FTP client.
            </summary>
            <param name="ftpClient"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.Dispose(System.Boolean)">
            <summary> 
            Close the connection if it is open.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.Connect">
            <summary>Connect to the FTP server.</summary>
            <remarks>
            <p>The <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.ServerAddress"/> property must be set prior to calling this method.</p>
            <p>If explicit FTPS has been selected (see <see cref="P:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.SecureFTPType"/>) and <see cref="P:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.AutoSecure"/> 
            is <c>true</c> (the default) then the component will try secure the
            secure connection immediately after successfully connecting.  A secure connection will always
            be attempted in implicit FTPS is selected regardless of the value of <see cref="P:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.AutoSecure"/>.</p>
            <p>If <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.AutoLogin"/> is <c>true</c> (the default) then the component will attempt to
            log in.</p>
            <p>This method will throw an <c>FTPException</c> if the component is already connected to the server.</p>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.AbortAsynchronous(System.Boolean)">
            <summary>
            Aborts all queued asynchronous operations.
            </summary>
            <remarks>
            This method clears the queue of pending asynchronous operations (i.e. those initiated
            using the BeginXXX methods).  If <c>interruptCurrent</c> is <c>true</c> then any
            transfer currently being performed is cancelled.
            </remarks>
            <param name="interruptCurrentTransfer">Causes any current transfer to be cancelled.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.Close(System.Boolean,System.Exception)">
            <summary>Quit the FTP session.</summary> 
            <remarks>If <c>abruptClose</c> is <c>true</c> then the session will be closed immediately 
            by closing the control socket without sending the <c>QUIT</c> command, otherwise the
            session will be closed by sending a <c>QUIT</c> command before closing the socket.</remarks>
            <param name="abruptClose">Closes session abruptly (see comments).</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginConnect(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to connect to an FTP server.
            </summary>
            <remarks>
            <p>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginConnect</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</p>
            <p>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.Connect"/>.</p>
            </remarks>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous connection.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.EndConnect(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginConnect(System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <p>Before calling <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginConnect(System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginConnect(System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginConnect(System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndConnect</c> method to complete the operation.</p>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginClose(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to close the FTP connection.
            </summary>
            <remarks>
            <p>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginClose</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</p>
            <p>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.Close"/>.</p>
            </remarks>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous closure.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.EndClose(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginClose(System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <p>Before calling <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginClose(System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginClose(System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginClose(System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndClose</c> method to complete the operation.</p>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginLogin(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to log into an account on the FTP server using 
            <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.UserName"/> and <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.Password"/>.
            </summary>
            <remarks>
            <p>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginLogin</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</p>
            <p>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.Login"/>.</p>
            </remarks>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous login.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.EndLogin(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginLogin(System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <p>Before calling <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginLogin(System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginLogin(System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginLogin(System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndLogin</c> method to complete the operation.</p>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginSendUserName(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to supply the user-name to log into an account on the FTP server.
            </summary>
            <remarks>
            <p>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginSendUserName</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</p>
            <p>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.SendUserName(System.String)"/>.</p>
            </remarks>
            <param name="user">User-name of the client's account on the server.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous send.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.EndSendUserName(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginSendUserName(System.String,System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <p>Before calling <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginSendUserName(System.String,System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginSendUserName(System.String,System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginSendUserName(System.String,System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndSendUserName</c> method to complete the operation.</p>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginSendPassword(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to supply the password for the previously supplied
            user-name to log into the FTP server.
            </summary>
            <remarks>
            <p>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginSendPassword</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</p>
            <p>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.SendPassword(System.String)"/>.</p>
            </remarks>
            <param name="password">Password of the client's account on the server.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous send.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.EndSendPassword(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginSendPassword(System.String,System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <p>Before calling <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginSendPassword(System.String,System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginSendPassword(System.String,System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginSendPassword(System.String,System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndSendPassword</c> method to complete the operation.</p>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.SecureConnection">
            <summary>
            Switches an explicit FTPS connection to secure mode.
            </summary>
            <remarks>
            It is not necessary to call this method if <see cref="P:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.AutoSecure"/> is set to
            <c>true</c> (the default) since this is then automatically done when the
            original connection is made.  It is only necessary to do this if 
            <see cref="P:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.AutoSecure"/> is set to <c>false</c> and the user wishes to 
            manually control when the connection is switched to secure mode.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.CancelTransfer">
            <summary>Cancels the current transfer.</summary>
            <remarks>
            <p>This method is generally called from a separate
            thread. Note that this may leave partially written files on the
            server or on local disk, and should not be used unless absolutely
            necessary. The server is not notified.</p>
            <p>Any asynchronous transfers currently queued cancelled also.</p>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginResumeTransfer(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to make the next file transfer (upload or download) resume.
            </summary>
            <remarks>
            <p>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginResumeTransfer</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</p>
            <p>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.ResumeTransfer"/>.</p>
            </remarks>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous resumption.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.EndResumeTransfer(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginResumeTransfer(System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <p>Before calling <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginResumeTransfer(System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginResumeTransfer(System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginResumeTransfer(System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndResumeTransfer</c> method to complete the operation.</p>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.UploadMultiple(System.String,System.String)">
            <summary>
            Put multiple files from the specified local directory into the current remote directory.
            </summary>
            <param name="localDir">local directory to get files from</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.UploadMultiple(System.String,EnterpriseDT.Net.Ftp.FileFilter)">
            <summary>
            Put multiple files from the specified local directory into the current remote directory.
            </summary>
            <param name="localDir">local directory to get files from</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.UploadMultiple(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Put multiple files from the specified local directory into the specified remote directory.
            </summary>
            <remarks>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories
            </remarks>
            <param name="localDir">local directory name</param>
            <param name="remoteDir">remote directory name</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="includeSubDirs">if <c>true</c>, subdirectories are put</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.UploadMultiple(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary>
            Put multiple files from the specified local directory into the specified remote directory.
            </summary>
            <remarks>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories
            </remarks>
            <param name="localDir">local directory name</param>
            <param name="remoteDir">remote directory name</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="includeSubDirs">if <c>true</c>, subdirectories are put</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginUploadFile(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to upload a local file to the FTP server in the current working directory.
            </summary>
            <remarks>
            <p>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginUploadFile</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</p>
            <p>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.UploadFile(System.String,System.String)"/>.</p>
            </remarks>
            <param name="localPath">Local file to put data in.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous upload.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginUploadFile(System.String,System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to upload a local file to the FTP server in the 
            current working directory. Allows appending if current file exists.
            </summary>
            <remarks>
            <p>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginUploadFile</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</p>
            <p>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.UploadFile(System.String,System.String,System.Boolean)"/>.</p>
            </remarks>
            <param name="localPath">Path of the local file.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="append"><c>true</c> if appending, <c>false</c> otherwise.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous upload.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginUploadMultiple(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to upload multiple files to the FTP server. 
            </summary>
            <remarks>
            <p>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginUploadMultiple</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</p>
            <p>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.UploadMultiple(System.String,System.String)"/>.</p>
            </remarks>
            <param name="localDir">local directory to get files from</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous upload.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginUploadMultiple(System.String,EnterpriseDT.Net.Ftp.FileFilter,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to upload multiple files to the FTP server. 
            </summary>
            <remarks>
            <p>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginUploadMultiple</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</p>
            <p>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.UploadMultiple(System.String,EnterpriseDT.Net.Ftp.FileFilter)"/>.</p>
            </remarks>
            <param name="localDir">local directory to get files from</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous upload.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginUploadMultiple(System.String,System.String,System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to upload multiple files to the FTP server. 
            </summary>
            <remarks>
            <p>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginUploadMultiple</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</p>
            <p>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.UploadMultiple(System.String,System.String,System.String,System.Boolean)"/>.</p>
            </remarks>
            <param name="localDir">local directory name</param>
            <param name="remoteDir">remote directory name</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="includeSubDirs">if <c>true</c>, subdirectories are put</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous upload.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginUploadMultiple(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to upload multiple files to the FTP server. 
            </summary>
            <remarks>
            <p>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginUploadMultiple</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</p>
            <p>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.UploadMultiple(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)"/>.</p>
            </remarks>
            <param name="localDir">local directory name</param>
            <param name="remoteDir">remote directory name</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="includeSubDirs">if <c>true</c>, subdirectories are put</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous upload.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.EndUploadFile(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginDownloadFile(System.String,System.String,System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginDownloadFile(System.String,System.String,System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginDownloadFile(System.String,System.String,System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginDownloadFile(System.String,System.String,System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndDownloadFile</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.EndUploadMultiple(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in one of the <c>BeginUploadMultiple</c> methods.
            </summary>
            <remarks>
            <para>Before calling <c>BeginUploadMultiple</c>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <c>BeginUploadMultiple</c> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <c>BeginUploadMultiple</c> method as a parameter.  This parameter may then be
            passed to the <c>EndUploadMultiple</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <seealso cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginUploadMultiple(System.String,System.String,System.AsyncCallback,System.Object)"/>
            <seealso cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginUploadMultiple(System.String,EnterpriseDT.Net.Ftp.FileFilter,System.AsyncCallback,System.Object)"/>
            <seealso cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginUploadMultiple(System.String,System.String,System.String,System.Boolean,System.AsyncCallback,System.Object)"/>
            <seealso cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginUploadMultiple(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean,System.AsyncCallback,System.Object)"/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginUploadStream(System.IO.Stream,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to upload a stream of data to the FTP server in the current working directory.
            </summary>
            <remarks>
            <p>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginUploadStream</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</p>
            <p>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.UploadStream(System.IO.Stream,System.String)"/>.</p>
            </remarks>
            <param name="srcStream">Input stream of data to put.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous upload.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginUploadStream(System.IO.Stream,System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to upload a stream of data to the FTP server 
            in the current working directory.  
            </summary>
            <remarks>
            <p>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginUploadStream</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</p>
            <p>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.UploadStream(System.IO.Stream,System.String,System.Boolean)"/>.</p>
            </remarks>
            <param name="srcStream">Input stream of data to put.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="append"><c>true</c> if appending, <c>false</c> otherwise.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous upload.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.EndUploadStream(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in one of the <c>BeginUploadStream</c> methods.
            </summary>
            <remarks>
            <para>Before calling <c>BeginUploadStream</c>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <c>BeginUploadStream</c> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <c>BeginUploadStream</c> method as a parameter.  This parameter may then be
            passed to the <c>EndUploadStream</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <seealso cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginUploadStream(System.IO.Stream,System.String,System.AsyncCallback,System.Object)"/>
            <seealso cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginUploadStream(System.IO.Stream,System.String,System.Boolean,System.AsyncCallback,System.Object)"/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginUploadByteArray(System.Byte[],System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to upload an array of bytes to the FTP server in the current working directory.
            </summary>
            <remarks>
            <p>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginUploadByteArray</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</p>
            <p>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.UploadByteArray(System.Byte[],System.String)"/>.</p>
            </remarks>
            <param name="bytes">Array of bytes to put.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous upload.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginUploadByteArray(System.Byte[],System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to upload data to the FTP server in the current working directory.
            </summary>
            <remarks>
            <p>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginUploadByteArray</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</p>
            <p>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.UploadByteArray(System.Byte[],System.String,System.Boolean)"/>.</p>
            </remarks>
            <param name="bytes">Array of bytes to put.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="append"><c>true</c> if appending, <c>false</c> otherwise.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous upload.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.EndUploadByteArray(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in one of the <c>BeginUploadByteArray</c>
            methods.
            </summary>
            <remarks>
            <para>Before calling <c>BeginUploadByteArray</c>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <c>BeginUploadByteArray</c> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <c>BeginUploadByteArray</c> method as a parameter.  This parameter may then be
            passed to the <c>EndUploadByteArray</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <seealso cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginUploadByteArray(System.Byte[],System.String,System.AsyncCallback,System.Object)"/>
            <seealso cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginUploadByteArray(System.Byte[],System.String,System.Boolean,System.AsyncCallback,System.Object)"/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.DownloadMultiple(System.String,System.String)">
            <summary>
            Get multiple files into the specified local directory from the current remote directory
            </summary>
            <param name="localDir">local directory to get files into</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.DownloadMultiple(System.String,EnterpriseDT.Net.Ftp.FileFilter)">
            <summary>
            Get multiple files into the specified local directory from the current remote directory
            </summary>
            <param name="localDir">local directory to get files into</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.DownloadMultiple(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Get multiple files from the specified remote directory into the specified local directory
            </summary>
            <remarks>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories
            </remarks>
            <param name="localDir">local directory name</param>
            <param name="remoteDir">remote directory name</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="includeSubDirs">if true, subdirectories are put</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.DownloadMultiple(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary>
            Get multiple files from the specified remote directory into the specified local directory
            </summary>
            <remarks>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories
            </remarks>
            <param name="localDir">local directory name</param>
            <param name="remoteDir">remote directory name</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="includeSubDirs">if true, subdirectories are put</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginDownloadFile(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to download a file from the FTP server and save it locally.
            </summary>
            <remarks>
            <p>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginDownloadFile</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</p>
            <p>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.DownloadFile(System.String,System.String)"/>.</p>
            </remarks>
            <param name="localPath">Local file to put data in.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous download.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginDownloadMultiple(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to download multiple files from the FTP server and save them locally.
            </summary>
            <remarks>
            <p>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginDownloadMultiple</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</p>
            <p>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.DownloadMultiple(System.String,System.String)"/>.</p>
            </remarks>
            <param name="localDir">local directory to get files into</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous download.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginDownloadMultiple(System.String,EnterpriseDT.Net.Ftp.FileFilter,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to download multiple files from the FTP server and save them locally.
            </summary>
            <remarks>
            <p>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginDownloadMultiple</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</p>
            <p>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.DownloadMultiple(System.String,EnterpriseDT.Net.Ftp.FileFilter)"/>.</p>
            </remarks>
            <param name="localDir">local directory to get files into</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous download.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginDownloadMultiple(System.String,System.String,System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to download multiple files from the FTP server and save them locally.
            </summary>
            <remarks>
            <p>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginDownloadMultiple</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</p>
            <p>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.DownloadMultiple(System.String,System.String,System.String,System.Boolean)"/>.</p>
            </remarks>
            <param name="localDir">local directory name</param>
            <param name="remoteDir">remote directory name</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="includeSubDirs">if true, subdirectories are put</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous download.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginDownloadMultiple(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to download multiple files from the FTP server and save them locally.
            </summary>
            <remarks>
            <p>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginDownloadMultiple</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</p>
            <p>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.DownloadMultiple(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)"/>.</p>
            </remarks>
            <param name="localDir">local directory name</param>
            <param name="remoteDir">remote directory name</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="includeSubDirs">if true, subdirectories are put</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous download.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.EndDownloadFile(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginDownloadFile(System.String,System.String,System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <p>Before calling <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginDownloadFile(System.String,System.String,System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginDownloadFile(System.String,System.String,System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginDownloadFile(System.String,System.String,System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndDownloadFile</c> method to complete the operation.</p>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.EndDownloadMultiple(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in one of the <c>BeginDownloadMultiple</c>
            methods.
            </summary>
            <remarks>
            <para>Before calling <c>BeginDownloadMultiple</c>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <c>BeginDownloadMultiple</c> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <c>BeginDownloadMultiple</c> method as a parameter.  This parameter may then be
            passed to the <c>EndDownloadMultiple</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <seealso cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginDownloadMultiple(System.String,System.String,System.AsyncCallback,System.Object)"/>
            <seealso cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginDownloadMultiple(System.String,EnterpriseDT.Net.Ftp.FileFilter,System.AsyncCallback,System.Object)"/>
            <seealso cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginDownloadMultiple(System.String,System.String,System.String,System.Boolean,System.AsyncCallback,System.Object)"/>
            <seealso cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginDownloadMultiple(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean,System.AsyncCallback,System.Object)"/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginDownloadStream(System.IO.Stream,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to download a file from the FTP server and write it to the given stream.
            </summary>
            <remarks>
            <p>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginDownloadStream</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</p>
            <p>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.DownloadStream(System.IO.Stream,System.String)"/>.</p>
            </remarks>
            <param name="destStream">Data stream to write data to.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous download.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.EndDownloadStream(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginDownloadStream(System.IO.Stream,System.String,System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <p>Before calling <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginDownloadStream(System.IO.Stream,System.String,System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginDownloadStream(System.IO.Stream,System.String,System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginDownloadStream(System.IO.Stream,System.String,System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndDownloadStream</c> method to complete the operation.</p>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginDownloadByteArray(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to download data from the FTP server and return it as a byte-array.
            </summary>
            <remarks>
            <p>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginDownloadByteArray</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</p>
            <p>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.DownloadByteArray(System.String)"/>.</p>
            </remarks>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous download.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.EndDownloadByteArray(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginDownloadByteArray(System.String,System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <p>Before calling <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginDownloadByteArray(System.String,System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginDownloadByteArray(System.String,System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginDownloadByteArray(System.String,System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndDownloadByteArray</c> method to complete the operation.</p>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginInvokeFTPCommand(System.String,System.String[],System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to invoke the given literal FTP command on the server.
            </summary>
            <remarks>
            <p>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginGetFeatures</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</p>
            <p>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.InvokeFTPCommand(System.String,System.String[])"/>.</p>
            </remarks>
            <param name="command">Command to be sent.</param>
            <param name="validCodes">Valid return-codes (used for validating reply).</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous get.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.EndInvokeFTPCommand(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginInvokeFTPCommand(System.String,System.String[],System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <p>Before calling <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginInvokeFTPCommand(System.String,System.String[],System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginInvokeFTPCommand(System.String,System.String[],System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginInvokeFTPCommand(System.String,System.String[],System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndInvokeFTPCommand</c> method to complete the operation.</p>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns>The reply returned by the server.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginInvokeSiteCommand(System.String,System.String[],System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to invoke the given site command on the server.
            </summary>
            <remarks>
            <p>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginGetFeatures</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</p>
            <p>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.InvokeSiteCommand(System.String,System.String[])"/>.</p>
            </remarks>
            <param name="command">Site-specific command to be invoked.</param>
            <param name="arguments">Arguments of the command to be invoked.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous get.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.EndInvokeSiteCommand(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginInvokeFTPCommand(System.String,System.String[],System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <p>Before calling <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginInvokeSiteCommand(System.String,System.String[],System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginInvokeSiteCommand(System.String,System.String[],System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginInvokeSiteCommand(System.String,System.String[],System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndInvokeSiteCommand</c> method to complete the operation.</p>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns>The reply returned by the server.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginGetFeatures(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to get the server supplied features.
            </summary>
            <remarks>
            <p>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginGetFeatures</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</p>
            <p>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.GetFeatures"/>.</p>
            </remarks>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous get.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.EndGetFeatures(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginGetFeatures(System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <p>Before calling <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginGetFeatures(System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginGetFeatures(System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginGetFeatures(System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndGetFeatures</c> method to complete the operation.</p>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns>
            <c>string</c>-array containing server features, or <c>null</c> if no features or not supported.
            </returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginGetSystemType(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to get the type of the operating system at the server.
            </summary>
            <remarks>
            <p>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginGetSystemType</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</p>
            <p>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.GetSystemType"/>.</p>
            </remarks>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous get.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.EndGetSystemType(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginGetSystemType(System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <p>Before calling <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginGetSystemType(System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginGetSystemType(System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginGetSystemType(System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndGetSystemType</c> method to complete the operation.</p>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns>The type of server operating system.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginGetCommandHelp(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to get the help text for the specified FTP command.
            </summary>
            <remarks>
            <p>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginGetCommandHelp</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</p>
            <p>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.GetCommandHelp(System.String)"/>.</p>
            </remarks>
            <param name="command">Name of the FTP command to get help for.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous get.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.EndGetCommandHelp(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginGetCommandHelp(System.String,System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <p>Before calling <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginGetCommandHelp(System.String,System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginGetCommandHelp(System.String,System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginGetCommandHelp(System.String,System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndGetCommandHelp</c> method to complete the operation.</p>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns>Help text from the server for the supplied command.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginGetFileInfos(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to retrieve the working directory's contents as an array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.
            </summary>
            <remarks>
            <p>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginGetFileInfos</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</p>
            <p>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.GetFileInfos"/>.</p>
            </remarks>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous get.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginGetFileInfos(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to retrieve the given directory's contents as an array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.
            </summary>
            <remarks>
            <p>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginGetFileInfos</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</p>
            <p>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.GetFileInfos(System.String)"/>.</p>
            </remarks>
            <param name="directory">Name of directory AND/OR filemask.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous get.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.EndGetFileInfos(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in one of the <c>BeginGetFileInfos</c> methods.
            </summary>
            <remarks>
            <para>Before calling <c>BeginGetFileInfos</c>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <c>BeginGetFileInfos</c> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <c>BeginGetFileInfos</c> method as a parameter.  This parameter may then be
            passed to the <c>EndGetFileInfos</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns>An array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.</returns>
            <seealso cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginGetFileInfos(System.AsyncCallback,System.Object)"/>
            <seealso cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginGetFileInfos(System.String,System.AsyncCallback,System.Object)"/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginGetFiles(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to list the current working directory's contents as an array of strings of file-names.
            </summary>
            <remarks>
            <p>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginGetFiles</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</p>
            <p>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.GetFiles"/>.</p>
            </remarks>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous get.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginGetFiles(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to retrieve the given directory's contents as an array of strings of file-names.
            </summary>
            <remarks>
            <p>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginGetFiles</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</p>
            <p>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.GetFiles(System.String)"/>.</p>
            </remarks>
            <param name="directory">Name of directory AND/OR filemask.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous get.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.EndGetFiles(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in one of the <c>BeginGetFiles</c> methods.
            </summary>
            <remarks>
            <para>Before calling <c>BeginGetFiles</c>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <c>BeginGetFiles</c> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <c>BeginGetFiles</c> method as a parameter.  This parameter may then be
            passed to the <c>EndGetFiles</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns>An array of current working directory listing strings.</returns>
            <seealso cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginGetFiles(System.AsyncCallback,System.Object)"/>
            <seealso cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginGetFiles(System.String,System.AsyncCallback,System.Object)"/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginDeleteDirectory(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to delete the specified remote directory.
            </summary>
            <remarks>
            <p>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginDeleteDirectory</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</p>
            <p>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.DeleteDirectory(System.String)"/>.</p>
            </remarks>
            <param name="directory">Name of directory AND/OR filemask.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous deletion.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.EndDeleteDirectory(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginDeleteDirectory(System.String,System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <p>Before calling <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginDeleteDirectory(System.String,System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginDeleteDirectory(System.String,System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginDeleteDirectory(System.String,System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndDeleteDirectory</c> method to complete the operation.</p>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginCreateDirectory(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to create the specified remote directory.
            </summary>
            <remarks>
            <p>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginCreateDirectory</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</p>
            <p>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.CreateDirectory(System.String)"/>.</p>
            </remarks>
            <param name="directory">Name of directory AND/OR filemask.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous creation.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.EndCreateDirectory(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginCreateDirectory(System.String,System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <p>Before calling <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginCreateDirectory(System.String,System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginCreateDirectory(System.String,System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginCreateDirectory(System.String,System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndCreateDirectory</c> method to complete the operation.</p>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginGetWorkingDirectory(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to get the working directory on the server.
            </summary>
            <remarks>
            <p>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginGetWorkingDirectory</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</p>
            <p>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.GetWorkingDirectory"/>.</p>
            </remarks>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous get.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.EndGetWorkingDirectory(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginGetWorkingDirectory(System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <p>Before calling <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginGetWorkingDirectory(System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginGetWorkingDirectory(System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginGetWorkingDirectory(System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndGetWorkingDirectory</c> method to complete the operation.</p>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns>The working directory on the server.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginChangeWorkingDirectory(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to change the working directory.
            </summary>
            <remarks>
            <p>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginChangeWorkingDirectory</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</p>
            <p>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.ChangeWorkingDirectory(System.String)"/>.</p>
            </remarks>
            <param name="directory">Name of directory AND/OR filemask.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous change.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.EndChangeWorkingDirectory(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginChangeWorkingDirectory(System.String,System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <p>Before calling <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginChangeWorkingDirectory(System.String,System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginChangeWorkingDirectory(System.String,System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginChangeWorkingDirectory(System.String,System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndChangeWorkingDirectory</c> method to complete the operation.</p>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginChangeWorkingDirectoryUp(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to change to the parent of the current working directory on the server.
            </summary>
            <remarks>
            <p>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginChangeWorkingDirectoryUp</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</p>
            <p>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.ChangeWorkingDirectoryUp"/>.</p>
            </remarks>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous change.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.EndChangeWorkingDirectoryUp(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginChangeWorkingDirectoryUp(System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <p>Before calling <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginChangeWorkingDirectoryUp(System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginChangeWorkingDirectoryUp(System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginChangeWorkingDirectoryUp(System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndChangeWorkingDirectoryUp</c> method to complete the operation.</p>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginDeleteFile(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to delete the specified remote file.
            </summary>
            <remarks>
            <p>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginDeleteFile</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</p>
            <p>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.DeleteFile(System.String)"/>.</p>
            </remarks>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous deletion.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.EndDeleteFile(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginDeleteFile(System.String,System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <p>Before calling <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginDeleteFile(System.String,System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginDeleteFile(System.String,System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginDeleteFile(System.String,System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndDeleteFile</c> method to complete the operation.</p>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns><c>true</c> if file was deleted successfully.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginRenameFile(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to rename a file or directory.
            </summary>
            <remarks>
            <p>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginRenameFile</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</p>
            <p>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.RenameFile(System.String,System.String)"/>.</p>
            </remarks>
            <param name="from">Name of file or directory to rename.</param>
            <param name="to">New file-name.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous rename.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.EndRenameFile(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginRenameFile(System.String,System.String,System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <p>Before calling <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginRenameFile(System.String,System.String,System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginRenameFile(System.String,System.String,System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginRenameFile(System.String,System.String,System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndRenameFile</c> method to complete the operation.</p>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginGetSize(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to get the size of a remote file. 
            </summary>
            <remarks>
            <p>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginGetSize</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</p>
            <p>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.GetSize(System.String)"/>.</p>
            </remarks>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous get.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.EndGetSize(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginGetSize(System.String,System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <p>Before calling <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginGetSize(System.String,System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginGetSize(System.String,System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginGetSize(System.String,System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndGetSize</c> method to complete the operation.</p>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns>Size of file in bytes.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginGetLastWriteTime(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to get the modification time for a remote file.
            </summary>
            <remarks>
            <p>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginGetLastWriteTime</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</p>
            <p>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.GetLastWriteTime(System.String)"/>.</p>
            </remarks>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous get.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.EndGetLastWriteTime(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginGetLastWriteTime(System.String,System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <p>Before calling <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginGetLastWriteTime(System.String,System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginGetLastWriteTime(System.String,System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.BeginGetLastWriteTime(System.String,System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndGetWriteTime</c> method to complete the operation.</p>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns>Modification time of file as a <c>DateTime</c>.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.OnSecuringConnection">
            <summary>
            Called when security is being negotiated on the connection (control channel).
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.OnSecuredConnection">
            <summary>
            Called when security has been negotiated on the connection (control channel).
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.ShowSocksProxyEditor(System.Windows.Forms.IWin32Window)">
            <summary>
            Displays the proxy settings editor as a modal dialog or as a window.
            </summary>
            <param name="parent">Reference to parent window (may be null)</param>
            <returns>A reference to the form.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.Unlock(System.String,System.String)">
            <summary>
            Unlock the software for use. This method should be used when
            a configuration file isn't available
            </summary>
            <param name="owner">owner string</param>
            <param name="key">license key</param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.IsTransferring">
            <summary>
            Indicates whether or not a synchronous or asynchronous transfer is currently under way.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.DetectTransferMode">
            <summary>
            Determines whether the transfer mode in operations involving multiple files is 
            automatically changed between ASCII and binary as appropriate.
            </summary>
            <remarks>
            See <see cref="M:EnterpriseDT.Net.Ftp.FileTypes.RegisterExtension(System.String)"/> for instructions on 
            how to register a file extension as ASCII, and
            <see cref="T:EnterpriseDT.Net.Ftp.FileTypes"/> for how to obtain the 
            current registered extensions.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.AutoSecure">
            <summary>Determines if the component will automatically switch to SSL/TLS upon 
            connection when using FTPS.</summary>
            <remarks>
            <p>
            If this flag if <c>true</c> and <see cref="P:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.SecureFTPType"/> is 
            <see cref="F:EnterpriseDT.Net.Ftp.Pro.ProFTPType.FTPSExplicit"/> or <see cref="F:EnterpriseDT.Net.Ftp.Pro.ProFTPType.FTPSImplicit"/> 
            then the component will automatically 
            switch to SSL/TLS upon connection.  This is only relevant for explicit FTPS since
            implicit FTPS always operates over an SSL/TLS connection.
            </p>
            <p>
            The default is <c>true</c>.
            </p>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.SecureFTPType">
            <summary>
            Type of secure FTP to use.
            </summary>
            <remarks>
            edtFTPnet/PRO offers three types of FTP:
            <list type="bullet">
            <listheader><term>Type</term></listheader>
            <item>
            <term>FTP</term>
            <description>Traditional unencrypted FTP.</description>
            </item>
            <item>
            <term>FTPSExplicit</term>
            <description>FTP-over-SSL which allows switching between secure and unsecure transfers.</description>
            </item>
            <item>
            <term>FTPSImplicit</term>
            <description>FTP-over-SSL which simply performs FTP over pure SSL sockets.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.SSLVersion">
            <summary>
            SSL/TLS version to use.
            </summary>
            <remarks>
            edtFTPnet/PRO supports SSL version 3 and TLS version 1.  TLS is the successor to SSL and 
            should be used unless the server does not support it.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.ServerCompatibility">
            <summary>
            Controls various server security compatibility features.
            </summary>
            <remarks>
            <p>
            The most severe barrier to server compatilibilty is the lack of FTPS support on the
            server.  Most FTP servers can be configured to support FTPS, but some only support
            SFTP (SSH File Transfer Protocol), which in fact is not FTP in the conventional sense.
            SFTP is not supported by <c>ProFTPConnection</c>.
            </p>
            <p>
            The second most common server incompatibility problem is caused by differing level
            of adherence to the standard for how SSL/TLS sockets should be closed.  By default
            ProFTPConnection will attempt to close sockets in the standard-compliant way.  While 
            this is the most secure, it occasionally will cause hanging as it waits for a
            response from the client which never arrives.  The <c>ServerCompatibility</c>
            property is provided for controlling this behaviour.  If you experience hanging
            when a data-transfer is complete then you should first try 
            <see cref="F:EnterpriseDT.Net.Ftp.Pro.ProFTPCompatibilityFlags.DisableDataWaitOnClose"/>
             and, if the problem
            still occurs, <see cref="F:EnterpriseDT.Net.Ftp.Pro.ProFTPCompatibilityFlags.DisableDataSSLClosure"/>.
            If you experience hanging
            as you close your secure FTP session then you should first try 
            <see cref="F:EnterpriseDT.Net.Ftp.Pro.ProFTPCompatibilityFlags.DisableControlWaitOnClose"/> and, if the problem
            still occurs, <see cref="F:EnterpriseDT.Net.Ftp.Pro.ProFTPCompatibilityFlags.DisableControlSSLClosure"/>.
            </p>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.ServerValidation">
            <summary>
            Method by which the server's certificate is validated.
            </summary>
            <remarks>
            When an SSL/TLS connection is being negotiated, the FTP server will present an
            SSL certificate to the client.  <see cref="T:EnterpriseDT.Net.Ftp.Pro.ProFTPServerValidationType"/>s are used to
            control what the client does with this certificate.  
            The default is <see cref="F:EnterpriseDT.Net.Ftp.Pro.ProFTPServerValidationType.Automatic"/>.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.CipherSuites">
            <summary>
            Get/sets the cipher-suites permissible during establishment of a secure
            connection.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.ServerCommonName">
            <summary>
            The name to be used when performing a name-check during 
            the validation of the server certificate.
            </summary>
            <remarks>
            An important part of validating the certificate is to perform
            a <i>name-check</i>.  In a name-check the <i>Common Name</i> on the certificate is
            compared with the host-name of the FTP server that we believe we are connected
            to.  Unless this property is set explicitly, the Common Name is assumed to be
            the same as the host-name that is used to connect to the server.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.ClientCertificate">
            <summary>
            The certificate to be presented to the server.
            </summary>
            <remarks>
            If a server requires client validation then this property must be set.
            <see cref="T:EnterpriseDT.Net.Ftp.Pro.ProFTPCertificate"/>s are created using one of the static
            <c>ProFTPCertificate.CreateFrom...</c> methods to load a certificate 
            from a file and the <see cref="M:EnterpriseDT.Net.Ftp.Pro.ProFTPCertificate.AssociatePrivateKey(System.String,System.String)"/> 
            to load the associated private key.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.ServerCertificate">
            <summary>
            The certificate presented by the server.
            </summary>
            <remarks>
            During the negotiation of a secure connection, the server presents a 
            certificate which may be accessed using this property.  The property
            may not be accessed until a secure connection has been made.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.IsControlChannelSecure">
            <summary>
            Indicates whether the control channel is currently secure.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.SocksProxySettings">
            <summary>
            Settings for SOCKS proxy.
            </summary>
            <remarks>
            <p>
            SOCKS may be used for FTPing through firewalls.  For this to be possible
            a SOCKS proxy must be available, and a user account must be set up on that proxy.
            <c>ProFTPConnection</c> supports all the popular versions of SOCKS - 4, 4A, and 5.
            </p>
            <p>
            The SOCKS features are controlled entirely through the <see cref="P:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.SocksProxySettings"/>
            property.  If it is <c>null</c> (the default) then SOCKS is not used.  To use SOCKS,
            the property must be set to an instance of <see cref="T:EnterpriseDT.Util.Socks.Socks4Context"/> or 
            <see cref="T:EnterpriseDT.Util.Socks.Socks5Context"/>.
            For example, for SOCKS4:
            </p>
            <code>
            	myFTPClient.SocksContext = new Socks4Context("192.168.0.2", 1080, "marvin23");
            </code>
            and for SOCKS5:
            <code>
            	Socks5Context socksContext = new Socks5Context("192.168.0.2", 1080);
            	socksContext.AuthMethods.Add(new Socks5NoAuthMethod());
            	socksContext.AuthMethods.Add(new Socks5UserNamePasswordAuthMethod("marvin23", "m31erk"));
            	myFTPClient.SocksContext = socksContext;
            </code>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.LicenseOwner">
            <summary>
            The license owner string.
            </summary>
            <remarks>
            The license owner must be set for the software to function correctly past the trial period.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.LicenseKey">
            <summary>
            The license key string.
            </summary>
            <remarks>
            The license key must be set for the software to function correctly past the trial period.
            </remarks>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.Error">
            <summary>
            Occurs when an exception is thrown during an asynchronous operation.
            </summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.SecuringConnection">
            <summary>Occurs when the component is securing the connection to the server.</summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.SecuredConnection">
            <summary>Occurs when the component has secured the connection to the server.</summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.ServerValidate">
            <summary>
            Server validation event.
            </summary>
            <remarks>
            This event occurs when a server certificate requires validation using the 
            <see cref="F:EnterpriseDT.Net.Ftp.Pro.ProFTPServerValidationType.Callback"/> method.
            In the event-handler, the <see cref="P:EnterpriseDT.Net.Ftp.Pro.ProFTPValidateEventArgs.IsValid">IsValid</see> 
            property of the <see cref="T:EnterpriseDT.Net.Ftp.Pro.ProFTPValidateEventArgs"/> should be set to indicate whether or
            not the server certificate should be accepted.
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Pro.ProFTPSecureEventArgs">
            <summary>
            Provides data for the <see cref="E:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.SecuringConnection"/>
            and <see cref="E:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.SecuredConnection"/> events.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPSecureEventArgs.isSecure">
            <summary>Indicates if the control channel is secure.</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Pro.ProFTPSecureEventArgs.#ctor(System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="isSecure">Indicates if the control channel is secure.</param>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Pro.ProFTPSecureEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.SecuringConnection"/>
            and <see cref="E:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.SecuredConnection"/> events.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Pro.ProFTPErrorEventArgs">
            <summary>
            Provides data for the <see cref="E:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.Error"/> event.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPErrorEventArgs.Exception">
            <summary>
            Exception that was thrown.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPErrorEventArgs.SyncMethodName">
            <summary>
            Name of the method that was being executed when the exception was thrown.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Pro.ProFTPErrorEventArgs.Arguments">
            <summary>
            Arguments to the method that was being executed when the exception was thrown.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Pro.ProFTPErrorEventHandler">
            <summary>
            Delegate for error events.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Pro.ProFTPType">
            <summary>
            Specifies types of FTP.
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            	<term>Member name</term>
            	<description>Description</description>
            </listheader>
            <item>
            	<term>FTP</term>
            	<description>Standard FTP over <b>unencrypted</b> TCP/IP connections.</description>
            </item>
            <item>
            	<term>FTPSExplicit</term>
            	<description>Explicit FTPS: Standard FTP-over-SSL as defined in RFC4217.</description>
            </item>
            <item>
            	<term>FTPSImplicit</term>
            	<description>Implicit FTPS: Nonstandard, legacy version of FTP-over-SSL.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPType.FTP">
            <summary>
            Standard FTP over <b>unencrypted</b> TCP/IP connections.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPType.FTPSExplicit">
            <summary>
            Explicit FTPS: Standard FTP-over-SSL as defined in RFC4217.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPType.FTPSImplicit">
            <summary>
            Implicit FTPS: Nonstandard, legacy version of FTP-over-SSL.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Pro.ProFTPSSLVersion">
            <summary>
            Specifies type and version of SSL/TLS to use.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPSSLVersion.SSL3">
            <summary>
            Version 3 of the SSL protocol.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPSSLVersion.TLS1">
            <summary>
            Version 1 of the TLS protocol (successor to the SSL protocol).
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Pro.ProFTPCompatibilityFlags">
            <summary>
            Controls various server security compatibility features.
            </summary>
            <remarks>
            <p>
            The most severe barrier to server compatilibilty is the lack of FTPS support on the
            server.  Most FTP servers can be configured to support FTPS, but some only support
            SFTP (SSH File Transfer Protocol), which in fact is not FTP in the conventional sense.
            SFTP is not supported by <c>ProFTPConnection</c>.
            </p>
            <p>
            The second most common server incompatibility problem is caused by differing level
            of adherence to the standard for how SSL/TLS sockets should be closed.  By default
            ProFTPConnection will attempt to close sockets in the standard-compliant way.  While 
            this is the most secure, it occasionally will cause hanging as it waits for a
            response from the client which never arrives.  The <c>ServerCompatibility</c>
            property is provided for controlling this behaviour.  If you experience hanging
            when a data-transfer is complete then you should first try 
            <see cref="F:EnterpriseDT.Net.Ftp.Pro.ProFTPCompatibilityFlags.DisableDataWaitOnClose"/>
             and, if the problem
            still occurs, <see cref="F:EnterpriseDT.Net.Ftp.Pro.ProFTPCompatibilityFlags.DisableDataSSLClosure"/>.
            If you experience hanging
            as you close your secure FTP session then you should first try 
            <see cref="F:EnterpriseDT.Net.Ftp.Pro.ProFTPCompatibilityFlags.DisableControlWaitOnClose"/> and, if the problem
            still occurs, <see cref="F:EnterpriseDT.Net.Ftp.Pro.ProFTPCompatibilityFlags.DisableControlSSLClosure"/>.
            </p>
            </remarks>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPCompatibilityFlags.DisableControlSSLClosure">
            <summary>Disables the SSL/TSL closure exchange on the control channel.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPCompatibilityFlags.DisableDataSSLClosure">
            <summary>Disables the SSL/TSL closure exchange on data channels.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPCompatibilityFlags.DisableControlWaitOnClose">
            <summary>Prevents the client from waiting for a reply to the SSL/TLS closure command on the control channel.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPCompatibilityFlags.DisableDataWaitOnClose">
            <summary>Prevents the client from waiting for a reply to the SSL/TLS closure command on the data channel.</summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Pro.ProFTPServerValidationType">
            <summary>
            Specifies type of server valudation to use.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPServerValidationType.None">
            <summary>Accepts the certificate unconditionally.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPServerValidationType.Callback">
            <summary>
            Triggers the <see cref="E:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.ServerValidate"/> event which may be used to 
            perform manual checks on the certificate.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPServerValidationType.Automatic">
            <summary>
            <p>
            Uses Operating System resources to validate the certificate.  On Windows
            the installed certificates are used for this purpose.  These certificates
            may be managed on the <i>Contents</i> tab of the <i>Internet Options</i> 
            control panel.  
            </p>
            <p>
            Note that an important part of validating the certificate is to perform
            a <i>name-check</i>.  In a name-check the <i>Common Name</i> on the certificate is
            compared with the host-name of the FTP server that we believe we are connected
            to.  The Common Name to be used for name-checking is assumed to be the
            same as the host-name that was used upon connection, though it may be set
            manually using the <see cref="P:EnterpriseDT.Net.Ftp.Pro.ProFTPConnection.ServerCommonName"/>.
            </p>
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Pro.ProFTPServerValidationType.AutomaticNoNameCheck">
            <summary>
            Same as <see cref="F:EnterpriseDT.Net.Ftp.Pro.ProFTPServerValidationType.Automatic"/> but without name-checking.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey">
            <summary>
            Represents a symmetric key.
            </summary>
            <remarks>
            Large parts of this code are based on the article available at http://support.microsoft.com/default.aspx?scid=KB;en-us;q228786
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SymmetricKey class.
            </summary>
            <param name="ownsProvider"><b>true</b> if this SymmetricKey owns the provider, <b>false</b> otherwise.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.#ctor(EnterpriseDT.Mentalis.Security.Cryptography.CryptoProvider)">
            <summary>
            Initializes a new instance of the SymmetricKey class.
            </summary>
            <param name="provider">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.CryptoProvider"/> values.</param>
            <exception cref="T:EnterpriseDT.Mentalis.Security.SecurityException">An error occurs when acquiring the cryptographic context.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the SymmetricKey class.
            </summary>
            <param name="provider">The handle of a CSP.</param>
            <param name="key">The handle of a symmetric key.</param>
            <param name="ownsProvider"><b>true</b> if this SymmetricKey owns the provider, <b>false</b> otherwise.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.#ctor(EnterpriseDT.Mentalis.Security.Cryptography.CryptoProvider,EnterpriseDT.Mentalis.Security.Cryptography.CryptoAlgorithm)">
            <summary>
            Initializes a new instance of the SymmetricKey class.
            </summary>
            <param name="provider">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.CryptoProvider"/> values.</param>
            <param name="algorithm">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.CryptoAlgorithm"/> values.</param>
            <exception cref="T:EnterpriseDT.Mentalis.Security.SecurityException">An error occurs when generating a new key.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.#ctor(EnterpriseDT.Mentalis.Security.Cryptography.CryptoProvider,EnterpriseDT.Mentalis.Security.Cryptography.CryptoAlgorithm,System.Byte[])">
            <summary>
            Initializes a new instance of the SymmetricKey class.
            </summary>
            <param name="provider">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.CryptoProvider"/> values.</param>
            <param name="algorithm">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.CryptoAlgorithm"/> values.</param>
            <param name="buffer">An array of bytes that contains the key to import.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.KeyFromBytes(System.Int32,EnterpriseDT.Mentalis.Security.Cryptography.CryptoAlgorithm,System.Byte[])">
            <summary>
            Imports a specified key.
            </summary>
            <param name="provider">The handle of the CSP.</param>
            <param name="algorithm">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.CryptoAlgorithm"/> values.</param>
            <param name="key">The key to import.</param>
            <returns>The handle of the symmetric key.</returns>
            <exception cref="T:EnterpriseDT.Mentalis.Security.SecurityException">An error occurs while importing the specified key.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.ToBytes">
            <summary>
            Returns the bytes that represent the symmetric key.
            </summary>
            <returns>An array of bytes.</returns>
            <exception cref="T:System.ObjectDisposedException">The SymmetricKey has been disposed.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.ToString">
            <summary>
            Returns a string representation of the symmetric key.
            </summary>
            <returns>A string that represents the key in hexadecimal notation.</returns>
            <exception cref="T:System.ObjectDisposedException">The SymmetricKey has been disposed.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.Dispose">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.Finalize">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.CreateExponentOfOneKey">
            <summary>
            Creates an exponent-of-one key.
            </summary>
            <returns>The handle of a exponent-of-one key.</returns>
            <remarks>An exponent-of-one key is a public/private key pair that doesn't encrypt data.</remarks>
            <exception cref="T:EnterpriseDT.Mentalis.Security.SecurityException">An error occurs while creating the key.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.CreateStaticExponentOfOneKey">
            <summary>
            Statically creates an exponent-of-one key.
            </summary>
            <returns>The handle of a exponent-of-one key.</returns>
            <exception cref="T:EnterpriseDT.Mentalis.Security.SecurityException">An error occurs while creating the key.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.CreateDynamicExponentOfOneKey">
            <summary>
            Dynamically creates an exponent-of-one key.
            </summary>
            <returns>The handle of a exponent-of-one key.</returns>
            <exception cref="T:EnterpriseDT.Mentalis.Security.SecurityException">An error occurs while creating the key.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.GetPaddingMode(System.Security.Cryptography.PaddingMode)">
            <summary>
            Converts a <see cref="T:System.Security.Cryptography.PaddingMode"/> value to a CryptoAPI constant.
            </summary>
            <param name="mode">The PaddingMode to covnert.</param>
            <returns>The CryptoAPI constant associated with the specified padding mode.</returns>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.m_Handle">
            <summary>Holds the value of the <see cref="P:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.Handle"/> property.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.m_Provider">
            <summary>Holds the value of the <see cref="P:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.Provider"/> property.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.m_ExponentOfOne">
            <summary>Holds the exponent-of-one handle.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.m_PaddingMode">
            <summary>Holds the value of the <see cref="T:System.Security.Cryptography.PaddingMode"/> property.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.m_OwnsProvider">
            <summary><b>true</b> if this SymmetricKey owns the provider, <b>false</b> otherwise.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.ExponentOfOne">
            <summary>
            A byte representation of an exponent-of-one key.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.Provider">
            <summary>
            Gets the handle of the CSP of the SymmetricKey.
            </summary>
            <value>The handle of the CSP.</value>
            <exception cref="T:System.ObjectDisposedException">The SymmetricKey has been disposed.</exception>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.Handle">
            <summary>
            Gets the handle of the SymmetricKey.
            </summary>
            <value>The handle of the key.</value>
            <exception cref="T:System.ObjectDisposedException">The SymmetricKey has been disposed.</exception>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.IV">
            <summary>
            Gets or sets the initialization vector associated with the symmetric key.
            </summary>
            <value>The initialization vector.</value>
            <exception cref="T:System.ObjectDisposedException">The SymmetricKey has been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">The initialization vector is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurs while getting or setting the IV.</exception>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.Mode">
            <summary>
            Gets or sets the cipher mode associated with the symmetric key.
            </summary>
            <value>The cipher mode.</value>
            <exception cref="T:System.ObjectDisposedException">The SymmetricKey has been disposed.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurs while getting or setting the cipher mode.</exception>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.FeedbackSize">
            <summary>
            Gets or sets the feedback size associated with the symmetric key.
            </summary>
            <value>The feedback size.</value>
            <exception cref="T:System.ObjectDisposedException">The SymmetricKey has been disposed.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurs while getting or setting the feedback size.</exception>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.Padding">
            <summary>
            Gets or sets the padding mode associated with the symmetric key.
            </summary>
            <value>One of the <see cref="T:System.Security.Cryptography.PaddingMode"/> values.</value>
            <exception cref="T:System.ObjectDisposedException">The SymmetricKey has been disposed.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurs while setting the padding mode.</exception>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpHandle">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpHandle.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Spreadsheets.CellEntry">
            <summary>
            Entry API customization class for defining entries in a Cells feed.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Spreadsheets.CellEntry.CELL_CATEGORY">
            <summary>
            Category used to label entries that contain Cell extension data.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.CellEntry.#ctor">
            <summary>
            Constructs a new CellEntry instance with the appropriate category
            to indicate that it is a cell.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.CellEntry.#ctor(System.String)">
            <summary>
            Constructs a new CellEntry instance with the provided content.
            </summary>
            <param name="inputValue">The uncalculated content of the cell.</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.CellEntry.#ctor(System.UInt32,System.UInt32)">
            <summary>
            create a CellEntry for a given row/column
            </summary>
            <param name="row"></param>
            <param name="column"></param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.CellEntry.#ctor(System.UInt32,System.UInt32,System.String)">
            <summary>
            create a CellEntry for a given row/column and 
            initial value
            </summary>
            <param name="row"></param>
            <param name="column"></param>
            <param name="inputValue">The uncalculated content of the cell.</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.CellEntry.AddOtherNamespaces(System.Xml.XmlWriter)">
            <summary>
            add the spreadsheet NS
            </summary>
            <param name="writer">The XmlWrite, where we want to add default namespaces to</param>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.CellEntry.SkipNode(System.Xml.XmlNode)">
            <summary>
            Checks if this is a namespace declaration that we already added
            </summary>
            <param name="node">XmlNode to check</param>
            <returns>True if this node should be skipped</returns>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Spreadsheets.CellEntry.Cell">
            <summary>
            The cell element in this cell entry
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Spreadsheets.CellEntry.Row">
            <summary>
            The row the cell lies in
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Spreadsheets.CellEntry.Column">
            <summary>
            The column the cell lies in
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Spreadsheets.CellEntry.InputValue">
            <summary>
            The input (uncalculated) value for the cell
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Spreadsheets.CellEntry.NumericValue">
            <summary>
            The numeric (calculated) value for the cell
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Spreadsheets.CellEntry.Value">
            <summary>
            The numeric (calculated) value for the cell
            </summary>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Spreadsheets.CellEntry.CellElement">
            <summary>
            GData schema extension describing a Cell in a spreadsheet.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Google.GData.Spreadsheets.CellEntry.CellElement.#ctor">
            <summary>
            default constructor for the Cell element
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Spreadsheets.CellEntry.CellElement.Row">
            <summary>
            The row the cell lies in
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Spreadsheets.CellEntry.CellElement.Column">
            <summary>
            The column the cell lies in
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Spreadsheets.CellEntry.CellElement.InputValue">
            <summary>
            The input (uncalculated) value for the cell
            </summary>
        </member>
        <member name="P:EnterpriseDT.Google.GData.Spreadsheets.CellEntry.CellElement.NumericValue">
            <summary>
            The numeric (calculated) value for the cell
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.MessageBuffer">
            <summary>
            Creates a stream whose backing store is memory.
            </summary>
            <remarks>This class is created by Kevin Knoop.</remarks>
        </member>
        <member name="T:EnterpriseDT.Google.GData.Client.AtomParserNameTable">
            <summary>AtomParserNameTable. An initialized nametable for faster XML processing
            parses:  4  Element Definitions
                    4.1  The "atom:feed" Element
                    4.1.1  The "version" Attribute
                    4.2  The "atom:head" Element
                    4.2.1  Usage of "atom:head" within "atom:entry"
                    4.3  The "atom:entry" Element
                    4.4  The "atom:title" Element
                    4.5  The "atom:id" Element
                    4.6  The "atom:link" Element
                    4.6.1  The "href" Attribute
                    4.6.2  The "rel" Attribute
                    4.6.3  The "type" Attribute
                    4.6.4  The "hreflang" Attribute
                    4.6.5  The "title" Attribute
                    4.6.6  The "length" Attribute
                    4.7  The "atom:updated" Element
                    4.8  The "atom:published" Element
                    4.9  The "atom:author" Element
                    4.10  The "atom:contributor" Element
                    4.12  The "atom:copyright" Element
                    4.13  The "atom:category" Element
                    4.13.1  The "term" Attribute
                    4.13.2  The "scheme" Attribute
                    4.13.3  The "label" attribute
                    4.14  The "atom:summary" Element
                    4.15  The "atom:content" Element
                    4.15.1  The "type" attribute
                    4.15.2  The "src" attribute
                    4.15.3  Processing Model
                    4.16  The "atom:introspection" Element
                    4.17  The "atom:post" Element
                    4.18  The "atom:edit" Element
                    4.20  The "atom:generator" Element
                    the atom:icon element
                    the atom:logo element
             </summary>
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.XmlCategoryElement">
            <summary>static string for parsing</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.XmlContentElement">
            <summary>static string for parsing</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.XmlAtomEntryElement">
            <summary>static string for parsing</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.XmlGeneratorElement">
            <summary>static string for parsing</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.XmlIconElement">
            <summary>static string for parsing</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.XmlLogoElement">
            <summary>static string for parsing</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.XmlIdElement">
            <summary>static string for parsing</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.XmlLinkElement">
            <summary>static string for parsing</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.XmlFeedElement">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.XmlAuthorElement">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.XmlContributorElement">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.XmlSourceElement">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.XmlRightsElement">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.XmlSubtitleElement">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.XmlTitleElement">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.XmlSummaryElement">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.XmlUpdatedElement">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.XmlEmailElement">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.XmlUriElement">
            <summary>static string for parsing - same for attribute</summary>    
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.XmlPublishedElement">
            <summary>static string for parsing - same for attribute</summary>    
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.XmlAttributeTerm">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.XmlAttributeScheme">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.XmlAttributeLabel">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.XmlAttributeVersion">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.XmlAttributeLength">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.XmlAttributeRel">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.XmlAttributeHRefLang">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.XmlAttributeHRef">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.XmlAttributeSrc">
            <summary>static string for parsing</summary>    
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.XmlCategoriesElement">
            <summary>static string for parsing the App:categories element</summary>    
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.feed">
            <summary>atom:feed</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.version">
            <summary>atom:version</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.title">
            <summary>atom:title</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.id">
            <summary>atom:id</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.link">
            <summary>atom:link</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.href">
            <summary>link attributes: href, rel, type, hreflang, title (use the defined string), length</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.rel">
            <summary>property holder exposed over get/set</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.hreflang">
            <summary>property holder exposed over get/set</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.length">
            <summary>property holder exposed over get/set</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.updated">
            <summary>atom:updated</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.published">
            <summary>atom:published</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.author">
            <summary>atom:author</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.contributor">
            <summary>atom:contributor</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.rights">
            <summary>atom:rights</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.category">
            <summary>atom:category</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.term">
            <summary>attributes term, scheme, label</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.scheme">
            <summary>property holder exposed over get/set</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.label">
            <summary>property holder exposed over get/set</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.summary">
            <summary>atom:summary</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.content">
            <summary>atom:content</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.src">
            <summary>attributes type (use the defined string), src</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.subTitle">
            <summary>atom:subtitle</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.generator">
            <summary>atom:generator</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.source">
            <summary>atom:source</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.entry">
            <summary>atom:entry</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.uri">
            <summary>property holder exposed over get/set</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.email">
            <summary>property holder exposed over get/set</summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.icon">
            <summary>holds the icon </summary> 
        </member>
        <member name="F:EnterpriseDT.Google.GData.Client.AtomParserNameTable.logo">
            <summary>holds the logo</summary> 
        </member>
        <member name="M:EnterpriseDT.Google.GData.Client.AtomParserNameTable.InitAtomParserNameTable">
            <summary>initializes the name table for use with atom parsing. This is the
            only place where strings are defined for parsing</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomParserNameTable.Feed">
            <summary>Read only accessor for feed</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomParserNameTable.Categories">
            <summary>Read only accessor for Categories</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomParserNameTable.Version">
            <summary>Read only accessor for version</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomParserNameTable.Source">
            <summary>Read only accessor for source</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomParserNameTable.Entry">
            <summary>Read only accessor for entry</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomParserNameTable.Title">
            <summary>Read only accessor for title</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomParserNameTable.Link">
            <summary>Read only accessor for link</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomParserNameTable.Id">
            <summary>Read only accessor for id</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomParserNameTable.HRef">
            <summary>Read only accessor for href</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomParserNameTable.Rel">
            <summary>Read only accessor for rel</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomParserNameTable.HRefLang">
            <summary>Read only accessor for hreflang</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomParserNameTable.Length">
            <summary>Read only accessor for length</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomParserNameTable.Category">
            <summary>Read only accessor for category</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomParserNameTable.Updated">
            <summary>Read only accessor for updated</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomParserNameTable.Published">
            <summary>Read only accessor for published</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomParserNameTable.Author">
            <summary>Read only accessor for author</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomParserNameTable.Contributor">
            <summary>Read only accessor for contributor</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomParserNameTable.Rights">
            <summary>Read only accessor for rights</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomParserNameTable.Term">
            <summary>Read only accessor for term</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomParserNameTable.Scheme">
            <summary>Read only accessor for scheme</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomParserNameTable.Label">
            <summary>Read only accessor for label</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomParserNameTable.Summary">
            <summary>Read only accessor for summary</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomParserNameTable.Content">
            <summary>Read only accessor for content</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomParserNameTable.Src">
            <summary>Read only accessor for src</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomParserNameTable.Subtitle">
            <summary>Read only accessor for subtitle</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomParserNameTable.Uri">
            <summary>Read only accessor for uri</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomParserNameTable.Generator">
            <summary>Read only accessor for generator</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomParserNameTable.Email">
            <summary>Read only accessor for email</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomParserNameTable.Icon">
            <summary>Read only accessor for icon</summary> 
        </member>
        <member name="P:EnterpriseDT.Google.GData.Client.AtomParserNameTable.Logo">
            <summary>Read only accessor for logo</summary> 
        </member>
    </members>
</doc>
